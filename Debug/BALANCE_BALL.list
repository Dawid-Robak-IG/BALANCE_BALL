
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e46c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000520  0800e620  0800e620  0000f620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eb40  0800eb40  000101dc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eb40  0800eb40  0000fb40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800eb48  0800eb48  000101dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800eb48  0800eb48  0000fb48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800eb4c  0800eb4c  0000fb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800eb50  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101dc  2**0
                  CONTENTS
 10 .bss          00026284  200001dc  200001dc  000101dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20026460  20026460  000101dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029552  00000000  00000000  0001020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000066d7  00000000  00000000  0003975e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002360  00000000  00000000  0003fe38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b45  00000000  00000000  00042198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bbaa  00000000  00000000  00043cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e4b7  00000000  00000000  0006f887  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6c62  00000000  00000000  0009dd3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001949a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a734  00000000  00000000  001949e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0019f118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e604 	.word	0x0800e604

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	0800e604 	.word	0x0800e604

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <MX_CRC_Init+0x20>)
 8000efa:	4a07      	ldr	r2, [pc, #28]	@ (8000f18 <MX_CRC_Init+0x24>)
 8000efc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000efe:	4805      	ldr	r0, [pc, #20]	@ (8000f14 <MX_CRC_Init+0x20>)
 8000f00:	f002 f916 	bl	8003130 <HAL_CRC_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f0a:	f001 fc33 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	200001f8 	.word	0x200001f8
 8000f18:	40023000 	.word	0x40023000

08000f1c <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <HAL_CRC_MspInit+0x3c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10d      	bne.n	8000f4a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	60fb      	str	r3, [r7, #12]
 8000f32:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a09      	ldr	r2, [pc, #36]	@ (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b07      	ldr	r3, [pc, #28]	@ (8000f5c <HAL_CRC_MspInit+0x40>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f46:	60fb      	str	r3, [r7, #12]
 8000f48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023000 	.word	0x40023000
 8000f5c:	40023800 	.word	0x40023800

08000f60 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f9c <MX_DMA_Init+0x3c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	4a0b      	ldr	r2, [pc, #44]	@ (8000f9c <MX_DMA_Init+0x3c>)
 8000f70:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <MX_DMA_Init+0x3c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2105      	movs	r1, #5
 8000f86:	203c      	movs	r0, #60	@ 0x3c
 8000f88:	f002 f8a8 	bl	80030dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f8c:	203c      	movs	r0, #60	@ 0x3c
 8000f8e:	f002 f8c1 	bl	8003114 <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3708      	adds	r7, #8
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000fa4:	4b15      	ldr	r3, [pc, #84]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fa6:	4a16      	ldr	r2, [pc, #88]	@ (8001000 <MX_DMA2D_Init+0x60>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000faa:	4b14      	ldr	r3, [pc, #80]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000fb0:	4b12      	ldr	r3, [pc, #72]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000fb6:	4b11      	ldr	r3, [pc, #68]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000fce:	4b0b      	ldr	r3, [pc, #44]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000fd4:	4809      	ldr	r0, [pc, #36]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fd6:	f002 fc37 	bl	8003848 <HAL_DMA2D_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000fe0:	f001 fbc8 	bl	8002774 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	4805      	ldr	r0, [pc, #20]	@ (8000ffc <MX_DMA2D_Init+0x5c>)
 8000fe8:	f002 fd88 	bl	8003afc <HAL_DMA2D_ConfigLayer>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000ff2:	f001 fbbf 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	20000200 	.word	0x20000200
 8001000:	4002b000 	.word	0x4002b000

08001004 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_DMA2D_MspInit+0x48>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d115      	bne.n	8001042 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 8001020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2105      	movs	r1, #5
 8001036:	205a      	movs	r0, #90	@ 0x5a
 8001038:	f002 f850 	bl	80030dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800103c:	205a      	movs	r0, #90	@ 0x5a
 800103e:	f002 f869 	bl	8003114 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	4002b000 	.word	0x4002b000
 8001050:	40023800 	.word	0x40023800

08001054 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
 8001068:	615a      	str	r2, [r3, #20]
 800106a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800106c:	4b1f      	ldr	r3, [pc, #124]	@ (80010ec <MX_FMC_Init+0x98>)
 800106e:	4a20      	ldr	r2, [pc, #128]	@ (80010f0 <MX_FMC_Init+0x9c>)
 8001070:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001072:	4b1e      	ldr	r3, [pc, #120]	@ (80010ec <MX_FMC_Init+0x98>)
 8001074:	2201      	movs	r2, #1
 8001076:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001078:	4b1c      	ldr	r3, [pc, #112]	@ (80010ec <MX_FMC_Init+0x98>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800107e:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <MX_FMC_Init+0x98>)
 8001080:	2204      	movs	r2, #4
 8001082:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001084:	4b19      	ldr	r3, [pc, #100]	@ (80010ec <MX_FMC_Init+0x98>)
 8001086:	2210      	movs	r2, #16
 8001088:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_FMC_Init+0x98>)
 800108c:	2240      	movs	r2, #64	@ 0x40
 800108e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_FMC_Init+0x98>)
 8001092:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001096:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_FMC_Init+0x98>)
 800109a:	2200      	movs	r2, #0
 800109c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <MX_FMC_Init+0x98>)
 80010a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010a4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_FMC_Init+0x98>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_FMC_Init+0x98>)
 80010ae:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010b2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 80010b4:	2302      	movs	r3, #2
 80010b6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80010b8:	2307      	movs	r3, #7
 80010ba:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80010c0:	2307      	movs	r3, #7
 80010c2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80010c4:	2303      	movs	r3, #3
 80010c6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_FMC_Init+0x98>)
 80010d6:	f006 f8c1 	bl	800725c <HAL_SDRAM_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80010e0:	f001 fb48 	bl	8002774 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80010e4:	bf00      	nop
 80010e6:	3720      	adds	r7, #32
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000240 	.word	0x20000240
 80010f0:	a0000140 	.word	0xa0000140

080010f4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	60da      	str	r2, [r3, #12]
 8001106:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001108:	4b3b      	ldr	r3, [pc, #236]	@ (80011f8 <HAL_FMC_MspInit+0x104>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d16f      	bne.n	80011f0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001110:	4b39      	ldr	r3, [pc, #228]	@ (80011f8 <HAL_FMC_MspInit+0x104>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001116:	2300      	movs	r3, #0
 8001118:	603b      	str	r3, [r7, #0]
 800111a:	4b38      	ldr	r3, [pc, #224]	@ (80011fc <HAL_FMC_MspInit+0x108>)
 800111c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800111e:	4a37      	ldr	r2, [pc, #220]	@ (80011fc <HAL_FMC_MspInit+0x108>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6393      	str	r3, [r2, #56]	@ 0x38
 8001126:	4b35      	ldr	r3, [pc, #212]	@ (80011fc <HAL_FMC_MspInit+0x108>)
 8001128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001132:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001136:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001138:	2302      	movs	r3, #2
 800113a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113c:	2300      	movs	r3, #0
 800113e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001144:	230c      	movs	r3, #12
 8001146:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	4619      	mov	r1, r3
 800114c:	482c      	ldr	r0, [pc, #176]	@ (8001200 <HAL_FMC_MspInit+0x10c>)
 800114e:	f002 fd67 	bl	8003c20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001152:	2301      	movs	r3, #1
 8001154:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001156:	2302      	movs	r3, #2
 8001158:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001162:	230c      	movs	r3, #12
 8001164:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001166:	1d3b      	adds	r3, r7, #4
 8001168:	4619      	mov	r1, r3
 800116a:	4826      	ldr	r0, [pc, #152]	@ (8001204 <HAL_FMC_MspInit+0x110>)
 800116c:	f002 fd58 	bl	8003c20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001170:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001174:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117a:	2300      	movs	r3, #0
 800117c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117e:	2303      	movs	r3, #3
 8001180:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001182:	230c      	movs	r3, #12
 8001184:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001186:	1d3b      	adds	r3, r7, #4
 8001188:	4619      	mov	r1, r3
 800118a:	481f      	ldr	r0, [pc, #124]	@ (8001208 <HAL_FMC_MspInit+0x114>)
 800118c:	f002 fd48 	bl	8003c20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001190:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001194:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	2303      	movs	r3, #3
 80011a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011a2:	230c      	movs	r3, #12
 80011a4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	4818      	ldr	r0, [pc, #96]	@ (800120c <HAL_FMC_MspInit+0x118>)
 80011ac:	f002 fd38 	bl	8003c20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80011b0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80011b4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011be:	2303      	movs	r3, #3
 80011c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011c2:	230c      	movs	r3, #12
 80011c4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4811      	ldr	r0, [pc, #68]	@ (8001210 <HAL_FMC_MspInit+0x11c>)
 80011cc:	f002 fd28 	bl	8003c20 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80011d0:	2360      	movs	r3, #96	@ 0x60
 80011d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e0:	230c      	movs	r3, #12
 80011e2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	1d3b      	adds	r3, r7, #4
 80011e6:	4619      	mov	r1, r3
 80011e8:	480a      	ldr	r0, [pc, #40]	@ (8001214 <HAL_FMC_MspInit+0x120>)
 80011ea:	f002 fd19 	bl	8003c20 <HAL_GPIO_Init>
 80011ee:	e000      	b.n	80011f2 <HAL_FMC_MspInit+0xfe>
    return;
 80011f0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000274 	.word	0x20000274
 80011fc:	40023800 	.word	0x40023800
 8001200:	40021400 	.word	0x40021400
 8001204:	40020800 	.word	0x40020800
 8001208:	40021800 	.word	0x40021800
 800120c:	40021000 	.word	0x40021000
 8001210:	40020c00 	.word	0x40020c00
 8001214:	40020400 	.word	0x40020400

08001218 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001220:	f7ff ff68 	bl	80010f4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08e      	sub	sp, #56	@ 0x38
 8001230:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	623b      	str	r3, [r7, #32]
 8001246:	4b88      	ldr	r3, [pc, #544]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a87      	ldr	r2, [pc, #540]	@ (8001468 <MX_GPIO_Init+0x23c>)
 800124c:	f043 0304 	orr.w	r3, r3, #4
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b85      	ldr	r3, [pc, #532]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0304 	and.w	r3, r3, #4
 800125a:	623b      	str	r3, [r7, #32]
 800125c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	4b81      	ldr	r3, [pc, #516]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a80      	ldr	r2, [pc, #512]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001268:	f043 0320 	orr.w	r3, r3, #32
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b7e      	ldr	r3, [pc, #504]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0320 	and.w	r3, r3, #32
 8001276:	61fb      	str	r3, [r7, #28]
 8001278:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	4b7a      	ldr	r3, [pc, #488]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a79      	ldr	r2, [pc, #484]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b77      	ldr	r3, [pc, #476]	@ (8001468 <MX_GPIO_Init+0x23c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001292:	61bb      	str	r3, [r7, #24]
 8001294:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	4b73      	ldr	r3, [pc, #460]	@ (8001468 <MX_GPIO_Init+0x23c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a72      	ldr	r2, [pc, #456]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b70      	ldr	r3, [pc, #448]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
 80012b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	613b      	str	r3, [r7, #16]
 80012b6:	4b6c      	ldr	r3, [pc, #432]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a6b      	ldr	r2, [pc, #428]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b69      	ldr	r3, [pc, #420]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	613b      	str	r3, [r7, #16]
 80012cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60fb      	str	r3, [r7, #12]
 80012d2:	4b65      	ldr	r3, [pc, #404]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a64      	ldr	r2, [pc, #400]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b62      	ldr	r3, [pc, #392]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	4b5e      	ldr	r3, [pc, #376]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f2:	4a5d      	ldr	r2, [pc, #372]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012f4:	f043 0310 	orr.w	r3, r3, #16
 80012f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001468 <MX_GPIO_Init+0x23c>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fe:	f003 0310 	and.w	r3, r3, #16
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	607b      	str	r3, [r7, #4]
 800130a:	4b57      	ldr	r3, [pc, #348]	@ (8001468 <MX_GPIO_Init+0x23c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a56      	ldr	r2, [pc, #344]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b54      	ldr	r3, [pc, #336]	@ (8001468 <MX_GPIO_Init+0x23c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0308 	and.w	r3, r3, #8
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2116      	movs	r1, #22
 8001326:	4851      	ldr	r0, [pc, #324]	@ (800146c <MX_GPIO_Init+0x240>)
 8001328:	f002 fe26 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	2180      	movs	r1, #128	@ 0x80
 8001330:	484f      	ldr	r0, [pc, #316]	@ (8001470 <MX_GPIO_Init+0x244>)
 8001332:	f002 fe21 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8001336:	2200      	movs	r2, #0
 8001338:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800133c:	484d      	ldr	r0, [pc, #308]	@ (8001474 <MX_GPIO_Init+0x248>)
 800133e:	f002 fe1b 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8001342:	2200      	movs	r2, #0
 8001344:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8001348:	484b      	ldr	r0, [pc, #300]	@ (8001478 <MX_GPIO_Init+0x24c>)
 800134a:	f002 fe15 	bl	8003f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 800134e:	2302      	movs	r3, #2
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001352:	2301      	movs	r3, #1
 8001354:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001356:	2301      	movs	r3, #1
 8001358:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800135a:	2300      	movs	r3, #0
 800135c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001362:	4619      	mov	r1, r3
 8001364:	4841      	ldr	r0, [pc, #260]	@ (800146c <MX_GPIO_Init+0x240>)
 8001366:	f002 fc5b 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 800136a:	2314      	movs	r3, #20
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	483a      	ldr	r0, [pc, #232]	@ (800146c <MX_GPIO_Init+0x240>)
 8001382:	f002 fc4d 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001386:	2301      	movs	r3, #1
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800138a:	2300      	movs	r3, #0
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	4835      	ldr	r0, [pc, #212]	@ (8001470 <MX_GPIO_Init+0x244>)
 800139a:	f002 fc41 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800139e:	f248 0306 	movw	r3, #32774	@ 0x8006
 80013a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013a4:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013b2:	4619      	mov	r1, r3
 80013b4:	482e      	ldr	r0, [pc, #184]	@ (8001470 <MX_GPIO_Init+0x244>)
 80013b6:	f002 fc33 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80013ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ce:	4619      	mov	r1, r3
 80013d0:	4827      	ldr	r0, [pc, #156]	@ (8001470 <MX_GPIO_Init+0x244>)
 80013d2:	f002 fc25 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80013d6:	2320      	movs	r3, #32
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80013da:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80013de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80013e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4820      	ldr	r0, [pc, #128]	@ (800146c <MX_GPIO_Init+0x240>)
 80013ec:	f002 fc18 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80013f0:	2304      	movs	r3, #4
 80013f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80013fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001400:	4619      	mov	r1, r3
 8001402:	481e      	ldr	r0, [pc, #120]	@ (800147c <MX_GPIO_Init+0x250>)
 8001404:	f002 fc0c 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001408:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	2300      	movs	r3, #0
 8001410:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800141a:	4619      	mov	r1, r3
 800141c:	4815      	ldr	r0, [pc, #84]	@ (8001474 <MX_GPIO_Init+0x248>)
 800141e:	f002 fbff 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8001422:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001428:	2301      	movs	r3, #1
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001430:	2300      	movs	r3, #0
 8001432:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001438:	4619      	mov	r1, r3
 800143a:	480e      	ldr	r0, [pc, #56]	@ (8001474 <MX_GPIO_Init+0x248>)
 800143c:	f002 fbf0 	bl	8003c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001440:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8001444:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	4619      	mov	r1, r3
 8001458:	4807      	ldr	r0, [pc, #28]	@ (8001478 <MX_GPIO_Init+0x24c>)
 800145a:	f002 fbe1 	bl	8003c20 <HAL_GPIO_Init>

}
 800145e:	bf00      	nop
 8001460:	3738      	adds	r7, #56	@ 0x38
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800
 800146c:	40020800 	.word	0x40020800
 8001470:	40020000 	.word	0x40020000
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021800 	.word	0x40021800
 800147c:	40020400 	.word	0x40020400

08001480 <_write>:
static int16_t x_data[MOVING_AVERAGE_WINDOW];
static int16_t y_data[MOVING_AVERAGE_WINDOW];
static int16_t z_data[MOVING_AVERAGE_WINDOW];
static uint8_t data_index = 0;

ssize_t _write(int file, const char *data, size_t len) {
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY); // Wysyłanie danych przez UART
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	b29a      	uxth	r2, r3
 8001490:	f04f 33ff 	mov.w	r3, #4294967295
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	4804      	ldr	r0, [pc, #16]	@ (80014a8 <_write+0x28>)
 8001498:	f007 faf4 	bl	8008a84 <HAL_UART_Transmit>
	return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	20025dfc 	.word	0x20025dfc

080014ac <gyro_init>:

void gyro_init(void) {
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG1, 0x0F }; // PD=1, Zen=1, Yen=1, Xen=;
 80014b2:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 80014b6:	80bb      	strh	r3, [r7, #4]

	if (!spi5_acquire())
 80014b8:	f001 f962 	bl	8002780 <spi5_acquire>
 80014bc:	4603      	mov	r3, r0
 80014be:	f083 0301 	eor.w	r3, r3, #1
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d116      	bne.n	80014f6 <gyro_init+0x4a>
		return;

	GYRO_CS_LOW();
 80014c8:	2200      	movs	r2, #0
 80014ca:	2102      	movs	r1, #2
 80014cc:	480c      	ldr	r0, [pc, #48]	@ (8001500 <gyro_init+0x54>)
 80014ce:	f002 fd53 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 80014d2:	1d39      	adds	r1, r7, #4
 80014d4:	2364      	movs	r3, #100	@ 0x64
 80014d6:	2202      	movs	r2, #2
 80014d8:	480a      	ldr	r0, [pc, #40]	@ (8001504 <gyro_init+0x58>)
 80014da:	f005 ff7c 	bl	80073d6 <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 80014de:	2201      	movs	r2, #1
 80014e0:	2102      	movs	r1, #2
 80014e2:	4807      	ldr	r0, [pc, #28]	@ (8001500 <gyro_init+0x54>)
 80014e4:	f002 fd48 	bl	8003f78 <HAL_GPIO_WritePin>

	spi5_release();
 80014e8:	f001 f95e 	bl	80027a8 <spi5_release>

	gyro_set_sensitivity();
 80014ec:	f000 f80c 	bl	8001508 <gyro_set_sensitivity>

	// Weryfikacja połączenia
	gyro_ReadWhoAmI();
 80014f0:	f000 f8cc 	bl	800168c <gyro_ReadWhoAmI>
 80014f4:	e000      	b.n	80014f8 <gyro_init+0x4c>
		return;
 80014f6:	bf00      	nop
}
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40020800 	.word	0x40020800
 8001504:	20025cb0 	.word	0x20025cb0

08001508 <gyro_set_sensitivity>:

void gyro_set_sensitivity() {
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG4, SENSITIVITY };
 800150e:	f243 0323 	movw	r3, #12323	@ 0x3023
 8001512:	80bb      	strh	r3, [r7, #4]

	if (!spi5_acquire())
 8001514:	f001 f934 	bl	8002780 <spi5_acquire>
 8001518:	4603      	mov	r3, r0
 800151a:	f083 0301 	eor.w	r3, r3, #1
 800151e:	b2db      	uxtb	r3, r3
 8001520:	2b00      	cmp	r3, #0
 8001522:	d112      	bne.n	800154a <gyro_set_sensitivity+0x42>
		return;

	GYRO_CS_LOW();
 8001524:	2200      	movs	r2, #0
 8001526:	2102      	movs	r1, #2
 8001528:	480a      	ldr	r0, [pc, #40]	@ (8001554 <gyro_set_sensitivity+0x4c>)
 800152a:	f002 fd25 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 800152e:	1d39      	adds	r1, r7, #4
 8001530:	2364      	movs	r3, #100	@ 0x64
 8001532:	2202      	movs	r2, #2
 8001534:	4808      	ldr	r0, [pc, #32]	@ (8001558 <gyro_set_sensitivity+0x50>)
 8001536:	f005 ff4e 	bl	80073d6 <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 800153a:	2201      	movs	r2, #1
 800153c:	2102      	movs	r1, #2
 800153e:	4805      	ldr	r0, [pc, #20]	@ (8001554 <gyro_set_sensitivity+0x4c>)
 8001540:	f002 fd1a 	bl	8003f78 <HAL_GPIO_WritePin>

	spi5_release();
 8001544:	f001 f930 	bl	80027a8 <spi5_release>
 8001548:	e000      	b.n	800154c <gyro_set_sensitivity+0x44>
		return;
 800154a:	bf00      	nop
}
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40020800 	.word	0x40020800
 8001558:	20025cb0 	.word	0x20025cb0

0800155c <gyro_get_filtered_data>:

void gyro_get_filtered_data(Gyro_Int_Data *gyro_data) {
 800155c:	b580      	push	{r7, lr}
 800155e:	b088      	sub	sp, #32
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	//int16_t x_raw, y_raw, z_raw;
	int32_t x_sum = 0, y_sum = 0, z_sum = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	2300      	movs	r3, #0
 800156a:	61bb      	str	r3, [r7, #24]
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
	Gyro_Int_Data raw_data;
	// Bufory do filtracji
	memset(x_data, 0, sizeof(x_data));
 8001570:	2214      	movs	r2, #20
 8001572:	2100      	movs	r1, #0
 8001574:	4840      	ldr	r0, [pc, #256]	@ (8001678 <gyro_get_filtered_data+0x11c>)
 8001576:	f00a fb09 	bl	800bb8c <memset>
	memset(y_data, 0, sizeof(y_data));
 800157a:	2214      	movs	r2, #20
 800157c:	2100      	movs	r1, #0
 800157e:	483f      	ldr	r0, [pc, #252]	@ (800167c <gyro_get_filtered_data+0x120>)
 8001580:	f00a fb04 	bl	800bb8c <memset>
	memset(z_data, 0, sizeof(z_data));
 8001584:	2214      	movs	r2, #20
 8001586:	2100      	movs	r1, #0
 8001588:	483d      	ldr	r0, [pc, #244]	@ (8001680 <gyro_get_filtered_data+0x124>)
 800158a:	f00a faff 	bl	800bb8c <memset>
	data_index = 0;
 800158e:	4b3d      	ldr	r3, [pc, #244]	@ (8001684 <gyro_get_filtered_data+0x128>)
 8001590:	2200      	movs	r2, #0
 8001592:	701a      	strb	r2, [r3, #0]

	gyro_get_data(&raw_data);
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	4618      	mov	r0, r3
 800159a:	f000 f8b9 	bl	8001710 <gyro_get_data>

	// Aktualizacja bufora
	x_data[data_index] = raw_data.x;
 800159e:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <gyro_get_filtered_data+0x128>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	461a      	mov	r2, r3
 80015a4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80015a8:	4b33      	ldr	r3, [pc, #204]	@ (8001678 <gyro_get_filtered_data+0x11c>)
 80015aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	y_data[data_index] = raw_data.y;
 80015ae:	4b35      	ldr	r3, [pc, #212]	@ (8001684 <gyro_get_filtered_data+0x128>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80015b8:	4b30      	ldr	r3, [pc, #192]	@ (800167c <gyro_get_filtered_data+0x120>)
 80015ba:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	z_data[data_index] = raw_data.z;
 80015be:	4b31      	ldr	r3, [pc, #196]	@ (8001684 <gyro_get_filtered_data+0x128>)
 80015c0:	781b      	ldrb	r3, [r3, #0]
 80015c2:	461a      	mov	r2, r3
 80015c4:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 80015c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001680 <gyro_get_filtered_data+0x124>)
 80015ca:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	//Średnia
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	74fb      	strb	r3, [r7, #19]
 80015d2:	e01a      	b.n	800160a <gyro_get_filtered_data+0xae>
		x_sum += x_data[i];
 80015d4:	7cfb      	ldrb	r3, [r7, #19]
 80015d6:	4a28      	ldr	r2, [pc, #160]	@ (8001678 <gyro_get_filtered_data+0x11c>)
 80015d8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015dc:	461a      	mov	r2, r3
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	61fb      	str	r3, [r7, #28]
		y_sum += y_data[i];
 80015e4:	7cfb      	ldrb	r3, [r7, #19]
 80015e6:	4a25      	ldr	r2, [pc, #148]	@ (800167c <gyro_get_filtered_data+0x120>)
 80015e8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015ec:	461a      	mov	r2, r3
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	4413      	add	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
		z_sum += z_data[i];
 80015f4:	7cfb      	ldrb	r3, [r7, #19]
 80015f6:	4a22      	ldr	r2, [pc, #136]	@ (8001680 <gyro_get_filtered_data+0x124>)
 80015f8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80015fc:	461a      	mov	r2, r3
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	4413      	add	r3, r2
 8001602:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 8001604:	7cfb      	ldrb	r3, [r7, #19]
 8001606:	3301      	adds	r3, #1
 8001608:	74fb      	strb	r3, [r7, #19]
 800160a:	7cfb      	ldrb	r3, [r7, #19]
 800160c:	2b09      	cmp	r3, #9
 800160e:	d9e1      	bls.n	80015d4 <gyro_get_filtered_data+0x78>
	}

	gyro_data->x = x_sum / MOVING_AVERAGE_WINDOW;
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	4a1d      	ldr	r2, [pc, #116]	@ (8001688 <gyro_get_filtered_data+0x12c>)
 8001614:	fb82 1203 	smull	r1, r2, r2, r3
 8001618:	1092      	asrs	r2, r2, #2
 800161a:	17db      	asrs	r3, r3, #31
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b21a      	sxth	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	801a      	strh	r2, [r3, #0]
	gyro_data->y = y_sum / MOVING_AVERAGE_WINDOW;
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	4a18      	ldr	r2, [pc, #96]	@ (8001688 <gyro_get_filtered_data+0x12c>)
 8001628:	fb82 1203 	smull	r1, r2, r2, r3
 800162c:	1092      	asrs	r2, r2, #2
 800162e:	17db      	asrs	r3, r3, #31
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	b21a      	sxth	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	805a      	strh	r2, [r3, #2]
	gyro_data->z = z_sum / MOVING_AVERAGE_WINDOW;
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	4a13      	ldr	r2, [pc, #76]	@ (8001688 <gyro_get_filtered_data+0x12c>)
 800163c:	fb82 1203 	smull	r1, r2, r2, r3
 8001640:	1092      	asrs	r2, r2, #2
 8001642:	17db      	asrs	r3, r3, #31
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	b21a      	sxth	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	809a      	strh	r2, [r3, #4]

	// Aktualizuj indeks
	data_index = (data_index + 1) % MOVING_AVERAGE_WINDOW;
 800164c:	4b0d      	ldr	r3, [pc, #52]	@ (8001684 <gyro_get_filtered_data+0x128>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	1c5a      	adds	r2, r3, #1
 8001652:	4b0d      	ldr	r3, [pc, #52]	@ (8001688 <gyro_get_filtered_data+0x12c>)
 8001654:	fb83 1302 	smull	r1, r3, r3, r2
 8001658:	1099      	asrs	r1, r3, #2
 800165a:	17d3      	asrs	r3, r2, #31
 800165c:	1ac9      	subs	r1, r1, r3
 800165e:	460b      	mov	r3, r1
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	1ad1      	subs	r1, r2, r3
 8001668:	b2ca      	uxtb	r2, r1
 800166a:	4b06      	ldr	r3, [pc, #24]	@ (8001684 <gyro_get_filtered_data+0x128>)
 800166c:	701a      	strb	r2, [r3, #0]
}
 800166e:	bf00      	nop
 8001670:	3720      	adds	r7, #32
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000278 	.word	0x20000278
 800167c:	2000028c 	.word	0x2000028c
 8001680:	200002a0 	.word	0x200002a0
 8001684:	200002b4 	.word	0x200002b4
 8001688:	66666667 	.word	0x66666667

0800168c <gyro_ReadWhoAmI>:

void gyro_ReadWhoAmI(void) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
	uint8_t tx = WHO_AM_I | 0x80;
 8001692:	238f      	movs	r3, #143	@ 0x8f
 8001694:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8001696:	2300      	movs	r3, #0
 8001698:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 800169a:	f001 f871 	bl	8002780 <spi5_acquire>
 800169e:	4603      	mov	r3, r0
 80016a0:	f083 0301 	eor.w	r3, r3, #1
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d126      	bne.n	80016f8 <gyro_ReadWhoAmI+0x6c>
		return;

	GYRO_CS_LOW();
 80016aa:	2200      	movs	r2, #0
 80016ac:	2102      	movs	r1, #2
 80016ae:	4814      	ldr	r0, [pc, #80]	@ (8001700 <gyro_ReadWhoAmI+0x74>)
 80016b0:	f002 fc62 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 80016b4:	1df9      	adds	r1, r7, #7
 80016b6:	230a      	movs	r3, #10
 80016b8:	2201      	movs	r2, #1
 80016ba:	4812      	ldr	r0, [pc, #72]	@ (8001704 <gyro_ReadWhoAmI+0x78>)
 80016bc:	f005 fe8b 	bl	80073d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 80016c0:	1db9      	adds	r1, r7, #6
 80016c2:	230a      	movs	r3, #10
 80016c4:	2201      	movs	r2, #1
 80016c6:	480f      	ldr	r0, [pc, #60]	@ (8001704 <gyro_ReadWhoAmI+0x78>)
 80016c8:	f005 ffc9 	bl	800765e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 80016cc:	2201      	movs	r2, #1
 80016ce:	2102      	movs	r1, #2
 80016d0:	480b      	ldr	r0, [pc, #44]	@ (8001700 <gyro_ReadWhoAmI+0x74>)
 80016d2:	f002 fc51 	bl	8003f78 <HAL_GPIO_WritePin>

	spi5_release();
 80016d6:	f001 f867 	bl	80027a8 <spi5_release>

	if (rx != 0xD3) {
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	2bd3      	cmp	r3, #211	@ 0xd3
 80016de:	d005      	beq.n	80016ec <gyro_ReadWhoAmI+0x60>
		printf("WHO_AM_I error: 0x%02X (expected 0xD3)\r\n", rx);
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	4619      	mov	r1, r3
 80016e4:	4808      	ldr	r0, [pc, #32]	@ (8001708 <gyro_ReadWhoAmI+0x7c>)
 80016e6:	f00a f909 	bl	800b8fc <iprintf>
 80016ea:	e006      	b.n	80016fa <gyro_ReadWhoAmI+0x6e>
	} else {
		printf("WHO_AM_I OK: 0x%02X\r\n", rx);
 80016ec:	79bb      	ldrb	r3, [r7, #6]
 80016ee:	4619      	mov	r1, r3
 80016f0:	4806      	ldr	r0, [pc, #24]	@ (800170c <gyro_ReadWhoAmI+0x80>)
 80016f2:	f00a f903 	bl	800b8fc <iprintf>
 80016f6:	e000      	b.n	80016fa <gyro_ReadWhoAmI+0x6e>
		return;
 80016f8:	bf00      	nop
	}
}
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40020800 	.word	0x40020800
 8001704:	20025cb0 	.word	0x20025cb0
 8001708:	0800e620 	.word	0x0800e620
 800170c:	0800e64c 	.word	0x0800e64c

08001710 <gyro_get_data>:

void gyro_get_data(Gyro_Int_Data *gyro_data) {
 8001710:	b580      	push	{r7, lr}
 8001712:	b084      	sub	sp, #16
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

	uint8_t tx = OUT_X_L | 0x80 | 0x40;
 8001718:	23e8      	movs	r3, #232	@ 0xe8
 800171a:	73fb      	strb	r3, [r7, #15]
	uint8_t rx[6];
	if (gyro_is_data_ready()==false) {
 800171c:	f000 f856 	bl	80017cc <gyro_is_data_ready>
 8001720:	4603      	mov	r3, r0
 8001722:	f083 0301 	eor.w	r3, r3, #1
 8001726:	b2db      	uxtb	r3, r3
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <gyro_get_data+0x24>
		printf("Data not ready\r\n");
 800172c:	4824      	ldr	r0, [pc, #144]	@ (80017c0 <gyro_get_data+0xb0>)
 800172e:	f00a f94d 	bl	800b9cc <puts>
		return;
 8001732:	e041      	b.n	80017b8 <gyro_get_data+0xa8>
	}

	if (!spi5_acquire())
 8001734:	f001 f824 	bl	8002780 <spi5_acquire>
 8001738:	4603      	mov	r3, r0
 800173a:	f083 0301 	eor.w	r3, r3, #1
 800173e:	b2db      	uxtb	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d138      	bne.n	80017b6 <gyro_get_data+0xa6>
		return;

	GYRO_CS_LOW();
 8001744:	2200      	movs	r2, #0
 8001746:	2102      	movs	r1, #2
 8001748:	481e      	ldr	r0, [pc, #120]	@ (80017c4 <gyro_get_data+0xb4>)
 800174a:	f002 fc15 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 800174e:	f107 010f 	add.w	r1, r7, #15
 8001752:	230a      	movs	r3, #10
 8001754:	2201      	movs	r2, #1
 8001756:	481c      	ldr	r0, [pc, #112]	@ (80017c8 <gyro_get_data+0xb8>)
 8001758:	f005 fe3d 	bl	80073d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, rx, 6, 10);
 800175c:	f107 0108 	add.w	r1, r7, #8
 8001760:	230a      	movs	r3, #10
 8001762:	2206      	movs	r2, #6
 8001764:	4818      	ldr	r0, [pc, #96]	@ (80017c8 <gyro_get_data+0xb8>)
 8001766:	f005 ff7a 	bl	800765e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 800176a:	2201      	movs	r2, #1
 800176c:	2102      	movs	r1, #2
 800176e:	4815      	ldr	r0, [pc, #84]	@ (80017c4 <gyro_get_data+0xb4>)
 8001770:	f002 fc02 	bl	8003f78 <HAL_GPIO_WritePin>

	spi5_release();
 8001774:	f001 f818 	bl	80027a8 <spi5_release>

	gyro_data->x = (int16_t) (rx[1] << 8 | rx[0]);
 8001778:	7a7b      	ldrb	r3, [r7, #9]
 800177a:	b21b      	sxth	r3, r3
 800177c:	021b      	lsls	r3, r3, #8
 800177e:	b21a      	sxth	r2, r3
 8001780:	7a3b      	ldrb	r3, [r7, #8]
 8001782:	b21b      	sxth	r3, r3
 8001784:	4313      	orrs	r3, r2
 8001786:	b21a      	sxth	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	801a      	strh	r2, [r3, #0]
	gyro_data->y = (int16_t) (rx[3] << 8 | rx[2]);
 800178c:	7afb      	ldrb	r3, [r7, #11]
 800178e:	b21b      	sxth	r3, r3
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	b21a      	sxth	r2, r3
 8001794:	7abb      	ldrb	r3, [r7, #10]
 8001796:	b21b      	sxth	r3, r3
 8001798:	4313      	orrs	r3, r2
 800179a:	b21a      	sxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	805a      	strh	r2, [r3, #2]
	gyro_data->z = (int16_t) (rx[5] << 8 | rx[4]);
 80017a0:	7b7b      	ldrb	r3, [r7, #13]
 80017a2:	b21b      	sxth	r3, r3
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	b21a      	sxth	r2, r3
 80017a8:	7b3b      	ldrb	r3, [r7, #12]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b21a      	sxth	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	809a      	strh	r2, [r3, #4]
 80017b4:	e000      	b.n	80017b8 <gyro_get_data+0xa8>
		return;
 80017b6:	bf00      	nop

}
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	0800e664 	.word	0x0800e664
 80017c4:	40020800 	.word	0x40020800
 80017c8:	20025cb0 	.word	0x20025cb0

080017cc <gyro_is_data_ready>:

bool gyro_is_data_ready(void) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
	uint8_t tx = STATUS_REG | 0x80;
 80017d2:	23a7      	movs	r3, #167	@ 0xa7
 80017d4:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 80017da:	f000 ffd1 	bl	8002780 <spi5_acquire>
 80017de:	4603      	mov	r3, r0
 80017e0:	f083 0301 	eor.w	r3, r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <gyro_is_data_ready+0x22>
		return false;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e01f      	b.n	800182e <gyro_is_data_ready+0x62>

	GYRO_CS_LOW();
 80017ee:	2200      	movs	r2, #0
 80017f0:	2102      	movs	r1, #2
 80017f2:	4811      	ldr	r0, [pc, #68]	@ (8001838 <gyro_is_data_ready+0x6c>)
 80017f4:	f002 fbc0 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 80017f8:	1df9      	adds	r1, r7, #7
 80017fa:	230a      	movs	r3, #10
 80017fc:	2201      	movs	r2, #1
 80017fe:	480f      	ldr	r0, [pc, #60]	@ (800183c <gyro_is_data_ready+0x70>)
 8001800:	f005 fde9 	bl	80073d6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 8001804:	1db9      	adds	r1, r7, #6
 8001806:	230a      	movs	r3, #10
 8001808:	2201      	movs	r2, #1
 800180a:	480c      	ldr	r0, [pc, #48]	@ (800183c <gyro_is_data_ready+0x70>)
 800180c:	f005 ff27 	bl	800765e <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001810:	2201      	movs	r2, #1
 8001812:	2102      	movs	r1, #2
 8001814:	4808      	ldr	r0, [pc, #32]	@ (8001838 <gyro_is_data_ready+0x6c>)
 8001816:	f002 fbaf 	bl	8003f78 <HAL_GPIO_WritePin>

	spi5_release();
 800181a:	f000 ffc5 	bl	80027a8 <spi5_release>

	return (rx & 0x08);
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	f003 0308 	and.w	r3, r3, #8
 8001824:	2b00      	cmp	r3, #0
 8001826:	bf14      	ite	ne
 8001828:	2301      	movne	r3, #1
 800182a:	2300      	moveq	r3, #0
 800182c:	b2db      	uxtb	r3, r3
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40020800 	.word	0x40020800
 800183c:	20025cb0 	.word	0x20025cb0

08001840 <gyro_calculate_offset>:

void gyro_calculate_offset(Gyro_Int_Data *offset) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	2300      	movs	r3, #0
 800184e:	61bb      	str	r3, [r7, #24]
 8001850:	2300      	movs	r3, #0
 8001852:	617b      	str	r3, [r7, #20]
	const uint16_t samples = 500;
 8001854:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001858:	823b      	strh	r3, [r7, #16]
	Gyro_Int_Data raw_data;

	printf("Starting calibration...\r\n");
 800185a:	482e      	ldr	r0, [pc, #184]	@ (8001914 <gyro_calculate_offset+0xd4>)
 800185c:	f00a f8b6 	bl	800b9cc <puts>

	for (uint16_t i = 0; i < samples; i++) {
 8001860:	2300      	movs	r3, #0
 8001862:	827b      	strh	r3, [r7, #18]
 8001864:	e02b      	b.n	80018be <gyro_calculate_offset+0x7e>
		gyro_get_data(&raw_data);
 8001866:	f107 0308 	add.w	r3, r7, #8
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff50 	bl	8001710 <gyro_get_data>
		sum_x += raw_data.x;
 8001870:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001874:	461a      	mov	r2, r3
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	4413      	add	r3, r2
 800187a:	61fb      	str	r3, [r7, #28]
		sum_y += raw_data.y;
 800187c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001880:	461a      	mov	r2, r3
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	4413      	add	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
		sum_z += raw_data.z;
 8001888:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800188c:	461a      	mov	r2, r3
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	4413      	add	r3, r2
 8001892:	617b      	str	r3, [r7, #20]
		HAL_Delay(10);
 8001894:	200a      	movs	r0, #10
 8001896:	f001 fb45 	bl	8002f24 <HAL_Delay>

		if (i % 100 == 0)
 800189a:	8a7b      	ldrh	r3, [r7, #18]
 800189c:	4a1e      	ldr	r2, [pc, #120]	@ (8001918 <gyro_calculate_offset+0xd8>)
 800189e:	fba2 1203 	umull	r1, r2, r2, r3
 80018a2:	0952      	lsrs	r2, r2, #5
 80018a4:	2164      	movs	r1, #100	@ 0x64
 80018a6:	fb01 f202 	mul.w	r2, r1, r2
 80018aa:	1a9b      	subs	r3, r3, r2
 80018ac:	b29b      	uxth	r3, r3
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <gyro_calculate_offset+0x78>
			printf(".\r\n");
 80018b2:	481a      	ldr	r0, [pc, #104]	@ (800191c <gyro_calculate_offset+0xdc>)
 80018b4:	f00a f88a 	bl	800b9cc <puts>
	for (uint16_t i = 0; i < samples; i++) {
 80018b8:	8a7b      	ldrh	r3, [r7, #18]
 80018ba:	3301      	adds	r3, #1
 80018bc:	827b      	strh	r3, [r7, #18]
 80018be:	8a7a      	ldrh	r2, [r7, #18]
 80018c0:	8a3b      	ldrh	r3, [r7, #16]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3cf      	bcc.n	8001866 <gyro_calculate_offset+0x26>
	}

	offset->x = sum_x / samples;
 80018c6:	8a3b      	ldrh	r3, [r7, #16]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ce:	b21a      	sxth	r2, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	801a      	strh	r2, [r3, #0]
	offset->y = sum_y / samples;
 80018d4:	8a3b      	ldrh	r3, [r7, #16]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80018dc:	b21a      	sxth	r2, r3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	805a      	strh	r2, [r3, #2]
	offset->z = sum_z / samples;
 80018e2:	8a3b      	ldrh	r3, [r7, #16]
 80018e4:	697a      	ldr	r2, [r7, #20]
 80018e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ea:	b21a      	sxth	r2, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	809a      	strh	r2, [r3, #4]

	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	4619      	mov	r1, r3
			offset->y, offset->z);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 80018fe:	461a      	mov	r2, r3
			offset->y, offset->z);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 8001906:	4806      	ldr	r0, [pc, #24]	@ (8001920 <gyro_calculate_offset+0xe0>)
 8001908:	f009 fff8 	bl	800b8fc <iprintf>
}
 800190c:	bf00      	nop
 800190e:	3720      	adds	r7, #32
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	0800e674 	.word	0x0800e674
 8001918:	51eb851f 	.word	0x51eb851f
 800191c:	0800e690 	.word	0x0800e690
 8001920:	0800e694 	.word	0x0800e694

08001924 <gyro_compensate_and_scale>:

void gyro_compensate_and_scale(Gyro_Int_Data *gyro_data, Gyro_Int_Data *offset, Gyro_Float_Data *gyro_calibrated_dat) {
 8001924:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001928:	b08a      	sub	sp, #40	@ 0x28
 800192a:	af04      	add	r7, sp, #16
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]

	// uwzględenienie kalibracji
	gyro_data->x -= offset->x;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001938:	b29a      	uxth	r2, r3
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001940:	b29b      	uxth	r3, r3
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	b29b      	uxth	r3, r3
 8001946:	b21a      	sxth	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	801a      	strh	r2, [r3, #0]
	gyro_data->y -= offset->y;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001952:	b29a      	uxth	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800195a:	b29b      	uxth	r3, r3
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	b21a      	sxth	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	805a      	strh	r2, [r3, #2]
	gyro_data->z -= offset->z;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800196c:	b29a      	uxth	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001974:	b29b      	uxth	r3, r3
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	b21a      	sxth	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	809a      	strh	r2, [r3, #4]

	float scale = 1.0f;
 8001980:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001984:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x30)
		scale = 2000.0f / 32768.0f;
 8001986:	4b27      	ldr	r3, [pc, #156]	@ (8001a24 <gyro_compensate_and_scale+0x100>)
 8001988:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x00)
		scale = 250.0f / 32768.0f;

	// Konwersja do dps (dla skali 2000dps)
	gyro_calibrated_dat->x = gyro_data->x * scale;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001990:	ee07 3a90 	vmov	s15, r3
 8001994:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001998:	edd7 7a05 	vldr	s15, [r7, #20]
 800199c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	edc3 7a00 	vstr	s15, [r3]
	gyro_calibrated_dat->y = gyro_data->y * scale;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80019ac:	ee07 3a90 	vmov	s15, r3
 80019b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	edc3 7a01 	vstr	s15, [r3, #4]
	gyro_calibrated_dat->z = gyro_data->z * scale;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019c8:	ee07 3a90 	vmov	s15, r3
 80019cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80019d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	edc3 7a02 	vstr	s15, [r3, #8]

	printf("X: %.2f dps, Y: %.2f dps, Z: %.2f dps\r\n", gyro_calibrated_dat->x, gyro_calibrated_dat->y, gyro_calibrated_dat->z);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4618      	mov	r0, r3
 80019e4:	f7fe fdc0 	bl	8000568 <__aeabi_f2d>
 80019e8:	4680      	mov	r8, r0
 80019ea:	4689      	mov	r9, r1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fdb9 	bl	8000568 <__aeabi_f2d>
 80019f6:	4604      	mov	r4, r0
 80019f8:	460d      	mov	r5, r1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fdb2 	bl	8000568 <__aeabi_f2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a0c:	e9cd 4500 	strd	r4, r5, [sp]
 8001a10:	4642      	mov	r2, r8
 8001a12:	464b      	mov	r3, r9
 8001a14:	4804      	ldr	r0, [pc, #16]	@ (8001a28 <gyro_compensate_and_scale+0x104>)
 8001a16:	f009 ff71 	bl	800b8fc <iprintf>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a24:	3d7a0000 	.word	0x3d7a0000
 8001a28:	0800e6c8 	.word	0x0800e6c8

08001a2c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a32:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa4 <MX_I2C3_Init+0x78>)
 8001a34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001a36:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a38:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa8 <MX_I2C3_Init+0x7c>)
 8001a3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a3c:	4b18      	ldr	r3, [pc, #96]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a42:	4b17      	ldr	r3, [pc, #92]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a48:	4b15      	ldr	r3, [pc, #84]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a50:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a56:	4b12      	ldr	r3, [pc, #72]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a5c:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a62:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a68:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a6a:	f004 f845 	bl	8005af8 <HAL_I2C_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a74:	f000 fe7e 	bl	8002774 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4809      	ldr	r0, [pc, #36]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a7c:	f004 f980 	bl	8005d80 <HAL_I2CEx_ConfigAnalogFilter>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001a86:	f000 fe75 	bl	8002774 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <MX_I2C3_Init+0x74>)
 8001a8e:	f004 f9b3 	bl	8005df8 <HAL_I2CEx_ConfigDigitalFilter>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001a98:	f000 fe6c 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a9c:	bf00      	nop
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	200002b8 	.word	0x200002b8
 8001aa4:	40005c00 	.word	0x40005c00
 8001aa8:	000186a0 	.word	0x000186a0

08001aac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a29      	ldr	r2, [pc, #164]	@ (8001b70 <HAL_I2C_MspInit+0xc4>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d14b      	bne.n	8001b66 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	613b      	str	r3, [r7, #16]
 8001ad2:	4b28      	ldr	r3, [pc, #160]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a27      	ldr	r2, [pc, #156]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b25      	ldr	r3, [pc, #148]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	613b      	str	r3, [r7, #16]
 8001ae8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a20      	ldr	r2, [pc, #128]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001b06:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b0c:	2312      	movs	r3, #18
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b10:	2301      	movs	r3, #1
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b18:	2304      	movs	r3, #4
 8001b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4619      	mov	r1, r3
 8001b22:	4815      	ldr	r0, [pc, #84]	@ (8001b78 <HAL_I2C_MspInit+0xcc>)
 8001b24:	f002 f87c 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2e:	2312      	movs	r3, #18
 8001b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b32:	2301      	movs	r3, #1
 8001b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001b3e:	f107 0314 	add.w	r3, r7, #20
 8001b42:	4619      	mov	r1, r3
 8001b44:	480d      	ldr	r0, [pc, #52]	@ (8001b7c <HAL_I2C_MspInit+0xd0>)
 8001b46:	f002 f86b 	bl	8003c20 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	4b09      	ldr	r3, [pc, #36]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b52:	4a08      	ldr	r2, [pc, #32]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001b54:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001b58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5a:	4b06      	ldr	r3, [pc, #24]	@ (8001b74 <HAL_I2C_MspInit+0xc8>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001b62:	60bb      	str	r3, [r7, #8]
 8001b64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8001b66:	bf00      	nop
 8001b68:	3728      	adds	r7, #40	@ 0x28
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40005c00 	.word	0x40005c00
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40020800 	.word	0x40020800
 8001b7c:	40020000 	.word	0x40020000

08001b80 <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0x48, //in documentation this means BGR but it turned out to be RGB, also it set (0,0) to up left corner
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]

	 if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 8001b8a:	f000 fdf9 	bl	8002780 <spi5_acquire>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	f083 0301 	eor.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d119      	bne.n	8001bce <lcd_cmd+0x4e>

	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001ba0:	480d      	ldr	r0, [pc, #52]	@ (8001bd8 <lcd_cmd+0x58>)
 8001ba2:	f002 f9e9 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	2104      	movs	r1, #4
 8001baa:	480c      	ldr	r0, [pc, #48]	@ (8001bdc <lcd_cmd+0x5c>)
 8001bac:	f002 f9e4 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 8001bb0:	1df9      	adds	r1, r7, #7
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4809      	ldr	r0, [pc, #36]	@ (8001be0 <lcd_cmd+0x60>)
 8001bba:	f005 fc0c 	bl	80073d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	4806      	ldr	r0, [pc, #24]	@ (8001bdc <lcd_cmd+0x5c>)
 8001bc4:	f002 f9d8 	bl	8003f78 <HAL_GPIO_WritePin>

	spi5_release();
 8001bc8:	f000 fdee 	bl	80027a8 <spi5_release>
 8001bcc:	e000      	b.n	8001bd0 <lcd_cmd+0x50>
	 if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 8001bce:	bf00      	nop

}
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40020c00 	.word	0x40020c00
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	20025cb0 	.word	0x20025cb0

08001be4 <lcd_data>:
static void lcd_data(uint8_t data){
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001bf4:	480b      	ldr	r0, [pc, #44]	@ (8001c24 <lcd_data+0x40>)
 8001bf6:	f002 f9bf 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2104      	movs	r1, #4
 8001bfe:	480a      	ldr	r0, [pc, #40]	@ (8001c28 <lcd_data+0x44>)
 8001c00:	f002 f9ba 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 8001c04:	1df9      	adds	r1, r7, #7
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <lcd_data+0x48>)
 8001c0e:	f005 fbe2 	bl	80073d6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8001c12:	2201      	movs	r2, #1
 8001c14:	2104      	movs	r1, #4
 8001c16:	4804      	ldr	r0, [pc, #16]	@ (8001c28 <lcd_data+0x44>)
 8001c18:	f002 f9ae 	bl	8003f78 <HAL_GPIO_WritePin>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40020c00 	.word	0x40020c00
 8001c28:	40020800 	.word	0x40020800
 8001c2c:	20025cb0 	.word	0x20025cb0

08001c30 <lcd_data16>:
static void lcd_data16(uint16_t value){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	4603      	mov	r3, r0
 8001c38:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	0a1b      	lsrs	r3, r3, #8
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	4618      	mov	r0, r3
 8001c44:	f7ff ffce 	bl	8001be4 <lcd_data>
	lcd_data(value);
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff ffc9 	bl	8001be4 <lcd_data>
}
 8001c52:	bf00      	nop
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <lcd_send>:
static void lcd_send(uint16_t value){
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b082      	sub	sp, #8
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	4603      	mov	r3, r0
 8001c62:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8001c64:	88fb      	ldrh	r3, [r7, #6]
 8001c66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d005      	beq.n	8001c7a <lcd_send+0x20>
		lcd_cmd(value);
 8001c6e:	88fb      	ldrh	r3, [r7, #6]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff84 	bl	8001b80 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8001c78:	e004      	b.n	8001c84 <lcd_send+0x2a>
		lcd_data(value);
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff ffb0 	bl	8001be4 <lcd_data>
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <lcd_init>:
void lcd_init(void){
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  chunk_size = (LCD_HEIGHT * LCD_WIDTH) / how_many_chunks;
 8001c92:	4b23      	ldr	r3, [pc, #140]	@ (8001d20 <lcd_init+0x94>)
 8001c94:	881b      	ldrh	r3, [r3, #0]
 8001c96:	461a      	mov	r2, r3
 8001c98:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8001c9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	4b20      	ldr	r3, [pc, #128]	@ (8001d24 <lcd_init+0x98>)
 8001ca4:	801a      	strh	r2, [r3, #0]
  y_per_chunk = LCD_HEIGHT / how_many_chunks;
 8001ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d20 <lcd_init+0x94>)
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	461a      	mov	r2, r3
 8001cac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001cb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001d28 <lcd_init+0x9c>)
 8001cb8:	801a      	strh	r2, [r3, #0]

  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cc0:	481a      	ldr	r0, [pc, #104]	@ (8001d2c <lcd_init+0xa0>)
 8001cc2:	f002 f959 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 8001cc6:	2064      	movs	r0, #100	@ 0x64
 8001cc8:	f001 f92c 	bl	8002f24 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_SET);
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001cd2:	4816      	ldr	r0, [pc, #88]	@ (8001d2c <lcd_init+0xa0>)
 8001cd4:	f002 f950 	bl	8003f78 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8001cd8:	2064      	movs	r0, #100	@ 0x64
 8001cda:	f001 f923 	bl	8002f24 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
 8001ce2:	e009      	b.n	8001cf8 <lcd_init+0x6c>
    lcd_send(init_table[i]);
 8001ce4:	4a12      	ldr	r2, [pc, #72]	@ (8001d30 <lcd_init+0xa4>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ffb4 	bl	8001c5a <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	607b      	str	r3, [r7, #4]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b35      	cmp	r3, #53	@ 0x35
 8001cfc:	d9f2      	bls.n	8001ce4 <lcd_init+0x58>
  }
  HAL_Delay(200);
 8001cfe:	20c8      	movs	r0, #200	@ 0xc8
 8001d00:	f001 f910 	bl	8002f24 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 8001d04:	2011      	movs	r0, #17
 8001d06:	f7ff ff3b 	bl	8001b80 <lcd_cmd>
  HAL_Delay(120);
 8001d0a:	2078      	movs	r0, #120	@ 0x78
 8001d0c:	f001 f90a 	bl	8002f24 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 8001d10:	2029      	movs	r0, #41	@ 0x29
 8001d12:	f7ff ff35 	bl	8001b80 <lcd_cmd>
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000000 	.word	0x20000000
 8001d24:	20025be6 	.word	0x20025be6
 8001d28:	20025be8 	.word	0x20025be8
 8001d2c:	40020c00 	.word	0x40020c00
 8001d30:	0800e6fc 	.word	0x0800e6fc

08001d34 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 8001d42:	202a      	movs	r0, #42	@ 0x2a
 8001d44:	f7ff ff1c 	bl	8001b80 <lcd_cmd>
	lcd_data16(x);
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff6f 	bl	8001c30 <lcd_data16>
	lcd_data16(x+width-1);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4413      	add	r3, r2
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	b29b      	uxth	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff ff64 	bl	8001c30 <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 8001d68:	202b      	movs	r0, #43	@ 0x2b
 8001d6a:	f7ff ff09 	bl	8001b80 <lcd_cmd>
	lcd_data16(y);
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ff5c 	bl	8001c30 <lcd_data16>
	lcd_data16(y+height-1);
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	b29a      	uxth	r2, r3
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4413      	add	r3, r2
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	3b01      	subs	r3, #1
 8001d86:	b29b      	uxth	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff ff51 	bl	8001c30 <lcd_data16>
}
 8001d8e:	bf00      	nop
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
	...

08001d98 <lcd_update_rectangle>:
void lcd_update_rectangle(uint16_t idx,int x,int y,int width,int height,uint16_t color){
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	60b9      	str	r1, [r7, #8]
 8001da0:	607a      	str	r2, [r7, #4]
 8001da2:	603b      	str	r3, [r7, #0]
 8001da4:	4603      	mov	r3, r0
 8001da6:	81fb      	strh	r3, [r7, #14]
	rects[idx].x = x;
 8001da8:	89fa      	ldrh	r2, [r7, #14]
 8001daa:	491b      	ldr	r1, [pc, #108]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001dac:	4613      	mov	r3, r2
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	440b      	add	r3, r1
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	601a      	str	r2, [r3, #0]
	rects[idx].y = y;
 8001dba:	89fa      	ldrh	r2, [r7, #14]
 8001dbc:	4916      	ldr	r1, [pc, #88]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	440b      	add	r3, r1
 8001dc8:	3304      	adds	r3, #4
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
	rects[idx].width = width;
 8001dce:	89fa      	ldrh	r2, [r7, #14]
 8001dd0:	4911      	ldr	r1, [pc, #68]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	440b      	add	r3, r1
 8001ddc:	3308      	adds	r3, #8
 8001dde:	683a      	ldr	r2, [r7, #0]
 8001de0:	601a      	str	r2, [r3, #0]
	rects[idx].height = height;
 8001de2:	89fa      	ldrh	r2, [r7, #14]
 8001de4:	490c      	ldr	r1, [pc, #48]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	330c      	adds	r3, #12
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	601a      	str	r2, [r3, #0]
	rects[idx].color = color;
 8001df6:	89fa      	ldrh	r2, [r7, #14]
 8001df8:	4907      	ldr	r1, [pc, #28]	@ (8001e18 <lcd_update_rectangle+0x80>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	440b      	add	r3, r1
 8001e04:	3310      	adds	r3, #16
 8001e06:	8bba      	ldrh	r2, [r7, #28]
 8001e08:	801a      	strh	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	2000030c 	.word	0x2000030c

08001e1c <lcd_update_circle>:
void lcd_update_circle(int x,int y,int radius,uint16_t color){
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
 8001e28:	807b      	strh	r3, [r7, #2]
	player.x = x;
 8001e2a:	4a09      	ldr	r2, [pc, #36]	@ (8001e50 <lcd_update_circle+0x34>)
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6013      	str	r3, [r2, #0]
	player.y = y;
 8001e30:	4a07      	ldr	r2, [pc, #28]	@ (8001e50 <lcd_update_circle+0x34>)
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	6053      	str	r3, [r2, #4]
	player.radius = radius;
 8001e36:	4a06      	ldr	r2, [pc, #24]	@ (8001e50 <lcd_update_circle+0x34>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6093      	str	r3, [r2, #8]
	player.color = color;
 8001e3c:	4a04      	ldr	r2, [pc, #16]	@ (8001e50 <lcd_update_circle+0x34>)
 8001e3e:	887b      	ldrh	r3, [r7, #2]
 8001e40:	8193      	strh	r3, [r2, #12]
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	200003d4 	.word	0x200003d4

08001e54 <lcd_put_pixel>:

void lcd_put_pixel(int x, int y, uint16_t color){
 8001e54:	b480      	push	{r7}
 8001e56:	b087      	sub	sp, #28
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	80fb      	strh	r3, [r7, #6]
	screen_buffer[ (LCD_WIDTH*y) + x] = __REV16(color); //to make send most significant bit first
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	ba5b      	rev16	r3, r3
 8001e6a:	613b      	str	r3, [r7, #16]
  return result;
 8001e6c:	6939      	ldr	r1, [r7, #16]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	4613      	mov	r3, r2
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	1a9b      	subs	r3, r3, r2
 8001e76:	011b      	lsls	r3, r3, #4
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4413      	add	r3, r2
 8001e7e:	b289      	uxth	r1, r1
 8001e80:	4a04      	ldr	r2, [pc, #16]	@ (8001e94 <lcd_put_pixel+0x40>)
 8001e82:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8001e86:	bf00      	nop
 8001e88:	371c      	adds	r7, #28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200003e4 	.word	0x200003e4

08001e98 <lcd_put_rect_to_buffer>:
static void lcd_put_rect_to_buffer(Rectangle rect){
 8001e98:	b084      	sub	sp, #16
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	f107 0c10 	add.w	ip, r7, #16
 8001ea4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	607b      	str	r3, [r7, #4]
 8001eac:	e021      	b.n	8001ef2 <lcd_put_rect_to_buffer+0x5a>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	e015      	b.n	8001ee0 <lcd_put_rect_to_buffer+0x48>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	db0f      	blt.n	8001eda <lcd_put_rect_to_buffer+0x42>
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2bef      	cmp	r3, #239	@ 0xef
 8001ebe:	dc0c      	bgt.n	8001eda <lcd_put_rect_to_buffer+0x42>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	db09      	blt.n	8001eda <lcd_put_rect_to_buffer+0x42>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001ecc:	da05      	bge.n	8001eda <lcd_put_rect_to_buffer+0x42>
				lcd_put_pixel(x, y, rect.color);
 8001ece:	8c3b      	ldrh	r3, [r7, #32]
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	6838      	ldr	r0, [r7, #0]
 8001ed6:	f7ff ffbd 	bl	8001e54 <lcd_put_pixel>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	3301      	adds	r3, #1
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	dbe3      	blt.n	8001eb4 <lcd_put_rect_to_buffer+0x1c>
	for(int y=rect.y;y<rect.y+rect.height;y++){
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3301      	adds	r3, #1
 8001ef0:	607b      	str	r3, [r7, #4]
 8001ef2:	697a      	ldr	r2, [r7, #20]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbd7      	blt.n	8001eae <lcd_put_rect_to_buffer+0x16>
			}
		}
	}
}
 8001efe:	bf00      	nop
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001f0a:	b004      	add	sp, #16
 8001f0c:	4770      	bx	lr
	...

08001f10 <lcd_put_circ_to_buffer>:
static void lcd_put_circ_to_buffer(Circle circle){
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	463c      	mov	r4, r7
 8001f18:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int y=circle.y-circle.radius;y<circle.y+circle.radius;y++){
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	e060      	b.n	8001fe8 <lcd_put_circ_to_buffer+0xd8>
		for(int x=circle.x-circle.radius;x<circle.x+circle.radius;x++){
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	613b      	str	r3, [r7, #16]
 8001f2e:	e052      	b.n	8001fd6 <lcd_put_circ_to_buffer+0xc6>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	db4c      	blt.n	8001fd0 <lcd_put_circ_to_buffer+0xc0>
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	2bef      	cmp	r3, #239	@ 0xef
 8001f3a:	dc49      	bgt.n	8001fd0 <lcd_put_circ_to_buffer+0xc0>
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	db46      	blt.n	8001fd0 <lcd_put_circ_to_buffer+0xc0>
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001f48:	da42      	bge.n	8001fd0 <lcd_put_circ_to_buffer+0xc0>
				if ((pow(x - circle.x, 2) + pow(y - circle.y, 2)) <= pow(circle.radius, 2)){
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	1ad3      	subs	r3, r2, r3
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe faf7 	bl	8000544 <__aeabi_i2d>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	ed9f 1b29 	vldr	d1, [pc, #164]	@ 8002000 <lcd_put_circ_to_buffer+0xf0>
 8001f5e:	ec43 2b10 	vmov	d0, r2, r3
 8001f62:	f00b fbef 	bl	800d744 <pow>
 8001f66:	ec55 4b10 	vmov	r4, r5, d0
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	4618      	mov	r0, r3
 8001f72:	f7fe fae7 	bl	8000544 <__aeabi_i2d>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8002000 <lcd_put_circ_to_buffer+0xf0>
 8001f7e:	ec43 2b10 	vmov	d0, r2, r3
 8001f82:	f00b fbdf 	bl	800d744 <pow>
 8001f86:	ec53 2b10 	vmov	r2, r3, d0
 8001f8a:	4620      	mov	r0, r4
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	f7fe f98d 	bl	80002ac <__adddf3>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4614      	mov	r4, r2
 8001f98:	461d      	mov	r5, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fad1 	bl	8000544 <__aeabi_i2d>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	ed9f 1b16 	vldr	d1, [pc, #88]	@ 8002000 <lcd_put_circ_to_buffer+0xf0>
 8001faa:	ec43 2b10 	vmov	d0, r2, r3
 8001fae:	f00b fbc9 	bl	800d744 <pow>
 8001fb2:	ec53 2b10 	vmov	r2, r3, d0
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe fda9 	bl	8000b10 <__aeabi_dcmple>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <lcd_put_circ_to_buffer+0xc0>
					lcd_put_pixel(x, y, circle.color);
 8001fc4:	89bb      	ldrh	r3, [r7, #12]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6979      	ldr	r1, [r7, #20]
 8001fca:	6938      	ldr	r0, [r7, #16]
 8001fcc:	f7ff ff42 	bl	8001e54 <lcd_put_pixel>
		for(int x=circle.x-circle.radius;x<circle.x+circle.radius;x++){
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	3301      	adds	r3, #1
 8001fd4:	613b      	str	r3, [r7, #16]
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4413      	add	r3, r2
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	dba6      	blt.n	8001f30 <lcd_put_circ_to_buffer+0x20>
	for(int y=circle.y-circle.radius;y<circle.y+circle.radius;y++){
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4413      	add	r3, r2
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	db98      	blt.n	8001f26 <lcd_put_circ_to_buffer+0x16>
				}
			}
		}
	}
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8001ffe:	bf00      	nop
 8002000:	00000000 	.word	0x00000000
 8002004:	40000000 	.word	0x40000000

08002008 <put_figures_to_buffer>:
static void put_figures_to_buffer(void){
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af02      	add	r7, sp, #8
	for(int i=0;i<RECTS_AMOUNT;i++){
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	e00e      	b.n	8002032 <put_figures_to_buffer+0x2a>
		lcd_put_rect_to_buffer(rects[i]);
 8002014:	490c      	ldr	r1, [pc, #48]	@ (8002048 <put_figures_to_buffer+0x40>)
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	691a      	ldr	r2, [r3, #16]
 8002024:	9200      	str	r2, [sp, #0]
 8002026:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002028:	f7ff ff36 	bl	8001e98 <lcd_put_rect_to_buffer>
	for(int i=0;i<RECTS_AMOUNT;i++){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3301      	adds	r3, #1
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b09      	cmp	r3, #9
 8002036:	dded      	ble.n	8002014 <put_figures_to_buffer+0xc>
	}
	lcd_put_circ_to_buffer(player);
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <put_figures_to_buffer+0x44>)
 800203a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800203c:	f7ff ff68 	bl	8001f10 <lcd_put_circ_to_buffer>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	2000030c 	.word	0x2000030c
 800204c:	200003d4 	.word	0x200003d4

08002050 <lcd_update>:
void lcd_update(void){
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	put_figures_to_buffer();
 8002054:	f7ff ffd8 	bl	8002008 <put_figures_to_buffer>

	current_chunk = 0;
 8002058:	4b20      	ldr	r3, [pc, #128]	@ (80020dc <lcd_update+0x8c>)
 800205a:	2200      	movs	r2, #0
 800205c:	801a      	strh	r2, [r3, #0]
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 800205e:	4b1f      	ldr	r3, [pc, #124]	@ (80020dc <lcd_update+0x8c>)
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	4b1e      	ldr	r3, [pc, #120]	@ (80020e0 <lcd_update+0x90>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	fb03 f102 	mul.w	r1, r3, r2
 800206c:	4b1d      	ldr	r3, [pc, #116]	@ (80020e4 <lcd_update+0x94>)
 800206e:	881b      	ldrh	r3, [r3, #0]
 8002070:	461a      	mov	r2, r3
 8002072:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002076:	fb93 f3f2 	sdiv	r3, r3, r2
 800207a:	22f0      	movs	r2, #240	@ 0xf0
 800207c:	2000      	movs	r0, #0
 800207e:	f7ff fe59 	bl	8001d34 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8002082:	202c      	movs	r0, #44	@ 0x2c
 8002084:	f7ff fd7c 	bl	8001b80 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002088:	2201      	movs	r2, #1
 800208a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800208e:	4816      	ldr	r0, [pc, #88]	@ (80020e8 <lcd_update+0x98>)
 8002090:	f001 ff72 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002094:	2200      	movs	r2, #0
 8002096:	2104      	movs	r1, #4
 8002098:	4814      	ldr	r0, [pc, #80]	@ (80020ec <lcd_update+0x9c>)
 800209a:	f001 ff6d 	bl	8003f78 <HAL_GPIO_WritePin>

	if (!spi5_acquire()) return;
 800209e:	f000 fb6f 	bl	8002780 <spi5_acquire>
 80020a2:	4603      	mov	r3, r0
 80020a4:	f083 0301 	eor.w	r3, r3, #1
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d114      	bne.n	80020d8 <lcd_update+0x88>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 80020ae:	4b0b      	ldr	r3, [pc, #44]	@ (80020dc <lcd_update+0x8c>)
 80020b0:	881b      	ldrh	r3, [r3, #0]
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b0e      	ldr	r3, [pc, #56]	@ (80020f0 <lcd_update+0xa0>)
 80020b6:	881b      	ldrh	r3, [r3, #0]
 80020b8:	fb02 f303 	mul.w	r3, r2, r3
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4a0d      	ldr	r2, [pc, #52]	@ (80020f4 <lcd_update+0xa4>)
 80020c0:	1899      	adds	r1, r3, r2
 80020c2:	4b0b      	ldr	r3, [pc, #44]	@ (80020f0 <lcd_update+0xa0>)
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	461a      	mov	r2, r3
 80020cc:	480a      	ldr	r0, [pc, #40]	@ (80020f8 <lcd_update+0xa8>)
 80020ce:	f005 fd89 	bl	8007be4 <HAL_SPI_Transmit_DMA>

	spi5_release();
 80020d2:	f000 fb69 	bl	80027a8 <spi5_release>
 80020d6:	e000      	b.n	80020da <lcd_update+0x8a>
	if (!spi5_acquire()) return;
 80020d8:	bf00      	nop
}
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20025be4 	.word	0x20025be4
 80020e0:	20025be8 	.word	0x20025be8
 80020e4:	20000000 	.word	0x20000000
 80020e8:	40020c00 	.word	0x40020c00
 80020ec:	40020800 	.word	0x40020800
 80020f0:	20025be6 	.word	0x20025be6
 80020f4:	200003e4 	.word	0x200003e4
 80020f8:	20025cb0 	.word	0x20025cb0

080020fc <lcd_transfer_done>:
void lcd_transfer_done(void){
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8002100:	2201      	movs	r2, #1
 8002102:	2104      	movs	r1, #4
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <lcd_transfer_done+0x14>)
 8002106:	f001 ff37 	bl	8003f78 <HAL_GPIO_WritePin>
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	40020800 	.word	0x40020800

08002114 <send_next_chunk>:
bool lcd_is_busy(void){
	if (HAL_SPI_GetState(&hspi5) == HAL_SPI_STATE_BUSY) return true;
	else return false;
}
static void send_next_chunk(void){
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8002118:	4b20      	ldr	r3, [pc, #128]	@ (800219c <send_next_chunk+0x88>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	461a      	mov	r2, r3
 800211e:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <send_next_chunk+0x8c>)
 8002120:	881b      	ldrh	r3, [r3, #0]
 8002122:	fb03 f102 	mul.w	r1, r3, r2
 8002126:	4b1f      	ldr	r3, [pc, #124]	@ (80021a4 <send_next_chunk+0x90>)
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	461a      	mov	r2, r3
 800212c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002130:	fb93 f3f2 	sdiv	r3, r3, r2
 8002134:	22f0      	movs	r2, #240	@ 0xf0
 8002136:	2000      	movs	r0, #0
 8002138:	f7ff fdfc 	bl	8001d34 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 800213c:	202c      	movs	r0, #44	@ 0x2c
 800213e:	f7ff fd1f 	bl	8001b80 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002142:	2201      	movs	r2, #1
 8002144:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002148:	4817      	ldr	r0, [pc, #92]	@ (80021a8 <send_next_chunk+0x94>)
 800214a:	f001 ff15 	bl	8003f78 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	2104      	movs	r1, #4
 8002152:	4816      	ldr	r0, [pc, #88]	@ (80021ac <send_next_chunk+0x98>)
 8002154:	f001 ff10 	bl	8003f78 <HAL_GPIO_WritePin>
	lcd_ready = false;
 8002158:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <send_next_chunk+0x9c>)
 800215a:	2200      	movs	r2, #0
 800215c:	701a      	strb	r2, [r3, #0]
	if (!spi5_acquire()) return;
 800215e:	f000 fb0f 	bl	8002780 <spi5_acquire>
 8002162:	4603      	mov	r3, r0
 8002164:	f083 0301 	eor.w	r3, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d114      	bne.n	8002198 <send_next_chunk+0x84>
	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 800216e:	4b0b      	ldr	r3, [pc, #44]	@ (800219c <send_next_chunk+0x88>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4b0f      	ldr	r3, [pc, #60]	@ (80021b4 <send_next_chunk+0xa0>)
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4a0e      	ldr	r2, [pc, #56]	@ (80021b8 <send_next_chunk+0xa4>)
 8002180:	1899      	adds	r1, r3, r2
 8002182:	4b0c      	ldr	r3, [pc, #48]	@ (80021b4 <send_next_chunk+0xa0>)
 8002184:	881b      	ldrh	r3, [r3, #0]
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	b29b      	uxth	r3, r3
 800218a:	461a      	mov	r2, r3
 800218c:	480b      	ldr	r0, [pc, #44]	@ (80021bc <send_next_chunk+0xa8>)
 800218e:	f005 fd29 	bl	8007be4 <HAL_SPI_Transmit_DMA>

	spi5_release();
 8002192:	f000 fb09 	bl	80027a8 <spi5_release>
 8002196:	e000      	b.n	800219a <send_next_chunk+0x86>
	if (!spi5_acquire()) return;
 8002198:	bf00      	nop
}
 800219a:	bd80      	pop	{r7, pc}
 800219c:	20025be4 	.word	0x20025be4
 80021a0:	20025be8 	.word	0x20025be8
 80021a4:	20000000 	.word	0x20000000
 80021a8:	40020c00 	.word	0x40020c00
 80021ac:	40020800 	.word	0x40020800
 80021b0:	20000002 	.word	0x20000002
 80021b4:	20025be6 	.word	0x20025be6
 80021b8:	200003e4 	.word	0x200003e4
 80021bc:	20025cb0 	.word	0x20025cb0

080021c0 <go_for_next_chunk>:
void go_for_next_chunk(void){
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
	current_chunk++;
 80021c4:	4b0a      	ldr	r3, [pc, #40]	@ (80021f0 <go_for_next_chunk+0x30>)
 80021c6:	881b      	ldrh	r3, [r3, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <go_for_next_chunk+0x30>)
 80021ce:	801a      	strh	r2, [r3, #0]
	if (current_chunk < how_many_chunks) {
 80021d0:	4b07      	ldr	r3, [pc, #28]	@ (80021f0 <go_for_next_chunk+0x30>)
 80021d2:	881a      	ldrh	r2, [r3, #0]
 80021d4:	4b07      	ldr	r3, [pc, #28]	@ (80021f4 <go_for_next_chunk+0x34>)
 80021d6:	881b      	ldrh	r3, [r3, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d202      	bcs.n	80021e2 <go_for_next_chunk+0x22>
		send_next_chunk();
 80021dc:	f7ff ff9a 	bl	8002114 <send_next_chunk>
	}
	else {
		lcd_ready=true;
		lcd_transfer_done();
	}
}
 80021e0:	e004      	b.n	80021ec <go_for_next_chunk+0x2c>
		lcd_ready=true;
 80021e2:	4b05      	ldr	r3, [pc, #20]	@ (80021f8 <go_for_next_chunk+0x38>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	701a      	strb	r2, [r3, #0]
		lcd_transfer_done();
 80021e8:	f7ff ff88 	bl	80020fc <lcd_transfer_done>
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	20025be4 	.word	0x20025be4
 80021f4:	20000000 	.word	0x20000000
 80021f8:	20000002 	.word	0x20000002

080021fc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08e      	sub	sp, #56	@ 0x38
 8002200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002202:	1d3b      	adds	r3, r7, #4
 8002204:	2234      	movs	r2, #52	@ 0x34
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f009 fcbf 	bl	800bb8c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800220e:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002210:	4a39      	ldr	r2, [pc, #228]	@ (80022f8 <MX_LTDC_Init+0xfc>)
 8002212:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002214:	4b37      	ldr	r3, [pc, #220]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002216:	2200      	movs	r2, #0
 8002218:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800221a:	4b36      	ldr	r3, [pc, #216]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 800221c:	2200      	movs	r2, #0
 800221e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002220:	4b34      	ldr	r3, [pc, #208]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002226:	4b33      	ldr	r3, [pc, #204]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002228:	2200      	movs	r2, #0
 800222a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800222c:	4b31      	ldr	r3, [pc, #196]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 800222e:	2209      	movs	r2, #9
 8002230:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8002232:	4b30      	ldr	r3, [pc, #192]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002234:	2201      	movs	r2, #1
 8002236:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8002238:	4b2e      	ldr	r3, [pc, #184]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 800223a:	221d      	movs	r2, #29
 800223c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800223e:	4b2d      	ldr	r3, [pc, #180]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002240:	2203      	movs	r2, #3
 8002242:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8002244:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002246:	f240 120d 	movw	r2, #269	@ 0x10d
 800224a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800224c:	4b29      	ldr	r3, [pc, #164]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 800224e:	f240 1243 	movw	r2, #323	@ 0x143
 8002252:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8002254:	4b27      	ldr	r3, [pc, #156]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002256:	f240 1217 	movw	r2, #279	@ 0x117
 800225a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 800225c:	4b25      	ldr	r3, [pc, #148]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 800225e:	f240 1247 	movw	r2, #327	@ 0x147
 8002262:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002264:	4b23      	ldr	r3, [pc, #140]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002266:	2200      	movs	r2, #0
 8002268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 800226e:	2200      	movs	r2, #0
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002274:	4b1f      	ldr	r3, [pc, #124]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800227c:	481d      	ldr	r0, [pc, #116]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 800227e:	f003 fdfb 	bl	8005e78 <HAL_LTDC_Init>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d001      	beq.n	800228c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002288:	f000 fa74 	bl	8002774 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800228c:	2300      	movs	r3, #0
 800228e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8002290:	23f0      	movs	r3, #240	@ 0xf0
 8002292:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002294:	2300      	movs	r3, #0
 8002296:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8002298:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800229c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800229e:	2302      	movs	r3, #2
 80022a0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80022a2:	23ff      	movs	r3, #255	@ 0xff
 80022a4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80022a6:	2300      	movs	r3, #0
 80022a8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80022aa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80022ae:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80022b0:	2307      	movs	r3, #7
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80022b4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80022b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80022ba:	23f0      	movs	r3, #240	@ 0xf0
 80022bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80022be:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80022c2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80022ca:	2300      	movs	r3, #0
 80022cc:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	2200      	movs	r2, #0
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <MX_LTDC_Init+0xf8>)
 80022de:	f003 ff5d 	bl	800619c <HAL_LTDC_ConfigLayer>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80022e8:	f000 fa44 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	3738      	adds	r7, #56	@ 0x38
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20025bec 	.word	0x20025bec
 80022f8:	40016800 	.word	0x40016800

080022fc <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b09a      	sub	sp, #104	@ 0x68
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002304:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002308:	2200      	movs	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	605a      	str	r2, [r3, #4]
 800230e:	609a      	str	r2, [r3, #8]
 8002310:	60da      	str	r2, [r3, #12]
 8002312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002318:	2230      	movs	r2, #48	@ 0x30
 800231a:	2100      	movs	r1, #0
 800231c:	4618      	mov	r0, r3
 800231e:	f009 fc35 	bl	800bb8c <memset>
  if(ltdcHandle->Instance==LTDC)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a85      	ldr	r2, [pc, #532]	@ (800253c <HAL_LTDC_MspInit+0x240>)
 8002328:	4293      	cmp	r3, r2
 800232a:	f040 8102 	bne.w	8002532 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800232e:	2308      	movs	r3, #8
 8002330:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002332:	2332      	movs	r3, #50	@ 0x32
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002336:	2302      	movs	r3, #2
 8002338:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800233a:	2300      	movs	r3, #0
 800233c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002342:	4618      	mov	r0, r3
 8002344:	f004 fdca 	bl	8006edc <HAL_RCCEx_PeriphCLKConfig>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800234e:	f000 fa11 	bl	8002774 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	623b      	str	r3, [r7, #32]
 8002356:	4b7a      	ldr	r3, [pc, #488]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235a:	4a79      	ldr	r2, [pc, #484]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 800235c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002360:	6453      	str	r3, [r2, #68]	@ 0x44
 8002362:	4b77      	ldr	r3, [pc, #476]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800236a:	623b      	str	r3, [r7, #32]
 800236c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]
 8002372:	4b73      	ldr	r3, [pc, #460]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002376:	4a72      	ldr	r2, [pc, #456]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002378:	f043 0320 	orr.w	r3, r3, #32
 800237c:	6313      	str	r3, [r2, #48]	@ 0x30
 800237e:	4b70      	ldr	r3, [pc, #448]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002382:	f003 0320 	and.w	r3, r3, #32
 8002386:	61fb      	str	r3, [r7, #28]
 8002388:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	4b6c      	ldr	r3, [pc, #432]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a6b      	ldr	r2, [pc, #428]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b69      	ldr	r3, [pc, #420]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	4b65      	ldr	r3, [pc, #404]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ae:	4a64      	ldr	r2, [pc, #400]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b6:	4b62      	ldr	r3, [pc, #392]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b5e      	ldr	r3, [pc, #376]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ca:	4a5d      	ldr	r2, [pc, #372]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80023d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d2:	4b5b      	ldr	r3, [pc, #364]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	4b57      	ldr	r3, [pc, #348]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e6:	4a56      	ldr	r2, [pc, #344]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80023ee:	4b54      	ldr	r3, [pc, #336]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60bb      	str	r3, [r7, #8]
 80023fe:	4b50      	ldr	r3, [pc, #320]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	4a4f      	ldr	r2, [pc, #316]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 8002404:	f043 0308 	orr.w	r3, r3, #8
 8002408:	6313      	str	r3, [r2, #48]	@ 0x30
 800240a:	4b4d      	ldr	r3, [pc, #308]	@ (8002540 <HAL_LTDC_MspInit+0x244>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002416:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800241a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241c:	2302      	movs	r3, #2
 800241e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002424:	2300      	movs	r3, #0
 8002426:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002428:	230e      	movs	r3, #14
 800242a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 800242c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002430:	4619      	mov	r1, r3
 8002432:	4844      	ldr	r0, [pc, #272]	@ (8002544 <HAL_LTDC_MspInit+0x248>)
 8002434:	f001 fbf4 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002438:	f641 0358 	movw	r3, #6232	@ 0x1858
 800243c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800244a:	230e      	movs	r3, #14
 800244c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002452:	4619      	mov	r1, r3
 8002454:	483c      	ldr	r0, [pc, #240]	@ (8002548 <HAL_LTDC_MspInit+0x24c>)
 8002456:	f001 fbe3 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800245a:	2303      	movs	r3, #3
 800245c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800245e:	2302      	movs	r3, #2
 8002460:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002466:	2300      	movs	r3, #0
 8002468:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800246a:	2309      	movs	r3, #9
 800246c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800246e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002472:	4619      	mov	r1, r3
 8002474:	4835      	ldr	r0, [pc, #212]	@ (800254c <HAL_LTDC_MspInit+0x250>)
 8002476:	f001 fbd3 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800247a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800247e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002480:	2302      	movs	r3, #2
 8002482:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002488:	2300      	movs	r3, #0
 800248a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800248c:	230e      	movs	r3, #14
 800248e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002490:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002494:	4619      	mov	r1, r3
 8002496:	482d      	ldr	r0, [pc, #180]	@ (800254c <HAL_LTDC_MspInit+0x250>)
 8002498:	f001 fbc2 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800249c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80024a0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a2:	2302      	movs	r3, #2
 80024a4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a6:	2300      	movs	r3, #0
 80024a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024aa:	2300      	movs	r3, #0
 80024ac:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024ae:	230e      	movs	r3, #14
 80024b0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80024b2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024b6:	4619      	mov	r1, r3
 80024b8:	4825      	ldr	r0, [pc, #148]	@ (8002550 <HAL_LTDC_MspInit+0x254>)
 80024ba:	f001 fbb1 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80024be:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80024c2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c4:	2302      	movs	r3, #2
 80024c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c8:	2300      	movs	r3, #0
 80024ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024cc:	2300      	movs	r3, #0
 80024ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024d0:	230e      	movs	r3, #14
 80024d2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024d8:	4619      	mov	r1, r3
 80024da:	481e      	ldr	r0, [pc, #120]	@ (8002554 <HAL_LTDC_MspInit+0x258>)
 80024dc:	f001 fba0 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 80024e0:	2348      	movs	r3, #72	@ 0x48
 80024e2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ec:	2300      	movs	r3, #0
 80024ee:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80024f0:	230e      	movs	r3, #14
 80024f2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80024f8:	4619      	mov	r1, r3
 80024fa:	4817      	ldr	r0, [pc, #92]	@ (8002558 <HAL_LTDC_MspInit+0x25c>)
 80024fc:	f001 fb90 	bl	8003c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002500:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002504:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002506:	2302      	movs	r3, #2
 8002508:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800250e:	2300      	movs	r3, #0
 8002510:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002512:	2309      	movs	r3, #9
 8002514:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002516:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800251a:	4619      	mov	r1, r3
 800251c:	480c      	ldr	r0, [pc, #48]	@ (8002550 <HAL_LTDC_MspInit+0x254>)
 800251e:	f001 fb7f 	bl	8003c20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8002522:	2200      	movs	r2, #0
 8002524:	2105      	movs	r1, #5
 8002526:	2058      	movs	r0, #88	@ 0x58
 8002528:	f000 fdd8 	bl	80030dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800252c:	2058      	movs	r0, #88	@ 0x58
 800252e:	f000 fdf1 	bl	8003114 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002532:	bf00      	nop
 8002534:	3768      	adds	r7, #104	@ 0x68
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40016800 	.word	0x40016800
 8002540:	40023800 	.word	0x40023800
 8002544:	40021400 	.word	0x40021400
 8002548:	40020000 	.word	0x40020000
 800254c:	40020400 	.word	0x40020400
 8002550:	40021800 	.word	0x40021800
 8002554:	40020800 	.word	0x40020800
 8002558:	40020c00 	.word	0x40020c00

0800255c <HAL_SPI_TxCpltCallback>:
	} else {
		clicked = 0;
	}
}

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 800255c:	b580      	push	{r7, lr}
 800255e:	b082      	sub	sp, #8
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi5) {
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <HAL_SPI_TxCpltCallback+0x34>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d10c      	bne.n	8002586 <HAL_SPI_TxCpltCallback+0x2a>
		go_for_next_chunk();
 800256c:	f7ff fe28 	bl	80021c0 <go_for_next_chunk>
		if (lcd_ready) {
 8002570:	4b08      	ldr	r3, [pc, #32]	@ (8002594 <HAL_SPI_TxCpltCallback+0x38>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d005      	beq.n	8002586 <HAL_SPI_TxCpltCallback+0x2a>
			printf("LCD ready\r\n");
 800257a:	4807      	ldr	r0, [pc, #28]	@ (8002598 <HAL_SPI_TxCpltCallback+0x3c>)
 800257c:	f009 fa26 	bl	800b9cc <puts>
			gyro_get_filtered_data(&gyro_raw_data_s);
 8002580:	4806      	ldr	r0, [pc, #24]	@ (800259c <HAL_SPI_TxCpltCallback+0x40>)
 8002582:	f7fe ffeb 	bl	800155c <gyro_get_filtered_data>
		}
	}
}
 8002586:	bf00      	nop
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	20025cb0 	.word	0x20025cb0
 8002594:	20000002 	.word	0x20000002
 8002598:	0800e6f0 	.word	0x0800e6f0
 800259c:	20025c94 	.word	0x20025c94

080025a0 <set_new_figs>:

void set_new_figs(void) {
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b082      	sub	sp, #8
 80025a4:	af02      	add	r7, sp, #8
	lcd_update_rectangle(0, 0, 0, 100, 100, RED);
 80025a6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2364      	movs	r3, #100	@ 0x64
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2364      	movs	r3, #100	@ 0x64
 80025b2:	2200      	movs	r2, #0
 80025b4:	2100      	movs	r1, #0
 80025b6:	2000      	movs	r0, #0
 80025b8:	f7ff fbee 	bl	8001d98 <lcd_update_rectangle>
	lcd_update_circle(100, 100, 20, GREEN);
 80025bc:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80025c0:	2214      	movs	r2, #20
 80025c2:	2164      	movs	r1, #100	@ 0x64
 80025c4:	2064      	movs	r0, #100	@ 0x64
 80025c6:	f7ff fc29 	bl	8001e1c <lcd_update_circle>
}
 80025ca:	bf00      	nop
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80025d6:	f000 fc63 	bl	8002ea0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80025da:	f000 f84f 	bl	800267c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80025de:	f7fe fe25 	bl	800122c <MX_GPIO_Init>
	MX_DMA_Init();
 80025e2:	f7fe fcbd 	bl	8000f60 <MX_DMA_Init>
	MX_CRC_Init();
 80025e6:	f7fe fc85 	bl	8000ef4 <MX_CRC_Init>
	MX_DMA2D_Init();
 80025ea:	f7fe fcd9 	bl	8000fa0 <MX_DMA2D_Init>
	MX_FMC_Init();
 80025ee:	f7fe fd31 	bl	8001054 <MX_FMC_Init>
	MX_I2C3_Init();
 80025f2:	f7ff fa1b 	bl	8001a2c <MX_I2C3_Init>
	MX_LTDC_Init();
 80025f6:	f7ff fe01 	bl	80021fc <MX_LTDC_Init>
	MX_SPI5_Init();
 80025fa:	f000 f8e1 	bl	80027c0 <MX_SPI5_Init>
	MX_TIM1_Init();
 80025fe:	f000 fb41 	bl	8002c84 <MX_TIM1_Init>
	MX_USART1_UART_Init();
 8002602:	f000 fbb1 	bl	8002d68 <MX_USART1_UART_Init>
	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	lcd_init();
 8002606:	f7ff fb41 	bl	8001c8c <lcd_init>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
 800260e:	e010      	b.n	8002632 <main+0x62>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8002610:	2300      	movs	r3, #0
 8002612:	603b      	str	r3, [r7, #0]
 8002614:	e007      	b.n	8002626 <main+0x56>
			lcd_put_pixel(x, y, BLUE);
 8002616:	221f      	movs	r2, #31
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	6838      	ldr	r0, [r7, #0]
 800261c:	f7ff fc1a 	bl	8001e54 <lcd_put_pixel>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	3301      	adds	r3, #1
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	2bef      	cmp	r3, #239	@ 0xef
 800262a:	ddf4      	ble.n	8002616 <main+0x46>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3301      	adds	r3, #1
 8002630:	607b      	str	r3, [r7, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002638:	dbea      	blt.n	8002610 <main+0x40>
		}
	}
	set_new_figs();
 800263a:	f7ff ffb1 	bl	80025a0 <set_new_figs>
	lcd_update();
 800263e:	f7ff fd07 	bl	8002050 <lcd_update>


	HAL_Delay(300); //żeby LCD skończył swoje przesyłanie
 8002642:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002646:	f000 fc6d 	bl	8002f24 <HAL_Delay>
	gyro_init();
 800264a:	f7fe ff2f 	bl	80014ac <gyro_init>
	gyro_calculate_offset(&gyro_offset_s);
 800264e:	4808      	ldr	r0, [pc, #32]	@ (8002670 <main+0xa0>)
 8002650:	f7ff f8f6 	bl	8001840 <gyro_calculate_offset>

	while (1) {
		lcd_update();
 8002654:	f7ff fcfc 	bl	8002050 <lcd_update>

		gyro_compensate_and_scale(&gyro_raw_data_s, &gyro_offset_s, &gyro_scaled_data_s);
 8002658:	4a06      	ldr	r2, [pc, #24]	@ (8002674 <main+0xa4>)
 800265a:	4905      	ldr	r1, [pc, #20]	@ (8002670 <main+0xa0>)
 800265c:	4806      	ldr	r0, [pc, #24]	@ (8002678 <main+0xa8>)
 800265e:	f7ff f961 	bl	8001924 <gyro_compensate_and_scale>

		HAL_Delay(500);
 8002662:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002666:	f000 fc5d 	bl	8002f24 <HAL_Delay>
		lcd_update();
 800266a:	bf00      	nop
 800266c:	e7f2      	b.n	8002654 <main+0x84>
 800266e:	bf00      	nop
 8002670:	20025ca8 	.word	0x20025ca8
 8002674:	20025c9c 	.word	0x20025c9c
 8002678:	20025c94 	.word	0x20025c94

0800267c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b094      	sub	sp, #80	@ 0x50
 8002680:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002682:	f107 0320 	add.w	r3, r7, #32
 8002686:	2230      	movs	r2, #48	@ 0x30
 8002688:	2100      	movs	r1, #0
 800268a:	4618      	mov	r0, r3
 800268c:	f009 fa7e 	bl	800bb8c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002690:	f107 030c 	add.w	r3, r7, #12
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	2300      	movs	r3, #0
 80026a2:	60bb      	str	r3, [r7, #8]
 80026a4:	4b28      	ldr	r3, [pc, #160]	@ (8002748 <SystemClock_Config+0xcc>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a8:	4a27      	ldr	r2, [pc, #156]	@ (8002748 <SystemClock_Config+0xcc>)
 80026aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b0:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <SystemClock_Config+0xcc>)
 80026b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80026bc:	2300      	movs	r3, #0
 80026be:	607b      	str	r3, [r7, #4]
 80026c0:	4b22      	ldr	r3, [pc, #136]	@ (800274c <SystemClock_Config+0xd0>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80026c8:	4a20      	ldr	r2, [pc, #128]	@ (800274c <SystemClock_Config+0xd0>)
 80026ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b1e      	ldr	r3, [pc, #120]	@ (800274c <SystemClock_Config+0xd0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80026d8:	607b      	str	r3, [r7, #4]
 80026da:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026dc:	2301      	movs	r3, #1
 80026de:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026e4:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026e6:	2302      	movs	r3, #2
 80026e8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80026ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80026f0:	2304      	movs	r3, #4
 80026f2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80026f4:	2348      	movs	r3, #72	@ 0x48
 80026f6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026f8:	2302      	movs	r3, #2
 80026fa:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 3;
 80026fc:	2303      	movs	r3, #3
 80026fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002700:	f107 0320 	add.w	r3, r7, #32
 8002704:	4618      	mov	r0, r3
 8002706:	f003 ff1f 	bl	8006548 <HAL_RCC_OscConfig>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <SystemClock_Config+0x98>
		Error_Handler();
 8002710:	f000 f830 	bl	8002774 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002714:	230f      	movs	r3, #15
 8002716:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002718:	2302      	movs	r3, #2
 800271a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002724:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800272a:	f107 030c 	add.w	r3, r7, #12
 800272e:	2102      	movs	r1, #2
 8002730:	4618      	mov	r0, r3
 8002732:	f004 f981 	bl	8006a38 <HAL_RCC_ClockConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <SystemClock_Config+0xc4>
		Error_Handler();
 800273c:	f000 f81a 	bl	8002774 <Error_Handler>
	}
}
 8002740:	bf00      	nop
 8002742:	3750      	adds	r7, #80	@ 0x50
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	40023800 	.word	0x40023800
 800274c:	40007000 	.word	0x40007000

08002750 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a04      	ldr	r2, [pc, #16]	@ (8002770 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002762:	f000 fbbf 	bl	8002ee4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002766:	bf00      	nop
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40001000 	.word	0x40001000

08002774 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002778:	b672      	cpsid	i
}
 800277a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800277c:	bf00      	nop
 800277e:	e7fd      	b.n	800277c <Error_Handler+0x8>

08002780 <spi5_acquire>:
/* USER CODE BEGIN 0 */


static volatile bool spi5_busy = false;  //flaga informująca czy SPI5 jest zajęte

bool spi5_acquire(void) {  //zajmij SPI, gdy jest wolne
 8002780:	b480      	push	{r7}
 8002782:	af00      	add	r7, sp, #0

	if (spi5_busy) return false;
 8002784:	4b07      	ldr	r3, [pc, #28]	@ (80027a4 <spi5_acquire+0x24>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <spi5_acquire+0x12>
 800278e:	2300      	movs	r3, #0
 8002790:	e003      	b.n	800279a <spi5_acquire+0x1a>

    spi5_busy = true;
 8002792:	4b04      	ldr	r3, [pc, #16]	@ (80027a4 <spi5_acquire+0x24>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]
    return true;
 8002798:	2301      	movs	r3, #1
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	20025cae 	.word	0x20025cae

080027a8 <spi5_release>:

void spi5_release(void) { //zwolnij SPI
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
    spi5_busy = false;
 80027ac:	4b03      	ldr	r3, [pc, #12]	@ (80027bc <spi5_release+0x14>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	20025cae 	.word	0x20025cae

080027c0 <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80027c4:	4b17      	ldr	r3, [pc, #92]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027c6:	4a18      	ldr	r2, [pc, #96]	@ (8002828 <MX_SPI5_Init+0x68>)
 80027c8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80027ca:	4b16      	ldr	r3, [pc, #88]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80027d0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80027d2:	4b14      	ldr	r3, [pc, #80]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80027d8:	4b12      	ldr	r3, [pc, #72]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027da:	2200      	movs	r2, #0
 80027dc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027de:	4b11      	ldr	r3, [pc, #68]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80027ea:	4b0e      	ldr	r3, [pc, #56]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027f0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80027f2:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027f4:	2218      	movs	r2, #24
 80027f6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027f8:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <MX_SPI5_Init+0x64>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <MX_SPI5_Init+0x64>)
 8002800:	2200      	movs	r2, #0
 8002802:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002804:	4b07      	ldr	r3, [pc, #28]	@ (8002824 <MX_SPI5_Init+0x64>)
 8002806:	2200      	movs	r2, #0
 8002808:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <MX_SPI5_Init+0x64>)
 800280c:	220a      	movs	r2, #10
 800280e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8002810:	4804      	ldr	r0, [pc, #16]	@ (8002824 <MX_SPI5_Init+0x64>)
 8002812:	f004 fd57 	bl	80072c4 <HAL_SPI_Init>
 8002816:	4603      	mov	r3, r0
 8002818:	2b00      	cmp	r3, #0
 800281a:	d001      	beq.n	8002820 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800281c:	f7ff ffaa 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	20025cb0 	.word	0x20025cb0
 8002828:	40015000 	.word	0x40015000

0800282c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a30      	ldr	r2, [pc, #192]	@ (800290c <HAL_SPI_MspInit+0xe0>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d15a      	bne.n	8002904 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b2f      	ldr	r3, [pc, #188]	@ (8002910 <HAL_SPI_MspInit+0xe4>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	4a2e      	ldr	r2, [pc, #184]	@ (8002910 <HAL_SPI_MspInit+0xe4>)
 8002858:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800285c:	6453      	str	r3, [r2, #68]	@ 0x44
 800285e:	4b2c      	ldr	r3, [pc, #176]	@ (8002910 <HAL_SPI_MspInit+0xe4>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800286a:	2300      	movs	r3, #0
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	4b28      	ldr	r3, [pc, #160]	@ (8002910 <HAL_SPI_MspInit+0xe4>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	4a27      	ldr	r2, [pc, #156]	@ (8002910 <HAL_SPI_MspInit+0xe4>)
 8002874:	f043 0320 	orr.w	r3, r3, #32
 8002878:	6313      	str	r3, [r2, #48]	@ 0x30
 800287a:	4b25      	ldr	r3, [pc, #148]	@ (8002910 <HAL_SPI_MspInit+0xe4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	f003 0320 	and.w	r3, r3, #32
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002886:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800288a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288c:	2302      	movs	r3, #2
 800288e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002898:	2305      	movs	r3, #5
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800289c:	f107 0314 	add.w	r3, r7, #20
 80028a0:	4619      	mov	r1, r3
 80028a2:	481c      	ldr	r0, [pc, #112]	@ (8002914 <HAL_SPI_MspInit+0xe8>)
 80028a4:	f001 f9bc 	bl	8003c20 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 80028a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028aa:	4a1c      	ldr	r2, [pc, #112]	@ (800291c <HAL_SPI_MspInit+0xf0>)
 80028ac:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 80028ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028b0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80028b4:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028b6:	4b18      	ldr	r3, [pc, #96]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028b8:	2240      	movs	r2, #64	@ 0x40
 80028ba:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028bc:	4b16      	ldr	r3, [pc, #88]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028be:	2200      	movs	r2, #0
 80028c0:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028c2:	4b15      	ldr	r3, [pc, #84]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028c8:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ca:	4b13      	ldr	r3, [pc, #76]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028d0:	4b11      	ldr	r3, [pc, #68]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 80028d6:	4b10      	ldr	r3, [pc, #64]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028d8:	2200      	movs	r2, #0
 80028da:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028de:	2200      	movs	r2, #0
 80028e0:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 80028e8:	480b      	ldr	r0, [pc, #44]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028ea:	f000 fc3d 	bl	8003168 <HAL_DMA_Init>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 80028f4:	f7ff ff3e 	bl	8002774 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a07      	ldr	r2, [pc, #28]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 80028fc:	649a      	str	r2, [r3, #72]	@ 0x48
 80028fe:	4a06      	ldr	r2, [pc, #24]	@ (8002918 <HAL_SPI_MspInit+0xec>)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8002904:	bf00      	nop
 8002906:	3728      	adds	r7, #40	@ 0x28
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40015000 	.word	0x40015000
 8002910:	40023800 	.word	0x40023800
 8002914:	40021400 	.word	0x40021400
 8002918:	20025d08 	.word	0x20025d08
 800291c:	40026470 	.word	0x40026470

08002920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	607b      	str	r3, [r7, #4]
 800292a:	4b12      	ldr	r3, [pc, #72]	@ (8002974 <HAL_MspInit+0x54>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	4a11      	ldr	r2, [pc, #68]	@ (8002974 <HAL_MspInit+0x54>)
 8002930:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002934:	6453      	str	r3, [r2, #68]	@ 0x44
 8002936:	4b0f      	ldr	r3, [pc, #60]	@ (8002974 <HAL_MspInit+0x54>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800293e:	607b      	str	r3, [r7, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	603b      	str	r3, [r7, #0]
 8002946:	4b0b      	ldr	r3, [pc, #44]	@ (8002974 <HAL_MspInit+0x54>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	4a0a      	ldr	r2, [pc, #40]	@ (8002974 <HAL_MspInit+0x54>)
 800294c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002950:	6413      	str	r3, [r2, #64]	@ 0x40
 8002952:	4b08      	ldr	r3, [pc, #32]	@ (8002974 <HAL_MspInit+0x54>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800295a:	603b      	str	r3, [r7, #0]
 800295c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800295e:	2200      	movs	r2, #0
 8002960:	210f      	movs	r1, #15
 8002962:	f06f 0001 	mvn.w	r0, #1
 8002966:	f000 fbb9 	bl	80030dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800296a:	bf00      	nop
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40023800 	.word	0x40023800

08002978 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b08e      	sub	sp, #56	@ 0x38
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002980:	2300      	movs	r3, #0
 8002982:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002988:	2300      	movs	r3, #0
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	4b33      	ldr	r3, [pc, #204]	@ (8002a5c <HAL_InitTick+0xe4>)
 800298e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002990:	4a32      	ldr	r2, [pc, #200]	@ (8002a5c <HAL_InitTick+0xe4>)
 8002992:	f043 0310 	orr.w	r3, r3, #16
 8002996:	6413      	str	r3, [r2, #64]	@ 0x40
 8002998:	4b30      	ldr	r3, [pc, #192]	@ (8002a5c <HAL_InitTick+0xe4>)
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f003 0310 	and.w	r3, r3, #16
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029a4:	f107 0210 	add.w	r2, r7, #16
 80029a8:	f107 0314 	add.w	r3, r7, #20
 80029ac:	4611      	mov	r1, r2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f004 fa62 	bl	8006e78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80029b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d103      	bne.n	80029c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80029be:	f004 fa33 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 80029c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80029c4:	e004      	b.n	80029d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80029c6:	f004 fa2f 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 80029ca:	4603      	mov	r3, r0
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d2:	4a23      	ldr	r2, [pc, #140]	@ (8002a60 <HAL_InitTick+0xe8>)
 80029d4:	fba2 2303 	umull	r2, r3, r2, r3
 80029d8:	0c9b      	lsrs	r3, r3, #18
 80029da:	3b01      	subs	r3, #1
 80029dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80029de:	4b21      	ldr	r3, [pc, #132]	@ (8002a64 <HAL_InitTick+0xec>)
 80029e0:	4a21      	ldr	r2, [pc, #132]	@ (8002a68 <HAL_InitTick+0xf0>)
 80029e2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80029e4:	4b1f      	ldr	r3, [pc, #124]	@ (8002a64 <HAL_InitTick+0xec>)
 80029e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80029ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002a64 <HAL_InitTick+0xec>)
 80029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029f2:	4b1c      	ldr	r3, [pc, #112]	@ (8002a64 <HAL_InitTick+0xec>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a64 <HAL_InitTick+0xec>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029fe:	4b19      	ldr	r3, [pc, #100]	@ (8002a64 <HAL_InitTick+0xec>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8002a04:	4817      	ldr	r0, [pc, #92]	@ (8002a64 <HAL_InitTick+0xec>)
 8002a06:	f005 fb77 	bl	80080f8 <HAL_TIM_Base_Init>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002a10:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d11b      	bne.n	8002a50 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002a18:	4812      	ldr	r0, [pc, #72]	@ (8002a64 <HAL_InitTick+0xec>)
 8002a1a:	f005 fbbd 	bl	8008198 <HAL_TIM_Base_Start_IT>
 8002a1e:	4603      	mov	r3, r0
 8002a20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002a24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d111      	bne.n	8002a50 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002a2c:	2036      	movs	r0, #54	@ 0x36
 8002a2e:	f000 fb71 	bl	8003114 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2b0f      	cmp	r3, #15
 8002a36:	d808      	bhi.n	8002a4a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002a38:	2200      	movs	r2, #0
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	2036      	movs	r0, #54	@ 0x36
 8002a3e:	f000 fb4d 	bl	80030dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a42:	4a0a      	ldr	r2, [pc, #40]	@ (8002a6c <HAL_InitTick+0xf4>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6013      	str	r3, [r2, #0]
 8002a48:	e002      	b.n	8002a50 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002a50:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3738      	adds	r7, #56	@ 0x38
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	40023800 	.word	0x40023800
 8002a60:	431bde83 	.word	0x431bde83
 8002a64:	20025d68 	.word	0x20025d68
 8002a68:	40001000 	.word	0x40001000
 8002a6c:	20000008 	.word	0x20000008

08002a70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a74:	bf00      	nop
 8002a76:	e7fd      	b.n	8002a74 <NMI_Handler+0x4>

08002a78 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <HardFault_Handler+0x4>

08002a80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a84:	bf00      	nop
 8002a86:	e7fd      	b.n	8002a84 <MemManage_Handler+0x4>

08002a88 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a8c:	bf00      	nop
 8002a8e:	e7fd      	b.n	8002a8c <BusFault_Handler+0x4>

08002a90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a90:	b480      	push	{r7}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a94:	bf00      	nop
 8002a96:	e7fd      	b.n	8002a94 <UsageFault_Handler+0x4>

08002a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002aac:	4802      	ldr	r0, [pc, #8]	@ (8002ab8 <TIM6_DAC_IRQHandler+0x10>)
 8002aae:	f005 fbe3 	bl	8008278 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ab2:	bf00      	nop
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20025d68 	.word	0x20025d68

08002abc <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8002ac0:	4802      	ldr	r0, [pc, #8]	@ (8002acc <DMA2_Stream4_IRQHandler+0x10>)
 8002ac2:	f000 fc57 	bl	8003374 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	20025d08 	.word	0x20025d08

08002ad0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8002ad4:	4802      	ldr	r0, [pc, #8]	@ (8002ae0 <OTG_HS_IRQHandler+0x10>)
 8002ad6:	f001 fa68 	bl	8003faa <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002ada:	bf00      	nop
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20025f34 	.word	0x20025f34

08002ae4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8002ae8:	4802      	ldr	r0, [pc, #8]	@ (8002af4 <LTDC_IRQHandler+0x10>)
 8002aea:	f003 fa95 	bl	8006018 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8002aee:	bf00      	nop
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	20025bec 	.word	0x20025bec

08002af8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8002afc:	4802      	ldr	r0, [pc, #8]	@ (8002b08 <DMA2D_IRQHandler+0x10>)
 8002afe:	f000 feec 	bl	80038da <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8002b02:	bf00      	nop
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	20000200 	.word	0x20000200

08002b0c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  return 1;
 8002b10:	2301      	movs	r3, #1
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <_kill>:

int _kill(int pid, int sig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b26:	f009 f893 	bl	800bc50 <__errno>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2216      	movs	r2, #22
 8002b2e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b30:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_exit>:

void _exit (int status)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b44:	f04f 31ff 	mov.w	r1, #4294967295
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff ffe7 	bl	8002b1c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b4e:	bf00      	nop
 8002b50:	e7fd      	b.n	8002b4e <_exit+0x12>

08002b52 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b086      	sub	sp, #24
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	60f8      	str	r0, [r7, #12]
 8002b5a:	60b9      	str	r1, [r7, #8]
 8002b5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	617b      	str	r3, [r7, #20]
 8002b62:	e00a      	b.n	8002b7a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b64:	f3af 8000 	nop.w
 8002b68:	4601      	mov	r1, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	60ba      	str	r2, [r7, #8]
 8002b70:	b2ca      	uxtb	r2, r1
 8002b72:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3301      	adds	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	697a      	ldr	r2, [r7, #20]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	dbf0      	blt.n	8002b64 <_read+0x12>
  }

  return len;
 8002b82:	687b      	ldr	r3, [r7, #4]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3718      	adds	r7, #24
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <_close>:
  }
  return len;
}

int _close(int file)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bb4:	605a      	str	r2, [r3, #4]
  return 0;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_isatty>:

int _isatty(int file)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bcc:	2301      	movs	r3, #1
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	60f8      	str	r0, [r7, #12]
 8002be2:	60b9      	str	r1, [r7, #8]
 8002be4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bfc:	4a14      	ldr	r2, [pc, #80]	@ (8002c50 <_sbrk+0x5c>)
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <_sbrk+0x60>)
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c08:	4b13      	ldr	r3, [pc, #76]	@ (8002c58 <_sbrk+0x64>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d102      	bne.n	8002c16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <_sbrk+0x64>)
 8002c12:	4a12      	ldr	r2, [pc, #72]	@ (8002c5c <_sbrk+0x68>)
 8002c14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c16:	4b10      	ldr	r3, [pc, #64]	@ (8002c58 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4413      	add	r3, r2
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d207      	bcs.n	8002c34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c24:	f009 f814 	bl	800bc50 <__errno>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c32:	e009      	b.n	8002c48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c34:	4b08      	ldr	r3, [pc, #32]	@ (8002c58 <_sbrk+0x64>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c3a:	4b07      	ldr	r3, [pc, #28]	@ (8002c58 <_sbrk+0x64>)
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4413      	add	r3, r2
 8002c42:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <_sbrk+0x64>)
 8002c44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c46:	68fb      	ldr	r3, [r7, #12]
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20030000 	.word	0x20030000
 8002c54:	00000400 	.word	0x00000400
 8002c58:	20025db0 	.word	0x20025db0
 8002c5c:	20026460 	.word	0x20026460

08002c60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c64:	4b06      	ldr	r3, [pc, #24]	@ (8002c80 <SystemInit+0x20>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c6a:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <SystemInit+0x20>)
 8002c6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b086      	sub	sp, #24
 8002c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c8a:	f107 0308 	add.w	r3, r7, #8
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c98:	463b      	mov	r3, r7
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002ca0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002ca2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d20 <MX_TIM1_Init+0x9c>)
 8002ca4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002ca6:	4b1d      	ldr	r3, [pc, #116]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cac:	4b1b      	ldr	r3, [pc, #108]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002cb4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cba:	4b18      	ldr	r3, [pc, #96]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002cc0:	4b16      	ldr	r3, [pc, #88]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002ccc:	4813      	ldr	r0, [pc, #76]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002cce:	f005 fa13 	bl	80080f8 <HAL_TIM_Base_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8002cd8:	f7ff fd4c 	bl	8002774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ce0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	480c      	ldr	r0, [pc, #48]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002cea:	f005 fbb5 	bl	8008458 <HAL_TIM_ConfigClockSource>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d001      	beq.n	8002cf8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8002cf4:	f7ff fd3e 	bl	8002774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d00:	463b      	mov	r3, r7
 8002d02:	4619      	mov	r1, r3
 8002d04:	4805      	ldr	r0, [pc, #20]	@ (8002d1c <MX_TIM1_Init+0x98>)
 8002d06:	f005 fddd 	bl	80088c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002d10:	f7ff fd30 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d14:	bf00      	nop
 8002d16:	3718      	adds	r7, #24
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20025db4 	.word	0x20025db4
 8002d20:	40010000 	.word	0x40010000

08002d24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b085      	sub	sp, #20
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a0b      	ldr	r2, [pc, #44]	@ (8002d60 <HAL_TIM_Base_MspInit+0x3c>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d10d      	bne.n	8002d52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d64 <HAL_TIM_Base_MspInit+0x40>)
 8002d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3e:	4a09      	ldr	r2, [pc, #36]	@ (8002d64 <HAL_TIM_Base_MspInit+0x40>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d46:	4b07      	ldr	r3, [pc, #28]	@ (8002d64 <HAL_TIM_Base_MspInit+0x40>)
 8002d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40010000 	.word	0x40010000
 8002d64:	40023800 	.word	0x40023800

08002d68 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d6c:	4b11      	ldr	r3, [pc, #68]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d6e:	4a12      	ldr	r2, [pc, #72]	@ (8002db8 <MX_USART1_UART_Init+0x50>)
 8002d70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d72:	4b10      	ldr	r3, [pc, #64]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002d78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d80:	4b0c      	ldr	r3, [pc, #48]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d86:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d8c:	4b09      	ldr	r3, [pc, #36]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d8e:	220c      	movs	r2, #12
 8002d90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d92:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d98:	4b06      	ldr	r3, [pc, #24]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d9e:	4805      	ldr	r0, [pc, #20]	@ (8002db4 <MX_USART1_UART_Init+0x4c>)
 8002da0:	f005 fe20 	bl	80089e4 <HAL_UART_Init>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002daa:	f7ff fce3 	bl	8002774 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20025dfc 	.word	0x20025dfc
 8002db8:	40011000 	.word	0x40011000

08002dbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	@ 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dc4:	f107 0314 	add.w	r3, r7, #20
 8002dc8:	2200      	movs	r2, #0
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	605a      	str	r2, [r3, #4]
 8002dce:	609a      	str	r2, [r3, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
 8002dd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a19      	ldr	r2, [pc, #100]	@ (8002e40 <HAL_UART_MspInit+0x84>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d12c      	bne.n	8002e38 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
 8002de2:	4b18      	ldr	r3, [pc, #96]	@ (8002e44 <HAL_UART_MspInit+0x88>)
 8002de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de6:	4a17      	ldr	r2, [pc, #92]	@ (8002e44 <HAL_UART_MspInit+0x88>)
 8002de8:	f043 0310 	orr.w	r3, r3, #16
 8002dec:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dee:	4b15      	ldr	r3, [pc, #84]	@ (8002e44 <HAL_UART_MspInit+0x88>)
 8002df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <HAL_UART_MspInit+0x88>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e02:	4a10      	ldr	r2, [pc, #64]	@ (8002e44 <HAL_UART_MspInit+0x88>)
 8002e04:	f043 0301 	orr.w	r3, r3, #1
 8002e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <HAL_UART_MspInit+0x88>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002e16:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002e1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e1c:	2302      	movs	r3, #2
 8002e1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e24:	2303      	movs	r3, #3
 8002e26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002e28:	2307      	movs	r3, #7
 8002e2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e2c:	f107 0314 	add.w	r3, r7, #20
 8002e30:	4619      	mov	r1, r3
 8002e32:	4805      	ldr	r0, [pc, #20]	@ (8002e48 <HAL_UART_MspInit+0x8c>)
 8002e34:	f000 fef4 	bl	8003c20 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002e38:	bf00      	nop
 8002e3a:	3728      	adds	r7, #40	@ 0x28
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40011000 	.word	0x40011000
 8002e44:	40023800 	.word	0x40023800
 8002e48:	40020000 	.word	0x40020000

08002e4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002e4c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002e50:	f7ff ff06 	bl	8002c60 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e54:	480c      	ldr	r0, [pc, #48]	@ (8002e88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e56:	490d      	ldr	r1, [pc, #52]	@ (8002e8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e58:	4a0d      	ldr	r2, [pc, #52]	@ (8002e90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e5c:	e002      	b.n	8002e64 <LoopCopyDataInit>

08002e5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e62:	3304      	adds	r3, #4

08002e64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e68:	d3f9      	bcc.n	8002e5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8002e94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e6c:	4c0a      	ldr	r4, [pc, #40]	@ (8002e98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e70:	e001      	b.n	8002e76 <LoopFillZerobss>

08002e72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e74:	3204      	adds	r2, #4

08002e76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e78:	d3fb      	bcc.n	8002e72 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e7a:	f008 feef 	bl	800bc5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e7e:	f7ff fba7 	bl	80025d0 <main>
  bx  lr    
 8002e82:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002e84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002e88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e8c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002e90:	0800eb50 	.word	0x0800eb50
  ldr r2, =_sbss
 8002e94:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002e98:	20026460 	.word	0x20026460

08002e9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e9c:	e7fe      	b.n	8002e9c <ADC_IRQHandler>
	...

08002ea0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee0 <HAL_Init+0x40>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ee0 <HAL_Init+0x40>)
 8002eaa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002eae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <HAL_Init+0x40>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <HAL_Init+0x40>)
 8002eb6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002eba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ebc:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <HAL_Init+0x40>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a07      	ldr	r2, [pc, #28]	@ (8002ee0 <HAL_Init+0x40>)
 8002ec2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ec6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f000 f8fc 	bl	80030c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ece:	200f      	movs	r0, #15
 8002ed0:	f7ff fd52 	bl	8002978 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed4:	f7ff fd24 	bl	8002920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40023c00 	.word	0x40023c00

08002ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee8:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <HAL_IncTick+0x20>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	461a      	mov	r2, r3
 8002eee:	4b06      	ldr	r3, [pc, #24]	@ (8002f08 <HAL_IncTick+0x24>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	4a04      	ldr	r2, [pc, #16]	@ (8002f08 <HAL_IncTick+0x24>)
 8002ef6:	6013      	str	r3, [r2, #0]
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	2000000c 	.word	0x2000000c
 8002f08:	20025e44 	.word	0x20025e44

08002f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002f10:	4b03      	ldr	r3, [pc, #12]	@ (8002f20 <HAL_GetTick+0x14>)
 8002f12:	681b      	ldr	r3, [r3, #0]
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	20025e44 	.word	0x20025e44

08002f24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f2c:	f7ff ffee 	bl	8002f0c <HAL_GetTick>
 8002f30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f3c:	d005      	beq.n	8002f4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f3e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f68 <HAL_Delay+0x44>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4413      	add	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f4a:	bf00      	nop
 8002f4c:	f7ff ffde 	bl	8002f0c <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d8f7      	bhi.n	8002f4c <HAL_Delay+0x28>
  {
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	2000000c 	.word	0x2000000c

08002f6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0307 	and.w	r3, r3, #7
 8002f7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f7e:	68db      	ldr	r3, [r3, #12]
 8002f80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f88:	4013      	ands	r3, r2
 8002f8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f94:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f9e:	4a04      	ldr	r2, [pc, #16]	@ (8002fb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	60d3      	str	r3, [r2, #12]
}
 8002fa4:	bf00      	nop
 8002fa6:	3714      	adds	r7, #20
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fae:	4770      	bx	lr
 8002fb0:	e000ed00 	.word	0xe000ed00

08002fb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fb8:	4b04      	ldr	r3, [pc, #16]	@ (8002fcc <__NVIC_GetPriorityGrouping+0x18>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	0a1b      	lsrs	r3, r3, #8
 8002fbe:	f003 0307 	and.w	r3, r3, #7
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000ed00 	.word	0xe000ed00

08002fd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b083      	sub	sp, #12
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db0b      	blt.n	8002ffa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 021f 	and.w	r2, r3, #31
 8002fe8:	4907      	ldr	r1, [pc, #28]	@ (8003008 <__NVIC_EnableIRQ+0x38>)
 8002fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fee:	095b      	lsrs	r3, r3, #5
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	e000e100 	.word	0xe000e100

0800300c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800300c:	b480      	push	{r7}
 800300e:	b083      	sub	sp, #12
 8003010:	af00      	add	r7, sp, #0
 8003012:	4603      	mov	r3, r0
 8003014:	6039      	str	r1, [r7, #0]
 8003016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301c:	2b00      	cmp	r3, #0
 800301e:	db0a      	blt.n	8003036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	b2da      	uxtb	r2, r3
 8003024:	490c      	ldr	r1, [pc, #48]	@ (8003058 <__NVIC_SetPriority+0x4c>)
 8003026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302a:	0112      	lsls	r2, r2, #4
 800302c:	b2d2      	uxtb	r2, r2
 800302e:	440b      	add	r3, r1
 8003030:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003034:	e00a      	b.n	800304c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	b2da      	uxtb	r2, r3
 800303a:	4908      	ldr	r1, [pc, #32]	@ (800305c <__NVIC_SetPriority+0x50>)
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	3b04      	subs	r3, #4
 8003044:	0112      	lsls	r2, r2, #4
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	440b      	add	r3, r1
 800304a:	761a      	strb	r2, [r3, #24]
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	e000e100 	.word	0xe000e100
 800305c:	e000ed00 	.word	0xe000ed00

08003060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003060:	b480      	push	{r7}
 8003062:	b089      	sub	sp, #36	@ 0x24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f1c3 0307 	rsb	r3, r3, #7
 800307a:	2b04      	cmp	r3, #4
 800307c:	bf28      	it	cs
 800307e:	2304      	movcs	r3, #4
 8003080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	3304      	adds	r3, #4
 8003086:	2b06      	cmp	r3, #6
 8003088:	d902      	bls.n	8003090 <NVIC_EncodePriority+0x30>
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	3b03      	subs	r3, #3
 800308e:	e000      	b.n	8003092 <NVIC_EncodePriority+0x32>
 8003090:	2300      	movs	r3, #0
 8003092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003094:	f04f 32ff 	mov.w	r2, #4294967295
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	fa02 f303 	lsl.w	r3, r2, r3
 800309e:	43da      	mvns	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	401a      	ands	r2, r3
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030a8:	f04f 31ff 	mov.w	r1, #4294967295
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	43d9      	mvns	r1, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	4313      	orrs	r3, r2
         );
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr

080030c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff ff4c 	bl	8002f6c <__NVIC_SetPriorityGrouping>
}
 80030d4:	bf00      	nop
 80030d6:	3708      	adds	r7, #8
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}

080030dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	4603      	mov	r3, r0
 80030e4:	60b9      	str	r1, [r7, #8]
 80030e6:	607a      	str	r2, [r7, #4]
 80030e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030ee:	f7ff ff61 	bl	8002fb4 <__NVIC_GetPriorityGrouping>
 80030f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68b9      	ldr	r1, [r7, #8]
 80030f8:	6978      	ldr	r0, [r7, #20]
 80030fa:	f7ff ffb1 	bl	8003060 <NVIC_EncodePriority>
 80030fe:	4602      	mov	r2, r0
 8003100:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003104:	4611      	mov	r1, r2
 8003106:	4618      	mov	r0, r3
 8003108:	f7ff ff80 	bl	800300c <__NVIC_SetPriority>
}
 800310c:	bf00      	nop
 800310e:	3718      	adds	r7, #24
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b082      	sub	sp, #8
 8003118:	af00      	add	r7, sp, #0
 800311a:	4603      	mov	r3, r0
 800311c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800311e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff54 	bl	8002fd0 <__NVIC_EnableIRQ>
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e00e      	b.n	8003160 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	795b      	ldrb	r3, [r3, #5]
 8003146:	b2db      	uxtb	r3, r3
 8003148:	2b00      	cmp	r3, #0
 800314a:	d105      	bne.n	8003158 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd fee2 	bl	8000f1c <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800315e:	2300      	movs	r3, #0
}
 8003160:	4618      	mov	r0, r3
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003170:	2300      	movs	r3, #0
 8003172:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003174:	f7ff feca 	bl	8002f0c <HAL_GetTick>
 8003178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d101      	bne.n	8003184 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e099      	b.n	80032b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2202      	movs	r2, #2
 8003188:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f022 0201 	bic.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a4:	e00f      	b.n	80031c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031a6:	f7ff feb1 	bl	8002f0c <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d908      	bls.n	80031c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2220      	movs	r2, #32
 80031b8:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2203      	movs	r2, #3
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e078      	b.n	80032b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0301 	and.w	r3, r3, #1
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1e8      	bne.n	80031a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031dc:	697a      	ldr	r2, [r7, #20]
 80031de:	4b38      	ldr	r3, [pc, #224]	@ (80032c0 <HAL_DMA_Init+0x158>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800320a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800321c:	2b04      	cmp	r3, #4
 800321e:	d107      	bne.n	8003230 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	4313      	orrs	r3, r2
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	697a      	ldr	r2, [r7, #20]
 8003236:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f023 0307 	bic.w	r3, r3, #7
 8003246:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003256:	2b04      	cmp	r3, #4
 8003258:	d117      	bne.n	800328a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	4313      	orrs	r3, r2
 8003262:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00e      	beq.n	800328a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 fa6f 	bl	8003750 <DMA_CheckFifoParam>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d008      	beq.n	800328a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2240      	movs	r2, #64	@ 0x40
 800327c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003286:	2301      	movs	r3, #1
 8003288:	e016      	b.n	80032b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	697a      	ldr	r2, [r7, #20]
 8003290:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fa26 	bl	80036e4 <DMA_CalcBaseAndBitshift>
 8003298:	4603      	mov	r3, r0
 800329a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a0:	223f      	movs	r2, #63	@ 0x3f
 80032a2:	409a      	lsls	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2201      	movs	r2, #1
 80032b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80032b6:	2300      	movs	r3, #0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	f010803f 	.word	0xf010803f

080032c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b086      	sub	sp, #24
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	60f8      	str	r0, [r7, #12]
 80032cc:	60b9      	str	r1, [r7, #8]
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032d2:	2300      	movs	r3, #0
 80032d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <HAL_DMA_Start_IT+0x26>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e040      	b.n	800336c <HAL_DMA_Start_IT+0xa8>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d12f      	bne.n	800335e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	68f8      	ldr	r0, [r7, #12]
 8003314:	f000 f9b8 	bl	8003688 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800331c:	223f      	movs	r2, #63	@ 0x3f
 800331e:	409a      	lsls	r2, r3
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f042 0216 	orr.w	r2, r2, #22
 8003332:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f042 0208 	orr.w	r2, r2, #8
 800334a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e005      	b.n	800336a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800336a:	7dfb      	ldrb	r3, [r7, #23]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}

08003374 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800337c:	2300      	movs	r3, #0
 800337e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003380:	4b8e      	ldr	r3, [pc, #568]	@ (80035bc <HAL_DMA_IRQHandler+0x248>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a8e      	ldr	r2, [pc, #568]	@ (80035c0 <HAL_DMA_IRQHandler+0x24c>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	0a9b      	lsrs	r3, r3, #10
 800338c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003392:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800339e:	2208      	movs	r2, #8
 80033a0:	409a      	lsls	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	4013      	ands	r3, r2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d01a      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0304 	and.w	r3, r3, #4
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d013      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0204 	bic.w	r2, r2, #4
 80033c6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	2208      	movs	r2, #8
 80033ce:	409a      	lsls	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033d8:	f043 0201 	orr.w	r2, r3, #1
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4013      	ands	r3, r2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d012      	beq.n	8003416 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003402:	2201      	movs	r2, #1
 8003404:	409a      	lsls	r2, r3
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	2204      	movs	r2, #4
 800341c:	409a      	lsls	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4013      	ands	r3, r2
 8003422:	2b00      	cmp	r3, #0
 8003424:	d012      	beq.n	800344c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00b      	beq.n	800344c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003438:	2204      	movs	r2, #4
 800343a:	409a      	lsls	r2, r3
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003444:	f043 0204 	orr.w	r2, r3, #4
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003450:	2210      	movs	r2, #16
 8003452:	409a      	lsls	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	4013      	ands	r3, r2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d043      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0308 	and.w	r3, r3, #8
 8003466:	2b00      	cmp	r3, #0
 8003468:	d03c      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800346e:	2210      	movs	r2, #16
 8003470:	409a      	lsls	r2, r3
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d018      	beq.n	80034b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d108      	bne.n	80034a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d024      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	4798      	blx	r3
 80034a2:	e01f      	b.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	4798      	blx	r3
 80034b4:	e016      	b.n	80034e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d107      	bne.n	80034d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0208 	bic.w	r2, r2, #8
 80034d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e8:	2220      	movs	r2, #32
 80034ea:	409a      	lsls	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 808f 	beq.w	8003614 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0310 	and.w	r3, r3, #16
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 8087 	beq.w	8003614 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350a:	2220      	movs	r2, #32
 800350c:	409a      	lsls	r2, r3
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003518:	b2db      	uxtb	r3, r3
 800351a:	2b05      	cmp	r3, #5
 800351c:	d136      	bne.n	800358c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0216 	bic.w	r2, r2, #22
 800352c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d103      	bne.n	800354e <HAL_DMA_IRQHandler+0x1da>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0208 	bic.w	r2, r2, #8
 800355c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	223f      	movs	r2, #63	@ 0x3f
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2201      	movs	r2, #1
 800356e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357e:	2b00      	cmp	r3, #0
 8003580:	d07e      	beq.n	8003680 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	4798      	blx	r3
        }
        return;
 800358a:	e079      	b.n	8003680 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d01d      	beq.n	80035d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10d      	bne.n	80035c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d031      	beq.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e02c      	b.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
 80035ba:	bf00      	nop
 80035bc:	20000004 	.word	0x20000004
 80035c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d023      	beq.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	4798      	blx	r3
 80035d4:	e01e      	b.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d10f      	bne.n	8003604 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0210 	bic.w	r2, r2, #16
 80035f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003618:	2b00      	cmp	r3, #0
 800361a:	d032      	beq.n	8003682 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	d022      	beq.n	800366e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2205      	movs	r2, #5
 800362c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0201 	bic.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	3301      	adds	r3, #1
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	697a      	ldr	r2, [r7, #20]
 8003648:	429a      	cmp	r2, r3
 800364a:	d307      	bcc.n	800365c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f2      	bne.n	8003640 <HAL_DMA_IRQHandler+0x2cc>
 800365a:	e000      	b.n	800365e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800365c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d005      	beq.n	8003682 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
 800367e:	e000      	b.n	8003682 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003680:	bf00      	nop
    }
  }
}
 8003682:	3718      	adds	r7, #24
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80036a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b40      	cmp	r3, #64	@ 0x40
 80036b4:	d108      	bne.n	80036c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036c6:	e007      	b.n	80036d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68ba      	ldr	r2, [r7, #8]
 80036ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	60da      	str	r2, [r3, #12]
}
 80036d8:	bf00      	nop
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	3b10      	subs	r3, #16
 80036f4:	4a14      	ldr	r2, [pc, #80]	@ (8003748 <DMA_CalcBaseAndBitshift+0x64>)
 80036f6:	fba2 2303 	umull	r2, r3, r2, r3
 80036fa:	091b      	lsrs	r3, r3, #4
 80036fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036fe:	4a13      	ldr	r2, [pc, #76]	@ (800374c <DMA_CalcBaseAndBitshift+0x68>)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4413      	add	r3, r2
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b03      	cmp	r3, #3
 8003710:	d909      	bls.n	8003726 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800371a:	f023 0303 	bic.w	r3, r3, #3
 800371e:	1d1a      	adds	r2, r3, #4
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	659a      	str	r2, [r3, #88]	@ 0x58
 8003724:	e007      	b.n	8003736 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800372e:	f023 0303 	bic.w	r3, r3, #3
 8003732:	687a      	ldr	r2, [r7, #4]
 8003734:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800373a:	4618      	mov	r0, r3
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	aaaaaaab 	.word	0xaaaaaaab
 800374c:	0800e780 	.word	0x0800e780

08003750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003758:	2300      	movs	r3, #0
 800375a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d11f      	bne.n	80037aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b03      	cmp	r3, #3
 800376e:	d856      	bhi.n	800381e <DMA_CheckFifoParam+0xce>
 8003770:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <DMA_CheckFifoParam+0x28>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	08003789 	.word	0x08003789
 800377c:	0800379b 	.word	0x0800379b
 8003780:	08003789 	.word	0x08003789
 8003784:	0800381f 	.word	0x0800381f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d046      	beq.n	8003822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003798:	e043      	b.n	8003822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037a2:	d140      	bne.n	8003826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037a8:	e03d      	b.n	8003826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b2:	d121      	bne.n	80037f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d837      	bhi.n	800382a <DMA_CheckFifoParam+0xda>
 80037ba:	a201      	add	r2, pc, #4	@ (adr r2, 80037c0 <DMA_CheckFifoParam+0x70>)
 80037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c0:	080037d1 	.word	0x080037d1
 80037c4:	080037d7 	.word	0x080037d7
 80037c8:	080037d1 	.word	0x080037d1
 80037cc:	080037e9 	.word	0x080037e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
      break;
 80037d4:	e030      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037da:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d025      	beq.n	800382e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e6:	e022      	b.n	800382e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80037f0:	d11f      	bne.n	8003832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037f6:	e01c      	b.n	8003832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d903      	bls.n	8003806 <DMA_CheckFifoParam+0xb6>
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b03      	cmp	r3, #3
 8003802:	d003      	beq.n	800380c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003804:	e018      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	73fb      	strb	r3, [r7, #15]
      break;
 800380a:	e015      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003810:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00e      	beq.n	8003836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
      break;
 800381c:	e00b      	b.n	8003836 <DMA_CheckFifoParam+0xe6>
      break;
 800381e:	bf00      	nop
 8003820:	e00a      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
      break;
 8003822:	bf00      	nop
 8003824:	e008      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
      break;
 8003826:	bf00      	nop
 8003828:	e006      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
      break;
 800382a:	bf00      	nop
 800382c:	e004      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
      break;
 800382e:	bf00      	nop
 8003830:	e002      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
      break;   
 8003832:	bf00      	nop
 8003834:	e000      	b.n	8003838 <DMA_CheckFifoParam+0xe8>
      break;
 8003836:	bf00      	nop
    }
  } 
  
  return status; 
 8003838:	7bfb      	ldrb	r3, [r7, #15]
}
 800383a:	4618      	mov	r0, r3
 800383c:	3714      	adds	r7, #20
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
 8003846:	bf00      	nop

08003848 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b082      	sub	sp, #8
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e03b      	b.n	80038d2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fd fbc8 	bl	8001004 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685a      	ldr	r2, [r3, #4]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003898:	f023 0107 	bic.w	r1, r3, #7
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	430a      	orrs	r2, r1
 80038a6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ae:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80038b2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	68d1      	ldr	r1, [r2, #12]
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	430b      	orrs	r3, r1
 80038c0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b084      	sub	sp, #16
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d026      	beq.n	800394a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003902:	2b00      	cmp	r3, #0
 8003904:	d021      	beq.n	800394a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003914:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391a:	f043 0201 	orr.w	r2, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2201      	movs	r2, #1
 8003928:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2204      	movs	r2, #4
 800392e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d003      	beq.n	800394a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f003 0320 	and.w	r3, r3, #32
 8003950:	2b00      	cmp	r3, #0
 8003952:	d026      	beq.n	80039a2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d021      	beq.n	80039a2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800396c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2220      	movs	r2, #32
 8003974:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800397a:	f043 0202 	orr.w	r2, r3, #2
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2204      	movs	r2, #4
 8003986:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d003      	beq.n	80039a2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0308 	and.w	r3, r3, #8
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d026      	beq.n	80039fa <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d021      	beq.n	80039fa <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039c4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2208      	movs	r2, #8
 80039cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d2:	f043 0204 	orr.w	r2, r3, #4
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2204      	movs	r2, #4
 80039de:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d013      	beq.n	8003a2c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00e      	beq.n	8003a2c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a1c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2204      	movs	r2, #4
 8003a24:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f853 	bl	8003ad2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d024      	beq.n	8003a80 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d01f      	beq.n	8003a80 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a4e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2202      	movs	r2, #2
 8003a56:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01f      	beq.n	8003aca <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01a      	beq.n	8003aca <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003aa2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2210      	movs	r2, #16
 8003aaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f80e 	bl	8003ae6 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ad2:	b480      	push	{r7}
 8003ad4:	b083      	sub	sp, #12
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003ada:	bf00      	nop
 8003adc:	370c      	adds	r7, #12
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr

08003ae6 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003ae6:	b480      	push	{r7}
 8003ae8:	b083      	sub	sp, #12
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d101      	bne.n	8003b1c <HAL_DMA2D_ConfigLayer+0x20>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	e079      	b.n	8003c10 <HAL_DMA2D_ConfigLayer+0x114>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	3318      	adds	r3, #24
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	4413      	add	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	685a      	ldr	r2, [r3, #4]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	4313      	orrs	r3, r2
 8003b44:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003b46:	4b35      	ldr	r3, [pc, #212]	@ (8003c1c <HAL_DMA2D_ConfigLayer+0x120>)
 8003b48:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b0a      	cmp	r3, #10
 8003b50:	d003      	beq.n	8003b5a <HAL_DMA2D_ConfigLayer+0x5e>
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b09      	cmp	r3, #9
 8003b58:	d107      	bne.n	8003b6a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
 8003b68:	e005      	b.n	8003b76 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	68db      	ldr	r3, [r3, #12]
 8003b6e:	061b      	lsls	r3, r3, #24
 8003b70:	697a      	ldr	r2, [r7, #20]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d120      	bne.n	8003bbe <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	43db      	mvns	r3, r3
 8003b86:	ea02 0103 	and.w	r1, r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	6812      	ldr	r2, [r2, #0]
 8003b9c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	2b0a      	cmp	r3, #10
 8003ba4:	d003      	beq.n	8003bae <HAL_DMA2D_ConfigLayer+0xb2>
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b09      	cmp	r3, #9
 8003bac:	d127      	bne.n	8003bfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
 8003bbc:	e01f      	b.n	8003bfe <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	69da      	ldr	r2, [r3, #28]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	ea02 0103 	and.w	r1, r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	6812      	ldr	r2, [r2, #0]
 8003bde:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b0a      	cmp	r3, #10
 8003be6:	d003      	beq.n	8003bf0 <HAL_DMA2D_ConfigLayer+0xf4>
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b09      	cmp	r3, #9
 8003bee:	d106      	bne.n	8003bfe <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8003bfc:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	371c      	adds	r7, #28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr
 8003c1c:	ff03000f 	.word	0xff03000f

08003c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b089      	sub	sp, #36	@ 0x24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
 8003c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c36:	2300      	movs	r3, #0
 8003c38:	61fb      	str	r3, [r7, #28]
 8003c3a:	e177      	b.n	8003f2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	f040 8166 	bne.w	8003f26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f003 0303 	and.w	r3, r3, #3
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d005      	beq.n	8003c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d130      	bne.n	8003cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	2203      	movs	r2, #3
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ca8:	2201      	movs	r2, #1
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	43db      	mvns	r3, r3
 8003cb2:	69ba      	ldr	r2, [r7, #24]
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	091b      	lsrs	r3, r3, #4
 8003cbe:	f003 0201 	and.w	r2, r3, #1
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc8:	69ba      	ldr	r2, [r7, #24]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d017      	beq.n	8003d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2203      	movs	r2, #3
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	69ba      	ldr	r2, [r7, #24]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	005b      	lsls	r3, r3, #1
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69ba      	ldr	r2, [r7, #24]
 8003d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f003 0303 	and.w	r3, r3, #3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d123      	bne.n	8003d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	08da      	lsrs	r2, r3, #3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	3208      	adds	r2, #8
 8003d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	220f      	movs	r2, #15
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	43db      	mvns	r3, r3
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	08da      	lsrs	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3208      	adds	r2, #8
 8003d5e:	69b9      	ldr	r1, [r7, #24]
 8003d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	2203      	movs	r2, #3
 8003d70:	fa02 f303 	lsl.w	r3, r2, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	69ba      	ldr	r2, [r7, #24]
 8003d78:	4013      	ands	r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 0203 	and.w	r2, r3, #3
 8003d84:	69fb      	ldr	r3, [r7, #28]
 8003d86:	005b      	lsls	r3, r3, #1
 8003d88:	fa02 f303 	lsl.w	r3, r2, r3
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 80c0 	beq.w	8003f26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	60fb      	str	r3, [r7, #12]
 8003daa:	4b66      	ldr	r3, [pc, #408]	@ (8003f44 <HAL_GPIO_Init+0x324>)
 8003dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dae:	4a65      	ldr	r2, [pc, #404]	@ (8003f44 <HAL_GPIO_Init+0x324>)
 8003db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003db6:	4b63      	ldr	r3, [pc, #396]	@ (8003f44 <HAL_GPIO_Init+0x324>)
 8003db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003dbe:	60fb      	str	r3, [r7, #12]
 8003dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003dc2:	4a61      	ldr	r2, [pc, #388]	@ (8003f48 <HAL_GPIO_Init+0x328>)
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	089b      	lsrs	r3, r3, #2
 8003dc8:	3302      	adds	r3, #2
 8003dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	220f      	movs	r2, #15
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a58      	ldr	r2, [pc, #352]	@ (8003f4c <HAL_GPIO_Init+0x32c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d037      	beq.n	8003e5e <HAL_GPIO_Init+0x23e>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a57      	ldr	r2, [pc, #348]	@ (8003f50 <HAL_GPIO_Init+0x330>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d031      	beq.n	8003e5a <HAL_GPIO_Init+0x23a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a56      	ldr	r2, [pc, #344]	@ (8003f54 <HAL_GPIO_Init+0x334>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d02b      	beq.n	8003e56 <HAL_GPIO_Init+0x236>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a55      	ldr	r2, [pc, #340]	@ (8003f58 <HAL_GPIO_Init+0x338>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d025      	beq.n	8003e52 <HAL_GPIO_Init+0x232>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a54      	ldr	r2, [pc, #336]	@ (8003f5c <HAL_GPIO_Init+0x33c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d01f      	beq.n	8003e4e <HAL_GPIO_Init+0x22e>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a53      	ldr	r2, [pc, #332]	@ (8003f60 <HAL_GPIO_Init+0x340>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d019      	beq.n	8003e4a <HAL_GPIO_Init+0x22a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a52      	ldr	r2, [pc, #328]	@ (8003f64 <HAL_GPIO_Init+0x344>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d013      	beq.n	8003e46 <HAL_GPIO_Init+0x226>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a51      	ldr	r2, [pc, #324]	@ (8003f68 <HAL_GPIO_Init+0x348>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00d      	beq.n	8003e42 <HAL_GPIO_Init+0x222>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a50      	ldr	r2, [pc, #320]	@ (8003f6c <HAL_GPIO_Init+0x34c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d007      	beq.n	8003e3e <HAL_GPIO_Init+0x21e>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4f      	ldr	r2, [pc, #316]	@ (8003f70 <HAL_GPIO_Init+0x350>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d101      	bne.n	8003e3a <HAL_GPIO_Init+0x21a>
 8003e36:	2309      	movs	r3, #9
 8003e38:	e012      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e3a:	230a      	movs	r3, #10
 8003e3c:	e010      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	e00e      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e42:	2307      	movs	r3, #7
 8003e44:	e00c      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e46:	2306      	movs	r3, #6
 8003e48:	e00a      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e4a:	2305      	movs	r3, #5
 8003e4c:	e008      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e4e:	2304      	movs	r3, #4
 8003e50:	e006      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e52:	2303      	movs	r3, #3
 8003e54:	e004      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e56:	2302      	movs	r3, #2
 8003e58:	e002      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <HAL_GPIO_Init+0x240>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	f002 0203 	and.w	r2, r2, #3
 8003e66:	0092      	lsls	r2, r2, #2
 8003e68:	4093      	lsls	r3, r2
 8003e6a:	69ba      	ldr	r2, [r7, #24]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e70:	4935      	ldr	r1, [pc, #212]	@ (8003f48 <HAL_GPIO_Init+0x328>)
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	089b      	lsrs	r3, r3, #2
 8003e76:	3302      	adds	r3, #2
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f74 <HAL_GPIO_Init+0x354>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e9a:	69ba      	ldr	r2, [r7, #24]
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ea2:	4a34      	ldr	r2, [pc, #208]	@ (8003f74 <HAL_GPIO_Init+0x354>)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea8:	4b32      	ldr	r3, [pc, #200]	@ (8003f74 <HAL_GPIO_Init+0x354>)
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	43db      	mvns	r3, r3
 8003eb2:	69ba      	ldr	r2, [r7, #24]
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ecc:	4a29      	ldr	r2, [pc, #164]	@ (8003f74 <HAL_GPIO_Init+0x354>)
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ed2:	4b28      	ldr	r3, [pc, #160]	@ (8003f74 <HAL_GPIO_Init+0x354>)
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	43db      	mvns	r3, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4013      	ands	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d003      	beq.n	8003ef6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ef6:	4a1f      	ldr	r2, [pc, #124]	@ (8003f74 <HAL_GPIO_Init+0x354>)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003efc:	4b1d      	ldr	r3, [pc, #116]	@ (8003f74 <HAL_GPIO_Init+0x354>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	43db      	mvns	r3, r3
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d003      	beq.n	8003f20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f20:	4a14      	ldr	r2, [pc, #80]	@ (8003f74 <HAL_GPIO_Init+0x354>)
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	61fb      	str	r3, [r7, #28]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	2b0f      	cmp	r3, #15
 8003f30:	f67f ae84 	bls.w	8003c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3724      	adds	r7, #36	@ 0x24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	40023800 	.word	0x40023800
 8003f48:	40013800 	.word	0x40013800
 8003f4c:	40020000 	.word	0x40020000
 8003f50:	40020400 	.word	0x40020400
 8003f54:	40020800 	.word	0x40020800
 8003f58:	40020c00 	.word	0x40020c00
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	40021400 	.word	0x40021400
 8003f64:	40021800 	.word	0x40021800
 8003f68:	40021c00 	.word	0x40021c00
 8003f6c:	40022000 	.word	0x40022000
 8003f70:	40022400 	.word	0x40022400
 8003f74:	40013c00 	.word	0x40013c00

08003f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	807b      	strh	r3, [r7, #2]
 8003f84:	4613      	mov	r3, r2
 8003f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f88:	787b      	ldrb	r3, [r7, #1]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f94:	e003      	b.n	8003f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f96:	887b      	ldrh	r3, [r7, #2]
 8003f98:	041a      	lsls	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	619a      	str	r2, [r3, #24]
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b086      	sub	sp, #24
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f005 faef 	bl	80095a4 <USB_GetMode>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	f040 80fb 	bne.w	80041c4 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f005 fab2 	bl	800953c <USB_ReadInterrupts>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	f000 80f1 	beq.w	80041c2 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f005 faa9 	bl	800953c <USB_ReadInterrupts>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ff4:	d104      	bne.n	8004000 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003ffe:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f005 fa99 	bl	800953c <USB_ReadInterrupts>
 800400a:	4603      	mov	r3, r0
 800400c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004014:	d104      	bne.n	8004020 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800401e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f005 fa89 	bl	800953c <USB_ReadInterrupts>
 800402a:	4603      	mov	r3, r0
 800402c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004030:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004034:	d104      	bne.n	8004040 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800403e:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f005 fa79 	bl	800953c <USB_ReadInterrupts>
 800404a:	4603      	mov	r3, r0
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b02      	cmp	r3, #2
 8004052:	d103      	bne.n	800405c <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2202      	movs	r2, #2
 800405a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f005 fa6b 	bl	800953c <USB_ReadInterrupts>
 8004066:	4603      	mov	r3, r0
 8004068:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800406c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004070:	d120      	bne.n	80040b4 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800407a:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0301 	and.w	r3, r3, #1
 8004088:	2b00      	cmp	r3, #0
 800408a:	d113      	bne.n	80040b4 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800408c:	2110      	movs	r1, #16
 800408e:	6938      	ldr	r0, [r7, #16]
 8004090:	f005 f99c 	bl	80093cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004094:	6938      	ldr	r0, [r7, #16]
 8004096:	f005 f9cb 	bl	8009430 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7a5b      	ldrb	r3, [r3, #9]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d105      	bne.n	80040ae <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2101      	movs	r1, #1
 80040a8:	4618      	mov	r0, r3
 80040aa:	f005 fa89 	bl	80095c0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f006 fdd2 	bl	800ac58 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f005 fa3f 	bl	800953c <USB_ReadInterrupts>
 80040be:	4603      	mov	r3, r0
 80040c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80040c8:	d102      	bne.n	80040d0 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f001 fca1 	bl	8005a12 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f005 fa31 	bl	800953c <USB_ReadInterrupts>
 80040da:	4603      	mov	r3, r0
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b08      	cmp	r3, #8
 80040e2:	d106      	bne.n	80040f2 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f006 fd9b 	bl	800ac20 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2208      	movs	r2, #8
 80040f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f005 fa20 	bl	800953c <USB_ReadInterrupts>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004102:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004106:	d139      	bne.n	800417c <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f005 fa94 	bl	800963a <USB_HC_ReadInterrupt>
 8004112:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004114:	2300      	movs	r3, #0
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	e025      	b.n	8004166 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	f003 030f 	and.w	r3, r3, #15
 8004120:	68ba      	ldr	r2, [r7, #8]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d018      	beq.n	8004160 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	4413      	add	r3, r2
 8004136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004140:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004144:	d106      	bne.n	8004154 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004146:	697b      	ldr	r3, [r7, #20]
 8004148:	b2db      	uxtb	r3, r3
 800414a:	4619      	mov	r1, r3
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f859 	bl	8004204 <HCD_HC_IN_IRQHandler>
 8004152:	e005      	b.n	8004160 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	b2db      	uxtb	r3, r3
 8004158:	4619      	mov	r1, r3
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 febb 	bl	8004ed6 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	3301      	adds	r3, #1
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	795b      	ldrb	r3, [r3, #5]
 800416a:	461a      	mov	r2, r3
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	4293      	cmp	r3, r2
 8004170:	d3d3      	bcc.n	800411a <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800417a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f005 f9db 	bl	800953c <USB_ReadInterrupts>
 8004186:	4603      	mov	r3, r0
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b10      	cmp	r3, #16
 800418e:	d101      	bne.n	8004194 <HAL_HCD_IRQHandler+0x1ea>
 8004190:	2301      	movs	r3, #1
 8004192:	e000      	b.n	8004196 <HAL_HCD_IRQHandler+0x1ec>
 8004194:	2300      	movs	r3, #0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d014      	beq.n	80041c4 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699a      	ldr	r2, [r3, #24]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0210 	bic.w	r2, r2, #16
 80041a8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f001 fb52 	bl	8005854 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0210 	orr.w	r2, r2, #16
 80041be:	619a      	str	r2, [r3, #24]
 80041c0:	e000      	b.n	80041c4 <HAL_HCD_IRQHandler+0x21a>
      return;
 80041c2:	bf00      	nop
    }
  }
}
 80041c4:	3718      	adds	r7, #24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b082      	sub	sp, #8
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d101      	bne.n	80041e0 <HAL_HCD_Stop+0x16>
 80041dc:	2302      	movs	r3, #2
 80041de:	e00d      	b.n	80041fc <HAL_HCD_Stop+0x32>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f005 fb55 	bl	800989c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	460b      	mov	r3, r1
 800420e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	78fa      	ldrb	r2, [r7, #3]
 8004220:	4611      	mov	r1, r2
 8004222:	4618      	mov	r0, r3
 8004224:	f005 f99d 	bl	8009562 <USB_ReadChInterrupts>
 8004228:	4603      	mov	r3, r0
 800422a:	f003 0304 	and.w	r3, r3, #4
 800422e:	2b04      	cmp	r3, #4
 8004230:	d11a      	bne.n	8004268 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004232:	78fb      	ldrb	r3, [r7, #3]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	4413      	add	r3, r2
 800423a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800423e:	461a      	mov	r2, r3
 8004240:	2304      	movs	r3, #4
 8004242:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	334d      	adds	r3, #77	@ 0x4d
 8004254:	2207      	movs	r2, #7
 8004256:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	78fa      	ldrb	r2, [r7, #3]
 800425e:	4611      	mov	r1, r2
 8004260:	4618      	mov	r0, r3
 8004262:	f005 f9fb 	bl	800965c <USB_HC_Halt>
 8004266:	e09e      	b.n	80043a6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	4611      	mov	r1, r2
 8004270:	4618      	mov	r0, r3
 8004272:	f005 f976 	bl	8009562 <USB_ReadChInterrupts>
 8004276:	4603      	mov	r3, r0
 8004278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800427c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004280:	d11b      	bne.n	80042ba <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004282:	78fb      	ldrb	r3, [r7, #3]
 8004284:	015a      	lsls	r2, r3, #5
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	4413      	add	r3, r2
 800428a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800428e:	461a      	mov	r2, r3
 8004290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004294:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004296:	78fa      	ldrb	r2, [r7, #3]
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	4613      	mov	r3, r2
 800429c:	011b      	lsls	r3, r3, #4
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	440b      	add	r3, r1
 80042a4:	334d      	adds	r3, #77	@ 0x4d
 80042a6:	2208      	movs	r2, #8
 80042a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	78fa      	ldrb	r2, [r7, #3]
 80042b0:	4611      	mov	r1, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f005 f9d2 	bl	800965c <USB_HC_Halt>
 80042b8:	e075      	b.n	80043a6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	78fa      	ldrb	r2, [r7, #3]
 80042c0:	4611      	mov	r1, r2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f005 f94d 	bl	8009562 <USB_ReadChInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f003 0308 	and.w	r3, r3, #8
 80042ce:	2b08      	cmp	r3, #8
 80042d0:	d11a      	bne.n	8004308 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80042d2:	78fb      	ldrb	r3, [r7, #3]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042de:	461a      	mov	r2, r3
 80042e0:	2308      	movs	r3, #8
 80042e2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80042e4:	78fa      	ldrb	r2, [r7, #3]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	4613      	mov	r3, r2
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	1a9b      	subs	r3, r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	440b      	add	r3, r1
 80042f2:	334d      	adds	r3, #77	@ 0x4d
 80042f4:	2206      	movs	r2, #6
 80042f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f005 f9ab 	bl	800965c <USB_HC_Halt>
 8004306:	e04e      	b.n	80043a6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	78fa      	ldrb	r2, [r7, #3]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f005 f926 	bl	8009562 <USB_ReadChInterrupts>
 8004316:	4603      	mov	r3, r0
 8004318:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004320:	d11b      	bne.n	800435a <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800432e:	461a      	mov	r2, r3
 8004330:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004334:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	011b      	lsls	r3, r3, #4
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	440b      	add	r3, r1
 8004344:	334d      	adds	r3, #77	@ 0x4d
 8004346:	2209      	movs	r2, #9
 8004348:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	78fa      	ldrb	r2, [r7, #3]
 8004350:	4611      	mov	r1, r2
 8004352:	4618      	mov	r0, r3
 8004354:	f005 f982 	bl	800965c <USB_HC_Halt>
 8004358:	e025      	b.n	80043a6 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	4611      	mov	r1, r2
 8004362:	4618      	mov	r0, r3
 8004364:	f005 f8fd 	bl	8009562 <USB_ReadChInterrupts>
 8004368:	4603      	mov	r3, r0
 800436a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800436e:	2b80      	cmp	r3, #128	@ 0x80
 8004370:	d119      	bne.n	80043a6 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	015a      	lsls	r2, r3, #5
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	4413      	add	r3, r2
 800437a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800437e:	461a      	mov	r2, r3
 8004380:	2380      	movs	r3, #128	@ 0x80
 8004382:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004384:	78fa      	ldrb	r2, [r7, #3]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	334d      	adds	r3, #77	@ 0x4d
 8004394:	2207      	movs	r2, #7
 8004396:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	78fa      	ldrb	r2, [r7, #3]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f005 f95b 	bl	800965c <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	4611      	mov	r1, r2
 80043ae:	4618      	mov	r0, r3
 80043b0:	f005 f8d7 	bl	8009562 <USB_ReadChInterrupts>
 80043b4:	4603      	mov	r3, r0
 80043b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043be:	d112      	bne.n	80043e6 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	78fa      	ldrb	r2, [r7, #3]
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f005 f947 	bl	800965c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043da:	461a      	mov	r2, r3
 80043dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043e0:	6093      	str	r3, [r2, #8]
 80043e2:	f000 bd75 	b.w	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	78fa      	ldrb	r2, [r7, #3]
 80043ec:	4611      	mov	r1, r2
 80043ee:	4618      	mov	r0, r3
 80043f0:	f005 f8b7 	bl	8009562 <USB_ReadChInterrupts>
 80043f4:	4603      	mov	r3, r0
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	f040 8128 	bne.w	8004650 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4413      	add	r3, r2
 8004408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800440c:	461a      	mov	r2, r3
 800440e:	2320      	movs	r3, #32
 8004410:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	440b      	add	r3, r1
 8004420:	331b      	adds	r3, #27
 8004422:	781b      	ldrb	r3, [r3, #0]
 8004424:	2b01      	cmp	r3, #1
 8004426:	d119      	bne.n	800445c <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004428:	78fa      	ldrb	r2, [r7, #3]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	011b      	lsls	r3, r3, #4
 8004430:	1a9b      	subs	r3, r3, r2
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	331b      	adds	r3, #27
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	015a      	lsls	r2, r3, #5
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4413      	add	r3, r2
 8004444:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	0151      	lsls	r1, r2, #5
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	440a      	add	r2, r1
 8004452:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800445a:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	799b      	ldrb	r3, [r3, #6]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d01b      	beq.n	800449c <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004464:	78fa      	ldrb	r2, [r7, #3]
 8004466:	6879      	ldr	r1, [r7, #4]
 8004468:	4613      	mov	r3, r2
 800446a:	011b      	lsls	r3, r3, #4
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	3330      	adds	r3, #48	@ 0x30
 8004474:	6819      	ldr	r1, [r3, #0]
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	015a      	lsls	r2, r3, #5
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	4413      	add	r3, r2
 800447e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	1ac9      	subs	r1, r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	4613      	mov	r3, r2
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	1a9b      	subs	r3, r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4403      	add	r3, r0
 8004498:	3338      	adds	r3, #56	@ 0x38
 800449a:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800449c:	78fa      	ldrb	r2, [r7, #3]
 800449e:	6879      	ldr	r1, [r7, #4]
 80044a0:	4613      	mov	r3, r2
 80044a2:	011b      	lsls	r3, r3, #4
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	440b      	add	r3, r1
 80044aa:	334d      	adds	r3, #77	@ 0x4d
 80044ac:	2201      	movs	r2, #1
 80044ae:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	011b      	lsls	r3, r3, #4
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	3344      	adds	r3, #68	@ 0x44
 80044c0:	2200      	movs	r2, #0
 80044c2:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044c4:	78fb      	ldrb	r3, [r7, #3]
 80044c6:	015a      	lsls	r2, r3, #5
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	4413      	add	r3, r2
 80044cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044d0:	461a      	mov	r2, r3
 80044d2:	2301      	movs	r3, #1
 80044d4:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044d6:	78fa      	ldrb	r2, [r7, #3]
 80044d8:	6879      	ldr	r1, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	011b      	lsls	r3, r3, #4
 80044de:	1a9b      	subs	r3, r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	440b      	add	r3, r1
 80044e4:	3326      	adds	r3, #38	@ 0x26
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00a      	beq.n	8004502 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044ec:	78fa      	ldrb	r2, [r7, #3]
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	4613      	mov	r3, r2
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	1a9b      	subs	r3, r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	3326      	adds	r3, #38	@ 0x26
 80044fc:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d110      	bne.n	8004524 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	4611      	mov	r1, r2
 800450a:	4618      	mov	r0, r3
 800450c:	f005 f8a6 	bl	800965c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451c:	461a      	mov	r2, r3
 800451e:	2310      	movs	r3, #16
 8004520:	6093      	str	r3, [r2, #8]
 8004522:	e03d      	b.n	80045a0 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	1a9b      	subs	r3, r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	3326      	adds	r3, #38	@ 0x26
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b03      	cmp	r3, #3
 8004538:	d00a      	beq.n	8004550 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 800453a:	78fa      	ldrb	r2, [r7, #3]
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	3326      	adds	r3, #38	@ 0x26
 800454a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800454c:	2b01      	cmp	r3, #1
 800454e:	d127      	bne.n	80045a0 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004550:	78fb      	ldrb	r3, [r7, #3]
 8004552:	015a      	lsls	r2, r3, #5
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4413      	add	r3, r2
 8004558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	0151      	lsls	r1, r2, #5
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	440a      	add	r2, r1
 8004566:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800456a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800456e:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	6879      	ldr	r1, [r7, #4]
 8004574:	4613      	mov	r3, r2
 8004576:	011b      	lsls	r3, r3, #4
 8004578:	1a9b      	subs	r3, r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	334c      	adds	r3, #76	@ 0x4c
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004584:	78fa      	ldrb	r2, [r7, #3]
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	334c      	adds	r3, #76	@ 0x4c
 8004594:	781a      	ldrb	r2, [r3, #0]
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	4619      	mov	r1, r3
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f006 fb6a 	bl	800ac74 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	799b      	ldrb	r3, [r3, #6]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d13b      	bne.n	8004620 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	3338      	adds	r3, #56	@ 0x38
 80045b8:	6819      	ldr	r1, [r3, #0]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4613      	mov	r3, r2
 80045c0:	011b      	lsls	r3, r3, #4
 80045c2:	1a9b      	subs	r3, r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4403      	add	r3, r0
 80045c8:	3328      	adds	r3, #40	@ 0x28
 80045ca:	881b      	ldrh	r3, [r3, #0]
 80045cc:	440b      	add	r3, r1
 80045ce:	1e59      	subs	r1, r3, #1
 80045d0:	78fa      	ldrb	r2, [r7, #3]
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	4613      	mov	r3, r2
 80045d6:	011b      	lsls	r3, r3, #4
 80045d8:	1a9b      	subs	r3, r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	4403      	add	r3, r0
 80045de:	3328      	adds	r3, #40	@ 0x28
 80045e0:	881b      	ldrh	r3, [r3, #0]
 80045e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80045e6:	f003 0301 	and.w	r3, r3, #1
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	f000 8470 	beq.w	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80045f0:	78fa      	ldrb	r2, [r7, #3]
 80045f2:	6879      	ldr	r1, [r7, #4]
 80045f4:	4613      	mov	r3, r2
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	1a9b      	subs	r3, r3, r2
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	333c      	adds	r3, #60	@ 0x3c
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	f083 0301 	eor.w	r3, r3, #1
 8004608:	b2d8      	uxtb	r0, r3
 800460a:	6879      	ldr	r1, [r7, #4]
 800460c:	4613      	mov	r3, r2
 800460e:	011b      	lsls	r3, r3, #4
 8004610:	1a9b      	subs	r3, r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	333c      	adds	r3, #60	@ 0x3c
 8004618:	4602      	mov	r2, r0
 800461a:	701a      	strb	r2, [r3, #0]
 800461c:	f000 bc58 	b.w	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	333c      	adds	r3, #60	@ 0x3c
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	f083 0301 	eor.w	r3, r3, #1
 8004638:	b2d8      	uxtb	r0, r3
 800463a:	6879      	ldr	r1, [r7, #4]
 800463c:	4613      	mov	r3, r2
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	1a9b      	subs	r3, r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	440b      	add	r3, r1
 8004646:	333c      	adds	r3, #60	@ 0x3c
 8004648:	4602      	mov	r2, r0
 800464a:	701a      	strb	r2, [r3, #0]
 800464c:	f000 bc40 	b.w	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	78fa      	ldrb	r2, [r7, #3]
 8004656:	4611      	mov	r1, r2
 8004658:	4618      	mov	r0, r3
 800465a:	f004 ff82 	bl	8009562 <USB_ReadChInterrupts>
 800465e:	4603      	mov	r3, r0
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b20      	cmp	r3, #32
 8004666:	d131      	bne.n	80046cc <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004668:	78fb      	ldrb	r3, [r7, #3]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	4413      	add	r3, r2
 8004670:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004674:	461a      	mov	r2, r3
 8004676:	2320      	movs	r3, #32
 8004678:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	331a      	adds	r3, #26
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	2b01      	cmp	r3, #1
 800468e:	f040 841f 	bne.w	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	6879      	ldr	r1, [r7, #4]
 8004696:	4613      	mov	r3, r2
 8004698:	011b      	lsls	r3, r3, #4
 800469a:	1a9b      	subs	r3, r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	440b      	add	r3, r1
 80046a0:	331b      	adds	r3, #27
 80046a2:	2201      	movs	r2, #1
 80046a4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	334d      	adds	r3, #77	@ 0x4d
 80046b6:	2203      	movs	r2, #3
 80046b8:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f004 ffca 	bl	800965c <USB_HC_Halt>
 80046c8:	f000 bc02 	b.w	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	78fa      	ldrb	r2, [r7, #3]
 80046d2:	4611      	mov	r1, r2
 80046d4:	4618      	mov	r0, r3
 80046d6:	f004 ff44 	bl	8009562 <USB_ReadChInterrupts>
 80046da:	4603      	mov	r3, r0
 80046dc:	f003 0302 	and.w	r3, r3, #2
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f040 8305 	bne.w	8004cf0 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046e6:	78fb      	ldrb	r3, [r7, #3]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046f2:	461a      	mov	r2, r3
 80046f4:	2302      	movs	r3, #2
 80046f6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80046f8:	78fa      	ldrb	r2, [r7, #3]
 80046fa:	6879      	ldr	r1, [r7, #4]
 80046fc:	4613      	mov	r3, r2
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	440b      	add	r3, r1
 8004706:	334d      	adds	r3, #77	@ 0x4d
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d114      	bne.n	8004738 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800470e:	78fa      	ldrb	r2, [r7, #3]
 8004710:	6879      	ldr	r1, [r7, #4]
 8004712:	4613      	mov	r3, r2
 8004714:	011b      	lsls	r3, r3, #4
 8004716:	1a9b      	subs	r3, r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	440b      	add	r3, r1
 800471c:	334d      	adds	r3, #77	@ 0x4d
 800471e:	2202      	movs	r2, #2
 8004720:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	334c      	adds	r3, #76	@ 0x4c
 8004732:	2201      	movs	r2, #1
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e2cc      	b.n	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	6879      	ldr	r1, [r7, #4]
 800473c:	4613      	mov	r3, r2
 800473e:	011b      	lsls	r3, r3, #4
 8004740:	1a9b      	subs	r3, r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	440b      	add	r3, r1
 8004746:	334d      	adds	r3, #77	@ 0x4d
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b06      	cmp	r3, #6
 800474c:	d114      	bne.n	8004778 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800474e:	78fa      	ldrb	r2, [r7, #3]
 8004750:	6879      	ldr	r1, [r7, #4]
 8004752:	4613      	mov	r3, r2
 8004754:	011b      	lsls	r3, r3, #4
 8004756:	1a9b      	subs	r3, r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	440b      	add	r3, r1
 800475c:	334d      	adds	r3, #77	@ 0x4d
 800475e:	2202      	movs	r2, #2
 8004760:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004762:	78fa      	ldrb	r2, [r7, #3]
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	4613      	mov	r3, r2
 8004768:	011b      	lsls	r3, r3, #4
 800476a:	1a9b      	subs	r3, r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	440b      	add	r3, r1
 8004770:	334c      	adds	r3, #76	@ 0x4c
 8004772:	2205      	movs	r2, #5
 8004774:	701a      	strb	r2, [r3, #0]
 8004776:	e2ac      	b.n	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	6879      	ldr	r1, [r7, #4]
 800477c:	4613      	mov	r3, r2
 800477e:	011b      	lsls	r3, r3, #4
 8004780:	1a9b      	subs	r3, r3, r2
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	440b      	add	r3, r1
 8004786:	334d      	adds	r3, #77	@ 0x4d
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	2b07      	cmp	r3, #7
 800478c:	d00b      	beq.n	80047a6 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800478e:	78fa      	ldrb	r2, [r7, #3]
 8004790:	6879      	ldr	r1, [r7, #4]
 8004792:	4613      	mov	r3, r2
 8004794:	011b      	lsls	r3, r3, #4
 8004796:	1a9b      	subs	r3, r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	440b      	add	r3, r1
 800479c:	334d      	adds	r3, #77	@ 0x4d
 800479e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80047a0:	2b09      	cmp	r3, #9
 80047a2:	f040 80a6 	bne.w	80048f2 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80047a6:	78fa      	ldrb	r2, [r7, #3]
 80047a8:	6879      	ldr	r1, [r7, #4]
 80047aa:	4613      	mov	r3, r2
 80047ac:	011b      	lsls	r3, r3, #4
 80047ae:	1a9b      	subs	r3, r3, r2
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	440b      	add	r3, r1
 80047b4:	334d      	adds	r3, #77	@ 0x4d
 80047b6:	2202      	movs	r2, #2
 80047b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80047ba:	78fa      	ldrb	r2, [r7, #3]
 80047bc:	6879      	ldr	r1, [r7, #4]
 80047be:	4613      	mov	r3, r2
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	440b      	add	r3, r1
 80047c8:	3344      	adds	r3, #68	@ 0x44
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	1c59      	adds	r1, r3, #1
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4403      	add	r3, r0
 80047da:	3344      	adds	r3, #68	@ 0x44
 80047dc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	3344      	adds	r3, #68	@ 0x44
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d943      	bls.n	800487c <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80047f4:	78fa      	ldrb	r2, [r7, #3]
 80047f6:	6879      	ldr	r1, [r7, #4]
 80047f8:	4613      	mov	r3, r2
 80047fa:	011b      	lsls	r3, r3, #4
 80047fc:	1a9b      	subs	r3, r3, r2
 80047fe:	009b      	lsls	r3, r3, #2
 8004800:	440b      	add	r3, r1
 8004802:	3344      	adds	r3, #68	@ 0x44
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	331a      	adds	r3, #26
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d123      	bne.n	8004866 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	6879      	ldr	r1, [r7, #4]
 8004822:	4613      	mov	r3, r2
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	1a9b      	subs	r3, r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	440b      	add	r3, r1
 800482c:	331b      	adds	r3, #27
 800482e:	2200      	movs	r2, #0
 8004830:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	331c      	adds	r3, #28
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004846:	78fb      	ldrb	r3, [r7, #3]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	78fa      	ldrb	r2, [r7, #3]
 8004856:	0151      	lsls	r1, r2, #5
 8004858:	693a      	ldr	r2, [r7, #16]
 800485a:	440a      	add	r2, r1
 800485c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004860:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004864:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	6879      	ldr	r1, [r7, #4]
 800486a:	4613      	mov	r3, r2
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	1a9b      	subs	r3, r3, r2
 8004870:	009b      	lsls	r3, r3, #2
 8004872:	440b      	add	r3, r1
 8004874:	334c      	adds	r3, #76	@ 0x4c
 8004876:	2204      	movs	r2, #4
 8004878:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800487a:	e229      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800487c:	78fa      	ldrb	r2, [r7, #3]
 800487e:	6879      	ldr	r1, [r7, #4]
 8004880:	4613      	mov	r3, r2
 8004882:	011b      	lsls	r3, r3, #4
 8004884:	1a9b      	subs	r3, r3, r2
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	440b      	add	r3, r1
 800488a:	334c      	adds	r3, #76	@ 0x4c
 800488c:	2202      	movs	r2, #2
 800488e:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	6879      	ldr	r1, [r7, #4]
 8004894:	4613      	mov	r3, r2
 8004896:	011b      	lsls	r3, r3, #4
 8004898:	1a9b      	subs	r3, r3, r2
 800489a:	009b      	lsls	r3, r3, #2
 800489c:	440b      	add	r3, r1
 800489e:	3326      	adds	r3, #38	@ 0x26
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00b      	beq.n	80048be <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80048a6:	78fa      	ldrb	r2, [r7, #3]
 80048a8:	6879      	ldr	r1, [r7, #4]
 80048aa:	4613      	mov	r3, r2
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	1a9b      	subs	r3, r3, r2
 80048b0:	009b      	lsls	r3, r3, #2
 80048b2:	440b      	add	r3, r1
 80048b4:	3326      	adds	r3, #38	@ 0x26
 80048b6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	f040 8209 	bne.w	8004cd0 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80048be:	78fb      	ldrb	r3, [r7, #3]
 80048c0:	015a      	lsls	r2, r3, #5
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	4413      	add	r3, r2
 80048c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80048d4:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048dc:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80048de:	78fb      	ldrb	r3, [r7, #3]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048ea:	461a      	mov	r2, r3
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80048f0:	e1ee      	b.n	8004cd0 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80048f2:	78fa      	ldrb	r2, [r7, #3]
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	011b      	lsls	r3, r3, #4
 80048fa:	1a9b      	subs	r3, r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	334d      	adds	r3, #77	@ 0x4d
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b05      	cmp	r3, #5
 8004906:	f040 80c8 	bne.w	8004a9a <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	334d      	adds	r3, #77	@ 0x4d
 800491a:	2202      	movs	r2, #2
 800491c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800491e:	78fa      	ldrb	r2, [r7, #3]
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	331b      	adds	r3, #27
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b01      	cmp	r3, #1
 8004932:	f040 81ce 	bne.w	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	3326      	adds	r3, #38	@ 0x26
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b03      	cmp	r3, #3
 800494a:	d16b      	bne.n	8004a24 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800494c:	78fa      	ldrb	r2, [r7, #3]
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	3348      	adds	r3, #72	@ 0x48
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1c59      	adds	r1, r3, #1
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4403      	add	r3, r0
 800496c:	3348      	adds	r3, #72	@ 0x48
 800496e:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	3348      	adds	r3, #72	@ 0x48
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	2b02      	cmp	r3, #2
 8004984:	d943      	bls.n	8004a0e <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004986:	78fa      	ldrb	r2, [r7, #3]
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	4613      	mov	r3, r2
 800498c:	011b      	lsls	r3, r3, #4
 800498e:	1a9b      	subs	r3, r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	440b      	add	r3, r1
 8004994:	3348      	adds	r3, #72	@ 0x48
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	331b      	adds	r3, #27
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80049ae:	78fa      	ldrb	r2, [r7, #3]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	011b      	lsls	r3, r3, #4
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	3344      	adds	r3, #68	@ 0x44
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d809      	bhi.n	80049d8 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80049c4:	78fa      	ldrb	r2, [r7, #3]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	011b      	lsls	r3, r3, #4
 80049cc:	1a9b      	subs	r3, r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	331c      	adds	r3, #28
 80049d4:	2201      	movs	r2, #1
 80049d6:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	0151      	lsls	r1, r2, #5
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	440a      	add	r2, r1
 80049ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049f6:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80049f8:	78fa      	ldrb	r2, [r7, #3]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	1a9b      	subs	r3, r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	334c      	adds	r3, #76	@ 0x4c
 8004a08:	2204      	movs	r2, #4
 8004a0a:	701a      	strb	r2, [r3, #0]
 8004a0c:	e014      	b.n	8004a38 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a0e:	78fa      	ldrb	r2, [r7, #3]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	1a9b      	subs	r3, r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	334c      	adds	r3, #76	@ 0x4c
 8004a1e:	2202      	movs	r2, #2
 8004a20:	701a      	strb	r2, [r3, #0]
 8004a22:	e009      	b.n	8004a38 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a24:	78fa      	ldrb	r2, [r7, #3]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	011b      	lsls	r3, r3, #4
 8004a2c:	1a9b      	subs	r3, r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	334c      	adds	r3, #76	@ 0x4c
 8004a34:	2202      	movs	r2, #2
 8004a36:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a38:	78fa      	ldrb	r2, [r7, #3]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	1a9b      	subs	r3, r3, r2
 8004a42:	009b      	lsls	r3, r3, #2
 8004a44:	440b      	add	r3, r1
 8004a46:	3326      	adds	r3, #38	@ 0x26
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004a4e:	78fa      	ldrb	r2, [r7, #3]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	4613      	mov	r3, r2
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	1a9b      	subs	r3, r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	440b      	add	r3, r1
 8004a5c:	3326      	adds	r3, #38	@ 0x26
 8004a5e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	f040 8136 	bne.w	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a66:	78fb      	ldrb	r3, [r7, #3]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a7c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a84:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a86:	78fb      	ldrb	r3, [r7, #3]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a92:	461a      	mov	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	e11b      	b.n	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004a9a:	78fa      	ldrb	r2, [r7, #3]
 8004a9c:	6879      	ldr	r1, [r7, #4]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	011b      	lsls	r3, r3, #4
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	440b      	add	r3, r1
 8004aa8:	334d      	adds	r3, #77	@ 0x4d
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b03      	cmp	r3, #3
 8004aae:	f040 8081 	bne.w	8004bb4 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ab2:	78fa      	ldrb	r2, [r7, #3]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	011b      	lsls	r3, r3, #4
 8004aba:	1a9b      	subs	r3, r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	334d      	adds	r3, #77	@ 0x4d
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ac6:	78fa      	ldrb	r2, [r7, #3]
 8004ac8:	6879      	ldr	r1, [r7, #4]
 8004aca:	4613      	mov	r3, r2
 8004acc:	011b      	lsls	r3, r3, #4
 8004ace:	1a9b      	subs	r3, r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	440b      	add	r3, r1
 8004ad4:	331b      	adds	r3, #27
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	f040 80fa 	bne.w	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ade:	78fa      	ldrb	r2, [r7, #3]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	1a9b      	subs	r3, r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	334c      	adds	r3, #76	@ 0x4c
 8004aee:	2202      	movs	r2, #2
 8004af0:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004af2:	78fb      	ldrb	r3, [r7, #3]
 8004af4:	015a      	lsls	r2, r3, #5
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4413      	add	r3, r2
 8004afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	0151      	lsls	r1, r2, #5
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	440a      	add	r2, r1
 8004b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b10:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004b12:	78fb      	ldrb	r3, [r7, #3]
 8004b14:	015a      	lsls	r2, r3, #5
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	78fa      	ldrb	r2, [r7, #3]
 8004b22:	0151      	lsls	r1, r2, #5
 8004b24:	693a      	ldr	r2, [r7, #16]
 8004b26:	440a      	add	r2, r1
 8004b28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b30:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004b32:	78fb      	ldrb	r3, [r7, #3]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	78fa      	ldrb	r2, [r7, #3]
 8004b42:	0151      	lsls	r1, r2, #5
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	440a      	add	r2, r1
 8004b48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004b4c:	f023 0320 	bic.w	r3, r3, #32
 8004b50:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	3326      	adds	r3, #38	@ 0x26
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d00b      	beq.n	8004b80 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3326      	adds	r3, #38	@ 0x26
 8004b78:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	f040 80a9 	bne.w	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b96:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b9e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ba0:	78fb      	ldrb	r3, [r7, #3]
 8004ba2:	015a      	lsls	r2, r3, #5
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bac:	461a      	mov	r2, r3
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6013      	str	r3, [r2, #0]
 8004bb2:	e08e      	b.n	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	334d      	adds	r3, #77	@ 0x4d
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b04      	cmp	r3, #4
 8004bc8:	d143      	bne.n	8004c52 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bca:	78fa      	ldrb	r2, [r7, #3]
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	4613      	mov	r3, r2
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	440b      	add	r3, r1
 8004bd8:	334d      	adds	r3, #77	@ 0x4d
 8004bda:	2202      	movs	r2, #2
 8004bdc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004bde:	78fa      	ldrb	r2, [r7, #3]
 8004be0:	6879      	ldr	r1, [r7, #4]
 8004be2:	4613      	mov	r3, r2
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	440b      	add	r3, r1
 8004bec:	334c      	adds	r3, #76	@ 0x4c
 8004bee:	2202      	movs	r2, #2
 8004bf0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004bf2:	78fa      	ldrb	r2, [r7, #3]
 8004bf4:	6879      	ldr	r1, [r7, #4]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	011b      	lsls	r3, r3, #4
 8004bfa:	1a9b      	subs	r3, r3, r2
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	440b      	add	r3, r1
 8004c00:	3326      	adds	r3, #38	@ 0x26
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00a      	beq.n	8004c1e <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004c08:	78fa      	ldrb	r2, [r7, #3]
 8004c0a:	6879      	ldr	r1, [r7, #4]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	011b      	lsls	r3, r3, #4
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	3326      	adds	r3, #38	@ 0x26
 8004c18:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d159      	bne.n	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	015a      	lsls	r2, r3, #5
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	4413      	add	r3, r2
 8004c26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c34:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c3c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	6013      	str	r3, [r2, #0]
 8004c50:	e03f      	b.n	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004c52:	78fa      	ldrb	r2, [r7, #3]
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	1a9b      	subs	r3, r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	334d      	adds	r3, #77	@ 0x4d
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	d126      	bne.n	8004cb6 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c68:	78fa      	ldrb	r2, [r7, #3]
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	4613      	mov	r3, r2
 8004c6e:	011b      	lsls	r3, r3, #4
 8004c70:	1a9b      	subs	r3, r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	440b      	add	r3, r1
 8004c76:	334d      	adds	r3, #77	@ 0x4d
 8004c78:	2202      	movs	r2, #2
 8004c7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c7c:	78fa      	ldrb	r2, [r7, #3]
 8004c7e:	6879      	ldr	r1, [r7, #4]
 8004c80:	4613      	mov	r3, r2
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	440b      	add	r3, r1
 8004c8a:	3344      	adds	r3, #68	@ 0x44
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	1c59      	adds	r1, r3, #1
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	4613      	mov	r3, r2
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	1a9b      	subs	r3, r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4403      	add	r3, r0
 8004c9c:	3344      	adds	r3, #68	@ 0x44
 8004c9e:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004ca0:	78fa      	ldrb	r2, [r7, #3]
 8004ca2:	6879      	ldr	r1, [r7, #4]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	440b      	add	r3, r1
 8004cae:	334c      	adds	r3, #76	@ 0x4c
 8004cb0:	2204      	movs	r2, #4
 8004cb2:	701a      	strb	r2, [r3, #0]
 8004cb4:	e00d      	b.n	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	334d      	adds	r3, #77	@ 0x4d
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	f000 8100 	beq.w	8004ece <HCD_HC_IN_IRQHandler+0xcca>
 8004cce:	e000      	b.n	8004cd2 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cd0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	011b      	lsls	r3, r3, #4
 8004cda:	1a9b      	subs	r3, r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	334c      	adds	r3, #76	@ 0x4c
 8004ce2:	781a      	ldrb	r2, [r3, #0]
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f005 ffc3 	bl	800ac74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cee:	e0ef      	b.n	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	78fa      	ldrb	r2, [r7, #3]
 8004cf6:	4611      	mov	r1, r2
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f004 fc32 	bl	8009562 <USB_ReadChInterrupts>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d04:	2b40      	cmp	r3, #64	@ 0x40
 8004d06:	d12f      	bne.n	8004d68 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d14:	461a      	mov	r2, r3
 8004d16:	2340      	movs	r3, #64	@ 0x40
 8004d18:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004d1a:	78fa      	ldrb	r2, [r7, #3]
 8004d1c:	6879      	ldr	r1, [r7, #4]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	334d      	adds	r3, #77	@ 0x4d
 8004d2a:	2205      	movs	r2, #5
 8004d2c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004d2e:	78fa      	ldrb	r2, [r7, #3]
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	4613      	mov	r3, r2
 8004d34:	011b      	lsls	r3, r3, #4
 8004d36:	1a9b      	subs	r3, r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	331a      	adds	r3, #26
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d44:	78fa      	ldrb	r2, [r7, #3]
 8004d46:	6879      	ldr	r1, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	011b      	lsls	r3, r3, #4
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	3344      	adds	r3, #68	@ 0x44
 8004d54:	2200      	movs	r2, #0
 8004d56:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	78fa      	ldrb	r2, [r7, #3]
 8004d5e:	4611      	mov	r1, r2
 8004d60:	4618      	mov	r0, r3
 8004d62:	f004 fc7b 	bl	800965c <USB_HC_Halt>
 8004d66:	e0b3      	b.n	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	78fa      	ldrb	r2, [r7, #3]
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4618      	mov	r0, r3
 8004d72:	f004 fbf6 	bl	8009562 <USB_ReadChInterrupts>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	f040 80a7 	bne.w	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d82:	78fa      	ldrb	r2, [r7, #3]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	011b      	lsls	r3, r3, #4
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3326      	adds	r3, #38	@ 0x26
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	2b03      	cmp	r3, #3
 8004d96:	d11b      	bne.n	8004dd0 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d98:	78fa      	ldrb	r2, [r7, #3]
 8004d9a:	6879      	ldr	r1, [r7, #4]
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	1a9b      	subs	r3, r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	440b      	add	r3, r1
 8004da6:	3344      	adds	r3, #68	@ 0x44
 8004da8:	2200      	movs	r2, #0
 8004daa:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004dac:	78fa      	ldrb	r2, [r7, #3]
 8004dae:	6879      	ldr	r1, [r7, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	011b      	lsls	r3, r3, #4
 8004db4:	1a9b      	subs	r3, r3, r2
 8004db6:	009b      	lsls	r3, r3, #2
 8004db8:	440b      	add	r3, r1
 8004dba:	334d      	adds	r3, #77	@ 0x4d
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f004 fc47 	bl	800965c <USB_HC_Halt>
 8004dce:	e03f      	b.n	8004e50 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004dd0:	78fa      	ldrb	r2, [r7, #3]
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	011b      	lsls	r3, r3, #4
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	440b      	add	r3, r1
 8004dde:	3326      	adds	r3, #38	@ 0x26
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d00a      	beq.n	8004dfc <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004de6:	78fa      	ldrb	r2, [r7, #3]
 8004de8:	6879      	ldr	r1, [r7, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	011b      	lsls	r3, r3, #4
 8004dee:	1a9b      	subs	r3, r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3326      	adds	r3, #38	@ 0x26
 8004df6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004df8:	2b02      	cmp	r3, #2
 8004dfa:	d129      	bne.n	8004e50 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004dfc:	78fa      	ldrb	r2, [r7, #3]
 8004dfe:	6879      	ldr	r1, [r7, #4]
 8004e00:	4613      	mov	r3, r2
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	1a9b      	subs	r3, r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	440b      	add	r3, r1
 8004e0a:	3344      	adds	r3, #68	@ 0x44
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	799b      	ldrb	r3, [r3, #6]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <HCD_HC_IN_IRQHandler+0xc2a>
 8004e18:	78fa      	ldrb	r2, [r7, #3]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	1a9b      	subs	r3, r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	331b      	adds	r3, #27
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d110      	bne.n	8004e50 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004e2e:	78fa      	ldrb	r2, [r7, #3]
 8004e30:	6879      	ldr	r1, [r7, #4]
 8004e32:	4613      	mov	r3, r2
 8004e34:	011b      	lsls	r3, r3, #4
 8004e36:	1a9b      	subs	r3, r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	440b      	add	r3, r1
 8004e3c:	334d      	adds	r3, #77	@ 0x4d
 8004e3e:	2204      	movs	r2, #4
 8004e40:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	78fa      	ldrb	r2, [r7, #3]
 8004e48:	4611      	mov	r1, r2
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f004 fc06 	bl	800965c <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	6879      	ldr	r1, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	011b      	lsls	r3, r3, #4
 8004e58:	1a9b      	subs	r3, r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	331b      	adds	r3, #27
 8004e60:	781b      	ldrb	r3, [r3, #0]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d129      	bne.n	8004eba <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	4613      	mov	r3, r2
 8004e6c:	011b      	lsls	r3, r3, #4
 8004e6e:	1a9b      	subs	r3, r3, r2
 8004e70:	009b      	lsls	r3, r3, #2
 8004e72:	440b      	add	r3, r1
 8004e74:	331b      	adds	r3, #27
 8004e76:	2200      	movs	r2, #0
 8004e78:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e7a:	78fb      	ldrb	r3, [r7, #3]
 8004e7c:	015a      	lsls	r2, r3, #5
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	4413      	add	r3, r2
 8004e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	78fa      	ldrb	r2, [r7, #3]
 8004e8a:	0151      	lsls	r1, r2, #5
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	440a      	add	r2, r1
 8004e90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e98:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004e9a:	78fb      	ldrb	r3, [r7, #3]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea6:	68db      	ldr	r3, [r3, #12]
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	0151      	lsls	r1, r2, #5
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	440a      	add	r2, r1
 8004eb0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004eb4:	f043 0320 	orr.w	r3, r3, #32
 8004eb8:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004eba:	78fb      	ldrb	r3, [r7, #3]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2310      	movs	r3, #16
 8004eca:	6093      	str	r3, [r2, #8]
 8004ecc:	e000      	b.n	8004ed0 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004ece:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004ed0:	3718      	adds	r7, #24
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b086      	sub	sp, #24
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
 8004ede:	460b      	mov	r3, r1
 8004ee0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	78fa      	ldrb	r2, [r7, #3]
 8004ef2:	4611      	mov	r1, r2
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	f004 fb34 	bl	8009562 <USB_ReadChInterrupts>
 8004efa:	4603      	mov	r3, r0
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11b      	bne.n	8004f3c <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004f04:	78fb      	ldrb	r3, [r7, #3]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f10:	461a      	mov	r2, r3
 8004f12:	2304      	movs	r3, #4
 8004f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	334d      	adds	r3, #77	@ 0x4d
 8004f26:	2207      	movs	r2, #7
 8004f28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	78fa      	ldrb	r2, [r7, #3]
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f004 fb92 	bl	800965c <USB_HC_Halt>
 8004f38:	f000 bc89 	b.w	800584e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	78fa      	ldrb	r2, [r7, #3]
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f004 fb0c 	bl	8009562 <USB_ReadChInterrupts>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	f003 0320 	and.w	r3, r3, #32
 8004f50:	2b20      	cmp	r3, #32
 8004f52:	f040 8082 	bne.w	800505a <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004f56:	78fb      	ldrb	r3, [r7, #3]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f62:	461a      	mov	r2, r3
 8004f64:	2320      	movs	r3, #32
 8004f66:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	6879      	ldr	r1, [r7, #4]
 8004f6c:	4613      	mov	r3, r2
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	1a9b      	subs	r3, r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	3319      	adds	r3, #25
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d124      	bne.n	8004fc8 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004f7e:	78fa      	ldrb	r2, [r7, #3]
 8004f80:	6879      	ldr	r1, [r7, #4]
 8004f82:	4613      	mov	r3, r2
 8004f84:	011b      	lsls	r3, r3, #4
 8004f86:	1a9b      	subs	r3, r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	440b      	add	r3, r1
 8004f8c:	3319      	adds	r3, #25
 8004f8e:	2200      	movs	r2, #0
 8004f90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f92:	78fa      	ldrb	r2, [r7, #3]
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4613      	mov	r3, r2
 8004f98:	011b      	lsls	r3, r3, #4
 8004f9a:	1a9b      	subs	r3, r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	440b      	add	r3, r1
 8004fa0:	334c      	adds	r3, #76	@ 0x4c
 8004fa2:	2202      	movs	r2, #2
 8004fa4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004fa6:	78fa      	ldrb	r2, [r7, #3]
 8004fa8:	6879      	ldr	r1, [r7, #4]
 8004faa:	4613      	mov	r3, r2
 8004fac:	011b      	lsls	r3, r3, #4
 8004fae:	1a9b      	subs	r3, r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	334d      	adds	r3, #77	@ 0x4d
 8004fb6:	2203      	movs	r2, #3
 8004fb8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	78fa      	ldrb	r2, [r7, #3]
 8004fc0:	4611      	mov	r1, r2
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f004 fb4a 	bl	800965c <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004fc8:	78fa      	ldrb	r2, [r7, #3]
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	011b      	lsls	r3, r3, #4
 8004fd0:	1a9b      	subs	r3, r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	331a      	adds	r3, #26
 8004fd8:	781b      	ldrb	r3, [r3, #0]
 8004fda:	2b01      	cmp	r3, #1
 8004fdc:	f040 8437 	bne.w	800584e <HCD_HC_OUT_IRQHandler+0x978>
 8004fe0:	78fa      	ldrb	r2, [r7, #3]
 8004fe2:	6879      	ldr	r1, [r7, #4]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	011b      	lsls	r3, r3, #4
 8004fe8:	1a9b      	subs	r3, r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	440b      	add	r3, r1
 8004fee:	331b      	adds	r3, #27
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 842b 	bne.w	800584e <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004ff8:	78fa      	ldrb	r2, [r7, #3]
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	4613      	mov	r3, r2
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	1a9b      	subs	r3, r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	3326      	adds	r3, #38	@ 0x26
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d009      	beq.n	8005022 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	331b      	adds	r3, #27
 800501e:	2201      	movs	r2, #1
 8005020:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005022:	78fa      	ldrb	r2, [r7, #3]
 8005024:	6879      	ldr	r1, [r7, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	011b      	lsls	r3, r3, #4
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	440b      	add	r3, r1
 8005030:	334d      	adds	r3, #77	@ 0x4d
 8005032:	2203      	movs	r2, #3
 8005034:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	78fa      	ldrb	r2, [r7, #3]
 800503c:	4611      	mov	r1, r2
 800503e:	4618      	mov	r0, r3
 8005040:	f004 fb0c 	bl	800965c <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005044:	78fa      	ldrb	r2, [r7, #3]
 8005046:	6879      	ldr	r1, [r7, #4]
 8005048:	4613      	mov	r3, r2
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	1a9b      	subs	r3, r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	3344      	adds	r3, #68	@ 0x44
 8005054:	2200      	movs	r2, #0
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	e3f9      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	78fa      	ldrb	r2, [r7, #3]
 8005060:	4611      	mov	r1, r2
 8005062:	4618      	mov	r0, r3
 8005064:	f004 fa7d 	bl	8009562 <USB_ReadChInterrupts>
 8005068:	4603      	mov	r3, r0
 800506a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800506e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005072:	d111      	bne.n	8005098 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	4413      	add	r3, r2
 800507c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005080:	461a      	mov	r2, r3
 8005082:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005086:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	4611      	mov	r1, r2
 8005090:	4618      	mov	r0, r3
 8005092:	f004 fae3 	bl	800965c <USB_HC_Halt>
 8005096:	e3da      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	78fa      	ldrb	r2, [r7, #3]
 800509e:	4611      	mov	r1, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f004 fa5e 	bl	8009562 <USB_ReadChInterrupts>
 80050a6:	4603      	mov	r3, r0
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d168      	bne.n	8005182 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80050b0:	78fa      	ldrb	r2, [r7, #3]
 80050b2:	6879      	ldr	r1, [r7, #4]
 80050b4:	4613      	mov	r3, r2
 80050b6:	011b      	lsls	r3, r3, #4
 80050b8:	1a9b      	subs	r3, r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	3344      	adds	r3, #68	@ 0x44
 80050c0:	2200      	movs	r2, #0
 80050c2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	78fa      	ldrb	r2, [r7, #3]
 80050ca:	4611      	mov	r1, r2
 80050cc:	4618      	mov	r0, r3
 80050ce:	f004 fa48 	bl	8009562 <USB_ReadChInterrupts>
 80050d2:	4603      	mov	r3, r0
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b40      	cmp	r3, #64	@ 0x40
 80050da:	d112      	bne.n	8005102 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80050dc:	78fa      	ldrb	r2, [r7, #3]
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	4613      	mov	r3, r2
 80050e2:	011b      	lsls	r3, r3, #4
 80050e4:	1a9b      	subs	r3, r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	3319      	adds	r3, #25
 80050ec:	2201      	movs	r2, #1
 80050ee:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	015a      	lsls	r2, r3, #5
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	4413      	add	r3, r2
 80050f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050fc:	461a      	mov	r2, r3
 80050fe:	2340      	movs	r3, #64	@ 0x40
 8005100:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005102:	78fa      	ldrb	r2, [r7, #3]
 8005104:	6879      	ldr	r1, [r7, #4]
 8005106:	4613      	mov	r3, r2
 8005108:	011b      	lsls	r3, r3, #4
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	440b      	add	r3, r1
 8005110:	331b      	adds	r3, #27
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d019      	beq.n	800514c <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005118:	78fa      	ldrb	r2, [r7, #3]
 800511a:	6879      	ldr	r1, [r7, #4]
 800511c:	4613      	mov	r3, r2
 800511e:	011b      	lsls	r3, r3, #4
 8005120:	1a9b      	subs	r3, r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	440b      	add	r3, r1
 8005126:	331b      	adds	r3, #27
 8005128:	2200      	movs	r2, #0
 800512a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	78fa      	ldrb	r2, [r7, #3]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	440a      	add	r2, r1
 8005142:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005146:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800514a:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005158:	461a      	mov	r2, r3
 800515a:	2301      	movs	r3, #1
 800515c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	334d      	adds	r3, #77	@ 0x4d
 800516e:	2201      	movs	r2, #1
 8005170:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	78fa      	ldrb	r2, [r7, #3]
 8005178:	4611      	mov	r1, r2
 800517a:	4618      	mov	r0, r3
 800517c:	f004 fa6e 	bl	800965c <USB_HC_Halt>
 8005180:	e365      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	78fa      	ldrb	r2, [r7, #3]
 8005188:	4611      	mov	r1, r2
 800518a:	4618      	mov	r0, r3
 800518c:	f004 f9e9 	bl	8009562 <USB_ReadChInterrupts>
 8005190:	4603      	mov	r3, r0
 8005192:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005196:	2b40      	cmp	r3, #64	@ 0x40
 8005198:	d139      	bne.n	800520e <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800519a:	78fa      	ldrb	r2, [r7, #3]
 800519c:	6879      	ldr	r1, [r7, #4]
 800519e:	4613      	mov	r3, r2
 80051a0:	011b      	lsls	r3, r3, #4
 80051a2:	1a9b      	subs	r3, r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	440b      	add	r3, r1
 80051a8:	334d      	adds	r3, #77	@ 0x4d
 80051aa:	2205      	movs	r2, #5
 80051ac:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80051ae:	78fa      	ldrb	r2, [r7, #3]
 80051b0:	6879      	ldr	r1, [r7, #4]
 80051b2:	4613      	mov	r3, r2
 80051b4:	011b      	lsls	r3, r3, #4
 80051b6:	1a9b      	subs	r3, r3, r2
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	440b      	add	r3, r1
 80051bc:	331a      	adds	r3, #26
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d109      	bne.n	80051d8 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80051c4:	78fa      	ldrb	r2, [r7, #3]
 80051c6:	6879      	ldr	r1, [r7, #4]
 80051c8:	4613      	mov	r3, r2
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	1a9b      	subs	r3, r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	440b      	add	r3, r1
 80051d2:	3319      	adds	r3, #25
 80051d4:	2201      	movs	r2, #1
 80051d6:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80051d8:	78fa      	ldrb	r2, [r7, #3]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	1a9b      	subs	r3, r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	3344      	adds	r3, #68	@ 0x44
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	78fa      	ldrb	r2, [r7, #3]
 80051f2:	4611      	mov	r1, r2
 80051f4:	4618      	mov	r0, r3
 80051f6:	f004 fa31 	bl	800965c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005206:	461a      	mov	r2, r3
 8005208:	2340      	movs	r3, #64	@ 0x40
 800520a:	6093      	str	r3, [r2, #8]
 800520c:	e31f      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	78fa      	ldrb	r2, [r7, #3]
 8005214:	4611      	mov	r1, r2
 8005216:	4618      	mov	r0, r3
 8005218:	f004 f9a3 	bl	8009562 <USB_ReadChInterrupts>
 800521c:	4603      	mov	r3, r0
 800521e:	f003 0308 	and.w	r3, r3, #8
 8005222:	2b08      	cmp	r3, #8
 8005224:	d11a      	bne.n	800525c <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005226:	78fb      	ldrb	r3, [r7, #3]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005232:	461a      	mov	r2, r3
 8005234:	2308      	movs	r3, #8
 8005236:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005238:	78fa      	ldrb	r2, [r7, #3]
 800523a:	6879      	ldr	r1, [r7, #4]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	440b      	add	r3, r1
 8005246:	334d      	adds	r3, #77	@ 0x4d
 8005248:	2206      	movs	r2, #6
 800524a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	4611      	mov	r1, r2
 8005254:	4618      	mov	r0, r3
 8005256:	f004 fa01 	bl	800965c <USB_HC_Halt>
 800525a:	e2f8      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	78fa      	ldrb	r2, [r7, #3]
 8005262:	4611      	mov	r1, r2
 8005264:	4618      	mov	r0, r3
 8005266:	f004 f97c 	bl	8009562 <USB_ReadChInterrupts>
 800526a:	4603      	mov	r3, r0
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b10      	cmp	r3, #16
 8005272:	d144      	bne.n	80052fe <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005274:	78fa      	ldrb	r2, [r7, #3]
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4613      	mov	r3, r2
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	1a9b      	subs	r3, r3, r2
 800527e:	009b      	lsls	r3, r3, #2
 8005280:	440b      	add	r3, r1
 8005282:	3344      	adds	r3, #68	@ 0x44
 8005284:	2200      	movs	r2, #0
 8005286:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	334d      	adds	r3, #77	@ 0x4d
 8005298:	2204      	movs	r2, #4
 800529a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800529c:	78fa      	ldrb	r2, [r7, #3]
 800529e:	6879      	ldr	r1, [r7, #4]
 80052a0:	4613      	mov	r3, r2
 80052a2:	011b      	lsls	r3, r3, #4
 80052a4:	1a9b      	subs	r3, r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	440b      	add	r3, r1
 80052aa:	3319      	adds	r3, #25
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d114      	bne.n	80052dc <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	6879      	ldr	r1, [r7, #4]
 80052b6:	4613      	mov	r3, r2
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	3318      	adds	r3, #24
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d109      	bne.n	80052dc <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	4613      	mov	r3, r2
 80052ce:	011b      	lsls	r3, r3, #4
 80052d0:	1a9b      	subs	r3, r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	440b      	add	r3, r1
 80052d6:	3319      	adds	r3, #25
 80052d8:	2201      	movs	r2, #1
 80052da:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	78fa      	ldrb	r2, [r7, #3]
 80052e2:	4611      	mov	r1, r2
 80052e4:	4618      	mov	r0, r3
 80052e6:	f004 f9b9 	bl	800965c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80052ea:	78fb      	ldrb	r3, [r7, #3]
 80052ec:	015a      	lsls	r2, r3, #5
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4413      	add	r3, r2
 80052f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052f6:	461a      	mov	r2, r3
 80052f8:	2310      	movs	r3, #16
 80052fa:	6093      	str	r3, [r2, #8]
 80052fc:	e2a7      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	78fa      	ldrb	r2, [r7, #3]
 8005304:	4611      	mov	r1, r2
 8005306:	4618      	mov	r0, r3
 8005308:	f004 f92b 	bl	8009562 <USB_ReadChInterrupts>
 800530c:	4603      	mov	r3, r0
 800530e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005312:	2b80      	cmp	r3, #128	@ 0x80
 8005314:	f040 8083 	bne.w	800541e <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	799b      	ldrb	r3, [r3, #6]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d111      	bne.n	8005344 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005320:	78fa      	ldrb	r2, [r7, #3]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	1a9b      	subs	r3, r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	334d      	adds	r3, #77	@ 0x4d
 8005330:	2207      	movs	r2, #7
 8005332:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	78fa      	ldrb	r2, [r7, #3]
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f004 f98d 	bl	800965c <USB_HC_Halt>
 8005342:	e062      	b.n	800540a <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005344:	78fa      	ldrb	r2, [r7, #3]
 8005346:	6879      	ldr	r1, [r7, #4]
 8005348:	4613      	mov	r3, r2
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	440b      	add	r3, r1
 8005352:	3344      	adds	r3, #68	@ 0x44
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	1c59      	adds	r1, r3, #1
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4613      	mov	r3, r2
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	1a9b      	subs	r3, r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4403      	add	r3, r0
 8005364:	3344      	adds	r3, #68	@ 0x44
 8005366:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	3344      	adds	r3, #68	@ 0x44
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b02      	cmp	r3, #2
 800537c:	d922      	bls.n	80053c4 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800537e:	78fa      	ldrb	r2, [r7, #3]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	1a9b      	subs	r3, r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3344      	adds	r3, #68	@ 0x44
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005392:	78fa      	ldrb	r2, [r7, #3]
 8005394:	6879      	ldr	r1, [r7, #4]
 8005396:	4613      	mov	r3, r2
 8005398:	011b      	lsls	r3, r3, #4
 800539a:	1a9b      	subs	r3, r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	440b      	add	r3, r1
 80053a0:	334c      	adds	r3, #76	@ 0x4c
 80053a2:	2204      	movs	r2, #4
 80053a4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80053a6:	78fa      	ldrb	r2, [r7, #3]
 80053a8:	6879      	ldr	r1, [r7, #4]
 80053aa:	4613      	mov	r3, r2
 80053ac:	011b      	lsls	r3, r3, #4
 80053ae:	1a9b      	subs	r3, r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	440b      	add	r3, r1
 80053b4:	334c      	adds	r3, #76	@ 0x4c
 80053b6:	781a      	ldrb	r2, [r3, #0]
 80053b8:	78fb      	ldrb	r3, [r7, #3]
 80053ba:	4619      	mov	r1, r3
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f005 fc59 	bl	800ac74 <HAL_HCD_HC_NotifyURBChange_Callback>
 80053c2:	e022      	b.n	800540a <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053c4:	78fa      	ldrb	r2, [r7, #3]
 80053c6:	6879      	ldr	r1, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	440b      	add	r3, r1
 80053d2:	334c      	adds	r3, #76	@ 0x4c
 80053d4:	2202      	movs	r2, #2
 80053d6:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80053d8:	78fb      	ldrb	r3, [r7, #3]
 80053da:	015a      	lsls	r2, r3, #5
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	4413      	add	r3, r2
 80053e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80053ee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80053f6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80053f8:	78fb      	ldrb	r3, [r7, #3]
 80053fa:	015a      	lsls	r2, r3, #5
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005404:	461a      	mov	r2, r3
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800540a:	78fb      	ldrb	r3, [r7, #3]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	4413      	add	r3, r2
 8005412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005416:	461a      	mov	r2, r3
 8005418:	2380      	movs	r3, #128	@ 0x80
 800541a:	6093      	str	r3, [r2, #8]
 800541c:	e217      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f004 f89b 	bl	8009562 <USB_ReadChInterrupts>
 800542c:	4603      	mov	r3, r0
 800542e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005436:	d11b      	bne.n	8005470 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005438:	78fa      	ldrb	r2, [r7, #3]
 800543a:	6879      	ldr	r1, [r7, #4]
 800543c:	4613      	mov	r3, r2
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	440b      	add	r3, r1
 8005446:	334d      	adds	r3, #77	@ 0x4d
 8005448:	2209      	movs	r2, #9
 800544a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	78fa      	ldrb	r2, [r7, #3]
 8005452:	4611      	mov	r1, r2
 8005454:	4618      	mov	r0, r3
 8005456:	f004 f901 	bl	800965c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005466:	461a      	mov	r2, r3
 8005468:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800546c:	6093      	str	r3, [r2, #8]
 800546e:	e1ee      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	4611      	mov	r1, r2
 8005478:	4618      	mov	r0, r3
 800547a:	f004 f872 	bl	8009562 <USB_ReadChInterrupts>
 800547e:	4603      	mov	r3, r0
 8005480:	f003 0302 	and.w	r3, r3, #2
 8005484:	2b02      	cmp	r3, #2
 8005486:	f040 81df 	bne.w	8005848 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800548a:	78fb      	ldrb	r3, [r7, #3]
 800548c:	015a      	lsls	r2, r3, #5
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	4413      	add	r3, r2
 8005492:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005496:	461a      	mov	r2, r3
 8005498:	2302      	movs	r3, #2
 800549a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800549c:	78fa      	ldrb	r2, [r7, #3]
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	4613      	mov	r3, r2
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	1a9b      	subs	r3, r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	440b      	add	r3, r1
 80054aa:	334d      	adds	r3, #77	@ 0x4d
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b01      	cmp	r3, #1
 80054b0:	f040 8093 	bne.w	80055da <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	334d      	adds	r3, #77	@ 0x4d
 80054c4:	2202      	movs	r2, #2
 80054c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80054c8:	78fa      	ldrb	r2, [r7, #3]
 80054ca:	6879      	ldr	r1, [r7, #4]
 80054cc:	4613      	mov	r3, r2
 80054ce:	011b      	lsls	r3, r3, #4
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	440b      	add	r3, r1
 80054d6:	334c      	adds	r3, #76	@ 0x4c
 80054d8:	2201      	movs	r2, #1
 80054da:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80054dc:	78fa      	ldrb	r2, [r7, #3]
 80054de:	6879      	ldr	r1, [r7, #4]
 80054e0:	4613      	mov	r3, r2
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	440b      	add	r3, r1
 80054ea:	3326      	adds	r3, #38	@ 0x26
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d00b      	beq.n	800550a <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80054f2:	78fa      	ldrb	r2, [r7, #3]
 80054f4:	6879      	ldr	r1, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	1a9b      	subs	r3, r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	440b      	add	r3, r1
 8005500:	3326      	adds	r3, #38	@ 0x26
 8005502:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005504:	2b03      	cmp	r3, #3
 8005506:	f040 8190 	bne.w	800582a <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	799b      	ldrb	r3, [r3, #6]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d115      	bne.n	800553e <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005512:	78fa      	ldrb	r2, [r7, #3]
 8005514:	6879      	ldr	r1, [r7, #4]
 8005516:	4613      	mov	r3, r2
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	1a9b      	subs	r3, r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	440b      	add	r3, r1
 8005520:	333d      	adds	r3, #61	@ 0x3d
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	78fa      	ldrb	r2, [r7, #3]
 8005526:	f083 0301 	eor.w	r3, r3, #1
 800552a:	b2d8      	uxtb	r0, r3
 800552c:	6879      	ldr	r1, [r7, #4]
 800552e:	4613      	mov	r3, r2
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	1a9b      	subs	r3, r3, r2
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	440b      	add	r3, r1
 8005538:	333d      	adds	r3, #61	@ 0x3d
 800553a:	4602      	mov	r2, r0
 800553c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	799b      	ldrb	r3, [r3, #6]
 8005542:	2b01      	cmp	r3, #1
 8005544:	f040 8171 	bne.w	800582a <HCD_HC_OUT_IRQHandler+0x954>
 8005548:	78fa      	ldrb	r2, [r7, #3]
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4613      	mov	r3, r2
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	1a9b      	subs	r3, r3, r2
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	440b      	add	r3, r1
 8005556:	3334      	adds	r3, #52	@ 0x34
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8165 	beq.w	800582a <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005560:	78fa      	ldrb	r2, [r7, #3]
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	4613      	mov	r3, r2
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	1a9b      	subs	r3, r3, r2
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	440b      	add	r3, r1
 800556e:	3334      	adds	r3, #52	@ 0x34
 8005570:	6819      	ldr	r1, [r3, #0]
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4403      	add	r3, r0
 8005580:	3328      	adds	r3, #40	@ 0x28
 8005582:	881b      	ldrh	r3, [r3, #0]
 8005584:	440b      	add	r3, r1
 8005586:	1e59      	subs	r1, r3, #1
 8005588:	78fa      	ldrb	r2, [r7, #3]
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4613      	mov	r3, r2
 800558e:	011b      	lsls	r3, r3, #4
 8005590:	1a9b      	subs	r3, r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4403      	add	r3, r0
 8005596:	3328      	adds	r3, #40	@ 0x28
 8005598:	881b      	ldrh	r3, [r3, #0]
 800559a:	fbb1 f3f3 	udiv	r3, r1, r3
 800559e:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	f000 813f 	beq.w	800582a <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80055ac:	78fa      	ldrb	r2, [r7, #3]
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	4613      	mov	r3, r2
 80055b2:	011b      	lsls	r3, r3, #4
 80055b4:	1a9b      	subs	r3, r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	333d      	adds	r3, #61	@ 0x3d
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	78fa      	ldrb	r2, [r7, #3]
 80055c0:	f083 0301 	eor.w	r3, r3, #1
 80055c4:	b2d8      	uxtb	r0, r3
 80055c6:	6879      	ldr	r1, [r7, #4]
 80055c8:	4613      	mov	r3, r2
 80055ca:	011b      	lsls	r3, r3, #4
 80055cc:	1a9b      	subs	r3, r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	440b      	add	r3, r1
 80055d2:	333d      	adds	r3, #61	@ 0x3d
 80055d4:	4602      	mov	r2, r0
 80055d6:	701a      	strb	r2, [r3, #0]
 80055d8:	e127      	b.n	800582a <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80055da:	78fa      	ldrb	r2, [r7, #3]
 80055dc:	6879      	ldr	r1, [r7, #4]
 80055de:	4613      	mov	r3, r2
 80055e0:	011b      	lsls	r3, r3, #4
 80055e2:	1a9b      	subs	r3, r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	334d      	adds	r3, #77	@ 0x4d
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b03      	cmp	r3, #3
 80055ee:	d120      	bne.n	8005632 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80055f0:	78fa      	ldrb	r2, [r7, #3]
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	011b      	lsls	r3, r3, #4
 80055f8:	1a9b      	subs	r3, r3, r2
 80055fa:	009b      	lsls	r3, r3, #2
 80055fc:	440b      	add	r3, r1
 80055fe:	334d      	adds	r3, #77	@ 0x4d
 8005600:	2202      	movs	r2, #2
 8005602:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005604:	78fa      	ldrb	r2, [r7, #3]
 8005606:	6879      	ldr	r1, [r7, #4]
 8005608:	4613      	mov	r3, r2
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	1a9b      	subs	r3, r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	440b      	add	r3, r1
 8005612:	331b      	adds	r3, #27
 8005614:	781b      	ldrb	r3, [r3, #0]
 8005616:	2b01      	cmp	r3, #1
 8005618:	f040 8107 	bne.w	800582a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800561c:	78fa      	ldrb	r2, [r7, #3]
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	4613      	mov	r3, r2
 8005622:	011b      	lsls	r3, r3, #4
 8005624:	1a9b      	subs	r3, r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	334c      	adds	r3, #76	@ 0x4c
 800562c:	2202      	movs	r2, #2
 800562e:	701a      	strb	r2, [r3, #0]
 8005630:	e0fb      	b.n	800582a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005632:	78fa      	ldrb	r2, [r7, #3]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	334d      	adds	r3, #77	@ 0x4d
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b04      	cmp	r3, #4
 8005646:	d13a      	bne.n	80056be <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005648:	78fa      	ldrb	r2, [r7, #3]
 800564a:	6879      	ldr	r1, [r7, #4]
 800564c:	4613      	mov	r3, r2
 800564e:	011b      	lsls	r3, r3, #4
 8005650:	1a9b      	subs	r3, r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	440b      	add	r3, r1
 8005656:	334d      	adds	r3, #77	@ 0x4d
 8005658:	2202      	movs	r2, #2
 800565a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800565c:	78fa      	ldrb	r2, [r7, #3]
 800565e:	6879      	ldr	r1, [r7, #4]
 8005660:	4613      	mov	r3, r2
 8005662:	011b      	lsls	r3, r3, #4
 8005664:	1a9b      	subs	r3, r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	440b      	add	r3, r1
 800566a:	334c      	adds	r3, #76	@ 0x4c
 800566c:	2202      	movs	r2, #2
 800566e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	6879      	ldr	r1, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	331b      	adds	r3, #27
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	2b01      	cmp	r3, #1
 8005684:	f040 80d1 	bne.w	800582a <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005688:	78fa      	ldrb	r2, [r7, #3]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	331b      	adds	r3, #27
 8005698:	2200      	movs	r2, #0
 800569a:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800569c:	78fb      	ldrb	r3, [r7, #3]
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056a8:	685b      	ldr	r3, [r3, #4]
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	0151      	lsls	r1, r2, #5
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	440a      	add	r2, r1
 80056b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80056b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80056ba:	6053      	str	r3, [r2, #4]
 80056bc:	e0b5      	b.n	800582a <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80056be:	78fa      	ldrb	r2, [r7, #3]
 80056c0:	6879      	ldr	r1, [r7, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	1a9b      	subs	r3, r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	440b      	add	r3, r1
 80056cc:	334d      	adds	r3, #77	@ 0x4d
 80056ce:	781b      	ldrb	r3, [r3, #0]
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d114      	bne.n	80056fe <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	6879      	ldr	r1, [r7, #4]
 80056d8:	4613      	mov	r3, r2
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	1a9b      	subs	r3, r3, r2
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	440b      	add	r3, r1
 80056e2:	334d      	adds	r3, #77	@ 0x4d
 80056e4:	2202      	movs	r2, #2
 80056e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80056e8:	78fa      	ldrb	r2, [r7, #3]
 80056ea:	6879      	ldr	r1, [r7, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	011b      	lsls	r3, r3, #4
 80056f0:	1a9b      	subs	r3, r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	440b      	add	r3, r1
 80056f6:	334c      	adds	r3, #76	@ 0x4c
 80056f8:	2202      	movs	r2, #2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	e095      	b.n	800582a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80056fe:	78fa      	ldrb	r2, [r7, #3]
 8005700:	6879      	ldr	r1, [r7, #4]
 8005702:	4613      	mov	r3, r2
 8005704:	011b      	lsls	r3, r3, #4
 8005706:	1a9b      	subs	r3, r3, r2
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	440b      	add	r3, r1
 800570c:	334d      	adds	r3, #77	@ 0x4d
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	2b06      	cmp	r3, #6
 8005712:	d114      	bne.n	800573e <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	6879      	ldr	r1, [r7, #4]
 8005718:	4613      	mov	r3, r2
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	1a9b      	subs	r3, r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	440b      	add	r3, r1
 8005722:	334d      	adds	r3, #77	@ 0x4d
 8005724:	2202      	movs	r2, #2
 8005726:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005728:	78fa      	ldrb	r2, [r7, #3]
 800572a:	6879      	ldr	r1, [r7, #4]
 800572c:	4613      	mov	r3, r2
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	1a9b      	subs	r3, r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	440b      	add	r3, r1
 8005736:	334c      	adds	r3, #76	@ 0x4c
 8005738:	2205      	movs	r2, #5
 800573a:	701a      	strb	r2, [r3, #0]
 800573c:	e075      	b.n	800582a <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800573e:	78fa      	ldrb	r2, [r7, #3]
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	4613      	mov	r3, r2
 8005744:	011b      	lsls	r3, r3, #4
 8005746:	1a9b      	subs	r3, r3, r2
 8005748:	009b      	lsls	r3, r3, #2
 800574a:	440b      	add	r3, r1
 800574c:	334d      	adds	r3, #77	@ 0x4d
 800574e:	781b      	ldrb	r3, [r3, #0]
 8005750:	2b07      	cmp	r3, #7
 8005752:	d00a      	beq.n	800576a <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005754:	78fa      	ldrb	r2, [r7, #3]
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	011b      	lsls	r3, r3, #4
 800575c:	1a9b      	subs	r3, r3, r2
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	440b      	add	r3, r1
 8005762:	334d      	adds	r3, #77	@ 0x4d
 8005764:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005766:	2b09      	cmp	r3, #9
 8005768:	d170      	bne.n	800584c <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	6879      	ldr	r1, [r7, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	1a9b      	subs	r3, r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	440b      	add	r3, r1
 8005778:	334d      	adds	r3, #77	@ 0x4d
 800577a:	2202      	movs	r2, #2
 800577c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	6879      	ldr	r1, [r7, #4]
 8005782:	4613      	mov	r3, r2
 8005784:	011b      	lsls	r3, r3, #4
 8005786:	1a9b      	subs	r3, r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	440b      	add	r3, r1
 800578c:	3344      	adds	r3, #68	@ 0x44
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	1c59      	adds	r1, r3, #1
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4403      	add	r3, r0
 800579e:	3344      	adds	r3, #68	@ 0x44
 80057a0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	6879      	ldr	r1, [r7, #4]
 80057a6:	4613      	mov	r3, r2
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	1a9b      	subs	r3, r3, r2
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	440b      	add	r3, r1
 80057b0:	3344      	adds	r3, #68	@ 0x44
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d914      	bls.n	80057e2 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80057b8:	78fa      	ldrb	r2, [r7, #3]
 80057ba:	6879      	ldr	r1, [r7, #4]
 80057bc:	4613      	mov	r3, r2
 80057be:	011b      	lsls	r3, r3, #4
 80057c0:	1a9b      	subs	r3, r3, r2
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	440b      	add	r3, r1
 80057c6:	3344      	adds	r3, #68	@ 0x44
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80057cc:	78fa      	ldrb	r2, [r7, #3]
 80057ce:	6879      	ldr	r1, [r7, #4]
 80057d0:	4613      	mov	r3, r2
 80057d2:	011b      	lsls	r3, r3, #4
 80057d4:	1a9b      	subs	r3, r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	440b      	add	r3, r1
 80057da:	334c      	adds	r3, #76	@ 0x4c
 80057dc:	2204      	movs	r2, #4
 80057de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057e0:	e022      	b.n	8005828 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057e2:	78fa      	ldrb	r2, [r7, #3]
 80057e4:	6879      	ldr	r1, [r7, #4]
 80057e6:	4613      	mov	r3, r2
 80057e8:	011b      	lsls	r3, r3, #4
 80057ea:	1a9b      	subs	r3, r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	440b      	add	r3, r1
 80057f0:	334c      	adds	r3, #76	@ 0x4c
 80057f2:	2202      	movs	r2, #2
 80057f4:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80057f6:	78fb      	ldrb	r3, [r7, #3]
 80057f8:	015a      	lsls	r2, r3, #5
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	4413      	add	r3, r2
 80057fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800580c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005814:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005816:	78fb      	ldrb	r3, [r7, #3]
 8005818:	015a      	lsls	r2, r3, #5
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4413      	add	r3, r2
 800581e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005822:	461a      	mov	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005828:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	6879      	ldr	r1, [r7, #4]
 800582e:	4613      	mov	r3, r2
 8005830:	011b      	lsls	r3, r3, #4
 8005832:	1a9b      	subs	r3, r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	440b      	add	r3, r1
 8005838:	334c      	adds	r3, #76	@ 0x4c
 800583a:	781a      	ldrb	r2, [r3, #0]
 800583c:	78fb      	ldrb	r3, [r7, #3]
 800583e:	4619      	mov	r1, r3
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f005 fa17 	bl	800ac74 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005846:	e002      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005848:	bf00      	nop
 800584a:	e000      	b.n	800584e <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800584c:	bf00      	nop
  }
}
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b08a      	sub	sp, #40	@ 0x28
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 030f 	and.w	r3, r3, #15
 8005874:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	0c5b      	lsrs	r3, r3, #17
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	091b      	lsrs	r3, r3, #4
 8005884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005888:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d004      	beq.n	800589a <HCD_RXQLVL_IRQHandler+0x46>
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	2b05      	cmp	r3, #5
 8005894:	f000 80b6 	beq.w	8005a04 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005898:	e0b7      	b.n	8005a0a <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80b3 	beq.w	8005a08 <HCD_RXQLVL_IRQHandler+0x1b4>
 80058a2:	6879      	ldr	r1, [r7, #4]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4613      	mov	r3, r2
 80058a8:	011b      	lsls	r3, r3, #4
 80058aa:	1a9b      	subs	r3, r3, r2
 80058ac:	009b      	lsls	r3, r3, #2
 80058ae:	440b      	add	r3, r1
 80058b0:	332c      	adds	r3, #44	@ 0x2c
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	f000 80a7 	beq.w	8005a08 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3338      	adds	r3, #56	@ 0x38
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	18d1      	adds	r1, r2, r3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	69ba      	ldr	r2, [r7, #24]
 80058d4:	4613      	mov	r3, r2
 80058d6:	011b      	lsls	r3, r3, #4
 80058d8:	1a9b      	subs	r3, r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	4403      	add	r3, r0
 80058de:	3334      	adds	r3, #52	@ 0x34
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4299      	cmp	r1, r3
 80058e4:	f200 8083 	bhi.w	80059ee <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6818      	ldr	r0, [r3, #0]
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	69ba      	ldr	r2, [r7, #24]
 80058f0:	4613      	mov	r3, r2
 80058f2:	011b      	lsls	r3, r3, #4
 80058f4:	1a9b      	subs	r3, r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	440b      	add	r3, r1
 80058fa:	332c      	adds	r3, #44	@ 0x2c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	b292      	uxth	r2, r2
 8005902:	4619      	mov	r1, r3
 8005904:	f003 fdc2 	bl	800948c <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005908:	6879      	ldr	r1, [r7, #4]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	4613      	mov	r3, r2
 800590e:	011b      	lsls	r3, r3, #4
 8005910:	1a9b      	subs	r3, r3, r2
 8005912:	009b      	lsls	r3, r3, #2
 8005914:	440b      	add	r3, r1
 8005916:	332c      	adds	r3, #44	@ 0x2c
 8005918:	681a      	ldr	r2, [r3, #0]
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	18d1      	adds	r1, r2, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	69ba      	ldr	r2, [r7, #24]
 8005922:	4613      	mov	r3, r2
 8005924:	011b      	lsls	r3, r3, #4
 8005926:	1a9b      	subs	r3, r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4403      	add	r3, r0
 800592c:	332c      	adds	r3, #44	@ 0x2c
 800592e:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	69ba      	ldr	r2, [r7, #24]
 8005934:	4613      	mov	r3, r2
 8005936:	011b      	lsls	r3, r3, #4
 8005938:	1a9b      	subs	r3, r3, r2
 800593a:	009b      	lsls	r3, r3, #2
 800593c:	440b      	add	r3, r1
 800593e:	3338      	adds	r3, #56	@ 0x38
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	18d1      	adds	r1, r2, r3
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	69ba      	ldr	r2, [r7, #24]
 800594a:	4613      	mov	r3, r2
 800594c:	011b      	lsls	r3, r3, #4
 800594e:	1a9b      	subs	r3, r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4403      	add	r3, r0
 8005954:	3338      	adds	r3, #56	@ 0x38
 8005956:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	4413      	add	r3, r2
 8005960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	0cdb      	lsrs	r3, r3, #19
 8005968:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800596c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	69ba      	ldr	r2, [r7, #24]
 8005972:	4613      	mov	r3, r2
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	1a9b      	subs	r3, r3, r2
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	440b      	add	r3, r1
 800597c:	3328      	adds	r3, #40	@ 0x28
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	461a      	mov	r2, r3
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4293      	cmp	r3, r2
 8005986:	d13f      	bne.n	8005a08 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d03c      	beq.n	8005a08 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	015a      	lsls	r2, r3, #5
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	4413      	add	r3, r2
 8005996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059a4:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059ac:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80059c0:	6879      	ldr	r1, [r7, #4]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	4613      	mov	r3, r2
 80059c6:	011b      	lsls	r3, r3, #4
 80059c8:	1a9b      	subs	r3, r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	440b      	add	r3, r1
 80059ce:	333c      	adds	r3, #60	@ 0x3c
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	f083 0301 	eor.w	r3, r3, #1
 80059d6:	b2d8      	uxtb	r0, r3
 80059d8:	6879      	ldr	r1, [r7, #4]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	4613      	mov	r3, r2
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	1a9b      	subs	r3, r3, r2
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	440b      	add	r3, r1
 80059e6:	333c      	adds	r3, #60	@ 0x3c
 80059e8:	4602      	mov	r2, r0
 80059ea:	701a      	strb	r2, [r3, #0]
      break;
 80059ec:	e00c      	b.n	8005a08 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	4613      	mov	r3, r2
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	1a9b      	subs	r3, r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	334c      	adds	r3, #76	@ 0x4c
 80059fe:	2204      	movs	r2, #4
 8005a00:	701a      	strb	r2, [r3, #0]
      break;
 8005a02:	e001      	b.n	8005a08 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005a04:	bf00      	nop
 8005a06:	e000      	b.n	8005a0a <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005a08:	bf00      	nop
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3728      	adds	r7, #40	@ 0x28
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b086      	sub	sp, #24
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005a3e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f003 0302 	and.w	r3, r3, #2
 8005a46:	2b02      	cmp	r3, #2
 8005a48:	d10b      	bne.n	8005a62 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d102      	bne.n	8005a5a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f005 f8f1 	bl	800ac3c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	f043 0302 	orr.w	r3, r3, #2
 8005a60:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d132      	bne.n	8005ad2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f043 0308 	orr.w	r3, r3, #8
 8005a72:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f003 0304 	and.w	r3, r3, #4
 8005a7a:	2b04      	cmp	r3, #4
 8005a7c:	d126      	bne.n	8005acc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	7a5b      	ldrb	r3, [r3, #9]
 8005a82:	2b02      	cmp	r3, #2
 8005a84:	d113      	bne.n	8005aae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005a8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a90:	d106      	bne.n	8005aa0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	2102      	movs	r1, #2
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f003 fd91 	bl	80095c0 <USB_InitFSLSPClkSel>
 8005a9e:	e011      	b.n	8005ac4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2101      	movs	r1, #1
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f003 fd8a 	bl	80095c0 <USB_InitFSLSPClkSel>
 8005aac:	e00a      	b.n	8005ac4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	79db      	ldrb	r3, [r3, #7]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d106      	bne.n	8005ac4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005abc:	461a      	mov	r2, r3
 8005abe:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005ac2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f005 f8e7 	bl	800ac98 <HAL_HCD_PortEnabled_Callback>
 8005aca:	e002      	b.n	8005ad2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f005 f8f1 	bl	800acb4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f003 0320 	and.w	r3, r3, #32
 8005ad8:	2b20      	cmp	r3, #32
 8005ada:	d103      	bne.n	8005ae4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f043 0320 	orr.w	r3, r3, #32
 8005ae2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005aea:	461a      	mov	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	6013      	str	r3, [r2, #0]
}
 8005af0:	bf00      	nop
 8005af2:	3718      	adds	r7, #24
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d101      	bne.n	8005b0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e12b      	b.n	8005d62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb ffc4 	bl	8001aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2224      	movs	r2, #36	@ 0x24
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005b4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005b5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005b5c:	f001 f964 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 8005b60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	4a81      	ldr	r2, [pc, #516]	@ (8005d6c <HAL_I2C_Init+0x274>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d807      	bhi.n	8005b7c <HAL_I2C_Init+0x84>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	4a80      	ldr	r2, [pc, #512]	@ (8005d70 <HAL_I2C_Init+0x278>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	bf94      	ite	ls
 8005b74:	2301      	movls	r3, #1
 8005b76:	2300      	movhi	r3, #0
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	e006      	b.n	8005b8a <HAL_I2C_Init+0x92>
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	4a7d      	ldr	r2, [pc, #500]	@ (8005d74 <HAL_I2C_Init+0x27c>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	bf94      	ite	ls
 8005b84:	2301      	movls	r3, #1
 8005b86:	2300      	movhi	r3, #0
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d001      	beq.n	8005b92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e0e7      	b.n	8005d62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	4a78      	ldr	r2, [pc, #480]	@ (8005d78 <HAL_I2C_Init+0x280>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0c9b      	lsrs	r3, r3, #18
 8005b9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	4a6a      	ldr	r2, [pc, #424]	@ (8005d6c <HAL_I2C_Init+0x274>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d802      	bhi.n	8005bcc <HAL_I2C_Init+0xd4>
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	e009      	b.n	8005be0 <HAL_I2C_Init+0xe8>
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
 8005bd6:	4a69      	ldr	r2, [pc, #420]	@ (8005d7c <HAL_I2C_Init+0x284>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	099b      	lsrs	r3, r3, #6
 8005bde:	3301      	adds	r3, #1
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6812      	ldr	r2, [r2, #0]
 8005be4:	430b      	orrs	r3, r1
 8005be6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69db      	ldr	r3, [r3, #28]
 8005bee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005bf2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	495c      	ldr	r1, [pc, #368]	@ (8005d6c <HAL_I2C_Init+0x274>)
 8005bfc:	428b      	cmp	r3, r1
 8005bfe:	d819      	bhi.n	8005c34 <HAL_I2C_Init+0x13c>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1e59      	subs	r1, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c0e:	1c59      	adds	r1, r3, #1
 8005c10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005c14:	400b      	ands	r3, r1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_I2C_Init+0x138>
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1e59      	subs	r1, r3, #1
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685b      	ldr	r3, [r3, #4]
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	fbb1 f3f3 	udiv	r3, r1, r3
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c2e:	e051      	b.n	8005cd4 <HAL_I2C_Init+0x1dc>
 8005c30:	2304      	movs	r3, #4
 8005c32:	e04f      	b.n	8005cd4 <HAL_I2C_Init+0x1dc>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d111      	bne.n	8005c60 <HAL_I2C_Init+0x168>
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	1e58      	subs	r0, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6859      	ldr	r1, [r3, #4]
 8005c44:	460b      	mov	r3, r1
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	440b      	add	r3, r1
 8005c4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c4e:	3301      	adds	r3, #1
 8005c50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bf0c      	ite	eq
 8005c58:	2301      	moveq	r3, #1
 8005c5a:	2300      	movne	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	e012      	b.n	8005c86 <HAL_I2C_Init+0x18e>
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	1e58      	subs	r0, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	460b      	mov	r3, r1
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	440b      	add	r3, r1
 8005c6e:	0099      	lsls	r1, r3, #2
 8005c70:	440b      	add	r3, r1
 8005c72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c76:	3301      	adds	r3, #1
 8005c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	bf0c      	ite	eq
 8005c80:	2301      	moveq	r3, #1
 8005c82:	2300      	movne	r3, #0
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <HAL_I2C_Init+0x196>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e022      	b.n	8005cd4 <HAL_I2C_Init+0x1dc>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d10e      	bne.n	8005cb4 <HAL_I2C_Init+0x1bc>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	1e58      	subs	r0, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6859      	ldr	r1, [r3, #4]
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	005b      	lsls	r3, r3, #1
 8005ca2:	440b      	add	r3, r1
 8005ca4:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ca8:	3301      	adds	r3, #1
 8005caa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005cb2:	e00f      	b.n	8005cd4 <HAL_I2C_Init+0x1dc>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1e58      	subs	r0, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6859      	ldr	r1, [r3, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	440b      	add	r3, r1
 8005cc2:	0099      	lsls	r1, r3, #2
 8005cc4:	440b      	add	r3, r1
 8005cc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8005cca:	3301      	adds	r3, #1
 8005ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	6809      	ldr	r1, [r1, #0]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	69da      	ldr	r2, [r3, #28]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	431a      	orrs	r2, r3
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	430a      	orrs	r2, r1
 8005cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005d02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6911      	ldr	r1, [r2, #16]
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	68d2      	ldr	r2, [r2, #12]
 8005d0e:	4311      	orrs	r1, r2
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	6812      	ldr	r2, [r2, #0]
 8005d14:	430b      	orrs	r3, r1
 8005d16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	695a      	ldr	r2, [r3, #20]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	699b      	ldr	r3, [r3, #24]
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	430a      	orrs	r2, r1
 8005d32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f042 0201 	orr.w	r2, r2, #1
 8005d42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2220      	movs	r2, #32
 8005d4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005d60:	2300      	movs	r3, #0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	000186a0 	.word	0x000186a0
 8005d70:	001e847f 	.word	0x001e847f
 8005d74:	003d08ff 	.word	0x003d08ff
 8005d78:	431bde83 	.word	0x431bde83
 8005d7c:	10624dd3 	.word	0x10624dd3

08005d80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b083      	sub	sp, #12
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b20      	cmp	r3, #32
 8005d94:	d129      	bne.n	8005dea <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2224      	movs	r2, #36	@ 0x24
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f022 0201 	bic.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0210 	bic.w	r2, r2, #16
 8005dbc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	683a      	ldr	r2, [r7, #0]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2220      	movs	r2, #32
 8005de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	e000      	b.n	8005dec <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005dea:	2302      	movs	r3, #2
  }
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e0c:	b2db      	uxtb	r3, r3
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d12a      	bne.n	8005e68 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2224      	movs	r2, #36	@ 0x24
 8005e16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f022 0201 	bic.w	r2, r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e30:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005e32:	89fb      	ldrh	r3, [r7, #14]
 8005e34:	f023 030f 	bic.w	r3, r3, #15
 8005e38:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	89fb      	ldrh	r3, [r7, #14]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	89fa      	ldrh	r2, [r7, #14]
 8005e4a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2220      	movs	r2, #32
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005e64:	2300      	movs	r3, #0
 8005e66:	e000      	b.n	8005e6a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005e68:	2302      	movs	r3, #2
  }
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3714      	adds	r7, #20
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e0bf      	b.n	800600a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f7fc fa2c 	bl	80022fc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2202      	movs	r2, #2
 8005ea8:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	699a      	ldr	r2, [r3, #24]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005eba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6999      	ldr	r1, [r3, #24]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ed0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	430a      	orrs	r2, r1
 8005ede:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	6899      	ldr	r1, [r3, #8]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681a      	ldr	r2, [r3, #0]
 8005eea:	4b4a      	ldr	r3, [pc, #296]	@ (8006014 <HAL_LTDC_Init+0x19c>)
 8005eec:	400b      	ands	r3, r1
 8005eee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	695b      	ldr	r3, [r3, #20]
 8005ef4:	041b      	lsls	r3, r3, #16
 8005ef6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6899      	ldr	r1, [r3, #8]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	431a      	orrs	r2, r3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68d9      	ldr	r1, [r3, #12]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	4b3e      	ldr	r3, [pc, #248]	@ (8006014 <HAL_LTDC_Init+0x19c>)
 8005f1a:	400b      	ands	r3, r1
 8005f1c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	041b      	lsls	r3, r3, #16
 8005f24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68d9      	ldr	r1, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a1a      	ldr	r2, [r3, #32]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	430a      	orrs	r2, r1
 8005f3a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	6919      	ldr	r1, [r3, #16]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b33      	ldr	r3, [pc, #204]	@ (8006014 <HAL_LTDC_Init+0x19c>)
 8005f48:	400b      	ands	r3, r1
 8005f4a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	041b      	lsls	r3, r3, #16
 8005f52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6919      	ldr	r1, [r3, #16]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	430a      	orrs	r2, r1
 8005f68:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	6959      	ldr	r1, [r3, #20]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	4b27      	ldr	r3, [pc, #156]	@ (8006014 <HAL_LTDC_Init+0x19c>)
 8005f76:	400b      	ands	r3, r1
 8005f78:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f7e:	041b      	lsls	r3, r3, #16
 8005f80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6959      	ldr	r1, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	431a      	orrs	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	430a      	orrs	r2, r1
 8005f96:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f9e:	021b      	lsls	r3, r3, #8
 8005fa0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005fba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005fce:	431a      	orrs	r2, r3
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	430a      	orrs	r2, r1
 8005fd6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f042 0206 	orr.w	r2, r2, #6
 8005fe6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	699a      	ldr	r2, [r3, #24]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0201 	orr.w	r2, r2, #1
 8005ff6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3710      	adds	r7, #16
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	f000f800 	.word	0xf000f800

08006018 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006026:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800602e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f003 0304 	and.w	r3, r3, #4
 8006036:	2b00      	cmp	r3, #0
 8006038:	d023      	beq.n	8006082 <HAL_LTDC_IRQHandler+0x6a>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01e      	beq.n	8006082 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f022 0204 	bic.w	r2, r2, #4
 8006052:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2204      	movs	r2, #4
 800605a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006062:	f043 0201 	orr.w	r2, r3, #1
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2204      	movs	r2, #4
 8006070:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2200      	movs	r2, #0
 8006078:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f86f 	bl	8006160 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f003 0302 	and.w	r3, r3, #2
 8006088:	2b00      	cmp	r3, #0
 800608a:	d023      	beq.n	80060d4 <HAL_LTDC_IRQHandler+0xbc>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	f003 0302 	and.w	r3, r3, #2
 8006092:	2b00      	cmp	r3, #0
 8006094:	d01e      	beq.n	80060d4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0202 	bic.w	r2, r2, #2
 80060a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2202      	movs	r2, #2
 80060ac:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060b4:	f043 0202 	orr.w	r2, r3, #2
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2204      	movs	r2, #4
 80060c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f846 	bl	8006160 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d01b      	beq.n	8006116 <HAL_LTDC_IRQHandler+0xfe>
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f003 0301 	and.w	r3, r3, #1
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d016      	beq.n	8006116 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f022 0201 	bic.w	r2, r2, #1
 80060f6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2201      	movs	r2, #1
 80060fe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f82f 	bl	8006174 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f003 0308 	and.w	r3, r3, #8
 800611c:	2b00      	cmp	r3, #0
 800611e:	d01b      	beq.n	8006158 <HAL_LTDC_IRQHandler+0x140>
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	f003 0308 	and.w	r3, r3, #8
 8006126:	2b00      	cmp	r3, #0
 8006128:	d016      	beq.n	8006158 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0208 	bic.w	r2, r2, #8
 8006138:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2208      	movs	r2, #8
 8006140:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2201      	movs	r2, #1
 8006146:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f818 	bl	8006188 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006190:	bf00      	nop
 8006192:	370c      	adds	r7, #12
 8006194:	46bd      	mov	sp, r7
 8006196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619a:	4770      	bx	lr

0800619c <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800619c:	b5b0      	push	{r4, r5, r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d101      	bne.n	80061b6 <HAL_LTDC_ConfigLayer+0x1a>
 80061b2:	2302      	movs	r3, #2
 80061b4:	e02c      	b.n	8006210 <HAL_LTDC_ConfigLayer+0x74>
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	2202      	movs	r2, #2
 80061c2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80061c6:	68fa      	ldr	r2, [r7, #12]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2134      	movs	r1, #52	@ 0x34
 80061cc:	fb01 f303 	mul.w	r3, r1, r3
 80061d0:	4413      	add	r3, r2
 80061d2:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	4614      	mov	r4, r2
 80061da:	461d      	mov	r5, r3
 80061dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061e8:	682b      	ldr	r3, [r5, #0]
 80061ea:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	68b9      	ldr	r1, [r7, #8]
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f811 	bl	8006218 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2201      	movs	r2, #1
 80061fc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3710      	adds	r7, #16
 8006214:	46bd      	mov	sp, r7
 8006216:	bdb0      	pop	{r4, r5, r7, pc}

08006218 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006218:	b480      	push	{r7}
 800621a:	b089      	sub	sp, #36	@ 0x24
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	685a      	ldr	r2, [r3, #4]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	0c1b      	lsrs	r3, r3, #16
 8006230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006234:	4413      	add	r3, r2
 8006236:	041b      	lsls	r3, r3, #16
 8006238:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	01db      	lsls	r3, r3, #7
 8006244:	4413      	add	r3, r2
 8006246:	3384      	adds	r3, #132	@ 0x84
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	68fa      	ldr	r2, [r7, #12]
 800624c:	6812      	ldr	r2, [r2, #0]
 800624e:	4611      	mov	r1, r2
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	01d2      	lsls	r2, r2, #7
 8006254:	440a      	add	r2, r1
 8006256:	3284      	adds	r2, #132	@ 0x84
 8006258:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800625c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	0c1b      	lsrs	r3, r3, #16
 800626a:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800626e:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006270:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4619      	mov	r1, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	01db      	lsls	r3, r3, #7
 800627c:	440b      	add	r3, r1
 800627e:	3384      	adds	r3, #132	@ 0x84
 8006280:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006286:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006296:	4413      	add	r3, r2
 8006298:	041b      	lsls	r3, r3, #16
 800629a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	01db      	lsls	r3, r3, #7
 80062a6:	4413      	add	r3, r2
 80062a8:	3384      	adds	r3, #132	@ 0x84
 80062aa:	689b      	ldr	r3, [r3, #8]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	6812      	ldr	r2, [r2, #0]
 80062b0:	4611      	mov	r1, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	01d2      	lsls	r2, r2, #7
 80062b6:	440a      	add	r2, r1
 80062b8:	3284      	adds	r2, #132	@ 0x84
 80062ba:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80062be:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ce:	4413      	add	r3, r2
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4619      	mov	r1, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	01db      	lsls	r3, r3, #7
 80062dc:	440b      	add	r3, r1
 80062de:	3384      	adds	r3, #132	@ 0x84
 80062e0:	4619      	mov	r1, r3
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	4313      	orrs	r3, r2
 80062e6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	461a      	mov	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	01db      	lsls	r3, r3, #7
 80062f2:	4413      	add	r3, r2
 80062f4:	3384      	adds	r3, #132	@ 0x84
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	6812      	ldr	r2, [r2, #0]
 80062fc:	4611      	mov	r1, r2
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	01d2      	lsls	r2, r2, #7
 8006302:	440a      	add	r2, r1
 8006304:	3284      	adds	r2, #132	@ 0x84
 8006306:	f023 0307 	bic.w	r3, r3, #7
 800630a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	01db      	lsls	r3, r3, #7
 8006316:	4413      	add	r3, r2
 8006318:	3384      	adds	r3, #132	@ 0x84
 800631a:	461a      	mov	r2, r3
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8006332:	041b      	lsls	r3, r3, #16
 8006334:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	061b      	lsls	r3, r3, #24
 800633c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	461a      	mov	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	01db      	lsls	r3, r3, #7
 8006348:	4413      	add	r3, r2
 800634a:	3384      	adds	r3, #132	@ 0x84
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	01db      	lsls	r3, r3, #7
 8006358:	4413      	add	r3, r2
 800635a:	3384      	adds	r3, #132	@ 0x84
 800635c:	461a      	mov	r2, r3
 800635e:	2300      	movs	r3, #0
 8006360:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006368:	461a      	mov	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	431a      	orrs	r2, r3
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	431a      	orrs	r2, r3
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4619      	mov	r1, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	01db      	lsls	r3, r3, #7
 800637c:	440b      	add	r3, r1
 800637e:	3384      	adds	r3, #132	@ 0x84
 8006380:	4619      	mov	r1, r3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	4313      	orrs	r3, r2
 8006386:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	461a      	mov	r2, r3
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	01db      	lsls	r3, r3, #7
 8006392:	4413      	add	r3, r2
 8006394:	3384      	adds	r3, #132	@ 0x84
 8006396:	695b      	ldr	r3, [r3, #20]
 8006398:	68fa      	ldr	r2, [r7, #12]
 800639a:	6812      	ldr	r2, [r2, #0]
 800639c:	4611      	mov	r1, r2
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	01d2      	lsls	r2, r2, #7
 80063a2:	440a      	add	r2, r1
 80063a4:	3284      	adds	r2, #132	@ 0x84
 80063a6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80063aa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	461a      	mov	r2, r3
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	01db      	lsls	r3, r3, #7
 80063b6:	4413      	add	r3, r2
 80063b8:	3384      	adds	r3, #132	@ 0x84
 80063ba:	461a      	mov	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	695b      	ldr	r3, [r3, #20]
 80063c0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	01db      	lsls	r3, r3, #7
 80063cc:	4413      	add	r3, r2
 80063ce:	3384      	adds	r3, #132	@ 0x84
 80063d0:	69db      	ldr	r3, [r3, #28]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	6812      	ldr	r2, [r2, #0]
 80063d6:	4611      	mov	r1, r2
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	01d2      	lsls	r2, r2, #7
 80063dc:	440a      	add	r2, r1
 80063de:	3284      	adds	r2, #132	@ 0x84
 80063e0:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80063e4:	f023 0307 	bic.w	r3, r3, #7
 80063e8:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	69da      	ldr	r2, [r3, #28]
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6a1b      	ldr	r3, [r3, #32]
 80063f2:	68f9      	ldr	r1, [r7, #12]
 80063f4:	6809      	ldr	r1, [r1, #0]
 80063f6:	4608      	mov	r0, r1
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	01c9      	lsls	r1, r1, #7
 80063fc:	4401      	add	r1, r0
 80063fe:	3184      	adds	r1, #132	@ 0x84
 8006400:	4313      	orrs	r3, r2
 8006402:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	01db      	lsls	r3, r3, #7
 800640e:	4413      	add	r3, r2
 8006410:	3384      	adds	r3, #132	@ 0x84
 8006412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	461a      	mov	r2, r3
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	01db      	lsls	r3, r3, #7
 800641e:	4413      	add	r3, r2
 8006420:	3384      	adds	r3, #132	@ 0x84
 8006422:	461a      	mov	r2, r3
 8006424:	2300      	movs	r3, #0
 8006426:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	01db      	lsls	r3, r3, #7
 8006432:	4413      	add	r3, r2
 8006434:	3384      	adds	r3, #132	@ 0x84
 8006436:	461a      	mov	r2, r3
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800643c:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8006446:	2304      	movs	r3, #4
 8006448:	61fb      	str	r3, [r7, #28]
 800644a:	e01b      	b.n	8006484 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b01      	cmp	r3, #1
 8006452:	d102      	bne.n	800645a <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8006454:	2303      	movs	r3, #3
 8006456:	61fb      	str	r3, [r7, #28]
 8006458:	e014      	b.n	8006484 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b04      	cmp	r3, #4
 8006460:	d00b      	beq.n	800647a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006466:	2b02      	cmp	r3, #2
 8006468:	d007      	beq.n	800647a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800646e:	2b03      	cmp	r3, #3
 8006470:	d003      	beq.n	800647a <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006476:	2b07      	cmp	r3, #7
 8006478:	d102      	bne.n	8006480 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800647a:	2302      	movs	r3, #2
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e001      	b.n	8006484 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8006480:	2301      	movs	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	461a      	mov	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	01db      	lsls	r3, r3, #7
 800648e:	4413      	add	r3, r2
 8006490:	3384      	adds	r3, #132	@ 0x84
 8006492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	6812      	ldr	r2, [r2, #0]
 8006498:	4611      	mov	r1, r2
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	01d2      	lsls	r2, r2, #7
 800649e:	440a      	add	r2, r1
 80064a0:	3284      	adds	r2, #132	@ 0x84
 80064a2:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80064a6:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ac:	69fa      	ldr	r2, [r7, #28]
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	6859      	ldr	r1, [r3, #4]
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	1acb      	subs	r3, r1, r3
 80064be:	69f9      	ldr	r1, [r7, #28]
 80064c0:	fb01 f303 	mul.w	r3, r1, r3
 80064c4:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80064c6:	68f9      	ldr	r1, [r7, #12]
 80064c8:	6809      	ldr	r1, [r1, #0]
 80064ca:	4608      	mov	r0, r1
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	01c9      	lsls	r1, r1, #7
 80064d0:	4401      	add	r1, r0
 80064d2:	3184      	adds	r1, #132	@ 0x84
 80064d4:	4313      	orrs	r3, r2
 80064d6:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	461a      	mov	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	01db      	lsls	r3, r3, #7
 80064e2:	4413      	add	r3, r2
 80064e4:	3384      	adds	r3, #132	@ 0x84
 80064e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	6812      	ldr	r2, [r2, #0]
 80064ec:	4611      	mov	r1, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	01d2      	lsls	r2, r2, #7
 80064f2:	440a      	add	r2, r1
 80064f4:	3284      	adds	r2, #132	@ 0x84
 80064f6:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80064fa:	f023 0307 	bic.w	r3, r3, #7
 80064fe:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	461a      	mov	r2, r3
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	01db      	lsls	r3, r3, #7
 800650a:	4413      	add	r3, r2
 800650c:	3384      	adds	r3, #132	@ 0x84
 800650e:	461a      	mov	r2, r3
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006514:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	461a      	mov	r2, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	01db      	lsls	r3, r3, #7
 8006520:	4413      	add	r3, r2
 8006522:	3384      	adds	r3, #132	@ 0x84
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68fa      	ldr	r2, [r7, #12]
 8006528:	6812      	ldr	r2, [r2, #0]
 800652a:	4611      	mov	r1, r2
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	01d2      	lsls	r2, r2, #7
 8006530:	440a      	add	r2, r1
 8006532:	3284      	adds	r2, #132	@ 0x84
 8006534:	f043 0301 	orr.w	r3, r3, #1
 8006538:	6013      	str	r3, [r2, #0]
}
 800653a:	bf00      	nop
 800653c:	3724      	adds	r7, #36	@ 0x24
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
	...

08006548 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d101      	bne.n	800655a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	e267      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0301 	and.w	r3, r3, #1
 8006562:	2b00      	cmp	r3, #0
 8006564:	d075      	beq.n	8006652 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006566:	4b88      	ldr	r3, [pc, #544]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	f003 030c 	and.w	r3, r3, #12
 800656e:	2b04      	cmp	r3, #4
 8006570:	d00c      	beq.n	800658c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006572:	4b85      	ldr	r3, [pc, #532]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 8006574:	689b      	ldr	r3, [r3, #8]
 8006576:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800657a:	2b08      	cmp	r3, #8
 800657c:	d112      	bne.n	80065a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800657e:	4b82      	ldr	r3, [pc, #520]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006586:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800658a:	d10b      	bne.n	80065a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800658c:	4b7e      	ldr	r3, [pc, #504]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d05b      	beq.n	8006650 <HAL_RCC_OscConfig+0x108>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d157      	bne.n	8006650 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e242      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065ac:	d106      	bne.n	80065bc <HAL_RCC_OscConfig+0x74>
 80065ae:	4b76      	ldr	r3, [pc, #472]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a75      	ldr	r2, [pc, #468]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065b8:	6013      	str	r3, [r2, #0]
 80065ba:	e01d      	b.n	80065f8 <HAL_RCC_OscConfig+0xb0>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065c4:	d10c      	bne.n	80065e0 <HAL_RCC_OscConfig+0x98>
 80065c6:	4b70      	ldr	r3, [pc, #448]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a6f      	ldr	r2, [pc, #444]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065d0:	6013      	str	r3, [r2, #0]
 80065d2:	4b6d      	ldr	r3, [pc, #436]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a6c      	ldr	r2, [pc, #432]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e00b      	b.n	80065f8 <HAL_RCC_OscConfig+0xb0>
 80065e0:	4b69      	ldr	r3, [pc, #420]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a68      	ldr	r2, [pc, #416]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	4b66      	ldr	r3, [pc, #408]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a65      	ldr	r2, [pc, #404]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80065f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80065f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d013      	beq.n	8006628 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006600:	f7fc fc84 	bl	8002f0c <HAL_GetTick>
 8006604:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006606:	e008      	b.n	800661a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006608:	f7fc fc80 	bl	8002f0c <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	2b64      	cmp	r3, #100	@ 0x64
 8006614:	d901      	bls.n	800661a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006616:	2303      	movs	r3, #3
 8006618:	e207      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800661a:	4b5b      	ldr	r3, [pc, #364]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0f0      	beq.n	8006608 <HAL_RCC_OscConfig+0xc0>
 8006626:	e014      	b.n	8006652 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006628:	f7fc fc70 	bl	8002f0c <HAL_GetTick>
 800662c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662e:	e008      	b.n	8006642 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006630:	f7fc fc6c 	bl	8002f0c <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b64      	cmp	r3, #100	@ 0x64
 800663c:	d901      	bls.n	8006642 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e1f3      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006642:	4b51      	ldr	r3, [pc, #324]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <HAL_RCC_OscConfig+0xe8>
 800664e:	e000      	b.n	8006652 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006650:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0302 	and.w	r3, r3, #2
 800665a:	2b00      	cmp	r3, #0
 800665c:	d063      	beq.n	8006726 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800665e:	4b4a      	ldr	r3, [pc, #296]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f003 030c 	and.w	r3, r3, #12
 8006666:	2b00      	cmp	r3, #0
 8006668:	d00b      	beq.n	8006682 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800666a:	4b47      	ldr	r3, [pc, #284]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006672:	2b08      	cmp	r3, #8
 8006674:	d11c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006676:	4b44      	ldr	r3, [pc, #272]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d116      	bne.n	80066b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006682:	4b41      	ldr	r3, [pc, #260]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f003 0302 	and.w	r3, r3, #2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d005      	beq.n	800669a <HAL_RCC_OscConfig+0x152>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	68db      	ldr	r3, [r3, #12]
 8006692:	2b01      	cmp	r3, #1
 8006694:	d001      	beq.n	800669a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e1c7      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800669a:	4b3b      	ldr	r3, [pc, #236]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	00db      	lsls	r3, r3, #3
 80066a8:	4937      	ldr	r1, [pc, #220]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ae:	e03a      	b.n	8006726 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	68db      	ldr	r3, [r3, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d020      	beq.n	80066fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066b8:	4b34      	ldr	r3, [pc, #208]	@ (800678c <HAL_RCC_OscConfig+0x244>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066be:	f7fc fc25 	bl	8002f0c <HAL_GetTick>
 80066c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066c4:	e008      	b.n	80066d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066c6:	f7fc fc21 	bl	8002f0c <HAL_GetTick>
 80066ca:	4602      	mov	r2, r0
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	1ad3      	subs	r3, r2, r3
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d901      	bls.n	80066d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066d4:	2303      	movs	r3, #3
 80066d6:	e1a8      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066d8:	4b2b      	ldr	r3, [pc, #172]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f003 0302 	and.w	r3, r3, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0f0      	beq.n	80066c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066e4:	4b28      	ldr	r3, [pc, #160]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	4925      	ldr	r1, [pc, #148]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	600b      	str	r3, [r1, #0]
 80066f8:	e015      	b.n	8006726 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066fa:	4b24      	ldr	r3, [pc, #144]	@ (800678c <HAL_RCC_OscConfig+0x244>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006700:	f7fc fc04 	bl	8002f0c <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006708:	f7fc fc00 	bl	8002f0c <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e187      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800671a:	4b1b      	ldr	r3, [pc, #108]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f003 0308 	and.w	r3, r3, #8
 800672e:	2b00      	cmp	r3, #0
 8006730:	d036      	beq.n	80067a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d016      	beq.n	8006768 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800673a:	4b15      	ldr	r3, [pc, #84]	@ (8006790 <HAL_RCC_OscConfig+0x248>)
 800673c:	2201      	movs	r2, #1
 800673e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006740:	f7fc fbe4 	bl	8002f0c <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006748:	f7fc fbe0 	bl	8002f0c <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e167      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800675a:	4b0b      	ldr	r3, [pc, #44]	@ (8006788 <HAL_RCC_OscConfig+0x240>)
 800675c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800675e:	f003 0302 	and.w	r3, r3, #2
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x200>
 8006766:	e01b      	b.n	80067a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006768:	4b09      	ldr	r3, [pc, #36]	@ (8006790 <HAL_RCC_OscConfig+0x248>)
 800676a:	2200      	movs	r2, #0
 800676c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800676e:	f7fc fbcd 	bl	8002f0c <HAL_GetTick>
 8006772:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006774:	e00e      	b.n	8006794 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006776:	f7fc fbc9 	bl	8002f0c <HAL_GetTick>
 800677a:	4602      	mov	r2, r0
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	1ad3      	subs	r3, r2, r3
 8006780:	2b02      	cmp	r3, #2
 8006782:	d907      	bls.n	8006794 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006784:	2303      	movs	r3, #3
 8006786:	e150      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
 8006788:	40023800 	.word	0x40023800
 800678c:	42470000 	.word	0x42470000
 8006790:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006794:	4b88      	ldr	r3, [pc, #544]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006798:	f003 0302 	and.w	r3, r3, #2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d1ea      	bne.n	8006776 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0304 	and.w	r3, r3, #4
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8097 	beq.w	80068dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067ae:	2300      	movs	r3, #0
 80067b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067b2:	4b81      	ldr	r3, [pc, #516]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10f      	bne.n	80067de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067be:	2300      	movs	r3, #0
 80067c0:	60bb      	str	r3, [r7, #8]
 80067c2:	4b7d      	ldr	r3, [pc, #500]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c6:	4a7c      	ldr	r2, [pc, #496]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80067c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80067ce:	4b7a      	ldr	r3, [pc, #488]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80067d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067d6:	60bb      	str	r3, [r7, #8]
 80067d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067da:	2301      	movs	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067de:	4b77      	ldr	r3, [pc, #476]	@ (80069bc <HAL_RCC_OscConfig+0x474>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d118      	bne.n	800681c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80067ea:	4b74      	ldr	r3, [pc, #464]	@ (80069bc <HAL_RCC_OscConfig+0x474>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a73      	ldr	r2, [pc, #460]	@ (80069bc <HAL_RCC_OscConfig+0x474>)
 80067f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067f6:	f7fc fb89 	bl	8002f0c <HAL_GetTick>
 80067fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80067fc:	e008      	b.n	8006810 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067fe:	f7fc fb85 	bl	8002f0c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	2b02      	cmp	r3, #2
 800680a:	d901      	bls.n	8006810 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e10c      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006810:	4b6a      	ldr	r3, [pc, #424]	@ (80069bc <HAL_RCC_OscConfig+0x474>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0f0      	beq.n	80067fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	2b01      	cmp	r3, #1
 8006822:	d106      	bne.n	8006832 <HAL_RCC_OscConfig+0x2ea>
 8006824:	4b64      	ldr	r3, [pc, #400]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006828:	4a63      	ldr	r2, [pc, #396]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 800682a:	f043 0301 	orr.w	r3, r3, #1
 800682e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006830:	e01c      	b.n	800686c <HAL_RCC_OscConfig+0x324>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	689b      	ldr	r3, [r3, #8]
 8006836:	2b05      	cmp	r3, #5
 8006838:	d10c      	bne.n	8006854 <HAL_RCC_OscConfig+0x30c>
 800683a:	4b5f      	ldr	r3, [pc, #380]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800683e:	4a5e      	ldr	r2, [pc, #376]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006840:	f043 0304 	orr.w	r3, r3, #4
 8006844:	6713      	str	r3, [r2, #112]	@ 0x70
 8006846:	4b5c      	ldr	r3, [pc, #368]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684a:	4a5b      	ldr	r2, [pc, #364]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 800684c:	f043 0301 	orr.w	r3, r3, #1
 8006850:	6713      	str	r3, [r2, #112]	@ 0x70
 8006852:	e00b      	b.n	800686c <HAL_RCC_OscConfig+0x324>
 8006854:	4b58      	ldr	r3, [pc, #352]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006856:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006858:	4a57      	ldr	r2, [pc, #348]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 800685a:	f023 0301 	bic.w	r3, r3, #1
 800685e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006860:	4b55      	ldr	r3, [pc, #340]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006862:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006864:	4a54      	ldr	r2, [pc, #336]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006866:	f023 0304 	bic.w	r3, r3, #4
 800686a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d015      	beq.n	80068a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006874:	f7fc fb4a 	bl	8002f0c <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800687a:	e00a      	b.n	8006892 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800687c:	f7fc fb46 	bl	8002f0c <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f241 3288 	movw	r2, #5000	@ 0x1388
 800688a:	4293      	cmp	r3, r2
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e0cb      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006892:	4b49      	ldr	r3, [pc, #292]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0ee      	beq.n	800687c <HAL_RCC_OscConfig+0x334>
 800689e:	e014      	b.n	80068ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068a0:	f7fc fb34 	bl	8002f0c <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068a6:	e00a      	b.n	80068be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a8:	f7fc fb30 	bl	8002f0c <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d901      	bls.n	80068be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068ba:	2303      	movs	r3, #3
 80068bc:	e0b5      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068be:	4b3e      	ldr	r3, [pc, #248]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80068c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1ee      	bne.n	80068a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068ca:	7dfb      	ldrb	r3, [r7, #23]
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d105      	bne.n	80068dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068d0:	4b39      	ldr	r3, [pc, #228]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80068d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068d4:	4a38      	ldr	r2, [pc, #224]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80068d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	699b      	ldr	r3, [r3, #24]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	f000 80a1 	beq.w	8006a28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80068e6:	4b34      	ldr	r3, [pc, #208]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 030c 	and.w	r3, r3, #12
 80068ee:	2b08      	cmp	r3, #8
 80068f0:	d05c      	beq.n	80069ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	2b02      	cmp	r3, #2
 80068f8:	d141      	bne.n	800697e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80068fa:	4b31      	ldr	r3, [pc, #196]	@ (80069c0 <HAL_RCC_OscConfig+0x478>)
 80068fc:	2200      	movs	r2, #0
 80068fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006900:	f7fc fb04 	bl	8002f0c <HAL_GetTick>
 8006904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006906:	e008      	b.n	800691a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006908:	f7fc fb00 	bl	8002f0c <HAL_GetTick>
 800690c:	4602      	mov	r2, r0
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	2b02      	cmp	r3, #2
 8006914:	d901      	bls.n	800691a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e087      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800691a:	4b27      	ldr	r3, [pc, #156]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d1f0      	bne.n	8006908 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	69da      	ldr	r2, [r3, #28]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	431a      	orrs	r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006934:	019b      	lsls	r3, r3, #6
 8006936:	431a      	orrs	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800693c:	085b      	lsrs	r3, r3, #1
 800693e:	3b01      	subs	r3, #1
 8006940:	041b      	lsls	r3, r3, #16
 8006942:	431a      	orrs	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006948:	061b      	lsls	r3, r3, #24
 800694a:	491b      	ldr	r1, [pc, #108]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 800694c:	4313      	orrs	r3, r2
 800694e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006950:	4b1b      	ldr	r3, [pc, #108]	@ (80069c0 <HAL_RCC_OscConfig+0x478>)
 8006952:	2201      	movs	r2, #1
 8006954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006956:	f7fc fad9 	bl	8002f0c <HAL_GetTick>
 800695a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800695c:	e008      	b.n	8006970 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800695e:	f7fc fad5 	bl	8002f0c <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	2b02      	cmp	r3, #2
 800696a:	d901      	bls.n	8006970 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800696c:	2303      	movs	r3, #3
 800696e:	e05c      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006970:	4b11      	ldr	r3, [pc, #68]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006978:	2b00      	cmp	r3, #0
 800697a:	d0f0      	beq.n	800695e <HAL_RCC_OscConfig+0x416>
 800697c:	e054      	b.n	8006a28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800697e:	4b10      	ldr	r3, [pc, #64]	@ (80069c0 <HAL_RCC_OscConfig+0x478>)
 8006980:	2200      	movs	r2, #0
 8006982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006984:	f7fc fac2 	bl	8002f0c <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800698c:	f7fc fabe 	bl	8002f0c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e045      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800699e:	4b06      	ldr	r3, [pc, #24]	@ (80069b8 <HAL_RCC_OscConfig+0x470>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1f0      	bne.n	800698c <HAL_RCC_OscConfig+0x444>
 80069aa:	e03d      	b.n	8006a28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d107      	bne.n	80069c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069b4:	2301      	movs	r3, #1
 80069b6:	e038      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
 80069b8:	40023800 	.word	0x40023800
 80069bc:	40007000 	.word	0x40007000
 80069c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069c4:	4b1b      	ldr	r3, [pc, #108]	@ (8006a34 <HAL_RCC_OscConfig+0x4ec>)
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d028      	beq.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069dc:	429a      	cmp	r2, r3
 80069de:	d121      	bne.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d11a      	bne.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80069f4:	4013      	ands	r3, r2
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80069fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d111      	bne.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a0a:	085b      	lsrs	r3, r3, #1
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d107      	bne.n	8006a24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d001      	beq.n	8006a28 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e000      	b.n	8006a2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3718      	adds	r7, #24
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40023800 	.word	0x40023800

08006a38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d101      	bne.n	8006a4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e0cc      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a4c:	4b68      	ldr	r3, [pc, #416]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f003 030f 	and.w	r3, r3, #15
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d90c      	bls.n	8006a74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a5a:	4b65      	ldr	r3, [pc, #404]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a5c:	683a      	ldr	r2, [r7, #0]
 8006a5e:	b2d2      	uxtb	r2, r2
 8006a60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a62:	4b63      	ldr	r3, [pc, #396]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f003 030f 	and.w	r3, r3, #15
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d001      	beq.n	8006a74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	e0b8      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d020      	beq.n	8006ac2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f003 0304 	and.w	r3, r3, #4
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d005      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006a8c:	4b59      	ldr	r3, [pc, #356]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	4a58      	ldr	r2, [pc, #352]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006a92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006a96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0308 	and.w	r3, r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d005      	beq.n	8006ab0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006aa4:	4b53      	ldr	r3, [pc, #332]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	4a52      	ldr	r2, [pc, #328]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006aaa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006aae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ab0:	4b50      	ldr	r3, [pc, #320]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	494d      	ldr	r1, [pc, #308]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006abe:	4313      	orrs	r3, r2
 8006ac0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d044      	beq.n	8006b58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d107      	bne.n	8006ae6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad6:	4b47      	ldr	r3, [pc, #284]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d119      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	e07f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	685b      	ldr	r3, [r3, #4]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d003      	beq.n	8006af6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d107      	bne.n	8006b06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af6:	4b3f      	ldr	r3, [pc, #252]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d109      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e06f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b06:	4b3b      	ldr	r3, [pc, #236]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f003 0302 	and.w	r3, r3, #2
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d101      	bne.n	8006b16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e067      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b16:	4b37      	ldr	r3, [pc, #220]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f023 0203 	bic.w	r2, r3, #3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
 8006b22:	4934      	ldr	r1, [pc, #208]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b24:	4313      	orrs	r3, r2
 8006b26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b28:	f7fc f9f0 	bl	8002f0c <HAL_GetTick>
 8006b2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b2e:	e00a      	b.n	8006b46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b30:	f7fc f9ec 	bl	8002f0c <HAL_GetTick>
 8006b34:	4602      	mov	r2, r0
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1ad3      	subs	r3, r2, r3
 8006b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e04f      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b46:	4b2b      	ldr	r3, [pc, #172]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 020c 	and.w	r2, r3, #12
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d1eb      	bne.n	8006b30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b58:	4b25      	ldr	r3, [pc, #148]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 030f 	and.w	r3, r3, #15
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d20c      	bcs.n	8006b80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b66:	4b22      	ldr	r3, [pc, #136]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b68:	683a      	ldr	r2, [r7, #0]
 8006b6a:	b2d2      	uxtb	r2, r2
 8006b6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b6e:	4b20      	ldr	r3, [pc, #128]	@ (8006bf0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 030f 	and.w	r3, r3, #15
 8006b76:	683a      	ldr	r2, [r7, #0]
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d001      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e032      	b.n	8006be6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f003 0304 	and.w	r3, r3, #4
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d008      	beq.n	8006b9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006b8c:	4b19      	ldr	r3, [pc, #100]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	4916      	ldr	r1, [pc, #88]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f003 0308 	and.w	r3, r3, #8
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d009      	beq.n	8006bbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006baa:	4b12      	ldr	r3, [pc, #72]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	691b      	ldr	r3, [r3, #16]
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	490e      	ldr	r1, [pc, #56]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006bbe:	f000 f821 	bl	8006c04 <HAL_RCC_GetSysClockFreq>
 8006bc2:	4602      	mov	r2, r0
 8006bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f003 030f 	and.w	r3, r3, #15
 8006bce:	490a      	ldr	r1, [pc, #40]	@ (8006bf8 <HAL_RCC_ClockConfig+0x1c0>)
 8006bd0:	5ccb      	ldrb	r3, [r1, r3]
 8006bd2:	fa22 f303 	lsr.w	r3, r2, r3
 8006bd6:	4a09      	ldr	r2, [pc, #36]	@ (8006bfc <HAL_RCC_ClockConfig+0x1c4>)
 8006bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006bda:	4b09      	ldr	r3, [pc, #36]	@ (8006c00 <HAL_RCC_ClockConfig+0x1c8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4618      	mov	r0, r3
 8006be0:	f7fb feca 	bl	8002978 <HAL_InitTick>

  return HAL_OK;
 8006be4:	2300      	movs	r3, #0
}
 8006be6:	4618      	mov	r0, r3
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40023c00 	.word	0x40023c00
 8006bf4:	40023800 	.word	0x40023800
 8006bf8:	0800e768 	.word	0x0800e768
 8006bfc:	20000004 	.word	0x20000004
 8006c00:	20000008 	.word	0x20000008

08006c04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c08:	b094      	sub	sp, #80	@ 0x50
 8006c0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c14:	2300      	movs	r3, #0
 8006c16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c18:	2300      	movs	r3, #0
 8006c1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c1c:	4b79      	ldr	r3, [pc, #484]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c1e:	689b      	ldr	r3, [r3, #8]
 8006c20:	f003 030c 	and.w	r3, r3, #12
 8006c24:	2b08      	cmp	r3, #8
 8006c26:	d00d      	beq.n	8006c44 <HAL_RCC_GetSysClockFreq+0x40>
 8006c28:	2b08      	cmp	r3, #8
 8006c2a:	f200 80e1 	bhi.w	8006df0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d002      	beq.n	8006c38 <HAL_RCC_GetSysClockFreq+0x34>
 8006c32:	2b04      	cmp	r3, #4
 8006c34:	d003      	beq.n	8006c3e <HAL_RCC_GetSysClockFreq+0x3a>
 8006c36:	e0db      	b.n	8006df0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c38:	4b73      	ldr	r3, [pc, #460]	@ (8006e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c3a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c3c:	e0db      	b.n	8006df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c3e:	4b73      	ldr	r3, [pc, #460]	@ (8006e0c <HAL_RCC_GetSysClockFreq+0x208>)
 8006c40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c42:	e0d8      	b.n	8006df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c44:	4b6f      	ldr	r3, [pc, #444]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c4e:	4b6d      	ldr	r3, [pc, #436]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d063      	beq.n	8006d22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	099b      	lsrs	r3, r3, #6
 8006c60:	2200      	movs	r2, #0
 8006c62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c6e:	2300      	movs	r3, #0
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c76:	4622      	mov	r2, r4
 8006c78:	462b      	mov	r3, r5
 8006c7a:	f04f 0000 	mov.w	r0, #0
 8006c7e:	f04f 0100 	mov.w	r1, #0
 8006c82:	0159      	lsls	r1, r3, #5
 8006c84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006c88:	0150      	lsls	r0, r2, #5
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4621      	mov	r1, r4
 8006c90:	1a51      	subs	r1, r2, r1
 8006c92:	6139      	str	r1, [r7, #16]
 8006c94:	4629      	mov	r1, r5
 8006c96:	eb63 0301 	sbc.w	r3, r3, r1
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	f04f 0200 	mov.w	r2, #0
 8006ca0:	f04f 0300 	mov.w	r3, #0
 8006ca4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ca8:	4659      	mov	r1, fp
 8006caa:	018b      	lsls	r3, r1, #6
 8006cac:	4651      	mov	r1, sl
 8006cae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cb2:	4651      	mov	r1, sl
 8006cb4:	018a      	lsls	r2, r1, #6
 8006cb6:	4651      	mov	r1, sl
 8006cb8:	ebb2 0801 	subs.w	r8, r2, r1
 8006cbc:	4659      	mov	r1, fp
 8006cbe:	eb63 0901 	sbc.w	r9, r3, r1
 8006cc2:	f04f 0200 	mov.w	r2, #0
 8006cc6:	f04f 0300 	mov.w	r3, #0
 8006cca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cd6:	4690      	mov	r8, r2
 8006cd8:	4699      	mov	r9, r3
 8006cda:	4623      	mov	r3, r4
 8006cdc:	eb18 0303 	adds.w	r3, r8, r3
 8006ce0:	60bb      	str	r3, [r7, #8]
 8006ce2:	462b      	mov	r3, r5
 8006ce4:	eb49 0303 	adc.w	r3, r9, r3
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	024b      	lsls	r3, r1, #9
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d00:	4621      	mov	r1, r4
 8006d02:	024a      	lsls	r2, r1, #9
 8006d04:	4610      	mov	r0, r2
 8006d06:	4619      	mov	r1, r3
 8006d08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d14:	f7f9 ff58 	bl	8000bc8 <__aeabi_uldivmod>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	460b      	mov	r3, r1
 8006d1c:	4613      	mov	r3, r2
 8006d1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d20:	e058      	b.n	8006dd4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d22:	4b38      	ldr	r3, [pc, #224]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	099b      	lsrs	r3, r3, #6
 8006d28:	2200      	movs	r2, #0
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	4611      	mov	r1, r2
 8006d2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	2300      	movs	r3, #0
 8006d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	464b      	mov	r3, r9
 8006d40:	f04f 0000 	mov.w	r0, #0
 8006d44:	f04f 0100 	mov.w	r1, #0
 8006d48:	0159      	lsls	r1, r3, #5
 8006d4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d4e:	0150      	lsls	r0, r2, #5
 8006d50:	4602      	mov	r2, r0
 8006d52:	460b      	mov	r3, r1
 8006d54:	4641      	mov	r1, r8
 8006d56:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d5a:	4649      	mov	r1, r9
 8006d5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	f04f 0300 	mov.w	r3, #0
 8006d68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d74:	ebb2 040a 	subs.w	r4, r2, sl
 8006d78:	eb63 050b 	sbc.w	r5, r3, fp
 8006d7c:	f04f 0200 	mov.w	r2, #0
 8006d80:	f04f 0300 	mov.w	r3, #0
 8006d84:	00eb      	lsls	r3, r5, #3
 8006d86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d8a:	00e2      	lsls	r2, r4, #3
 8006d8c:	4614      	mov	r4, r2
 8006d8e:	461d      	mov	r5, r3
 8006d90:	4643      	mov	r3, r8
 8006d92:	18e3      	adds	r3, r4, r3
 8006d94:	603b      	str	r3, [r7, #0]
 8006d96:	464b      	mov	r3, r9
 8006d98:	eb45 0303 	adc.w	r3, r5, r3
 8006d9c:	607b      	str	r3, [r7, #4]
 8006d9e:	f04f 0200 	mov.w	r2, #0
 8006da2:	f04f 0300 	mov.w	r3, #0
 8006da6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006daa:	4629      	mov	r1, r5
 8006dac:	028b      	lsls	r3, r1, #10
 8006dae:	4621      	mov	r1, r4
 8006db0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006db4:	4621      	mov	r1, r4
 8006db6:	028a      	lsls	r2, r1, #10
 8006db8:	4610      	mov	r0, r2
 8006dba:	4619      	mov	r1, r3
 8006dbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	61bb      	str	r3, [r7, #24]
 8006dc2:	61fa      	str	r2, [r7, #28]
 8006dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dc8:	f7f9 fefe 	bl	8000bc8 <__aeabi_uldivmod>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	460b      	mov	r3, r1
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006dd4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e04 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	0c1b      	lsrs	r3, r3, #16
 8006dda:	f003 0303 	and.w	r3, r3, #3
 8006dde:	3301      	adds	r3, #1
 8006de0:	005b      	lsls	r3, r3, #1
 8006de2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006de4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006dee:	e002      	b.n	8006df6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006df0:	4b05      	ldr	r3, [pc, #20]	@ (8006e08 <HAL_RCC_GetSysClockFreq+0x204>)
 8006df2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006df4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006df6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3750      	adds	r7, #80	@ 0x50
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e02:	bf00      	nop
 8006e04:	40023800 	.word	0x40023800
 8006e08:	00f42400 	.word	0x00f42400
 8006e0c:	007a1200 	.word	0x007a1200

08006e10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e10:	b480      	push	{r7}
 8006e12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e14:	4b03      	ldr	r3, [pc, #12]	@ (8006e24 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e16:	681b      	ldr	r3, [r3, #0]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20000004 	.word	0x20000004

08006e28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e2c:	f7ff fff0 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e30:	4602      	mov	r2, r0
 8006e32:	4b05      	ldr	r3, [pc, #20]	@ (8006e48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	0a9b      	lsrs	r3, r3, #10
 8006e38:	f003 0307 	and.w	r3, r3, #7
 8006e3c:	4903      	ldr	r1, [pc, #12]	@ (8006e4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e3e:	5ccb      	ldrb	r3, [r1, r3]
 8006e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	40023800 	.word	0x40023800
 8006e4c:	0800e778 	.word	0x0800e778

08006e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e54:	f7ff ffdc 	bl	8006e10 <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b05      	ldr	r3, [pc, #20]	@ (8006e70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	0b5b      	lsrs	r3, r3, #13
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4903      	ldr	r1, [pc, #12]	@ (8006e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40023800 	.word	0x40023800
 8006e74:	0800e778 	.word	0x0800e778

08006e78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b083      	sub	sp, #12
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	220f      	movs	r2, #15
 8006e86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006e88:	4b12      	ldr	r3, [pc, #72]	@ (8006ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f003 0203 	and.w	r2, r3, #3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006e94:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006ea0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006eac:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <HAL_RCC_GetClockConfig+0x5c>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	08db      	lsrs	r3, r3, #3
 8006eb2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006eba:	4b07      	ldr	r3, [pc, #28]	@ (8006ed8 <HAL_RCC_GetClockConfig+0x60>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f003 020f 	and.w	r2, r3, #15
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	601a      	str	r2, [r3, #0]
}
 8006ec6:	bf00      	nop
 8006ec8:	370c      	adds	r7, #12
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40023800 	.word	0x40023800
 8006ed8:	40023c00 	.word	0x40023c00

08006edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b086      	sub	sp, #24
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f003 0301 	and.w	r3, r3, #1
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d105      	bne.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d075      	beq.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006f10:	4b91      	ldr	r3, [pc, #580]	@ (8007158 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006f12:	2200      	movs	r2, #0
 8006f14:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f16:	f7fb fff9 	bl	8002f0c <HAL_GetTick>
 8006f1a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f1c:	e008      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006f1e:	f7fb fff5 	bl	8002f0c <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d901      	bls.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e189      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006f30:	4b8a      	ldr	r3, [pc, #552]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1f0      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f003 0301 	and.w	r3, r3, #1
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d009      	beq.n	8006f5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	019a      	lsls	r2, r3, #6
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	071b      	lsls	r3, r3, #28
 8006f54:	4981      	ldr	r1, [pc, #516]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f56:	4313      	orrs	r3, r2
 8006f58:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d01f      	beq.n	8006fa8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f68:	4b7c      	ldr	r3, [pc, #496]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f6e:	0f1b      	lsrs	r3, r3, #28
 8006f70:	f003 0307 	and.w	r3, r3, #7
 8006f74:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	019a      	lsls	r2, r3, #6
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	061b      	lsls	r3, r3, #24
 8006f82:	431a      	orrs	r2, r3
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	071b      	lsls	r3, r3, #28
 8006f88:	4974      	ldr	r1, [pc, #464]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f8a:	4313      	orrs	r3, r2
 8006f8c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f90:	4b72      	ldr	r3, [pc, #456]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006f92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f96:	f023 021f 	bic.w	r2, r3, #31
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	69db      	ldr	r3, [r3, #28]
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	496e      	ldr	r1, [pc, #440]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00d      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	019a      	lsls	r2, r3, #6
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	061b      	lsls	r3, r3, #24
 8006fc0:	431a      	orrs	r2, r3
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	071b      	lsls	r3, r3, #28
 8006fc8:	4964      	ldr	r1, [pc, #400]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006fd0:	4b61      	ldr	r3, [pc, #388]	@ (8007158 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fd6:	f7fb ff99 	bl	8002f0c <HAL_GetTick>
 8006fda:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fde:	f7fb ff95 	bl	8002f0c <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e129      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ff0:	4b5a      	ldr	r3, [pc, #360]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0304 	and.w	r3, r3, #4
 8007004:	2b00      	cmp	r3, #0
 8007006:	d105      	bne.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007010:	2b00      	cmp	r3, #0
 8007012:	d079      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007014:	4b52      	ldr	r3, [pc, #328]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007016:	2200      	movs	r2, #0
 8007018:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800701a:	f7fb ff77 	bl	8002f0c <HAL_GetTick>
 800701e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007020:	e008      	b.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007022:	f7fb ff73 	bl	8002f0c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e107      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007034:	4b49      	ldr	r3, [pc, #292]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800703c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007040:	d0ef      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d020      	beq.n	8007090 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800704e:	4b43      	ldr	r3, [pc, #268]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007050:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007054:	0f1b      	lsrs	r3, r3, #28
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	019a      	lsls	r2, r3, #6
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	695b      	ldr	r3, [r3, #20]
 8007066:	061b      	lsls	r3, r3, #24
 8007068:	431a      	orrs	r2, r3
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	071b      	lsls	r3, r3, #28
 800706e:	493b      	ldr	r1, [pc, #236]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007070:	4313      	orrs	r3, r2
 8007072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007076:	4b39      	ldr	r3, [pc, #228]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007078:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800707c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6a1b      	ldr	r3, [r3, #32]
 8007084:	3b01      	subs	r3, #1
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	4934      	ldr	r1, [pc, #208]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800708a:	4313      	orrs	r3, r2
 800708c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0308 	and.w	r3, r3, #8
 8007098:	2b00      	cmp	r3, #0
 800709a:	d01e      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800709c:	4b2f      	ldr	r3, [pc, #188]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800709e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070a2:	0e1b      	lsrs	r3, r3, #24
 80070a4:	f003 030f 	and.w	r3, r3, #15
 80070a8:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	691b      	ldr	r3, [r3, #16]
 80070ae:	019a      	lsls	r2, r3, #6
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	061b      	lsls	r3, r3, #24
 80070b4:	431a      	orrs	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	699b      	ldr	r3, [r3, #24]
 80070ba:	071b      	lsls	r3, r3, #28
 80070bc:	4927      	ldr	r1, [pc, #156]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070be:	4313      	orrs	r3, r2
 80070c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80070c4:	4b25      	ldr	r3, [pc, #148]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ca:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d2:	4922      	ldr	r1, [pc, #136]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d4:	4313      	orrs	r3, r2
 80070d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80070da:	4b21      	ldr	r3, [pc, #132]	@ (8007160 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80070dc:	2201      	movs	r2, #1
 80070de:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070e0:	f7fb ff14 	bl	8002f0c <HAL_GetTick>
 80070e4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070e8:	f7fb ff10 	bl	8002f0c <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e0a4      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80070fa:	4b18      	ldr	r3, [pc, #96]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007102:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007106:	d1ef      	bne.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 0320 	and.w	r3, r3, #32
 8007110:	2b00      	cmp	r3, #0
 8007112:	f000 808b 	beq.w	800722c <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
 800711a:	4b10      	ldr	r3, [pc, #64]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800711c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800711e:	4a0f      	ldr	r2, [pc, #60]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007120:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007124:	6413      	str	r3, [r2, #64]	@ 0x40
 8007126:	4b0d      	ldr	r3, [pc, #52]	@ (800715c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800712a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800712e:	60fb      	str	r3, [r7, #12]
 8007130:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007132:	4b0c      	ldr	r3, [pc, #48]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a0b      	ldr	r2, [pc, #44]	@ (8007164 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007138:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800713c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800713e:	f7fb fee5 	bl	8002f0c <HAL_GetTick>
 8007142:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007144:	e010      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007146:	f7fb fee1 	bl	8002f0c <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b02      	cmp	r3, #2
 8007152:	d909      	bls.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e075      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007158:	42470068 	.word	0x42470068
 800715c:	40023800 	.word	0x40023800
 8007160:	42470070 	.word	0x42470070
 8007164:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007168:	4b38      	ldr	r3, [pc, #224]	@ (800724c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007170:	2b00      	cmp	r3, #0
 8007172:	d0e8      	beq.n	8007146 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007174:	4b36      	ldr	r3, [pc, #216]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007178:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800717c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800717e:	693b      	ldr	r3, [r7, #16]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d02f      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007188:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	429a      	cmp	r2, r3
 8007190:	d028      	beq.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007192:	4b2f      	ldr	r3, [pc, #188]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007194:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007196:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800719a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800719c:	4b2d      	ldr	r3, [pc, #180]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800719e:	2201      	movs	r2, #1
 80071a0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80071a2:	4b2c      	ldr	r3, [pc, #176]	@ (8007254 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80071a8:	4a29      	ldr	r2, [pc, #164]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80071ae:	4b28      	ldr	r3, [pc, #160]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d114      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80071ba:	f7fb fea7 	bl	8002f0c <HAL_GetTick>
 80071be:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071c0:	e00a      	b.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071c2:	f7fb fea3 	bl	8002f0c <HAL_GetTick>
 80071c6:	4602      	mov	r2, r0
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	1ad3      	subs	r3, r2, r3
 80071cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d901      	bls.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e035      	b.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80071d8:	4b1d      	ldr	r3, [pc, #116]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071dc:	f003 0302 	and.w	r3, r3, #2
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d0ee      	beq.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80071ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80071f0:	d10d      	bne.n	800720e <HAL_RCCEx_PeriphCLKConfig+0x332>
 80071f2:	4b17      	ldr	r3, [pc, #92]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80071f4:	689b      	ldr	r3, [r3, #8]
 80071f6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007202:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007206:	4912      	ldr	r1, [pc, #72]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007208:	4313      	orrs	r3, r2
 800720a:	608b      	str	r3, [r1, #8]
 800720c:	e005      	b.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800720e:	4b10      	ldr	r3, [pc, #64]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	4a0f      	ldr	r2, [pc, #60]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007214:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007218:	6093      	str	r3, [r2, #8]
 800721a:	4b0d      	ldr	r3, [pc, #52]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800721c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007226:	490a      	ldr	r1, [pc, #40]	@ (8007250 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007228:	4313      	orrs	r3, r2
 800722a:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0310 	and.w	r3, r3, #16
 8007234:	2b00      	cmp	r3, #0
 8007236:	d004      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800723e:	4b06      	ldr	r3, [pc, #24]	@ (8007258 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007240:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3718      	adds	r7, #24
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	40007000 	.word	0x40007000
 8007250:	40023800 	.word	0x40023800
 8007254:	42470e40 	.word	0x42470e40
 8007258:	424711e0 	.word	0x424711e0

0800725c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d101      	bne.n	8007270 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e025      	b.n	80072bc <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b00      	cmp	r3, #0
 800727a:	d106      	bne.n	800728a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f7f9 ffc7 	bl	8001218 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2202      	movs	r2, #2
 800728e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f001 ffad 	bl	80091fc <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6818      	ldr	r0, [r3, #0]
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	461a      	mov	r2, r3
 80072ac:	6839      	ldr	r1, [r7, #0]
 80072ae:	f002 f802 	bl	80092b6 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d101      	bne.n	80072d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072d2:	2301      	movs	r3, #1
 80072d4:	e07b      	b.n	80073ce <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d108      	bne.n	80072f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072e6:	d009      	beq.n	80072fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2200      	movs	r2, #0
 80072ec:	61da      	str	r2, [r3, #28]
 80072ee:	e005      	b.n	80072fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2200      	movs	r2, #0
 8007300:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d106      	bne.n	800731c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2200      	movs	r2, #0
 8007312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f7fb fa88 	bl	800282c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2202      	movs	r2, #2
 8007320:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	681a      	ldr	r2, [r3, #0]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007332:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007344:	431a      	orrs	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	691b      	ldr	r3, [r3, #16]
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	431a      	orrs	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	699b      	ldr	r3, [r3, #24]
 8007368:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800736c:	431a      	orrs	r2, r3
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007376:	431a      	orrs	r2, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6a1b      	ldr	r3, [r3, #32]
 800737c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007380:	ea42 0103 	orr.w	r1, r2, r3
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	0c1b      	lsrs	r3, r3, #16
 800739a:	f003 0104 	and.w	r1, r3, #4
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073a2:	f003 0210 	and.w	r2, r3, #16
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	69da      	ldr	r2, [r3, #28]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073bc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3708      	adds	r7, #8
 80073d2:	46bd      	mov	sp, r7
 80073d4:	bd80      	pop	{r7, pc}

080073d6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073d6:	b580      	push	{r7, lr}
 80073d8:	b088      	sub	sp, #32
 80073da:	af00      	add	r7, sp, #0
 80073dc:	60f8      	str	r0, [r7, #12]
 80073de:	60b9      	str	r1, [r7, #8]
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4613      	mov	r3, r2
 80073e4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073e6:	f7fb fd91 	bl	8002f0c <HAL_GetTick>
 80073ea:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80073ec:	88fb      	ldrh	r3, [r7, #6]
 80073ee:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d001      	beq.n	8007400 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80073fc:	2302      	movs	r3, #2
 80073fe:	e12a      	b.n	8007656 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d002      	beq.n	800740c <HAL_SPI_Transmit+0x36>
 8007406:	88fb      	ldrh	r3, [r7, #6]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d101      	bne.n	8007410 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e122      	b.n	8007656 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007416:	2b01      	cmp	r3, #1
 8007418:	d101      	bne.n	800741e <HAL_SPI_Transmit+0x48>
 800741a:	2302      	movs	r3, #2
 800741c:	e11b      	b.n	8007656 <HAL_SPI_Transmit+0x280>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2203      	movs	r2, #3
 800742a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	2200      	movs	r2, #0
 8007432:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	88fa      	ldrh	r2, [r7, #6]
 800743e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	88fa      	ldrh	r2, [r7, #6]
 8007444:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	689b      	ldr	r3, [r3, #8]
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800746c:	d10f      	bne.n	800748e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800747c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800748c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007498:	2b40      	cmp	r3, #64	@ 0x40
 800749a:	d007      	beq.n	80074ac <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074b4:	d152      	bne.n	800755c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d002      	beq.n	80074c4 <HAL_SPI_Transmit+0xee>
 80074be:	8b7b      	ldrh	r3, [r7, #26]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d145      	bne.n	8007550 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074c8:	881a      	ldrh	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d4:	1c9a      	adds	r2, r3, #2
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074de:	b29b      	uxth	r3, r3
 80074e0:	3b01      	subs	r3, #1
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80074e8:	e032      	b.n	8007550 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f003 0302 	and.w	r3, r3, #2
 80074f4:	2b02      	cmp	r3, #2
 80074f6:	d112      	bne.n	800751e <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074fc:	881a      	ldrh	r2, [r3, #0]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007508:	1c9a      	adds	r2, r3, #2
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007512:	b29b      	uxth	r3, r3
 8007514:	3b01      	subs	r3, #1
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800751c:	e018      	b.n	8007550 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800751e:	f7fb fcf5 	bl	8002f0c <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	429a      	cmp	r2, r3
 800752c:	d803      	bhi.n	8007536 <HAL_SPI_Transmit+0x160>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007534:	d102      	bne.n	800753c <HAL_SPI_Transmit+0x166>
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d109      	bne.n	8007550 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2201      	movs	r2, #1
 8007540:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2200      	movs	r2, #0
 8007548:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e082      	b.n	8007656 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1c7      	bne.n	80074ea <HAL_SPI_Transmit+0x114>
 800755a:	e053      	b.n	8007604 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d002      	beq.n	800756a <HAL_SPI_Transmit+0x194>
 8007564:	8b7b      	ldrh	r3, [r7, #26]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d147      	bne.n	80075fa <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	330c      	adds	r3, #12
 8007574:	7812      	ldrb	r2, [r2, #0]
 8007576:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007586:	b29b      	uxth	r3, r3
 8007588:	3b01      	subs	r3, #1
 800758a:	b29a      	uxth	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007590:	e033      	b.n	80075fa <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b02      	cmp	r3, #2
 800759e:	d113      	bne.n	80075c8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	330c      	adds	r3, #12
 80075aa:	7812      	ldrb	r2, [r2, #0]
 80075ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075bc:	b29b      	uxth	r3, r3
 80075be:	3b01      	subs	r3, #1
 80075c0:	b29a      	uxth	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075c6:	e018      	b.n	80075fa <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075c8:	f7fb fca0 	bl	8002f0c <HAL_GetTick>
 80075cc:	4602      	mov	r2, r0
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	683a      	ldr	r2, [r7, #0]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d803      	bhi.n	80075e0 <HAL_SPI_Transmit+0x20a>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075de:	d102      	bne.n	80075e6 <HAL_SPI_Transmit+0x210>
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d109      	bne.n	80075fa <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	e02d      	b.n	8007656 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075fe:	b29b      	uxth	r3, r3
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1c6      	bne.n	8007592 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007604:	69fa      	ldr	r2, [r7, #28]
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 fd21 	bl	8008050 <SPI_EndRxTxTransaction>
 800760e:	4603      	mov	r3, r0
 8007610:	2b00      	cmp	r3, #0
 8007612:	d002      	beq.n	800761a <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2220      	movs	r2, #32
 8007618:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007622:	2300      	movs	r3, #0
 8007624:	617b      	str	r3, [r7, #20]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e000      	b.n	8007656 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007654:	2300      	movs	r3, #0
  }
}
 8007656:	4618      	mov	r0, r3
 8007658:	3720      	adds	r7, #32
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b088      	sub	sp, #32
 8007662:	af02      	add	r7, sp, #8
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	603b      	str	r3, [r7, #0]
 800766a:	4613      	mov	r3, r2
 800766c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007674:	b2db      	uxtb	r3, r3
 8007676:	2b01      	cmp	r3, #1
 8007678:	d001      	beq.n	800767e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800767a:	2302      	movs	r3, #2
 800767c:	e104      	b.n	8007888 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007686:	d112      	bne.n	80076ae <HAL_SPI_Receive+0x50>
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	689b      	ldr	r3, [r3, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10e      	bne.n	80076ae <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2204      	movs	r2, #4
 8007694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007698:	88fa      	ldrh	r2, [r7, #6]
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	9300      	str	r3, [sp, #0]
 800769e:	4613      	mov	r3, r2
 80076a0:	68ba      	ldr	r2, [r7, #8]
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f000 f8f3 	bl	8007890 <HAL_SPI_TransmitReceive>
 80076aa:	4603      	mov	r3, r0
 80076ac:	e0ec      	b.n	8007888 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ae:	f7fb fc2d 	bl	8002f0c <HAL_GetTick>
 80076b2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d002      	beq.n	80076c0 <HAL_SPI_Receive+0x62>
 80076ba:	88fb      	ldrh	r3, [r7, #6]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d101      	bne.n	80076c4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
 80076c2:	e0e1      	b.n	8007888 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d101      	bne.n	80076d2 <HAL_SPI_Receive+0x74>
 80076ce:	2302      	movs	r3, #2
 80076d0:	e0da      	b.n	8007888 <HAL_SPI_Receive+0x22a>
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2204      	movs	r2, #4
 80076de:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	68ba      	ldr	r2, [r7, #8]
 80076ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	88fa      	ldrh	r2, [r7, #6]
 80076f2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	88fa      	ldrh	r2, [r7, #6]
 80076f8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	2200      	movs	r2, #0
 80076fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2200      	movs	r2, #0
 8007704:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	2200      	movs	r2, #0
 800770a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007720:	d10f      	bne.n	8007742 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007730:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	681a      	ldr	r2, [r3, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007740:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800774c:	2b40      	cmp	r3, #64	@ 0x40
 800774e:	d007      	beq.n	8007760 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800775e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d170      	bne.n	800784a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007768:	e035      	b.n	80077d6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b01      	cmp	r3, #1
 8007776:	d115      	bne.n	80077a4 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f103 020c 	add.w	r2, r3, #12
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007784:	7812      	ldrb	r2, [r2, #0]
 8007786:	b2d2      	uxtb	r2, r2
 8007788:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800778e:	1c5a      	adds	r2, r3, #1
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007798:	b29b      	uxth	r3, r3
 800779a:	3b01      	subs	r3, #1
 800779c:	b29a      	uxth	r2, r3
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077a2:	e018      	b.n	80077d6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077a4:	f7fb fbb2 	bl	8002f0c <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	d803      	bhi.n	80077bc <HAL_SPI_Receive+0x15e>
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077ba:	d102      	bne.n	80077c2 <HAL_SPI_Receive+0x164>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d109      	bne.n	80077d6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077d2:	2303      	movs	r3, #3
 80077d4:	e058      	b.n	8007888 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077da:	b29b      	uxth	r3, r3
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d1c4      	bne.n	800776a <HAL_SPI_Receive+0x10c>
 80077e0:	e038      	b.n	8007854 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	689b      	ldr	r3, [r3, #8]
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d113      	bne.n	8007818 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077fa:	b292      	uxth	r2, r2
 80077fc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007802:	1c9a      	adds	r2, r3, #2
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800780c:	b29b      	uxth	r3, r3
 800780e:	3b01      	subs	r3, #1
 8007810:	b29a      	uxth	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007816:	e018      	b.n	800784a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007818:	f7fb fb78 	bl	8002f0c <HAL_GetTick>
 800781c:	4602      	mov	r2, r0
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d803      	bhi.n	8007830 <HAL_SPI_Receive+0x1d2>
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800782e:	d102      	bne.n	8007836 <HAL_SPI_Receive+0x1d8>
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d109      	bne.n	800784a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e01e      	b.n	8007888 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800784e:	b29b      	uxth	r3, r3
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1c6      	bne.n	80077e2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	68f8      	ldr	r0, [r7, #12]
 800785a:	f000 fb93 	bl	8007f84 <SPI_EndRxTransaction>
 800785e:	4603      	mov	r3, r0
 8007860:	2b00      	cmp	r3, #0
 8007862:	d002      	beq.n	800786a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	2201      	movs	r2, #1
 800786e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800787e:	2b00      	cmp	r3, #0
 8007880:	d001      	beq.n	8007886 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007882:	2301      	movs	r3, #1
 8007884:	e000      	b.n	8007888 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007886:	2300      	movs	r3, #0
  }
}
 8007888:	4618      	mov	r0, r3
 800788a:	3718      	adds	r7, #24
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b08a      	sub	sp, #40	@ 0x28
 8007894:	af00      	add	r7, sp, #0
 8007896:	60f8      	str	r0, [r7, #12]
 8007898:	60b9      	str	r1, [r7, #8]
 800789a:	607a      	str	r2, [r7, #4]
 800789c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800789e:	2301      	movs	r3, #1
 80078a0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078a2:	f7fb fb33 	bl	8002f0c <HAL_GetTick>
 80078a6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078ae:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80078b6:	887b      	ldrh	r3, [r7, #2]
 80078b8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078ba:	7ffb      	ldrb	r3, [r7, #31]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d00c      	beq.n	80078da <HAL_SPI_TransmitReceive+0x4a>
 80078c0:	69bb      	ldr	r3, [r7, #24]
 80078c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078c6:	d106      	bne.n	80078d6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d102      	bne.n	80078d6 <HAL_SPI_TransmitReceive+0x46>
 80078d0:	7ffb      	ldrb	r3, [r7, #31]
 80078d2:	2b04      	cmp	r3, #4
 80078d4:	d001      	beq.n	80078da <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80078d6:	2302      	movs	r3, #2
 80078d8:	e17f      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d005      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x5c>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d002      	beq.n	80078ec <HAL_SPI_TransmitReceive+0x5c>
 80078e6:	887b      	ldrh	r3, [r7, #2]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e174      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	d101      	bne.n	80078fe <HAL_SPI_TransmitReceive+0x6e>
 80078fa:	2302      	movs	r3, #2
 80078fc:	e16d      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800790c:	b2db      	uxtb	r3, r3
 800790e:	2b04      	cmp	r3, #4
 8007910:	d003      	beq.n	800791a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	2205      	movs	r2, #5
 8007916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	687a      	ldr	r2, [r7, #4]
 8007924:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	887a      	ldrh	r2, [r7, #2]
 800792a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	887a      	ldrh	r2, [r7, #2]
 8007930:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	887a      	ldrh	r2, [r7, #2]
 800793c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	887a      	ldrh	r2, [r7, #2]
 8007942:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2200      	movs	r2, #0
 8007948:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2200      	movs	r2, #0
 800794e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795a:	2b40      	cmp	r3, #64	@ 0x40
 800795c:	d007      	beq.n	800796e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800796c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	68db      	ldr	r3, [r3, #12]
 8007972:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007976:	d17e      	bne.n	8007a76 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	685b      	ldr	r3, [r3, #4]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <HAL_SPI_TransmitReceive+0xf6>
 8007980:	8afb      	ldrh	r3, [r7, #22]
 8007982:	2b01      	cmp	r3, #1
 8007984:	d16c      	bne.n	8007a60 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798a:	881a      	ldrh	r2, [r3, #0]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007996:	1c9a      	adds	r2, r3, #2
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079aa:	e059      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	2b02      	cmp	r3, #2
 80079b8:	d11b      	bne.n	80079f2 <HAL_SPI_TransmitReceive+0x162>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079be:	b29b      	uxth	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d016      	beq.n	80079f2 <HAL_SPI_TransmitReceive+0x162>
 80079c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d113      	bne.n	80079f2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ce:	881a      	ldrh	r2, [r3, #0]
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079da:	1c9a      	adds	r2, r3, #2
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	3b01      	subs	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079ee:	2300      	movs	r3, #0
 80079f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	f003 0301 	and.w	r3, r3, #1
 80079fc:	2b01      	cmp	r3, #1
 80079fe:	d119      	bne.n	8007a34 <HAL_SPI_TransmitReceive+0x1a4>
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d014      	beq.n	8007a34 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68da      	ldr	r2, [r3, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a14:	b292      	uxth	r2, r2
 8007a16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a1c:	1c9a      	adds	r2, r3, #2
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	3b01      	subs	r3, #1
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a30:	2301      	movs	r3, #1
 8007a32:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a34:	f7fb fa6a 	bl	8002f0c <HAL_GetTick>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	6a3b      	ldr	r3, [r7, #32]
 8007a3c:	1ad3      	subs	r3, r2, r3
 8007a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a40:	429a      	cmp	r2, r3
 8007a42:	d80d      	bhi.n	8007a60 <HAL_SPI_TransmitReceive+0x1d0>
 8007a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a4a:	d009      	beq.n	8007a60 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007a5c:	2303      	movs	r3, #3
 8007a5e:	e0bc      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1a0      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x11c>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d19b      	bne.n	80079ac <HAL_SPI_TransmitReceive+0x11c>
 8007a74:	e082      	b.n	8007b7c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d002      	beq.n	8007a84 <HAL_SPI_TransmitReceive+0x1f4>
 8007a7e:	8afb      	ldrh	r3, [r7, #22]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d171      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	330c      	adds	r3, #12
 8007a8e:	7812      	ldrb	r2, [r2, #0]
 8007a90:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	3b01      	subs	r3, #1
 8007aa4:	b29a      	uxth	r2, r3
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007aaa:	e05d      	b.n	8007b68 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	689b      	ldr	r3, [r3, #8]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b02      	cmp	r3, #2
 8007ab8:	d11c      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x264>
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007abe:	b29b      	uxth	r3, r3
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d017      	beq.n	8007af4 <HAL_SPI_TransmitReceive+0x264>
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d114      	bne.n	8007af4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	330c      	adds	r3, #12
 8007ad4:	7812      	ldrb	r2, [r2, #0]
 8007ad6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007adc:	1c5a      	adds	r2, r3, #1
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007af0:	2300      	movs	r3, #0
 8007af2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d119      	bne.n	8007b36 <HAL_SPI_TransmitReceive+0x2a6>
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b06:	b29b      	uxth	r3, r3
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d014      	beq.n	8007b36 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	68da      	ldr	r2, [r3, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b16:	b2d2      	uxtb	r2, r2
 8007b18:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b1e:	1c5a      	adds	r2, r3, #1
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	3b01      	subs	r3, #1
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b32:	2301      	movs	r3, #1
 8007b34:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b36:	f7fb f9e9 	bl	8002f0c <HAL_GetTick>
 8007b3a:	4602      	mov	r2, r0
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	1ad3      	subs	r3, r2, r3
 8007b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d803      	bhi.n	8007b4e <HAL_SPI_TransmitReceive+0x2be>
 8007b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b4c:	d102      	bne.n	8007b54 <HAL_SPI_TransmitReceive+0x2c4>
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d109      	bne.n	8007b68 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2200      	movs	r2, #0
 8007b60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b64:	2303      	movs	r3, #3
 8007b66:	e038      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d19c      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x21c>
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b76:	b29b      	uxth	r3, r3
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d197      	bne.n	8007aac <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b7c:	6a3a      	ldr	r2, [r7, #32]
 8007b7e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b80:	68f8      	ldr	r0, [r7, #12]
 8007b82:	f000 fa65 	bl	8008050 <SPI_EndRxTxTransaction>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d008      	beq.n	8007b9e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2220      	movs	r2, #32
 8007b90:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e01d      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d10a      	bne.n	8007bbc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	613b      	str	r3, [r7, #16]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	689b      	ldr	r3, [r3, #8]
 8007bb8:	613b      	str	r3, [r7, #16]
 8007bba:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d001      	beq.n	8007bd8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e000      	b.n	8007bda <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
  }
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3728      	adds	r7, #40	@ 0x28
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	60f8      	str	r0, [r7, #12]
 8007bec:	60b9      	str	r1, [r7, #8]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d001      	beq.n	8007c02 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007bfe:	2302      	movs	r3, #2
 8007c00:	e097      	b.n	8007d32 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d002      	beq.n	8007c0e <HAL_SPI_Transmit_DMA+0x2a>
 8007c08:	88fb      	ldrh	r3, [r7, #6]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d101      	bne.n	8007c12 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	e08f      	b.n	8007d32 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d101      	bne.n	8007c20 <HAL_SPI_Transmit_DMA+0x3c>
 8007c1c:	2302      	movs	r3, #2
 8007c1e:	e088      	b.n	8007d32 <HAL_SPI_Transmit_DMA+0x14e>
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	2201      	movs	r2, #1
 8007c24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2203      	movs	r2, #3
 8007c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	2200      	movs	r2, #0
 8007c34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	88fa      	ldrh	r2, [r7, #6]
 8007c40:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	88fa      	ldrh	r2, [r7, #6]
 8007c46:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	2200      	movs	r2, #0
 8007c64:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	689b      	ldr	r3, [r3, #8]
 8007c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c6e:	d10f      	bne.n	8007c90 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c7e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	681a      	ldr	r2, [r3, #0]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c8e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c94:	4a29      	ldr	r2, [pc, #164]	@ (8007d3c <HAL_SPI_Transmit_DMA+0x158>)
 8007c96:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007c9c:	4a28      	ldr	r2, [pc, #160]	@ (8007d40 <HAL_SPI_Transmit_DMA+0x15c>)
 8007c9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007ca4:	4a27      	ldr	r2, [pc, #156]	@ (8007d44 <HAL_SPI_Transmit_DMA+0x160>)
 8007ca6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cac:	2200      	movs	r2, #0
 8007cae:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cb8:	4619      	mov	r1, r3
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007cc6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007cc8:	f7fb fafc 	bl	80032c4 <HAL_DMA_Start_IT>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00b      	beq.n	8007cea <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cd6:	f043 0210 	orr.w	r2, r3, #16
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e023      	b.n	8007d32 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf4:	2b40      	cmp	r3, #64	@ 0x40
 8007cf6:	d007      	beq.n	8007d08 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d06:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	685a      	ldr	r2, [r3, #4]
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f042 0220 	orr.w	r2, r2, #32
 8007d1e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f042 0202 	orr.w	r2, r2, #2
 8007d2e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
 8007d3a:	bf00      	nop
 8007d3c:	08007e19 	.word	0x08007e19
 8007d40:	08007d71 	.word	0x08007d71
 8007d44:	08007e35 	.word	0x08007e35

08007d48 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007d50:	bf00      	nop
 8007d52:	370c      	adds	r7, #12
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d64:	bf00      	nop
 8007d66:	370c      	adds	r7, #12
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6e:	4770      	bx	lr

08007d70 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b086      	sub	sp, #24
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d7c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d7e:	f7fb f8c5 	bl	8002f0c <HAL_GetTick>
 8007d82:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d92:	d03b      	beq.n	8007e0c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	685a      	ldr	r2, [r3, #4]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f022 0220 	bic.w	r2, r2, #32
 8007da2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	685a      	ldr	r2, [r3, #4]
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f022 0202 	bic.w	r2, r2, #2
 8007db2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007db4:	693a      	ldr	r2, [r7, #16]
 8007db6:	2164      	movs	r1, #100	@ 0x64
 8007db8:	6978      	ldr	r0, [r7, #20]
 8007dba:	f000 f949 	bl	8008050 <SPI_EndRxTxTransaction>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dc8:	f043 0220 	orr.w	r2, r3, #32
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d10a      	bne.n	8007dee <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007dd8:	2300      	movs	r3, #0
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	60fb      	str	r3, [r7, #12]
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	689b      	ldr	r3, [r3, #8]
 8007dea:	60fb      	str	r3, [r7, #12]
 8007dec:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	2200      	movs	r2, #0
 8007df2:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d003      	beq.n	8007e0c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e04:	6978      	ldr	r0, [r7, #20]
 8007e06:	f7ff ffa9 	bl	8007d5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e0a:	e002      	b.n	8007e12 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007e0c:	6978      	ldr	r0, [r7, #20]
 8007e0e:	f7fa fba5 	bl	800255c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e12:	3718      	adds	r7, #24
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}

08007e18 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b084      	sub	sp, #16
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e24:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f7ff ff8e 	bl	8007d48 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685a      	ldr	r2, [r3, #4]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f022 0203 	bic.w	r2, r2, #3
 8007e50:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e56:	f043 0210 	orr.w	r2, r3, #16
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e66:	68f8      	ldr	r0, [r7, #12]
 8007e68:	f7ff ff78 	bl	8007d5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e6c:	bf00      	nop
 8007e6e:	3710      	adds	r7, #16
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b088      	sub	sp, #32
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	60f8      	str	r0, [r7, #12]
 8007e7c:	60b9      	str	r1, [r7, #8]
 8007e7e:	603b      	str	r3, [r7, #0]
 8007e80:	4613      	mov	r3, r2
 8007e82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007e84:	f7fb f842 	bl	8002f0c <HAL_GetTick>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e8c:	1a9b      	subs	r3, r3, r2
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	4413      	add	r3, r2
 8007e92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007e94:	f7fb f83a 	bl	8002f0c <HAL_GetTick>
 8007e98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007e9a:	4b39      	ldr	r3, [pc, #228]	@ (8007f80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	015b      	lsls	r3, r3, #5
 8007ea0:	0d1b      	lsrs	r3, r3, #20
 8007ea2:	69fa      	ldr	r2, [r7, #28]
 8007ea4:	fb02 f303 	mul.w	r3, r2, r3
 8007ea8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007eaa:	e054      	b.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eb2:	d050      	beq.n	8007f56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007eb4:	f7fb f82a 	bl	8002f0c <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d902      	bls.n	8007eca <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ec4:	69fb      	ldr	r3, [r7, #28]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d13d      	bne.n	8007f46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	685a      	ldr	r2, [r3, #4]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ed8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ee2:	d111      	bne.n	8007f08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	689b      	ldr	r3, [r3, #8]
 8007ee8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007eec:	d004      	beq.n	8007ef8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007ef6:	d107      	bne.n	8007f08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	681a      	ldr	r2, [r3, #0]
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f10:	d10f      	bne.n	8007f32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	2201      	movs	r2, #1
 8007f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e017      	b.n	8007f76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d101      	bne.n	8007f50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f50:	697b      	ldr	r3, [r7, #20]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689a      	ldr	r2, [r3, #8]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	4013      	ands	r3, r2
 8007f60:	68ba      	ldr	r2, [r7, #8]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	bf0c      	ite	eq
 8007f66:	2301      	moveq	r3, #1
 8007f68:	2300      	movne	r3, #0
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	79fb      	ldrb	r3, [r7, #7]
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d19b      	bne.n	8007eac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3720      	adds	r7, #32
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
 8007f7e:	bf00      	nop
 8007f80:	20000004 	.word	0x20000004

08007f84 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b086      	sub	sp, #24
 8007f88:	af02      	add	r7, sp, #8
 8007f8a:	60f8      	str	r0, [r7, #12]
 8007f8c:	60b9      	str	r1, [r7, #8]
 8007f8e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007f98:	d111      	bne.n	8007fbe <SPI_EndRxTransaction+0x3a>
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	689b      	ldr	r3, [r3, #8]
 8007f9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fa2:	d004      	beq.n	8007fae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fac:	d107      	bne.n	8007fbe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fbc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685b      	ldr	r3, [r3, #4]
 8007fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fc6:	d12a      	bne.n	800801e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fd0:	d012      	beq.n	8007ff8 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2180      	movs	r1, #128	@ 0x80
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff ff49 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d02d      	beq.n	8008044 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fec:	f043 0220 	orr.w	r2, r3, #32
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e026      	b.n	8008046 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	2200      	movs	r2, #0
 8008000:	2101      	movs	r1, #1
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f7ff ff36 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d01a      	beq.n	8008044 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008012:	f043 0220 	orr.w	r2, r3, #32
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800801a:	2303      	movs	r3, #3
 800801c:	e013      	b.n	8008046 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	2200      	movs	r2, #0
 8008026:	2101      	movs	r1, #1
 8008028:	68f8      	ldr	r0, [r7, #12]
 800802a:	f7ff ff23 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d007      	beq.n	8008044 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e000      	b.n	8008046 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008044:	2300      	movs	r3, #0
}
 8008046:	4618      	mov	r0, r3
 8008048:	3710      	adds	r7, #16
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
	...

08008050 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b088      	sub	sp, #32
 8008054:	af02      	add	r7, sp, #8
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	9300      	str	r3, [sp, #0]
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2201      	movs	r2, #1
 8008064:	2102      	movs	r1, #2
 8008066:	68f8      	ldr	r0, [r7, #12]
 8008068:	f7ff ff04 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 800806c:	4603      	mov	r3, r0
 800806e:	2b00      	cmp	r3, #0
 8008070:	d007      	beq.n	8008082 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008076:	f043 0220 	orr.w	r2, r3, #32
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e032      	b.n	80080e8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008082:	4b1b      	ldr	r3, [pc, #108]	@ (80080f0 <SPI_EndRxTxTransaction+0xa0>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a1b      	ldr	r2, [pc, #108]	@ (80080f4 <SPI_EndRxTxTransaction+0xa4>)
 8008088:	fba2 2303 	umull	r2, r3, r2, r3
 800808c:	0d5b      	lsrs	r3, r3, #21
 800808e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008092:	fb02 f303 	mul.w	r3, r2, r3
 8008096:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080a0:	d112      	bne.n	80080c8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	2200      	movs	r2, #0
 80080aa:	2180      	movs	r1, #128	@ 0x80
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	f7ff fee1 	bl	8007e74 <SPI_WaitFlagStateUntilTimeout>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d016      	beq.n	80080e6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080bc:	f043 0220 	orr.w	r2, r3, #32
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80080c4:	2303      	movs	r3, #3
 80080c6:	e00f      	b.n	80080e8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d00a      	beq.n	80080e4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	3b01      	subs	r3, #1
 80080d2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080de:	2b80      	cmp	r3, #128	@ 0x80
 80080e0:	d0f2      	beq.n	80080c8 <SPI_EndRxTxTransaction+0x78>
 80080e2:	e000      	b.n	80080e6 <SPI_EndRxTxTransaction+0x96>
        break;
 80080e4:	bf00      	nop
  }

  return HAL_OK;
 80080e6:	2300      	movs	r3, #0
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}
 80080f0:	20000004 	.word	0x20000004
 80080f4:	165e9f81 	.word	0x165e9f81

080080f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d101      	bne.n	800810a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008106:	2301      	movs	r3, #1
 8008108:	e041      	b.n	800818e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d106      	bne.n	8008124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2200      	movs	r2, #0
 800811a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7fa fe00 	bl	8002d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2202      	movs	r2, #2
 8008128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	3304      	adds	r3, #4
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f000 fa7e 	bl	8008638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	2201      	movs	r2, #1
 8008140:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	2201      	movs	r2, #1
 8008168:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	2201      	movs	r2, #1
 8008178:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3708      	adds	r7, #8
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
	...

08008198 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008198:	b480      	push	{r7}
 800819a:	b085      	sub	sp, #20
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	2b01      	cmp	r3, #1
 80081aa:	d001      	beq.n	80081b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80081ac:	2301      	movs	r3, #1
 80081ae:	e04e      	b.n	800824e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2202      	movs	r2, #2
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68da      	ldr	r2, [r3, #12]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0201 	orr.w	r2, r2, #1
 80081c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a23      	ldr	r2, [pc, #140]	@ (800825c <HAL_TIM_Base_Start_IT+0xc4>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d022      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081da:	d01d      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a1f      	ldr	r2, [pc, #124]	@ (8008260 <HAL_TIM_Base_Start_IT+0xc8>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d018      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a1e      	ldr	r2, [pc, #120]	@ (8008264 <HAL_TIM_Base_Start_IT+0xcc>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d013      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a1c      	ldr	r2, [pc, #112]	@ (8008268 <HAL_TIM_Base_Start_IT+0xd0>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d00e      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1b      	ldr	r2, [pc, #108]	@ (800826c <HAL_TIM_Base_Start_IT+0xd4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d009      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a19      	ldr	r2, [pc, #100]	@ (8008270 <HAL_TIM_Base_Start_IT+0xd8>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d004      	beq.n	8008218 <HAL_TIM_Base_Start_IT+0x80>
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a18      	ldr	r2, [pc, #96]	@ (8008274 <HAL_TIM_Base_Start_IT+0xdc>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d111      	bne.n	800823c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	689b      	ldr	r3, [r3, #8]
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2b06      	cmp	r3, #6
 8008228:	d010      	beq.n	800824c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f042 0201 	orr.w	r2, r2, #1
 8008238:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800823a:	e007      	b.n	800824c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800824c:	2300      	movs	r3, #0
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40010000 	.word	0x40010000
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800
 8008268:	40000c00 	.word	0x40000c00
 800826c:	40010400 	.word	0x40010400
 8008270:	40014000 	.word	0x40014000
 8008274:	40001800 	.word	0x40001800

08008278 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	68db      	ldr	r3, [r3, #12]
 8008286:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	f003 0302 	and.w	r3, r3, #2
 8008296:	2b00      	cmp	r3, #0
 8008298:	d020      	beq.n	80082dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d01b      	beq.n	80082dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f06f 0202 	mvn.w	r2, #2
 80082ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2201      	movs	r2, #1
 80082b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	699b      	ldr	r3, [r3, #24]
 80082ba:	f003 0303 	and.w	r3, r3, #3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d003      	beq.n	80082ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f000 f999 	bl	80085fa <HAL_TIM_IC_CaptureCallback>
 80082c8:	e005      	b.n	80082d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f98b 	bl	80085e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f99c 	bl	800860e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2200      	movs	r2, #0
 80082da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f003 0304 	and.w	r3, r3, #4
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d020      	beq.n	8008328 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f003 0304 	and.w	r3, r3, #4
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d01b      	beq.n	8008328 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f06f 0204 	mvn.w	r2, #4
 80082f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2202      	movs	r2, #2
 80082fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	699b      	ldr	r3, [r3, #24]
 8008306:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800830a:	2b00      	cmp	r3, #0
 800830c:	d003      	beq.n	8008316 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f973 	bl	80085fa <HAL_TIM_IC_CaptureCallback>
 8008314:	e005      	b.n	8008322 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f000 f965 	bl	80085e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 f976 	bl	800860e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f003 0308 	and.w	r3, r3, #8
 800832e:	2b00      	cmp	r3, #0
 8008330:	d020      	beq.n	8008374 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f003 0308 	and.w	r3, r3, #8
 8008338:	2b00      	cmp	r3, #0
 800833a:	d01b      	beq.n	8008374 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f06f 0208 	mvn.w	r2, #8
 8008344:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2204      	movs	r2, #4
 800834a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	69db      	ldr	r3, [r3, #28]
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 f94d 	bl	80085fa <HAL_TIM_IC_CaptureCallback>
 8008360:	e005      	b.n	800836e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f93f 	bl	80085e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f950 	bl	800860e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2200      	movs	r2, #0
 8008372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	f003 0310 	and.w	r3, r3, #16
 800837a:	2b00      	cmp	r3, #0
 800837c:	d020      	beq.n	80083c0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f003 0310 	and.w	r3, r3, #16
 8008384:	2b00      	cmp	r3, #0
 8008386:	d01b      	beq.n	80083c0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0210 	mvn.w	r2, #16
 8008390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2208      	movs	r2, #8
 8008396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 f927 	bl	80085fa <HAL_TIM_IC_CaptureCallback>
 80083ac:	e005      	b.n	80083ba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 f919 	bl	80085e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 f92a 	bl	800860e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f003 0301 	and.w	r3, r3, #1
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00c      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d007      	beq.n	80083e4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f06f 0201 	mvn.w	r2, #1
 80083dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7fa f9b6 	bl	8002750 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d00c      	beq.n	8008408 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d007      	beq.n	8008408 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 fae4 	bl	80089d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00c      	beq.n	800842c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008418:	2b00      	cmp	r3, #0
 800841a:	d007      	beq.n	800842c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f8fb 	bl	8008622 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	f003 0320 	and.w	r3, r3, #32
 8008432:	2b00      	cmp	r3, #0
 8008434:	d00c      	beq.n	8008450 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	f003 0320 	and.w	r3, r3, #32
 800843c:	2b00      	cmp	r3, #0
 800843e:	d007      	beq.n	8008450 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f06f 0220 	mvn.w	r2, #32
 8008448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f000 fab6 	bl	80089bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008450:	bf00      	nop
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800846c:	2b01      	cmp	r3, #1
 800846e:	d101      	bne.n	8008474 <HAL_TIM_ConfigClockSource+0x1c>
 8008470:	2302      	movs	r3, #2
 8008472:	e0b4      	b.n	80085de <HAL_TIM_ConfigClockSource+0x186>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	689b      	ldr	r3, [r3, #8]
 800848a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800849a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084ac:	d03e      	beq.n	800852c <HAL_TIM_ConfigClockSource+0xd4>
 80084ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084b2:	f200 8087 	bhi.w	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ba:	f000 8086 	beq.w	80085ca <HAL_TIM_ConfigClockSource+0x172>
 80084be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084c2:	d87f      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084c4:	2b70      	cmp	r3, #112	@ 0x70
 80084c6:	d01a      	beq.n	80084fe <HAL_TIM_ConfigClockSource+0xa6>
 80084c8:	2b70      	cmp	r3, #112	@ 0x70
 80084ca:	d87b      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084cc:	2b60      	cmp	r3, #96	@ 0x60
 80084ce:	d050      	beq.n	8008572 <HAL_TIM_ConfigClockSource+0x11a>
 80084d0:	2b60      	cmp	r3, #96	@ 0x60
 80084d2:	d877      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084d4:	2b50      	cmp	r3, #80	@ 0x50
 80084d6:	d03c      	beq.n	8008552 <HAL_TIM_ConfigClockSource+0xfa>
 80084d8:	2b50      	cmp	r3, #80	@ 0x50
 80084da:	d873      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084dc:	2b40      	cmp	r3, #64	@ 0x40
 80084de:	d058      	beq.n	8008592 <HAL_TIM_ConfigClockSource+0x13a>
 80084e0:	2b40      	cmp	r3, #64	@ 0x40
 80084e2:	d86f      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084e4:	2b30      	cmp	r3, #48	@ 0x30
 80084e6:	d064      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0x15a>
 80084e8:	2b30      	cmp	r3, #48	@ 0x30
 80084ea:	d86b      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	d060      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0x15a>
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d867      	bhi.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d05c      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0x15a>
 80084f8:	2b10      	cmp	r3, #16
 80084fa:	d05a      	beq.n	80085b2 <HAL_TIM_ConfigClockSource+0x15a>
 80084fc:	e062      	b.n	80085c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800850e:	f000 f9b9 	bl	8008884 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008520:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	609a      	str	r2, [r3, #8]
      break;
 800852a:	e04f      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800853c:	f000 f9a2 	bl	8008884 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689a      	ldr	r2, [r3, #8]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800854e:	609a      	str	r2, [r3, #8]
      break;
 8008550:	e03c      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008556:	683b      	ldr	r3, [r7, #0]
 8008558:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800855a:	683b      	ldr	r3, [r7, #0]
 800855c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800855e:	461a      	mov	r2, r3
 8008560:	f000 f916 	bl	8008790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2150      	movs	r1, #80	@ 0x50
 800856a:	4618      	mov	r0, r3
 800856c:	f000 f96f 	bl	800884e <TIM_ITRx_SetConfig>
      break;
 8008570:	e02c      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008576:	683b      	ldr	r3, [r7, #0]
 8008578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800857e:	461a      	mov	r2, r3
 8008580:	f000 f935 	bl	80087ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2160      	movs	r1, #96	@ 0x60
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f95f 	bl	800884e <TIM_ITRx_SetConfig>
      break;
 8008590:	e01c      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800859e:	461a      	mov	r2, r3
 80085a0:	f000 f8f6 	bl	8008790 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2140      	movs	r1, #64	@ 0x40
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 f94f 	bl	800884e <TIM_ITRx_SetConfig>
      break;
 80085b0:	e00c      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	4619      	mov	r1, r3
 80085bc:	4610      	mov	r0, r2
 80085be:	f000 f946 	bl	800884e <TIM_ITRx_SetConfig>
      break;
 80085c2:	e003      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
      break;
 80085c8:	e000      	b.n	80085cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80085ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2200      	movs	r2, #0
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80085de:	4618      	mov	r0, r3
 80085e0:	3710      	adds	r7, #16
 80085e2:	46bd      	mov	sp, r7
 80085e4:	bd80      	pop	{r7, pc}

080085e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008602:	bf00      	nop
 8008604:	370c      	adds	r7, #12
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008616:	bf00      	nop
 8008618:	370c      	adds	r7, #12
 800861a:	46bd      	mov	sp, r7
 800861c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008620:	4770      	bx	lr

08008622 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008622:	b480      	push	{r7}
 8008624:	b083      	sub	sp, #12
 8008626:	af00      	add	r7, sp, #0
 8008628:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800862a:	bf00      	nop
 800862c:	370c      	adds	r7, #12
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
	...

08008638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a46      	ldr	r2, [pc, #280]	@ (8008764 <TIM_Base_SetConfig+0x12c>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d013      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008656:	d00f      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a43      	ldr	r2, [pc, #268]	@ (8008768 <TIM_Base_SetConfig+0x130>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d00b      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a42      	ldr	r2, [pc, #264]	@ (800876c <TIM_Base_SetConfig+0x134>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d007      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a41      	ldr	r2, [pc, #260]	@ (8008770 <TIM_Base_SetConfig+0x138>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d003      	beq.n	8008678 <TIM_Base_SetConfig+0x40>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	4a40      	ldr	r2, [pc, #256]	@ (8008774 <TIM_Base_SetConfig+0x13c>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d108      	bne.n	800868a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800867e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4313      	orrs	r3, r2
 8008688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	4a35      	ldr	r2, [pc, #212]	@ (8008764 <TIM_Base_SetConfig+0x12c>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d02b      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008698:	d027      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	4a32      	ldr	r2, [pc, #200]	@ (8008768 <TIM_Base_SetConfig+0x130>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d023      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a31      	ldr	r2, [pc, #196]	@ (800876c <TIM_Base_SetConfig+0x134>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d01f      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	4a30      	ldr	r2, [pc, #192]	@ (8008770 <TIM_Base_SetConfig+0x138>)
 80086ae:	4293      	cmp	r3, r2
 80086b0:	d01b      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	4a2f      	ldr	r2, [pc, #188]	@ (8008774 <TIM_Base_SetConfig+0x13c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d017      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008778 <TIM_Base_SetConfig+0x140>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d013      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	4a2d      	ldr	r2, [pc, #180]	@ (800877c <TIM_Base_SetConfig+0x144>)
 80086c6:	4293      	cmp	r3, r2
 80086c8:	d00f      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	4a2c      	ldr	r2, [pc, #176]	@ (8008780 <TIM_Base_SetConfig+0x148>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d00b      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4a2b      	ldr	r2, [pc, #172]	@ (8008784 <TIM_Base_SetConfig+0x14c>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d007      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	4a2a      	ldr	r2, [pc, #168]	@ (8008788 <TIM_Base_SetConfig+0x150>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d003      	beq.n	80086ea <TIM_Base_SetConfig+0xb2>
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	4a29      	ldr	r2, [pc, #164]	@ (800878c <TIM_Base_SetConfig+0x154>)
 80086e6:	4293      	cmp	r3, r2
 80086e8:	d108      	bne.n	80086fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4313      	orrs	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	4313      	orrs	r3, r2
 8008708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	68fa      	ldr	r2, [r7, #12]
 800870e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	689a      	ldr	r2, [r3, #8]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	681a      	ldr	r2, [r3, #0]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	4a10      	ldr	r2, [pc, #64]	@ (8008764 <TIM_Base_SetConfig+0x12c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d003      	beq.n	8008730 <TIM_Base_SetConfig+0xf8>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4a12      	ldr	r2, [pc, #72]	@ (8008774 <TIM_Base_SetConfig+0x13c>)
 800872c:	4293      	cmp	r3, r2
 800872e:	d103      	bne.n	8008738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	691a      	ldr	r2, [r3, #16]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	691b      	ldr	r3, [r3, #16]
 8008742:	f003 0301 	and.w	r3, r3, #1
 8008746:	2b01      	cmp	r3, #1
 8008748:	d105      	bne.n	8008756 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	f023 0201 	bic.w	r2, r3, #1
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	611a      	str	r2, [r3, #16]
  }
}
 8008756:	bf00      	nop
 8008758:	3714      	adds	r7, #20
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr
 8008762:	bf00      	nop
 8008764:	40010000 	.word	0x40010000
 8008768:	40000400 	.word	0x40000400
 800876c:	40000800 	.word	0x40000800
 8008770:	40000c00 	.word	0x40000c00
 8008774:	40010400 	.word	0x40010400
 8008778:	40014000 	.word	0x40014000
 800877c:	40014400 	.word	0x40014400
 8008780:	40014800 	.word	0x40014800
 8008784:	40001800 	.word	0x40001800
 8008788:	40001c00 	.word	0x40001c00
 800878c:	40002000 	.word	0x40002000

08008790 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008790:	b480      	push	{r7}
 8008792:	b087      	sub	sp, #28
 8008794:	af00      	add	r7, sp, #0
 8008796:	60f8      	str	r0, [r7, #12]
 8008798:	60b9      	str	r1, [r7, #8]
 800879a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	6a1b      	ldr	r3, [r3, #32]
 80087a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f023 0201 	bic.w	r2, r3, #1
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	699b      	ldr	r3, [r3, #24]
 80087b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80087ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	f023 030a 	bic.w	r3, r3, #10
 80087cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	4313      	orrs	r3, r2
 80087d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	693a      	ldr	r2, [r7, #16]
 80087da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	621a      	str	r2, [r3, #32]
}
 80087e2:	bf00      	nop
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b087      	sub	sp, #28
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	60f8      	str	r0, [r7, #12]
 80087f6:	60b9      	str	r1, [r7, #8]
 80087f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6a1b      	ldr	r3, [r3, #32]
 8008804:	f023 0210 	bic.w	r2, r3, #16
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	699b      	ldr	r3, [r3, #24]
 8008810:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008818:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	031b      	lsls	r3, r3, #12
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	4313      	orrs	r3, r2
 8008822:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008824:	697b      	ldr	r3, [r7, #20]
 8008826:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800882a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	011b      	lsls	r3, r3, #4
 8008830:	697a      	ldr	r2, [r7, #20]
 8008832:	4313      	orrs	r3, r2
 8008834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	693a      	ldr	r2, [r7, #16]
 800883a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	697a      	ldr	r2, [r7, #20]
 8008840:	621a      	str	r2, [r3, #32]
}
 8008842:	bf00      	nop
 8008844:	371c      	adds	r7, #28
 8008846:	46bd      	mov	sp, r7
 8008848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884c:	4770      	bx	lr

0800884e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800884e:	b480      	push	{r7}
 8008850:	b085      	sub	sp, #20
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
 8008856:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	689b      	ldr	r3, [r3, #8]
 800885c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008864:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	4313      	orrs	r3, r2
 800886c:	f043 0307 	orr.w	r3, r3, #7
 8008870:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	68fa      	ldr	r2, [r7, #12]
 8008876:	609a      	str	r2, [r3, #8]
}
 8008878:	bf00      	nop
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008884:	b480      	push	{r7}
 8008886:	b087      	sub	sp, #28
 8008888:	af00      	add	r7, sp, #0
 800888a:	60f8      	str	r0, [r7, #12]
 800888c:	60b9      	str	r1, [r7, #8]
 800888e:	607a      	str	r2, [r7, #4]
 8008890:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800889e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	021a      	lsls	r2, r3, #8
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	431a      	orrs	r2, r3
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	697a      	ldr	r2, [r7, #20]
 80088ae:	4313      	orrs	r3, r2
 80088b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	697a      	ldr	r2, [r7, #20]
 80088b6:	609a      	str	r2, [r3, #8]
}
 80088b8:	bf00      	nop
 80088ba:	371c      	adds	r7, #28
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr

080088c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d101      	bne.n	80088dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80088d8:	2302      	movs	r3, #2
 80088da:	e05a      	b.n	8008992 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2202      	movs	r2, #2
 80088e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685b      	ldr	r3, [r3, #4]
 80088f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	689b      	ldr	r3, [r3, #8]
 80088fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008902:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	68fa      	ldr	r2, [r7, #12]
 800890a:	4313      	orrs	r3, r2
 800890c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4a21      	ldr	r2, [pc, #132]	@ (80089a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800891c:	4293      	cmp	r3, r2
 800891e:	d022      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008928:	d01d      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a1d      	ldr	r2, [pc, #116]	@ (80089a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d018      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a1b      	ldr	r2, [pc, #108]	@ (80089a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d013      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a1a      	ldr	r2, [pc, #104]	@ (80089ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d00e      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a18      	ldr	r2, [pc, #96]	@ (80089b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d009      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a17      	ldr	r2, [pc, #92]	@ (80089b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d004      	beq.n	8008966 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a15      	ldr	r2, [pc, #84]	@ (80089b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d10c      	bne.n	8008980 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800896c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	4313      	orrs	r3, r2
 8008976:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68ba      	ldr	r2, [r7, #8]
 800897e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	4618      	mov	r0, r3
 8008994:	3714      	adds	r7, #20
 8008996:	46bd      	mov	sp, r7
 8008998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899c:	4770      	bx	lr
 800899e:	bf00      	nop
 80089a0:	40010000 	.word	0x40010000
 80089a4:	40000400 	.word	0x40000400
 80089a8:	40000800 	.word	0x40000800
 80089ac:	40000c00 	.word	0x40000c00
 80089b0:	40010400 	.word	0x40010400
 80089b4:	40014000 	.word	0x40014000
 80089b8:	40001800 	.word	0x40001800

080089bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e042      	b.n	8008a7c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7fa f9d6 	bl	8002dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2224      	movs	r2, #36	@ 0x24
 8008a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 f973 	bl	8008d14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	695a      	ldr	r2, [r3, #20]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2200      	movs	r2, #0
 8008a78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3708      	adds	r7, #8
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b08a      	sub	sp, #40	@ 0x28
 8008a88:	af02      	add	r7, sp, #8
 8008a8a:	60f8      	str	r0, [r7, #12]
 8008a8c:	60b9      	str	r1, [r7, #8]
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	4613      	mov	r3, r2
 8008a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a94:	2300      	movs	r3, #0
 8008a96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	2b20      	cmp	r3, #32
 8008aa2:	d175      	bne.n	8008b90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <HAL_UART_Transmit+0x2c>
 8008aaa:	88fb      	ldrh	r3, [r7, #6]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	e06e      	b.n	8008b92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2221      	movs	r2, #33	@ 0x21
 8008abe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008ac2:	f7fa fa23 	bl	8002f0c <HAL_GetTick>
 8008ac6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	88fa      	ldrh	r2, [r7, #6]
 8008acc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	88fa      	ldrh	r2, [r7, #6]
 8008ad2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008adc:	d108      	bne.n	8008af0 <HAL_UART_Transmit+0x6c>
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d104      	bne.n	8008af0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	61bb      	str	r3, [r7, #24]
 8008aee:	e003      	b.n	8008af8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008af4:	2300      	movs	r3, #0
 8008af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008af8:	e02e      	b.n	8008b58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	9300      	str	r3, [sp, #0]
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2200      	movs	r2, #0
 8008b02:	2180      	movs	r1, #128	@ 0x80
 8008b04:	68f8      	ldr	r0, [r7, #12]
 8008b06:	f000 f848 	bl	8008b9a <UART_WaitOnFlagUntilTimeout>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d005      	beq.n	8008b1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e03a      	b.n	8008b92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d10b      	bne.n	8008b3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008b22:	69bb      	ldr	r3, [r7, #24]
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	461a      	mov	r2, r3
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	3302      	adds	r3, #2
 8008b36:	61bb      	str	r3, [r7, #24]
 8008b38:	e007      	b.n	8008b4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	781a      	ldrb	r2, [r3, #0]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	3301      	adds	r3, #1
 8008b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b4e:	b29b      	uxth	r3, r3
 8008b50:	3b01      	subs	r3, #1
 8008b52:	b29a      	uxth	r2, r3
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1cb      	bne.n	8008afa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	9300      	str	r3, [sp, #0]
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2140      	movs	r1, #64	@ 0x40
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f000 f814 	bl	8008b9a <UART_WaitOnFlagUntilTimeout>
 8008b72:	4603      	mov	r3, r0
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2220      	movs	r2, #32
 8008b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8008b80:	2303      	movs	r3, #3
 8008b82:	e006      	b.n	8008b92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	2220      	movs	r2, #32
 8008b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	e000      	b.n	8008b92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8008b90:	2302      	movs	r3, #2
  }
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3720      	adds	r7, #32
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}

08008b9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008b9a:	b580      	push	{r7, lr}
 8008b9c:	b086      	sub	sp, #24
 8008b9e:	af00      	add	r7, sp, #0
 8008ba0:	60f8      	str	r0, [r7, #12]
 8008ba2:	60b9      	str	r1, [r7, #8]
 8008ba4:	603b      	str	r3, [r7, #0]
 8008ba6:	4613      	mov	r3, r2
 8008ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008baa:	e03b      	b.n	8008c24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb2:	d037      	beq.n	8008c24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bb4:	f7fa f9aa 	bl	8002f0c <HAL_GetTick>
 8008bb8:	4602      	mov	r2, r0
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	6a3a      	ldr	r2, [r7, #32]
 8008bc0:	429a      	cmp	r2, r3
 8008bc2:	d302      	bcc.n	8008bca <UART_WaitOnFlagUntilTimeout+0x30>
 8008bc4:	6a3b      	ldr	r3, [r7, #32]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d101      	bne.n	8008bce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008bca:	2303      	movs	r3, #3
 8008bcc:	e03a      	b.n	8008c44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68db      	ldr	r3, [r3, #12]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d023      	beq.n	8008c24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2b80      	cmp	r3, #128	@ 0x80
 8008be0:	d020      	beq.n	8008c24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	2b40      	cmp	r3, #64	@ 0x40
 8008be6:	d01d      	beq.n	8008c24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f003 0308 	and.w	r3, r3, #8
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d116      	bne.n	8008c24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	617b      	str	r3, [r7, #20]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	617b      	str	r3, [r7, #20]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	617b      	str	r3, [r7, #20]
 8008c0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f000 f81d 	bl	8008c4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2208      	movs	r2, #8
 8008c16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e00f      	b.n	8008c44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	681a      	ldr	r2, [r3, #0]
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	4013      	ands	r3, r2
 8008c2e:	68ba      	ldr	r2, [r7, #8]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	bf0c      	ite	eq
 8008c34:	2301      	moveq	r3, #1
 8008c36:	2300      	movne	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	79fb      	ldrb	r3, [r7, #7]
 8008c3e:	429a      	cmp	r2, r3
 8008c40:	d0b4      	beq.n	8008bac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	3718      	adds	r7, #24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd80      	pop	{r7, pc}

08008c4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b095      	sub	sp, #84	@ 0x54
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	330c      	adds	r3, #12
 8008c5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c5e:	e853 3f00 	ldrex	r3, [r3]
 8008c62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	330c      	adds	r3, #12
 8008c72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c74:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c7c:	e841 2300 	strex	r3, r2, [r1]
 8008c80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d1e5      	bne.n	8008c54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	3314      	adds	r3, #20
 8008c8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	6a3b      	ldr	r3, [r7, #32]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c98:	69fb      	ldr	r3, [r7, #28]
 8008c9a:	f023 0301 	bic.w	r3, r3, #1
 8008c9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	3314      	adds	r3, #20
 8008ca6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ca8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008caa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e5      	bne.n	8008c88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cc0:	2b01      	cmp	r3, #1
 8008cc2:	d119      	bne.n	8008cf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	330c      	adds	r3, #12
 8008cca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	e853 3f00 	ldrex	r3, [r3]
 8008cd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	f023 0310 	bic.w	r3, r3, #16
 8008cda:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008ce4:	61ba      	str	r2, [r7, #24]
 8008ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce8:	6979      	ldr	r1, [r7, #20]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	e841 2300 	strex	r3, r2, [r1]
 8008cf0:	613b      	str	r3, [r7, #16]
   return(result);
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d1e5      	bne.n	8008cc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2220      	movs	r2, #32
 8008cfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008d06:	bf00      	nop
 8008d08:	3754      	adds	r7, #84	@ 0x54
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
	...

08008d14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d18:	b0c0      	sub	sp, #256	@ 0x100
 8008d1a:	af00      	add	r7, sp, #0
 8008d1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d30:	68d9      	ldr	r1, [r3, #12]
 8008d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	ea40 0301 	orr.w	r3, r0, r1
 8008d3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d48:	691b      	ldr	r3, [r3, #16]
 8008d4a:	431a      	orrs	r2, r3
 8008d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d50:	695b      	ldr	r3, [r3, #20]
 8008d52:	431a      	orrs	r2, r3
 8008d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008d6c:	f021 010c 	bic.w	r1, r1, #12
 8008d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008d7a:	430b      	orrs	r3, r1
 8008d7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	695b      	ldr	r3, [r3, #20]
 8008d86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008d8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d8e:	6999      	ldr	r1, [r3, #24]
 8008d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	ea40 0301 	orr.w	r3, r0, r1
 8008d9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008da0:	681a      	ldr	r2, [r3, #0]
 8008da2:	4b8f      	ldr	r3, [pc, #572]	@ (8008fe0 <UART_SetConfig+0x2cc>)
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d005      	beq.n	8008db4 <UART_SetConfig+0xa0>
 8008da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	4b8d      	ldr	r3, [pc, #564]	@ (8008fe4 <UART_SetConfig+0x2d0>)
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d104      	bne.n	8008dbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008db4:	f7fe f84c 	bl	8006e50 <HAL_RCC_GetPCLK2Freq>
 8008db8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008dbc:	e003      	b.n	8008dc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008dbe:	f7fe f833 	bl	8006e28 <HAL_RCC_GetPCLK1Freq>
 8008dc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008dca:	69db      	ldr	r3, [r3, #28]
 8008dcc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008dd0:	f040 810c 	bne.w	8008fec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dd8:	2200      	movs	r2, #0
 8008dda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008dde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008de2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008de6:	4622      	mov	r2, r4
 8008de8:	462b      	mov	r3, r5
 8008dea:	1891      	adds	r1, r2, r2
 8008dec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008dee:	415b      	adcs	r3, r3
 8008df0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008df2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008df6:	4621      	mov	r1, r4
 8008df8:	eb12 0801 	adds.w	r8, r2, r1
 8008dfc:	4629      	mov	r1, r5
 8008dfe:	eb43 0901 	adc.w	r9, r3, r1
 8008e02:	f04f 0200 	mov.w	r2, #0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e16:	4690      	mov	r8, r2
 8008e18:	4699      	mov	r9, r3
 8008e1a:	4623      	mov	r3, r4
 8008e1c:	eb18 0303 	adds.w	r3, r8, r3
 8008e20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008e24:	462b      	mov	r3, r5
 8008e26:	eb49 0303 	adc.w	r3, r9, r3
 8008e2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008e2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008e3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008e3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008e42:	460b      	mov	r3, r1
 8008e44:	18db      	adds	r3, r3, r3
 8008e46:	653b      	str	r3, [r7, #80]	@ 0x50
 8008e48:	4613      	mov	r3, r2
 8008e4a:	eb42 0303 	adc.w	r3, r2, r3
 8008e4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008e54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008e58:	f7f7 feb6 	bl	8000bc8 <__aeabi_uldivmod>
 8008e5c:	4602      	mov	r2, r0
 8008e5e:	460b      	mov	r3, r1
 8008e60:	4b61      	ldr	r3, [pc, #388]	@ (8008fe8 <UART_SetConfig+0x2d4>)
 8008e62:	fba3 2302 	umull	r2, r3, r3, r2
 8008e66:	095b      	lsrs	r3, r3, #5
 8008e68:	011c      	lsls	r4, r3, #4
 8008e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008e78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008e7c:	4642      	mov	r2, r8
 8008e7e:	464b      	mov	r3, r9
 8008e80:	1891      	adds	r1, r2, r2
 8008e82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008e84:	415b      	adcs	r3, r3
 8008e86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008e88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008e8c:	4641      	mov	r1, r8
 8008e8e:	eb12 0a01 	adds.w	sl, r2, r1
 8008e92:	4649      	mov	r1, r9
 8008e94:	eb43 0b01 	adc.w	fp, r3, r1
 8008e98:	f04f 0200 	mov.w	r2, #0
 8008e9c:	f04f 0300 	mov.w	r3, #0
 8008ea0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008ea4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008ea8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008eac:	4692      	mov	sl, r2
 8008eae:	469b      	mov	fp, r3
 8008eb0:	4643      	mov	r3, r8
 8008eb2:	eb1a 0303 	adds.w	r3, sl, r3
 8008eb6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008eba:	464b      	mov	r3, r9
 8008ebc:	eb4b 0303 	adc.w	r3, fp, r3
 8008ec0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008ed0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008ed4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008ed8:	460b      	mov	r3, r1
 8008eda:	18db      	adds	r3, r3, r3
 8008edc:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ede:	4613      	mov	r3, r2
 8008ee0:	eb42 0303 	adc.w	r3, r2, r3
 8008ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008ee6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008eea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008eee:	f7f7 fe6b 	bl	8000bc8 <__aeabi_uldivmod>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4611      	mov	r1, r2
 8008ef8:	4b3b      	ldr	r3, [pc, #236]	@ (8008fe8 <UART_SetConfig+0x2d4>)
 8008efa:	fba3 2301 	umull	r2, r3, r3, r1
 8008efe:	095b      	lsrs	r3, r3, #5
 8008f00:	2264      	movs	r2, #100	@ 0x64
 8008f02:	fb02 f303 	mul.w	r3, r2, r3
 8008f06:	1acb      	subs	r3, r1, r3
 8008f08:	00db      	lsls	r3, r3, #3
 8008f0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008f0e:	4b36      	ldr	r3, [pc, #216]	@ (8008fe8 <UART_SetConfig+0x2d4>)
 8008f10:	fba3 2302 	umull	r2, r3, r3, r2
 8008f14:	095b      	lsrs	r3, r3, #5
 8008f16:	005b      	lsls	r3, r3, #1
 8008f18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008f1c:	441c      	add	r4, r3
 8008f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008f22:	2200      	movs	r2, #0
 8008f24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008f2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008f30:	4642      	mov	r2, r8
 8008f32:	464b      	mov	r3, r9
 8008f34:	1891      	adds	r1, r2, r2
 8008f36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008f38:	415b      	adcs	r3, r3
 8008f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008f3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008f40:	4641      	mov	r1, r8
 8008f42:	1851      	adds	r1, r2, r1
 8008f44:	6339      	str	r1, [r7, #48]	@ 0x30
 8008f46:	4649      	mov	r1, r9
 8008f48:	414b      	adcs	r3, r1
 8008f4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f4c:	f04f 0200 	mov.w	r2, #0
 8008f50:	f04f 0300 	mov.w	r3, #0
 8008f54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008f58:	4659      	mov	r1, fp
 8008f5a:	00cb      	lsls	r3, r1, #3
 8008f5c:	4651      	mov	r1, sl
 8008f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f62:	4651      	mov	r1, sl
 8008f64:	00ca      	lsls	r2, r1, #3
 8008f66:	4610      	mov	r0, r2
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	4642      	mov	r2, r8
 8008f6e:	189b      	adds	r3, r3, r2
 8008f70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008f74:	464b      	mov	r3, r9
 8008f76:	460a      	mov	r2, r1
 8008f78:	eb42 0303 	adc.w	r3, r2, r3
 8008f7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008f8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008f90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008f94:	460b      	mov	r3, r1
 8008f96:	18db      	adds	r3, r3, r3
 8008f98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	eb42 0303 	adc.w	r3, r2, r3
 8008fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fa2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008fa6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008faa:	f7f7 fe0d 	bl	8000bc8 <__aeabi_uldivmod>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	460b      	mov	r3, r1
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe8 <UART_SetConfig+0x2d4>)
 8008fb4:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb8:	095b      	lsrs	r3, r3, #5
 8008fba:	2164      	movs	r1, #100	@ 0x64
 8008fbc:	fb01 f303 	mul.w	r3, r1, r3
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	00db      	lsls	r3, r3, #3
 8008fc4:	3332      	adds	r3, #50	@ 0x32
 8008fc6:	4a08      	ldr	r2, [pc, #32]	@ (8008fe8 <UART_SetConfig+0x2d4>)
 8008fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8008fcc:	095b      	lsrs	r3, r3, #5
 8008fce:	f003 0207 	and.w	r2, r3, #7
 8008fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4422      	add	r2, r4
 8008fda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008fdc:	e106      	b.n	80091ec <UART_SetConfig+0x4d8>
 8008fde:	bf00      	nop
 8008fe0:	40011000 	.word	0x40011000
 8008fe4:	40011400 	.word	0x40011400
 8008fe8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008fec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008ff6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008ffa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008ffe:	4642      	mov	r2, r8
 8009000:	464b      	mov	r3, r9
 8009002:	1891      	adds	r1, r2, r2
 8009004:	6239      	str	r1, [r7, #32]
 8009006:	415b      	adcs	r3, r3
 8009008:	627b      	str	r3, [r7, #36]	@ 0x24
 800900a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800900e:	4641      	mov	r1, r8
 8009010:	1854      	adds	r4, r2, r1
 8009012:	4649      	mov	r1, r9
 8009014:	eb43 0501 	adc.w	r5, r3, r1
 8009018:	f04f 0200 	mov.w	r2, #0
 800901c:	f04f 0300 	mov.w	r3, #0
 8009020:	00eb      	lsls	r3, r5, #3
 8009022:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009026:	00e2      	lsls	r2, r4, #3
 8009028:	4614      	mov	r4, r2
 800902a:	461d      	mov	r5, r3
 800902c:	4643      	mov	r3, r8
 800902e:	18e3      	adds	r3, r4, r3
 8009030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009034:	464b      	mov	r3, r9
 8009036:	eb45 0303 	adc.w	r3, r5, r3
 800903a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800903e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2200      	movs	r2, #0
 8009046:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800904a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800904e:	f04f 0200 	mov.w	r2, #0
 8009052:	f04f 0300 	mov.w	r3, #0
 8009056:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800905a:	4629      	mov	r1, r5
 800905c:	008b      	lsls	r3, r1, #2
 800905e:	4621      	mov	r1, r4
 8009060:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009064:	4621      	mov	r1, r4
 8009066:	008a      	lsls	r2, r1, #2
 8009068:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800906c:	f7f7 fdac 	bl	8000bc8 <__aeabi_uldivmod>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4b60      	ldr	r3, [pc, #384]	@ (80091f8 <UART_SetConfig+0x4e4>)
 8009076:	fba3 2302 	umull	r2, r3, r3, r2
 800907a:	095b      	lsrs	r3, r3, #5
 800907c:	011c      	lsls	r4, r3, #4
 800907e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009082:	2200      	movs	r2, #0
 8009084:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009088:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800908c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009090:	4642      	mov	r2, r8
 8009092:	464b      	mov	r3, r9
 8009094:	1891      	adds	r1, r2, r2
 8009096:	61b9      	str	r1, [r7, #24]
 8009098:	415b      	adcs	r3, r3
 800909a:	61fb      	str	r3, [r7, #28]
 800909c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090a0:	4641      	mov	r1, r8
 80090a2:	1851      	adds	r1, r2, r1
 80090a4:	6139      	str	r1, [r7, #16]
 80090a6:	4649      	mov	r1, r9
 80090a8:	414b      	adcs	r3, r1
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	f04f 0200 	mov.w	r2, #0
 80090b0:	f04f 0300 	mov.w	r3, #0
 80090b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090b8:	4659      	mov	r1, fp
 80090ba:	00cb      	lsls	r3, r1, #3
 80090bc:	4651      	mov	r1, sl
 80090be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80090c2:	4651      	mov	r1, sl
 80090c4:	00ca      	lsls	r2, r1, #3
 80090c6:	4610      	mov	r0, r2
 80090c8:	4619      	mov	r1, r3
 80090ca:	4603      	mov	r3, r0
 80090cc:	4642      	mov	r2, r8
 80090ce:	189b      	adds	r3, r3, r2
 80090d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80090d4:	464b      	mov	r3, r9
 80090d6:	460a      	mov	r2, r1
 80090d8:	eb42 0303 	adc.w	r3, r2, r3
 80090dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80090e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2200      	movs	r2, #0
 80090e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80090ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80090ec:	f04f 0200 	mov.w	r2, #0
 80090f0:	f04f 0300 	mov.w	r3, #0
 80090f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80090f8:	4649      	mov	r1, r9
 80090fa:	008b      	lsls	r3, r1, #2
 80090fc:	4641      	mov	r1, r8
 80090fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009102:	4641      	mov	r1, r8
 8009104:	008a      	lsls	r2, r1, #2
 8009106:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800910a:	f7f7 fd5d 	bl	8000bc8 <__aeabi_uldivmod>
 800910e:	4602      	mov	r2, r0
 8009110:	460b      	mov	r3, r1
 8009112:	4611      	mov	r1, r2
 8009114:	4b38      	ldr	r3, [pc, #224]	@ (80091f8 <UART_SetConfig+0x4e4>)
 8009116:	fba3 2301 	umull	r2, r3, r3, r1
 800911a:	095b      	lsrs	r3, r3, #5
 800911c:	2264      	movs	r2, #100	@ 0x64
 800911e:	fb02 f303 	mul.w	r3, r2, r3
 8009122:	1acb      	subs	r3, r1, r3
 8009124:	011b      	lsls	r3, r3, #4
 8009126:	3332      	adds	r3, #50	@ 0x32
 8009128:	4a33      	ldr	r2, [pc, #204]	@ (80091f8 <UART_SetConfig+0x4e4>)
 800912a:	fba2 2303 	umull	r2, r3, r2, r3
 800912e:	095b      	lsrs	r3, r3, #5
 8009130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009134:	441c      	add	r4, r3
 8009136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800913a:	2200      	movs	r2, #0
 800913c:	673b      	str	r3, [r7, #112]	@ 0x70
 800913e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009140:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009144:	4642      	mov	r2, r8
 8009146:	464b      	mov	r3, r9
 8009148:	1891      	adds	r1, r2, r2
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	415b      	adcs	r3, r3
 800914e:	60fb      	str	r3, [r7, #12]
 8009150:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009154:	4641      	mov	r1, r8
 8009156:	1851      	adds	r1, r2, r1
 8009158:	6039      	str	r1, [r7, #0]
 800915a:	4649      	mov	r1, r9
 800915c:	414b      	adcs	r3, r1
 800915e:	607b      	str	r3, [r7, #4]
 8009160:	f04f 0200 	mov.w	r2, #0
 8009164:	f04f 0300 	mov.w	r3, #0
 8009168:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800916c:	4659      	mov	r1, fp
 800916e:	00cb      	lsls	r3, r1, #3
 8009170:	4651      	mov	r1, sl
 8009172:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009176:	4651      	mov	r1, sl
 8009178:	00ca      	lsls	r2, r1, #3
 800917a:	4610      	mov	r0, r2
 800917c:	4619      	mov	r1, r3
 800917e:	4603      	mov	r3, r0
 8009180:	4642      	mov	r2, r8
 8009182:	189b      	adds	r3, r3, r2
 8009184:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009186:	464b      	mov	r3, r9
 8009188:	460a      	mov	r2, r1
 800918a:	eb42 0303 	adc.w	r3, r2, r3
 800918e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	663b      	str	r3, [r7, #96]	@ 0x60
 800919a:	667a      	str	r2, [r7, #100]	@ 0x64
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80091a8:	4649      	mov	r1, r9
 80091aa:	008b      	lsls	r3, r1, #2
 80091ac:	4641      	mov	r1, r8
 80091ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80091b2:	4641      	mov	r1, r8
 80091b4:	008a      	lsls	r2, r1, #2
 80091b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80091ba:	f7f7 fd05 	bl	8000bc8 <__aeabi_uldivmod>
 80091be:	4602      	mov	r2, r0
 80091c0:	460b      	mov	r3, r1
 80091c2:	4b0d      	ldr	r3, [pc, #52]	@ (80091f8 <UART_SetConfig+0x4e4>)
 80091c4:	fba3 1302 	umull	r1, r3, r3, r2
 80091c8:	095b      	lsrs	r3, r3, #5
 80091ca:	2164      	movs	r1, #100	@ 0x64
 80091cc:	fb01 f303 	mul.w	r3, r1, r3
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	011b      	lsls	r3, r3, #4
 80091d4:	3332      	adds	r3, #50	@ 0x32
 80091d6:	4a08      	ldr	r2, [pc, #32]	@ (80091f8 <UART_SetConfig+0x4e4>)
 80091d8:	fba2 2303 	umull	r2, r3, r2, r3
 80091dc:	095b      	lsrs	r3, r3, #5
 80091de:	f003 020f 	and.w	r2, r3, #15
 80091e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4422      	add	r2, r4
 80091ea:	609a      	str	r2, [r3, #8]
}
 80091ec:	bf00      	nop
 80091ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80091f2:	46bd      	mov	sp, r7
 80091f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80091f8:	51eb851f 	.word	0x51eb851f

080091fc <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b083      	sub	sp, #12
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d123      	bne.n	8009256 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009216:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	6851      	ldr	r1, [r2, #4]
 800921e:	683a      	ldr	r2, [r7, #0]
 8009220:	6892      	ldr	r2, [r2, #8]
 8009222:	4311      	orrs	r1, r2
 8009224:	683a      	ldr	r2, [r7, #0]
 8009226:	68d2      	ldr	r2, [r2, #12]
 8009228:	4311      	orrs	r1, r2
 800922a:	683a      	ldr	r2, [r7, #0]
 800922c:	6912      	ldr	r2, [r2, #16]
 800922e:	4311      	orrs	r1, r2
 8009230:	683a      	ldr	r2, [r7, #0]
 8009232:	6952      	ldr	r2, [r2, #20]
 8009234:	4311      	orrs	r1, r2
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	6992      	ldr	r2, [r2, #24]
 800923a:	4311      	orrs	r1, r2
 800923c:	683a      	ldr	r2, [r7, #0]
 800923e:	69d2      	ldr	r2, [r2, #28]
 8009240:	4311      	orrs	r1, r2
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	6a12      	ldr	r2, [r2, #32]
 8009246:	4311      	orrs	r1, r2
 8009248:	683a      	ldr	r2, [r7, #0]
 800924a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800924c:	430a      	orrs	r2, r1
 800924e:	431a      	orrs	r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	e028      	b.n	80092a8 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800925e:	683b      	ldr	r3, [r7, #0]
 8009260:	69d9      	ldr	r1, [r3, #28]
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	6a1b      	ldr	r3, [r3, #32]
 8009266:	4319      	orrs	r1, r3
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926c:	430b      	orrs	r3, r1
 800926e:	431a      	orrs	r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800927c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009280:	683a      	ldr	r2, [r7, #0]
 8009282:	6851      	ldr	r1, [r2, #4]
 8009284:	683a      	ldr	r2, [r7, #0]
 8009286:	6892      	ldr	r2, [r2, #8]
 8009288:	4311      	orrs	r1, r2
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	68d2      	ldr	r2, [r2, #12]
 800928e:	4311      	orrs	r1, r2
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	6912      	ldr	r2, [r2, #16]
 8009294:	4311      	orrs	r1, r2
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	6952      	ldr	r2, [r2, #20]
 800929a:	4311      	orrs	r1, r2
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	6992      	ldr	r2, [r2, #24]
 80092a0:	430a      	orrs	r2, r1
 80092a2:	431a      	orrs	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	370c      	adds	r7, #12
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	60f8      	str	r0, [r7, #12]
 80092be:	60b9      	str	r1, [r7, #8]
 80092c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d128      	bne.n	800931a <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80092d0:	68bb      	ldr	r3, [r7, #8]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	1e59      	subs	r1, r3, #1
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	3b01      	subs	r3, #1
 80092dc:	011b      	lsls	r3, r3, #4
 80092de:	4319      	orrs	r1, r3
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	3b01      	subs	r3, #1
 80092e6:	021b      	lsls	r3, r3, #8
 80092e8:	4319      	orrs	r1, r3
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	3b01      	subs	r3, #1
 80092f0:	031b      	lsls	r3, r3, #12
 80092f2:	4319      	orrs	r1, r3
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	3b01      	subs	r3, #1
 80092fa:	041b      	lsls	r3, r3, #16
 80092fc:	4319      	orrs	r1, r3
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	3b01      	subs	r3, #1
 8009304:	051b      	lsls	r3, r3, #20
 8009306:	4319      	orrs	r1, r3
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	3b01      	subs	r3, #1
 800930e:	061b      	lsls	r3, r3, #24
 8009310:	430b      	orrs	r3, r1
 8009312:	431a      	orrs	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	609a      	str	r2, [r3, #8]
 8009318:	e02f      	b.n	800937a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009322:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	68d2      	ldr	r2, [r2, #12]
 800932a:	3a01      	subs	r2, #1
 800932c:	0311      	lsls	r1, r2, #12
 800932e:	68ba      	ldr	r2, [r7, #8]
 8009330:	6952      	ldr	r2, [r2, #20]
 8009332:	3a01      	subs	r2, #1
 8009334:	0512      	lsls	r2, r2, #20
 8009336:	430a      	orrs	r2, r1
 8009338:	431a      	orrs	r2, r3
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	1e59      	subs	r1, r3, #1
 800934c:	68bb      	ldr	r3, [r7, #8]
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	3b01      	subs	r3, #1
 8009352:	011b      	lsls	r3, r3, #4
 8009354:	4319      	orrs	r1, r3
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	3b01      	subs	r3, #1
 800935c:	021b      	lsls	r3, r3, #8
 800935e:	4319      	orrs	r1, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	691b      	ldr	r3, [r3, #16]
 8009364:	3b01      	subs	r3, #1
 8009366:	041b      	lsls	r3, r3, #16
 8009368:	4319      	orrs	r1, r3
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	699b      	ldr	r3, [r3, #24]
 800936e:	3b01      	subs	r3, #1
 8009370:	061b      	lsls	r3, r3, #24
 8009372:	430b      	orrs	r3, r1
 8009374:	431a      	orrs	r2, r3
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f043 0201 	orr.w	r2, r3, #1
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800939c:	2300      	movs	r3, #0
}
 800939e:	4618      	mov	r0, r3
 80093a0:	370c      	adds	r7, #12
 80093a2:	46bd      	mov	sp, r7
 80093a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a8:	4770      	bx	lr

080093aa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80093aa:	b480      	push	{r7}
 80093ac:	b083      	sub	sp, #12
 80093ae:	af00      	add	r7, sp, #0
 80093b0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f023 0201 	bic.w	r2, r3, #1
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80093be:	2300      	movs	r3, #0
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b085      	sub	sp, #20
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093d6:	2300      	movs	r3, #0
 80093d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093e6:	d901      	bls.n	80093ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e01b      	b.n	8009424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	daf2      	bge.n	80093da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093f4:	2300      	movs	r3, #0
 80093f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093f8:	683b      	ldr	r3, [r7, #0]
 80093fa:	019b      	lsls	r3, r3, #6
 80093fc:	f043 0220 	orr.w	r2, r3, #32
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	3301      	adds	r3, #1
 8009408:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009410:	d901      	bls.n	8009416 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e006      	b.n	8009424 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	691b      	ldr	r3, [r3, #16]
 800941a:	f003 0320 	and.w	r3, r3, #32
 800941e:	2b20      	cmp	r3, #32
 8009420:	d0f0      	beq.n	8009404 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3714      	adds	r7, #20
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr

08009430 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009430:	b480      	push	{r7}
 8009432:	b085      	sub	sp, #20
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	3301      	adds	r3, #1
 8009440:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009448:	d901      	bls.n	800944e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800944a:	2303      	movs	r3, #3
 800944c:	e018      	b.n	8009480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	691b      	ldr	r3, [r3, #16]
 8009452:	2b00      	cmp	r3, #0
 8009454:	daf2      	bge.n	800943c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2210      	movs	r2, #16
 800945e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	3301      	adds	r3, #1
 8009464:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800946c:	d901      	bls.n	8009472 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e006      	b.n	8009480 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	691b      	ldr	r3, [r3, #16]
 8009476:	f003 0310 	and.w	r3, r3, #16
 800947a:	2b10      	cmp	r3, #16
 800947c:	d0f0      	beq.n	8009460 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800947e:	2300      	movs	r3, #0
}
 8009480:	4618      	mov	r0, r3
 8009482:	3714      	adds	r7, #20
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr

0800948c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800948c:	b480      	push	{r7}
 800948e:	b08b      	sub	sp, #44	@ 0x2c
 8009490:	af00      	add	r7, sp, #0
 8009492:	60f8      	str	r0, [r7, #12]
 8009494:	60b9      	str	r1, [r7, #8]
 8009496:	4613      	mov	r3, r2
 8009498:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80094a2:	88fb      	ldrh	r3, [r7, #6]
 80094a4:	089b      	lsrs	r3, r3, #2
 80094a6:	b29b      	uxth	r3, r3
 80094a8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80094aa:	88fb      	ldrh	r3, [r7, #6]
 80094ac:	f003 0303 	and.w	r3, r3, #3
 80094b0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80094b2:	2300      	movs	r3, #0
 80094b4:	623b      	str	r3, [r7, #32]
 80094b6:	e014      	b.n	80094e2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80094b8:	69bb      	ldr	r3, [r7, #24]
 80094ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094be:	681a      	ldr	r2, [r3, #0]
 80094c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80094c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094c6:	3301      	adds	r3, #1
 80094c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094cc:	3301      	adds	r3, #1
 80094ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d2:	3301      	adds	r3, #1
 80094d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80094d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094d8:	3301      	adds	r3, #1
 80094da:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80094dc:	6a3b      	ldr	r3, [r7, #32]
 80094de:	3301      	adds	r3, #1
 80094e0:	623b      	str	r3, [r7, #32]
 80094e2:	6a3a      	ldr	r2, [r7, #32]
 80094e4:	697b      	ldr	r3, [r7, #20]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d3e6      	bcc.n	80094b8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80094ea:	8bfb      	ldrh	r3, [r7, #30]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d01e      	beq.n	800952e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80094f4:	69bb      	ldr	r3, [r7, #24]
 80094f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80094fa:	461a      	mov	r2, r3
 80094fc:	f107 0310 	add.w	r3, r7, #16
 8009500:	6812      	ldr	r2, [r2, #0]
 8009502:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009504:	693a      	ldr	r2, [r7, #16]
 8009506:	6a3b      	ldr	r3, [r7, #32]
 8009508:	b2db      	uxtb	r3, r3
 800950a:	00db      	lsls	r3, r3, #3
 800950c:	fa22 f303 	lsr.w	r3, r2, r3
 8009510:	b2da      	uxtb	r2, r3
 8009512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009514:	701a      	strb	r2, [r3, #0]
      i++;
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	3301      	adds	r3, #1
 800951a:	623b      	str	r3, [r7, #32]
      pDest++;
 800951c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800951e:	3301      	adds	r3, #1
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009522:	8bfb      	ldrh	r3, [r7, #30]
 8009524:	3b01      	subs	r3, #1
 8009526:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009528:	8bfb      	ldrh	r3, [r7, #30]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1ea      	bne.n	8009504 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800952e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009530:	4618      	mov	r0, r3
 8009532:	372c      	adds	r7, #44	@ 0x2c
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800953c:	b480      	push	{r7}
 800953e:	b085      	sub	sp, #20
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	695b      	ldr	r3, [r3, #20]
 8009548:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	699b      	ldr	r3, [r3, #24]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	4013      	ands	r3, r2
 8009552:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009554:	68fb      	ldr	r3, [r7, #12]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009562:	b480      	push	{r7}
 8009564:	b085      	sub	sp, #20
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	460b      	mov	r3, r1
 800956c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	015a      	lsls	r2, r3, #5
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	4413      	add	r3, r2
 800957a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009582:	78fb      	ldrb	r3, [r7, #3]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4413      	add	r3, r2
 800958a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	4013      	ands	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009596:	68bb      	ldr	r3, [r7, #8]
}
 8009598:	4618      	mov	r0, r3
 800959a:	3714      	adds	r7, #20
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	695b      	ldr	r3, [r3, #20]
 80095b0:	f003 0301 	and.w	r3, r3, #1
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	460b      	mov	r3, r1
 80095ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80095de:	f023 0303 	bic.w	r3, r3, #3
 80095e2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	78fb      	ldrb	r3, [r7, #3]
 80095ee:	f003 0303 	and.w	r3, r3, #3
 80095f2:	68f9      	ldr	r1, [r7, #12]
 80095f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80095f8:	4313      	orrs	r3, r2
 80095fa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80095fc:	78fb      	ldrb	r3, [r7, #3]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d107      	bne.n	8009612 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009608:	461a      	mov	r2, r3
 800960a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800960e:	6053      	str	r3, [r2, #4]
 8009610:	e00c      	b.n	800962c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009612:	78fb      	ldrb	r3, [r7, #3]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d107      	bne.n	8009628 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800961e:	461a      	mov	r2, r3
 8009620:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009624:	6053      	str	r3, [r2, #4]
 8009626:	e001      	b.n	800962c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e000      	b.n	800962e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800962c:	2300      	movs	r3, #0
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	b29b      	uxth	r3, r3
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800965c:	b480      	push	{r7}
 800965e:	b089      	sub	sp, #36	@ 0x24
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009670:	2300      	movs	r3, #0
 8009672:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8009674:	69bb      	ldr	r3, [r7, #24]
 8009676:	015a      	lsls	r2, r3, #5
 8009678:	69fb      	ldr	r3, [r7, #28]
 800967a:	4413      	add	r3, r2
 800967c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	0c9b      	lsrs	r3, r3, #18
 8009684:	f003 0303 	and.w	r3, r3, #3
 8009688:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	015a      	lsls	r2, r3, #5
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	4413      	add	r3, r2
 8009692:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	0fdb      	lsrs	r3, r3, #31
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	0fdb      	lsrs	r3, r3, #31
 80096b0:	f003 0301 	and.w	r3, r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f003 0320 	and.w	r3, r3, #32
 80096be:	2b20      	cmp	r3, #32
 80096c0:	d10d      	bne.n	80096de <USB_HC_Halt+0x82>
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d10a      	bne.n	80096de <USB_HC_Halt+0x82>
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d005      	beq.n	80096da <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d002      	beq.n	80096da <USB_HC_Halt+0x7e>
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d101      	bne.n	80096de <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80096da:	2300      	movs	r3, #0
 80096dc:	e0d8      	b.n	8009890 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80096de:	697b      	ldr	r3, [r7, #20]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d002      	beq.n	80096ea <USB_HC_Halt+0x8e>
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	2b02      	cmp	r3, #2
 80096e8:	d173      	bne.n	80097d2 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	015a      	lsls	r2, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	4413      	add	r3, r2
 80096f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	69ba      	ldr	r2, [r7, #24]
 80096fa:	0151      	lsls	r1, r2, #5
 80096fc:	69fa      	ldr	r2, [r7, #28]
 80096fe:	440a      	add	r2, r1
 8009700:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009704:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009708:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	f003 0320 	and.w	r3, r3, #32
 8009712:	2b00      	cmp	r3, #0
 8009714:	d14a      	bne.n	80097ac <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800971a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800971e:	2b00      	cmp	r3, #0
 8009720:	d133      	bne.n	800978a <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009722:	69bb      	ldr	r3, [r7, #24]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	69fb      	ldr	r3, [r7, #28]
 8009728:	4413      	add	r3, r2
 800972a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	69ba      	ldr	r2, [r7, #24]
 8009732:	0151      	lsls	r1, r2, #5
 8009734:	69fa      	ldr	r2, [r7, #28]
 8009736:	440a      	add	r2, r1
 8009738:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800973c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009740:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009742:	69bb      	ldr	r3, [r7, #24]
 8009744:	015a      	lsls	r2, r3, #5
 8009746:	69fb      	ldr	r3, [r7, #28]
 8009748:	4413      	add	r3, r2
 800974a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	69ba      	ldr	r2, [r7, #24]
 8009752:	0151      	lsls	r1, r2, #5
 8009754:	69fa      	ldr	r2, [r7, #28]
 8009756:	440a      	add	r2, r1
 8009758:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800975c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009760:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	3301      	adds	r3, #1
 8009766:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009768:	68bb      	ldr	r3, [r7, #8]
 800976a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800976e:	d82e      	bhi.n	80097ce <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009770:	69bb      	ldr	r3, [r7, #24]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	4413      	add	r3, r2
 8009778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009782:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009786:	d0ec      	beq.n	8009762 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009788:	e081      	b.n	800988e <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800978a:	69bb      	ldr	r3, [r7, #24]
 800978c:	015a      	lsls	r2, r3, #5
 800978e:	69fb      	ldr	r3, [r7, #28]
 8009790:	4413      	add	r3, r2
 8009792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	0151      	lsls	r1, r2, #5
 800979c:	69fa      	ldr	r2, [r7, #28]
 800979e:	440a      	add	r2, r1
 80097a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097a8:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097aa:	e070      	b.n	800988e <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	015a      	lsls	r2, r3, #5
 80097b0:	69fb      	ldr	r3, [r7, #28]
 80097b2:	4413      	add	r3, r2
 80097b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	0151      	lsls	r1, r2, #5
 80097be:	69fa      	ldr	r2, [r7, #28]
 80097c0:	440a      	add	r2, r1
 80097c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097ca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097cc:	e05f      	b.n	800988e <USB_HC_Halt+0x232>
            break;
 80097ce:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097d0:	e05d      	b.n	800988e <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	015a      	lsls	r2, r3, #5
 80097d6:	69fb      	ldr	r3, [r7, #28]
 80097d8:	4413      	add	r3, r2
 80097da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	69ba      	ldr	r2, [r7, #24]
 80097e2:	0151      	lsls	r1, r2, #5
 80097e4:	69fa      	ldr	r2, [r7, #28]
 80097e6:	440a      	add	r2, r1
 80097e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097f0:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80097f2:	69fb      	ldr	r3, [r7, #28]
 80097f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80097f8:	691b      	ldr	r3, [r3, #16]
 80097fa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d133      	bne.n	800986a <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	015a      	lsls	r2, r3, #5
 8009806:	69fb      	ldr	r3, [r7, #28]
 8009808:	4413      	add	r3, r2
 800980a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	69ba      	ldr	r2, [r7, #24]
 8009812:	0151      	lsls	r1, r2, #5
 8009814:	69fa      	ldr	r2, [r7, #28]
 8009816:	440a      	add	r2, r1
 8009818:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800981c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009820:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009822:	69bb      	ldr	r3, [r7, #24]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	69fb      	ldr	r3, [r7, #28]
 8009828:	4413      	add	r3, r2
 800982a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	69ba      	ldr	r2, [r7, #24]
 8009832:	0151      	lsls	r1, r2, #5
 8009834:	69fa      	ldr	r2, [r7, #28]
 8009836:	440a      	add	r2, r1
 8009838:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800983c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009840:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	3301      	adds	r3, #1
 8009846:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800984e:	d81d      	bhi.n	800988c <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009850:	69bb      	ldr	r3, [r7, #24]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	69fb      	ldr	r3, [r7, #28]
 8009856:	4413      	add	r3, r2
 8009858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009862:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009866:	d0ec      	beq.n	8009842 <USB_HC_Halt+0x1e6>
 8009868:	e011      	b.n	800988e <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	015a      	lsls	r2, r3, #5
 800986e:	69fb      	ldr	r3, [r7, #28]
 8009870:	4413      	add	r3, r2
 8009872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	0151      	lsls	r1, r2, #5
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	440a      	add	r2, r1
 8009880:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009884:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009888:	6013      	str	r3, [r2, #0]
 800988a:	e000      	b.n	800988e <USB_HC_Halt+0x232>
          break;
 800988c:	bf00      	nop
    }
  }

  return HAL_OK;
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	3724      	adds	r7, #36	@ 0x24
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80098a4:	2300      	movs	r3, #0
 80098a6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f7ff fd7a 	bl	80093aa <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098b6:	2110      	movs	r1, #16
 80098b8:	6878      	ldr	r0, [r7, #4]
 80098ba:	f7ff fd87 	bl	80093cc <USB_FlushTxFifo>
 80098be:	4603      	mov	r3, r0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d001      	beq.n	80098c8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff fdb1 	bl	8009430 <USB_FlushRxFifo>
 80098ce:	4603      	mov	r3, r0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d001      	beq.n	80098d8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80098d4:	2301      	movs	r3, #1
 80098d6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80098d8:	2300      	movs	r3, #0
 80098da:	61bb      	str	r3, [r7, #24]
 80098dc:	e01f      	b.n	800991e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	015a      	lsls	r2, r3, #5
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	4413      	add	r3, r2
 80098e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80098f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80098fc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80098fe:	693b      	ldr	r3, [r7, #16]
 8009900:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009904:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	015a      	lsls	r2, r3, #5
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	4413      	add	r3, r2
 800990e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009912:	461a      	mov	r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	3301      	adds	r3, #1
 800991c:	61bb      	str	r3, [r7, #24]
 800991e:	69bb      	ldr	r3, [r7, #24]
 8009920:	2b0f      	cmp	r3, #15
 8009922:	d9dc      	bls.n	80098de <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009924:	2300      	movs	r3, #0
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	e034      	b.n	8009994 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800992a:	69bb      	ldr	r3, [r7, #24]
 800992c:	015a      	lsls	r2, r3, #5
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	4413      	add	r3, r2
 8009932:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009940:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009948:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009950:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	015a      	lsls	r2, r3, #5
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	4413      	add	r3, r2
 800995a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800995e:	461a      	mov	r2, r3
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	3301      	adds	r3, #1
 8009968:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009970:	d80c      	bhi.n	800998c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	4413      	add	r3, r2
 800997a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009984:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009988:	d0ec      	beq.n	8009964 <USB_StopHost+0xc8>
 800998a:	e000      	b.n	800998e <USB_StopHost+0xf2>
        break;
 800998c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800998e:	69bb      	ldr	r3, [r7, #24]
 8009990:	3301      	adds	r3, #1
 8009992:	61bb      	str	r3, [r7, #24]
 8009994:	69bb      	ldr	r3, [r7, #24]
 8009996:	2b0f      	cmp	r3, #15
 8009998:	d9c7      	bls.n	800992a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800999a:	697b      	ldr	r3, [r7, #20]
 800999c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099a0:	461a      	mov	r2, r3
 80099a2:	f04f 33ff 	mov.w	r3, #4294967295
 80099a6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f04f 32ff 	mov.w	r2, #4294967295
 80099ae:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f7ff fce9 	bl	8009388 <USB_EnableGlobalInt>

  return ret;
 80099b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3720      	adds	r7, #32
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}

080099c0 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80099c0:	b580      	push	{r7, lr}
 80099c2:	b082      	sub	sp, #8
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 f804 	bl	80099e4 <USBH_HandleSof>
}
 80099dc:	bf00      	nop
 80099de:	3708      	adds	r7, #8
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	781b      	ldrb	r3, [r3, #0]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b0b      	cmp	r3, #11
 80099f4:	d10a      	bne.n	8009a0c <USBH_HandleSof+0x28>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d005      	beq.n	8009a0c <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a06:	699b      	ldr	r3, [r3, #24]
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	4798      	blx	r3
  }
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b082      	sub	sp, #8
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2201      	movs	r2, #1
 8009a20:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	2201      	movs	r2, #1
 8009a28:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009a38:	2200      	movs	r2, #0
 8009a3a:	4619      	mov	r1, r3
 8009a3c:	f000 f8ae 	bl	8009b9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009a40:	bf00      	nop
}
 8009a42:	3708      	adds	r7, #8
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b083      	sub	sp, #12
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009a58:	bf00      	nop
}
 8009a5a:	370c      	adds	r7, #12
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr

08009a64 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2201      	movs	r2, #1
 8009a88:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009a98:	2200      	movs	r2, #0
 8009a9a:	4619      	mov	r1, r3
 8009a9c:	f000 f87e 	bl	8009b9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3708      	adds	r7, #8
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}

08009aaa <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009aaa:	b580      	push	{r7, lr}
 8009aac:	b082      	sub	sp, #8
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 f900 	bl	800acd0 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	791b      	ldrb	r3, [r3, #4]
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	6878      	ldr	r0, [r7, #4]
 8009ad8:	f000 f830 	bl	8009b3c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	795b      	ldrb	r3, [r3, #5]
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f82a 	bl	8009b3c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009afc:	2200      	movs	r2, #0
 8009afe:	4619      	mov	r1, r3
 8009b00:	f000 f84c 	bl	8009b9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3708      	adds	r7, #8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}

08009b0e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8009b0e:	b580      	push	{r7, lr}
 8009b10:	b082      	sub	sp, #8
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	2201      	movs	r2, #1
 8009b1a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	f000 f835 	bl	8009b9c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3708      	adds	r7, #8
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	2b0f      	cmp	r3, #15
 8009b4c:	d80d      	bhi.n	8009b6a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009b4e:	78fb      	ldrb	r3, [r7, #3]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	33e0      	adds	r3, #224	@ 0xe0
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	4413      	add	r3, r2
 8009b58:	685a      	ldr	r2, [r3, #4]
 8009b5a:	78fb      	ldrb	r3, [r7, #3]
 8009b5c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	33e0      	adds	r3, #224	@ 0xe0
 8009b64:	009b      	lsls	r3, r3, #2
 8009b66:	440b      	add	r3, r1
 8009b68:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009b6a:	2300      	movs	r3, #0
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b083      	sub	sp, #12
 8009b7c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b7e:	f3ef 8305 	mrs	r3, IPSR
 8009b82:	607b      	str	r3, [r7, #4]
  return(result);
 8009b84:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bf14      	ite	ne
 8009b8a:	2301      	movne	r3, #1
 8009b8c:	2300      	moveq	r3, #0
 8009b8e:	b2db      	uxtb	r3, r3
}
 8009b90:	4618      	mov	r0, r3
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	60f8      	str	r0, [r7, #12]
 8009ba4:	60b9      	str	r1, [r7, #8]
 8009ba6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <osMessagePut+0x1e>
    ticks = 1;
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8009bba:	f7ff ffdd 	bl	8009b78 <inHandlerMode>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d018      	beq.n	8009bf6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8009bc4:	f107 0210 	add.w	r2, r7, #16
 8009bc8:	f107 0108 	add.w	r1, r7, #8
 8009bcc:	2300      	movs	r3, #0
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 f9ae 	bl	8009f30 <xQueueGenericSendFromISR>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b01      	cmp	r3, #1
 8009bd8:	d001      	beq.n	8009bde <osMessagePut+0x42>
      return osErrorOS;
 8009bda:	23ff      	movs	r3, #255	@ 0xff
 8009bdc:	e018      	b.n	8009c10 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009bde:	693b      	ldr	r3, [r7, #16]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d014      	beq.n	8009c0e <osMessagePut+0x72>
 8009be4:	4b0c      	ldr	r3, [pc, #48]	@ (8009c18 <osMessagePut+0x7c>)
 8009be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009bea:	601a      	str	r2, [r3, #0]
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	f3bf 8f6f 	isb	sy
 8009bf4:	e00b      	b.n	8009c0e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009bf6:	f107 0108 	add.w	r1, r7, #8
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	697a      	ldr	r2, [r7, #20]
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f000 f894 	bl	8009d2c <xQueueGenericSend>
 8009c04:	4603      	mov	r3, r0
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d001      	beq.n	8009c0e <osMessagePut+0x72>
      return osErrorOS;
 8009c0a:	23ff      	movs	r3, #255	@ 0xff
 8009c0c:	e000      	b.n	8009c10 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3718      	adds	r7, #24
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	e000ed04 	.word	0xe000ed04

08009c1c <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b085      	sub	sp, #20
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	685b      	ldr	r3, [r3, #4]
 8009c2a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009c2c:	683b      	ldr	r3, [r7, #0]
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	689a      	ldr	r2, [r3, #8]
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	683a      	ldr	r2, [r7, #0]
 8009c40:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	683a      	ldr	r2, [r7, #0]
 8009c46:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	1c5a      	adds	r2, r3, #1
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	601a      	str	r2, [r3, #0]
}
 8009c58:	bf00      	nop
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr

08009c64 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c7a:	d103      	bne.n	8009c84 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	60fb      	str	r3, [r7, #12]
 8009c82:	e00c      	b.n	8009c9e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	3308      	adds	r3, #8
 8009c88:	60fb      	str	r3, [r7, #12]
 8009c8a:	e002      	b.n	8009c92 <vListInsert+0x2e>
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	60fb      	str	r3, [r7, #12]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68ba      	ldr	r2, [r7, #8]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d2f6      	bcs.n	8009c8c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	685a      	ldr	r2, [r3, #4]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	68fa      	ldr	r2, [r7, #12]
 8009cb2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	683a      	ldr	r2, [r7, #0]
 8009cb8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	1c5a      	adds	r2, r3, #1
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	601a      	str	r2, [r3, #0]
}
 8009cca:	bf00      	nop
 8009ccc:	3714      	adds	r7, #20
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd4:	4770      	bx	lr

08009cd6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009cd6:	b480      	push	{r7}
 8009cd8:	b085      	sub	sp, #20
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6892      	ldr	r2, [r2, #8]
 8009cec:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	687a      	ldr	r2, [r7, #4]
 8009cf4:	6852      	ldr	r2, [r2, #4]
 8009cf6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	429a      	cmp	r2, r3
 8009d00:	d103      	bne.n	8009d0a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689a      	ldr	r2, [r3, #8]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	1e5a      	subs	r2, r3, #1
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr
	...

08009d2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b08e      	sub	sp, #56	@ 0x38
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	607a      	str	r2, [r7, #4]
 8009d38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d10b      	bne.n	8009d60 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	e7fd      	b.n	8009d5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d103      	bne.n	8009d6e <xQueueGenericSend+0x42>
 8009d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d101      	bne.n	8009d72 <xQueueGenericSend+0x46>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <xQueueGenericSend+0x48>
 8009d72:	2300      	movs	r3, #0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10b      	bne.n	8009d90 <xQueueGenericSend+0x64>
	__asm volatile
 8009d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d7c:	f383 8811 	msr	BASEPRI, r3
 8009d80:	f3bf 8f6f 	isb	sy
 8009d84:	f3bf 8f4f 	dsb	sy
 8009d88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009d8a:	bf00      	nop
 8009d8c:	bf00      	nop
 8009d8e:	e7fd      	b.n	8009d8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d103      	bne.n	8009d9e <xQueueGenericSend+0x72>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d101      	bne.n	8009da2 <xQueueGenericSend+0x76>
 8009d9e:	2301      	movs	r3, #1
 8009da0:	e000      	b.n	8009da4 <xQueueGenericSend+0x78>
 8009da2:	2300      	movs	r3, #0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d10b      	bne.n	8009dc0 <xQueueGenericSend+0x94>
	__asm volatile
 8009da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dac:	f383 8811 	msr	BASEPRI, r3
 8009db0:	f3bf 8f6f 	isb	sy
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	623b      	str	r3, [r7, #32]
}
 8009dba:	bf00      	nop
 8009dbc:	bf00      	nop
 8009dbe:	e7fd      	b.n	8009dbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009dc0:	f000 fd1a 	bl	800a7f8 <xTaskGetSchedulerState>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d102      	bne.n	8009dd0 <xQueueGenericSend+0xa4>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <xQueueGenericSend+0xa8>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	e000      	b.n	8009dd6 <xQueueGenericSend+0xaa>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d10b      	bne.n	8009df2 <xQueueGenericSend+0xc6>
	__asm volatile
 8009dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dde:	f383 8811 	msr	BASEPRI, r3
 8009de2:	f3bf 8f6f 	isb	sy
 8009de6:	f3bf 8f4f 	dsb	sy
 8009dea:	61fb      	str	r3, [r7, #28]
}
 8009dec:	bf00      	nop
 8009dee:	bf00      	nop
 8009df0:	e7fd      	b.n	8009dee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009df2:	f000 fe21 	bl	800aa38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009df6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d302      	bcc.n	8009e08 <xQueueGenericSend+0xdc>
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d129      	bne.n	8009e5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e08:	683a      	ldr	r2, [r7, #0]
 8009e0a:	68b9      	ldr	r1, [r7, #8]
 8009e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009e0e:	f000 f92d 	bl	800a06c <prvCopyDataToQueue>
 8009e12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d010      	beq.n	8009e3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	3324      	adds	r3, #36	@ 0x24
 8009e20:	4618      	mov	r0, r3
 8009e22:	f000 fbdf 	bl	800a5e4 <xTaskRemoveFromEventList>
 8009e26:	4603      	mov	r3, r0
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d013      	beq.n	8009e54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e2c:	4b3f      	ldr	r3, [pc, #252]	@ (8009f2c <xQueueGenericSend+0x200>)
 8009e2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e32:	601a      	str	r2, [r3, #0]
 8009e34:	f3bf 8f4f 	dsb	sy
 8009e38:	f3bf 8f6f 	isb	sy
 8009e3c:	e00a      	b.n	8009e54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d007      	beq.n	8009e54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e44:	4b39      	ldr	r3, [pc, #228]	@ (8009f2c <xQueueGenericSend+0x200>)
 8009e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e4a:	601a      	str	r2, [r3, #0]
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e54:	f000 fe22 	bl	800aa9c <vPortExitCritical>
				return pdPASS;
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e063      	b.n	8009f24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d103      	bne.n	8009e6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e62:	f000 fe1b 	bl	800aa9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e66:	2300      	movs	r3, #0
 8009e68:	e05c      	b.n	8009f24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d106      	bne.n	8009e7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e70:	f107 0314 	add.w	r3, r7, #20
 8009e74:	4618      	mov	r0, r3
 8009e76:	f000 fc19 	bl	800a6ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e7e:	f000 fe0d 	bl	800aa9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e82:	f000 f9c7 	bl	800a214 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e86:	f000 fdd7 	bl	800aa38 <vPortEnterCritical>
 8009e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009e90:	b25b      	sxtb	r3, r3
 8009e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e96:	d103      	bne.n	8009ea0 <xQueueGenericSend+0x174>
 8009e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ea6:	b25b      	sxtb	r3, r3
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eac:	d103      	bne.n	8009eb6 <xQueueGenericSend+0x18a>
 8009eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009eb6:	f000 fdf1 	bl	800aa9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009eba:	1d3a      	adds	r2, r7, #4
 8009ebc:	f107 0314 	add.w	r3, r7, #20
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 fc08 	bl	800a6d8 <xTaskCheckForTimeOut>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d124      	bne.n	8009f18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009ece:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ed0:	f000 f988 	bl	800a1e4 <prvIsQueueFull>
 8009ed4:	4603      	mov	r3, r0
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d018      	beq.n	8009f0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009edc:	3310      	adds	r3, #16
 8009ede:	687a      	ldr	r2, [r7, #4]
 8009ee0:	4611      	mov	r1, r2
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f000 fb58 	bl	800a598 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ee8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009eea:	f000 f929 	bl	800a140 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009eee:	f000 f99f 	bl	800a230 <xTaskResumeAll>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f47f af7c 	bne.w	8009df2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009efa:	4b0c      	ldr	r3, [pc, #48]	@ (8009f2c <xQueueGenericSend+0x200>)
 8009efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f00:	601a      	str	r2, [r3, #0]
 8009f02:	f3bf 8f4f 	dsb	sy
 8009f06:	f3bf 8f6f 	isb	sy
 8009f0a:	e772      	b.n	8009df2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009f0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f0e:	f000 f917 	bl	800a140 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f12:	f000 f98d 	bl	800a230 <xTaskResumeAll>
 8009f16:	e76c      	b.n	8009df2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009f18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009f1a:	f000 f911 	bl	800a140 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f1e:	f000 f987 	bl	800a230 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f24:	4618      	mov	r0, r3
 8009f26:	3738      	adds	r7, #56	@ 0x38
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	bd80      	pop	{r7, pc}
 8009f2c:	e000ed04 	.word	0xe000ed04

08009f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b090      	sub	sp, #64	@ 0x40
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	60f8      	str	r0, [r7, #12]
 8009f38:	60b9      	str	r1, [r7, #8]
 8009f3a:	607a      	str	r2, [r7, #4]
 8009f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d10b      	bne.n	8009f60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f4c:	f383 8811 	msr	BASEPRI, r3
 8009f50:	f3bf 8f6f 	isb	sy
 8009f54:	f3bf 8f4f 	dsb	sy
 8009f58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009f5a:	bf00      	nop
 8009f5c:	bf00      	nop
 8009f5e:	e7fd      	b.n	8009f5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d103      	bne.n	8009f6e <xQueueGenericSendFromISR+0x3e>
 8009f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <xQueueGenericSendFromISR+0x42>
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e000      	b.n	8009f74 <xQueueGenericSendFromISR+0x44>
 8009f72:	2300      	movs	r3, #0
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d10b      	bne.n	8009f90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f7c:	f383 8811 	msr	BASEPRI, r3
 8009f80:	f3bf 8f6f 	isb	sy
 8009f84:	f3bf 8f4f 	dsb	sy
 8009f88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f8a:	bf00      	nop
 8009f8c:	bf00      	nop
 8009f8e:	e7fd      	b.n	8009f8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	2b02      	cmp	r3, #2
 8009f94:	d103      	bne.n	8009f9e <xQueueGenericSendFromISR+0x6e>
 8009f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f9a:	2b01      	cmp	r3, #1
 8009f9c:	d101      	bne.n	8009fa2 <xQueueGenericSendFromISR+0x72>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e000      	b.n	8009fa4 <xQueueGenericSendFromISR+0x74>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d10b      	bne.n	8009fc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009fa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	623b      	str	r3, [r7, #32]
}
 8009fba:	bf00      	nop
 8009fbc:	bf00      	nop
 8009fbe:	e7fd      	b.n	8009fbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009fc0:	f000 fdec 	bl	800ab9c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fc4:	f3ef 8211 	mrs	r2, BASEPRI
 8009fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fcc:	f383 8811 	msr	BASEPRI, r3
 8009fd0:	f3bf 8f6f 	isb	sy
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	61fa      	str	r2, [r7, #28]
 8009fda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fdc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d302      	bcc.n	8009ff2 <xQueueGenericSendFromISR+0xc2>
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2b02      	cmp	r3, #2
 8009ff0:	d12f      	bne.n	800a052 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009ff8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ffe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a000:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	68b9      	ldr	r1, [r7, #8]
 800a006:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a008:	f000 f830 	bl	800a06c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a00c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a014:	d112      	bne.n	800a03c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d016      	beq.n	800a04c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a01e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a020:	3324      	adds	r3, #36	@ 0x24
 800a022:	4618      	mov	r0, r3
 800a024:	f000 fade 	bl	800a5e4 <xTaskRemoveFromEventList>
 800a028:	4603      	mov	r3, r0
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00e      	beq.n	800a04c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d00b      	beq.n	800a04c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2201      	movs	r2, #1
 800a038:	601a      	str	r2, [r3, #0]
 800a03a:	e007      	b.n	800a04c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a03c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a040:	3301      	adds	r3, #1
 800a042:	b2db      	uxtb	r3, r3
 800a044:	b25a      	sxtb	r2, r3
 800a046:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a048:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a04c:	2301      	movs	r3, #1
 800a04e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a050:	e001      	b.n	800a056 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a052:	2300      	movs	r3, #0
 800a054:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a056:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a058:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a060:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a062:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a064:	4618      	mov	r0, r3
 800a066:	3740      	adds	r7, #64	@ 0x40
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a06c:	b580      	push	{r7, lr}
 800a06e:	b086      	sub	sp, #24
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a078:	2300      	movs	r3, #0
 800a07a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a080:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	d10d      	bne.n	800a0a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d14d      	bne.n	800a12e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	4618      	mov	r0, r3
 800a098:	f000 fbcc 	bl	800a834 <xTaskPriorityDisinherit>
 800a09c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	609a      	str	r2, [r3, #8]
 800a0a4:	e043      	b.n	800a12e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d119      	bne.n	800a0e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	6858      	ldr	r0, [r3, #4]
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0b4:	461a      	mov	r2, r3
 800a0b6:	68b9      	ldr	r1, [r7, #8]
 800a0b8:	f001 fdf7 	bl	800bcaa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0c4:	441a      	add	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	685a      	ldr	r2, [r3, #4]
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	689b      	ldr	r3, [r3, #8]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d32b      	bcc.n	800a12e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	605a      	str	r2, [r3, #4]
 800a0de:	e026      	b.n	800a12e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	68d8      	ldr	r0, [r3, #12]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	68b9      	ldr	r1, [r7, #8]
 800a0ec:	f001 fddd 	bl	800bcaa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a0f8:	425b      	negs	r3, r3
 800a0fa:	441a      	add	r2, r3
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	68da      	ldr	r2, [r3, #12]
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d207      	bcs.n	800a11c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	689a      	ldr	r2, [r3, #8]
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a114:	425b      	negs	r3, r3
 800a116:	441a      	add	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d105      	bne.n	800a12e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	1c5a      	adds	r2, r3, #1
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a136:	697b      	ldr	r3, [r7, #20]
}
 800a138:	4618      	mov	r0, r3
 800a13a:	3718      	adds	r7, #24
 800a13c:	46bd      	mov	sp, r7
 800a13e:	bd80      	pop	{r7, pc}

0800a140 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b084      	sub	sp, #16
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a148:	f000 fc76 	bl	800aa38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a152:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a154:	e011      	b.n	800a17a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d012      	beq.n	800a184 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3324      	adds	r3, #36	@ 0x24
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fa3e 	bl	800a5e4 <xTaskRemoveFromEventList>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a16e:	f000 fb17 	bl	800a7a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a172:	7bfb      	ldrb	r3, [r7, #15]
 800a174:	3b01      	subs	r3, #1
 800a176:	b2db      	uxtb	r3, r3
 800a178:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a17a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dce9      	bgt.n	800a156 <prvUnlockQueue+0x16>
 800a182:	e000      	b.n	800a186 <prvUnlockQueue+0x46>
					break;
 800a184:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	22ff      	movs	r2, #255	@ 0xff
 800a18a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a18e:	f000 fc85 	bl	800aa9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a192:	f000 fc51 	bl	800aa38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a19c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a19e:	e011      	b.n	800a1c4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	691b      	ldr	r3, [r3, #16]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d012      	beq.n	800a1ce <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	3310      	adds	r3, #16
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f000 fa19 	bl	800a5e4 <xTaskRemoveFromEventList>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a1b8:	f000 faf2 	bl	800a7a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	b2db      	uxtb	r3, r3
 800a1c2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a1c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	dce9      	bgt.n	800a1a0 <prvUnlockQueue+0x60>
 800a1cc:	e000      	b.n	800a1d0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a1ce:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	22ff      	movs	r2, #255	@ 0xff
 800a1d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a1d8:	f000 fc60 	bl	800aa9c <vPortExitCritical>
}
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}

0800a1e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1ec:	f000 fc24 	bl	800aa38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d102      	bne.n	800a202 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	60fb      	str	r3, [r7, #12]
 800a200:	e001      	b.n	800a206 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a206:	f000 fc49 	bl	800aa9c <vPortExitCritical>

	return xReturn;
 800a20a:	68fb      	ldr	r3, [r7, #12]
}
 800a20c:	4618      	mov	r0, r3
 800a20e:	3710      	adds	r7, #16
 800a210:	46bd      	mov	sp, r7
 800a212:	bd80      	pop	{r7, pc}

0800a214 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a214:	b480      	push	{r7}
 800a216:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a218:	4b04      	ldr	r3, [pc, #16]	@ (800a22c <vTaskSuspendAll+0x18>)
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	3301      	adds	r3, #1
 800a21e:	4a03      	ldr	r2, [pc, #12]	@ (800a22c <vTaskSuspendAll+0x18>)
 800a220:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a222:	bf00      	nop
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	20025f28 	.word	0x20025f28

0800a230 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a236:	2300      	movs	r3, #0
 800a238:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a23a:	2300      	movs	r3, #0
 800a23c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a23e:	4b42      	ldr	r3, [pc, #264]	@ (800a348 <xTaskResumeAll+0x118>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d10b      	bne.n	800a25e <xTaskResumeAll+0x2e>
	__asm volatile
 800a246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a24a:	f383 8811 	msr	BASEPRI, r3
 800a24e:	f3bf 8f6f 	isb	sy
 800a252:	f3bf 8f4f 	dsb	sy
 800a256:	603b      	str	r3, [r7, #0]
}
 800a258:	bf00      	nop
 800a25a:	bf00      	nop
 800a25c:	e7fd      	b.n	800a25a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a25e:	f000 fbeb 	bl	800aa38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a262:	4b39      	ldr	r3, [pc, #228]	@ (800a348 <xTaskResumeAll+0x118>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	3b01      	subs	r3, #1
 800a268:	4a37      	ldr	r2, [pc, #220]	@ (800a348 <xTaskResumeAll+0x118>)
 800a26a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a26c:	4b36      	ldr	r3, [pc, #216]	@ (800a348 <xTaskResumeAll+0x118>)
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d161      	bne.n	800a338 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a274:	4b35      	ldr	r3, [pc, #212]	@ (800a34c <xTaskResumeAll+0x11c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d05d      	beq.n	800a338 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a27c:	e02e      	b.n	800a2dc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a27e:	4b34      	ldr	r3, [pc, #208]	@ (800a350 <xTaskResumeAll+0x120>)
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	68db      	ldr	r3, [r3, #12]
 800a284:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	3318      	adds	r3, #24
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff fd23 	bl	8009cd6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	3304      	adds	r3, #4
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff fd1e 	bl	8009cd6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a29e:	2201      	movs	r2, #1
 800a2a0:	409a      	lsls	r2, r3
 800a2a2:	4b2c      	ldr	r3, [pc, #176]	@ (800a354 <xTaskResumeAll+0x124>)
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4313      	orrs	r3, r2
 800a2a8:	4a2a      	ldr	r2, [pc, #168]	@ (800a354 <xTaskResumeAll+0x124>)
 800a2aa:	6013      	str	r3, [r2, #0]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	009b      	lsls	r3, r3, #2
 800a2b4:	4413      	add	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	4a27      	ldr	r2, [pc, #156]	@ (800a358 <xTaskResumeAll+0x128>)
 800a2ba:	441a      	add	r2, r3
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	3304      	adds	r3, #4
 800a2c0:	4619      	mov	r1, r3
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	f7ff fcaa 	bl	8009c1c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2cc:	4b23      	ldr	r3, [pc, #140]	@ (800a35c <xTaskResumeAll+0x12c>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d302      	bcc.n	800a2dc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a2d6:	4b22      	ldr	r3, [pc, #136]	@ (800a360 <xTaskResumeAll+0x130>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a2dc:	4b1c      	ldr	r3, [pc, #112]	@ (800a350 <xTaskResumeAll+0x120>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1cc      	bne.n	800a27e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d001      	beq.n	800a2ee <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a2ea:	f000 fa65 	bl	800a7b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a2ee:	4b1d      	ldr	r3, [pc, #116]	@ (800a364 <xTaskResumeAll+0x134>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d010      	beq.n	800a31c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a2fa:	f000 f837 	bl	800a36c <xTaskIncrementTick>
 800a2fe:	4603      	mov	r3, r0
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a304:	4b16      	ldr	r3, [pc, #88]	@ (800a360 <xTaskResumeAll+0x130>)
 800a306:	2201      	movs	r2, #1
 800a308:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d1f1      	bne.n	800a2fa <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a316:	4b13      	ldr	r3, [pc, #76]	@ (800a364 <xTaskResumeAll+0x134>)
 800a318:	2200      	movs	r2, #0
 800a31a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a31c:	4b10      	ldr	r3, [pc, #64]	@ (800a360 <xTaskResumeAll+0x130>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2b00      	cmp	r3, #0
 800a322:	d009      	beq.n	800a338 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a324:	2301      	movs	r3, #1
 800a326:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a328:	4b0f      	ldr	r3, [pc, #60]	@ (800a368 <xTaskResumeAll+0x138>)
 800a32a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a32e:	601a      	str	r2, [r3, #0]
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a338:	f000 fbb0 	bl	800aa9c <vPortExitCritical>

	return xAlreadyYielded;
 800a33c:	68bb      	ldr	r3, [r7, #8]
}
 800a33e:	4618      	mov	r0, r3
 800a340:	3710      	adds	r7, #16
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20025f28 	.word	0x20025f28
 800a34c:	20025f08 	.word	0x20025f08
 800a350:	20025ee0 	.word	0x20025ee0
 800a354:	20025f10 	.word	0x20025f10
 800a358:	20025e4c 	.word	0x20025e4c
 800a35c:	20025e48 	.word	0x20025e48
 800a360:	20025f1c 	.word	0x20025f1c
 800a364:	20025f18 	.word	0x20025f18
 800a368:	e000ed04 	.word	0xe000ed04

0800a36c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b086      	sub	sp, #24
 800a370:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a372:	2300      	movs	r3, #0
 800a374:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a376:	4b4f      	ldr	r3, [pc, #316]	@ (800a4b4 <xTaskIncrementTick+0x148>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	f040 808f 	bne.w	800a49e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a380:	4b4d      	ldr	r3, [pc, #308]	@ (800a4b8 <xTaskIncrementTick+0x14c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	3301      	adds	r3, #1
 800a386:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a388:	4a4b      	ldr	r2, [pc, #300]	@ (800a4b8 <xTaskIncrementTick+0x14c>)
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d121      	bne.n	800a3d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a394:	4b49      	ldr	r3, [pc, #292]	@ (800a4bc <xTaskIncrementTick+0x150>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d00b      	beq.n	800a3b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	603b      	str	r3, [r7, #0]
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	e7fd      	b.n	800a3b2 <xTaskIncrementTick+0x46>
 800a3b6:	4b41      	ldr	r3, [pc, #260]	@ (800a4bc <xTaskIncrementTick+0x150>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	4b40      	ldr	r3, [pc, #256]	@ (800a4c0 <xTaskIncrementTick+0x154>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a3e      	ldr	r2, [pc, #248]	@ (800a4bc <xTaskIncrementTick+0x150>)
 800a3c2:	6013      	str	r3, [r2, #0]
 800a3c4:	4a3e      	ldr	r2, [pc, #248]	@ (800a4c0 <xTaskIncrementTick+0x154>)
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	6013      	str	r3, [r2, #0]
 800a3ca:	4b3e      	ldr	r3, [pc, #248]	@ (800a4c4 <xTaskIncrementTick+0x158>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	3301      	adds	r3, #1
 800a3d0:	4a3c      	ldr	r2, [pc, #240]	@ (800a4c4 <xTaskIncrementTick+0x158>)
 800a3d2:	6013      	str	r3, [r2, #0]
 800a3d4:	f000 f9f0 	bl	800a7b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a3d8:	4b3b      	ldr	r3, [pc, #236]	@ (800a4c8 <xTaskIncrementTick+0x15c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	693a      	ldr	r2, [r7, #16]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d348      	bcc.n	800a474 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3e2:	4b36      	ldr	r3, [pc, #216]	@ (800a4bc <xTaskIncrementTick+0x150>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d104      	bne.n	800a3f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3ec:	4b36      	ldr	r3, [pc, #216]	@ (800a4c8 <xTaskIncrementTick+0x15c>)
 800a3ee:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f2:	601a      	str	r2, [r3, #0]
					break;
 800a3f4:	e03e      	b.n	800a474 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3f6:	4b31      	ldr	r3, [pc, #196]	@ (800a4bc <xTaskIncrementTick+0x150>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68db      	ldr	r3, [r3, #12]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a406:	693a      	ldr	r2, [r7, #16]
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	429a      	cmp	r2, r3
 800a40c:	d203      	bcs.n	800a416 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a40e:	4a2e      	ldr	r2, [pc, #184]	@ (800a4c8 <xTaskIncrementTick+0x15c>)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a414:	e02e      	b.n	800a474 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	3304      	adds	r3, #4
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7ff fc5b 	bl	8009cd6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a424:	2b00      	cmp	r3, #0
 800a426:	d004      	beq.n	800a432 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	3318      	adds	r3, #24
 800a42c:	4618      	mov	r0, r3
 800a42e:	f7ff fc52 	bl	8009cd6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a436:	2201      	movs	r2, #1
 800a438:	409a      	lsls	r2, r3
 800a43a:	4b24      	ldr	r3, [pc, #144]	@ (800a4cc <xTaskIncrementTick+0x160>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4313      	orrs	r3, r2
 800a440:	4a22      	ldr	r2, [pc, #136]	@ (800a4cc <xTaskIncrementTick+0x160>)
 800a442:	6013      	str	r3, [r2, #0]
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a448:	4613      	mov	r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	009b      	lsls	r3, r3, #2
 800a450:	4a1f      	ldr	r2, [pc, #124]	@ (800a4d0 <xTaskIncrementTick+0x164>)
 800a452:	441a      	add	r2, r3
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	3304      	adds	r3, #4
 800a458:	4619      	mov	r1, r3
 800a45a:	4610      	mov	r0, r2
 800a45c:	f7ff fbde 	bl	8009c1c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a464:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d4 <xTaskIncrementTick+0x168>)
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	429a      	cmp	r2, r3
 800a46c:	d3b9      	bcc.n	800a3e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a46e:	2301      	movs	r3, #1
 800a470:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a472:	e7b6      	b.n	800a3e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a474:	4b17      	ldr	r3, [pc, #92]	@ (800a4d4 <xTaskIncrementTick+0x168>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a47a:	4915      	ldr	r1, [pc, #84]	@ (800a4d0 <xTaskIncrementTick+0x164>)
 800a47c:	4613      	mov	r3, r2
 800a47e:	009b      	lsls	r3, r3, #2
 800a480:	4413      	add	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	440b      	add	r3, r1
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b01      	cmp	r3, #1
 800a48a:	d901      	bls.n	800a490 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a48c:	2301      	movs	r3, #1
 800a48e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a490:	4b11      	ldr	r3, [pc, #68]	@ (800a4d8 <xTaskIncrementTick+0x16c>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d007      	beq.n	800a4a8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	617b      	str	r3, [r7, #20]
 800a49c:	e004      	b.n	800a4a8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a49e:	4b0f      	ldr	r3, [pc, #60]	@ (800a4dc <xTaskIncrementTick+0x170>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	4a0d      	ldr	r2, [pc, #52]	@ (800a4dc <xTaskIncrementTick+0x170>)
 800a4a6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a4a8:	697b      	ldr	r3, [r7, #20]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}
 800a4b2:	bf00      	nop
 800a4b4:	20025f28 	.word	0x20025f28
 800a4b8:	20025f0c 	.word	0x20025f0c
 800a4bc:	20025ed8 	.word	0x20025ed8
 800a4c0:	20025edc 	.word	0x20025edc
 800a4c4:	20025f20 	.word	0x20025f20
 800a4c8:	20025f24 	.word	0x20025f24
 800a4cc:	20025f10 	.word	0x20025f10
 800a4d0:	20025e4c 	.word	0x20025e4c
 800a4d4:	20025e48 	.word	0x20025e48
 800a4d8:	20025f1c 	.word	0x20025f1c
 800a4dc:	20025f18 	.word	0x20025f18

0800a4e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a4e6:	4b27      	ldr	r3, [pc, #156]	@ (800a584 <vTaskSwitchContext+0xa4>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d003      	beq.n	800a4f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a4ee:	4b26      	ldr	r3, [pc, #152]	@ (800a588 <vTaskSwitchContext+0xa8>)
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a4f4:	e040      	b.n	800a578 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a4f6:	4b24      	ldr	r3, [pc, #144]	@ (800a588 <vTaskSwitchContext+0xa8>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4fc:	4b23      	ldr	r3, [pc, #140]	@ (800a58c <vTaskSwitchContext+0xac>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	fab3 f383 	clz	r3, r3
 800a508:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a50a:	7afb      	ldrb	r3, [r7, #11]
 800a50c:	f1c3 031f 	rsb	r3, r3, #31
 800a510:	617b      	str	r3, [r7, #20]
 800a512:	491f      	ldr	r1, [pc, #124]	@ (800a590 <vTaskSwitchContext+0xb0>)
 800a514:	697a      	ldr	r2, [r7, #20]
 800a516:	4613      	mov	r3, r2
 800a518:	009b      	lsls	r3, r3, #2
 800a51a:	4413      	add	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	440b      	add	r3, r1
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d10b      	bne.n	800a53e <vTaskSwitchContext+0x5e>
	__asm volatile
 800a526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a52a:	f383 8811 	msr	BASEPRI, r3
 800a52e:	f3bf 8f6f 	isb	sy
 800a532:	f3bf 8f4f 	dsb	sy
 800a536:	607b      	str	r3, [r7, #4]
}
 800a538:	bf00      	nop
 800a53a:	bf00      	nop
 800a53c:	e7fd      	b.n	800a53a <vTaskSwitchContext+0x5a>
 800a53e:	697a      	ldr	r2, [r7, #20]
 800a540:	4613      	mov	r3, r2
 800a542:	009b      	lsls	r3, r3, #2
 800a544:	4413      	add	r3, r2
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4a11      	ldr	r2, [pc, #68]	@ (800a590 <vTaskSwitchContext+0xb0>)
 800a54a:	4413      	add	r3, r2
 800a54c:	613b      	str	r3, [r7, #16]
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	685a      	ldr	r2, [r3, #4]
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	605a      	str	r2, [r3, #4]
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	685a      	ldr	r2, [r3, #4]
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	3308      	adds	r3, #8
 800a560:	429a      	cmp	r2, r3
 800a562:	d104      	bne.n	800a56e <vTaskSwitchContext+0x8e>
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	685a      	ldr	r2, [r3, #4]
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	605a      	str	r2, [r3, #4]
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	4a07      	ldr	r2, [pc, #28]	@ (800a594 <vTaskSwitchContext+0xb4>)
 800a576:	6013      	str	r3, [r2, #0]
}
 800a578:	bf00      	nop
 800a57a:	371c      	adds	r7, #28
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr
 800a584:	20025f28 	.word	0x20025f28
 800a588:	20025f1c 	.word	0x20025f1c
 800a58c:	20025f10 	.word	0x20025f10
 800a590:	20025e4c 	.word	0x20025e4c
 800a594:	20025e48 	.word	0x20025e48

0800a598 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10b      	bne.n	800a5c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a5a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ac:	f383 8811 	msr	BASEPRI, r3
 800a5b0:	f3bf 8f6f 	isb	sy
 800a5b4:	f3bf 8f4f 	dsb	sy
 800a5b8:	60fb      	str	r3, [r7, #12]
}
 800a5ba:	bf00      	nop
 800a5bc:	bf00      	nop
 800a5be:	e7fd      	b.n	800a5bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a5c0:	4b07      	ldr	r3, [pc, #28]	@ (800a5e0 <vTaskPlaceOnEventList+0x48>)
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	3318      	adds	r3, #24
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7ff fb4b 	bl	8009c64 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a5ce:	2101      	movs	r1, #1
 800a5d0:	6838      	ldr	r0, [r7, #0]
 800a5d2:	f000 f9b7 	bl	800a944 <prvAddCurrentTaskToDelayedList>
}
 800a5d6:	bf00      	nop
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	20025e48 	.word	0x20025e48

0800a5e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	b086      	sub	sp, #24
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68db      	ldr	r3, [r3, #12]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d10b      	bne.n	800a612 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a5fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5fe:	f383 8811 	msr	BASEPRI, r3
 800a602:	f3bf 8f6f 	isb	sy
 800a606:	f3bf 8f4f 	dsb	sy
 800a60a:	60fb      	str	r3, [r7, #12]
}
 800a60c:	bf00      	nop
 800a60e:	bf00      	nop
 800a610:	e7fd      	b.n	800a60e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a612:	693b      	ldr	r3, [r7, #16]
 800a614:	3318      	adds	r3, #24
 800a616:	4618      	mov	r0, r3
 800a618:	f7ff fb5d 	bl	8009cd6 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a61c:	4b1d      	ldr	r3, [pc, #116]	@ (800a694 <xTaskRemoveFromEventList+0xb0>)
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	2b00      	cmp	r3, #0
 800a622:	d11c      	bne.n	800a65e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a624:	693b      	ldr	r3, [r7, #16]
 800a626:	3304      	adds	r3, #4
 800a628:	4618      	mov	r0, r3
 800a62a:	f7ff fb54 	bl	8009cd6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a632:	2201      	movs	r2, #1
 800a634:	409a      	lsls	r2, r3
 800a636:	4b18      	ldr	r3, [pc, #96]	@ (800a698 <xTaskRemoveFromEventList+0xb4>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	4313      	orrs	r3, r2
 800a63c:	4a16      	ldr	r2, [pc, #88]	@ (800a698 <xTaskRemoveFromEventList+0xb4>)
 800a63e:	6013      	str	r3, [r2, #0]
 800a640:	693b      	ldr	r3, [r7, #16]
 800a642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a644:	4613      	mov	r3, r2
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	4a13      	ldr	r2, [pc, #76]	@ (800a69c <xTaskRemoveFromEventList+0xb8>)
 800a64e:	441a      	add	r2, r3
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	3304      	adds	r3, #4
 800a654:	4619      	mov	r1, r3
 800a656:	4610      	mov	r0, r2
 800a658:	f7ff fae0 	bl	8009c1c <vListInsertEnd>
 800a65c:	e005      	b.n	800a66a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	3318      	adds	r3, #24
 800a662:	4619      	mov	r1, r3
 800a664:	480e      	ldr	r0, [pc, #56]	@ (800a6a0 <xTaskRemoveFromEventList+0xbc>)
 800a666:	f7ff fad9 	bl	8009c1c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a66a:	693b      	ldr	r3, [r7, #16]
 800a66c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a66e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a4 <xTaskRemoveFromEventList+0xc0>)
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a674:	429a      	cmp	r2, r3
 800a676:	d905      	bls.n	800a684 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a678:	2301      	movs	r3, #1
 800a67a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a67c:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a8 <xTaskRemoveFromEventList+0xc4>)
 800a67e:	2201      	movs	r2, #1
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	e001      	b.n	800a688 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a684:	2300      	movs	r3, #0
 800a686:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a688:	697b      	ldr	r3, [r7, #20]
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3718      	adds	r7, #24
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	20025f28 	.word	0x20025f28
 800a698:	20025f10 	.word	0x20025f10
 800a69c:	20025e4c 	.word	0x20025e4c
 800a6a0:	20025ee0 	.word	0x20025ee0
 800a6a4:	20025e48 	.word	0x20025e48
 800a6a8:	20025f1c 	.word	0x20025f1c

0800a6ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b083      	sub	sp, #12
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a6b4:	4b06      	ldr	r3, [pc, #24]	@ (800a6d0 <vTaskInternalSetTimeOutState+0x24>)
 800a6b6:	681a      	ldr	r2, [r3, #0]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a6bc:	4b05      	ldr	r3, [pc, #20]	@ (800a6d4 <vTaskInternalSetTimeOutState+0x28>)
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	605a      	str	r2, [r3, #4]
}
 800a6c4:	bf00      	nop
 800a6c6:	370c      	adds	r7, #12
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	20025f20 	.word	0x20025f20
 800a6d4:	20025f0c 	.word	0x20025f0c

0800a6d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b088      	sub	sp, #32
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d10b      	bne.n	800a700 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a6e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ec:	f383 8811 	msr	BASEPRI, r3
 800a6f0:	f3bf 8f6f 	isb	sy
 800a6f4:	f3bf 8f4f 	dsb	sy
 800a6f8:	613b      	str	r3, [r7, #16]
}
 800a6fa:	bf00      	nop
 800a6fc:	bf00      	nop
 800a6fe:	e7fd      	b.n	800a6fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10b      	bne.n	800a71e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a70a:	f383 8811 	msr	BASEPRI, r3
 800a70e:	f3bf 8f6f 	isb	sy
 800a712:	f3bf 8f4f 	dsb	sy
 800a716:	60fb      	str	r3, [r7, #12]
}
 800a718:	bf00      	nop
 800a71a:	bf00      	nop
 800a71c:	e7fd      	b.n	800a71a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a71e:	f000 f98b 	bl	800aa38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a722:	4b1d      	ldr	r3, [pc, #116]	@ (800a798 <xTaskCheckForTimeOut+0xc0>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	685b      	ldr	r3, [r3, #4]
 800a72c:	69ba      	ldr	r2, [r7, #24]
 800a72e:	1ad3      	subs	r3, r2, r3
 800a730:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a73a:	d102      	bne.n	800a742 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a73c:	2300      	movs	r3, #0
 800a73e:	61fb      	str	r3, [r7, #28]
 800a740:	e023      	b.n	800a78a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681a      	ldr	r2, [r3, #0]
 800a746:	4b15      	ldr	r3, [pc, #84]	@ (800a79c <xTaskCheckForTimeOut+0xc4>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d007      	beq.n	800a75e <xTaskCheckForTimeOut+0x86>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	429a      	cmp	r2, r3
 800a756:	d302      	bcc.n	800a75e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a758:	2301      	movs	r3, #1
 800a75a:	61fb      	str	r3, [r7, #28]
 800a75c:	e015      	b.n	800a78a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	429a      	cmp	r2, r3
 800a766:	d20b      	bcs.n	800a780 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	681a      	ldr	r2, [r3, #0]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	1ad2      	subs	r2, r2, r3
 800a770:	683b      	ldr	r3, [r7, #0]
 800a772:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f7ff ff99 	bl	800a6ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a77a:	2300      	movs	r3, #0
 800a77c:	61fb      	str	r3, [r7, #28]
 800a77e:	e004      	b.n	800a78a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2200      	movs	r2, #0
 800a784:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a786:	2301      	movs	r3, #1
 800a788:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a78a:	f000 f987 	bl	800aa9c <vPortExitCritical>

	return xReturn;
 800a78e:	69fb      	ldr	r3, [r7, #28]
}
 800a790:	4618      	mov	r0, r3
 800a792:	3720      	adds	r7, #32
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}
 800a798:	20025f0c 	.word	0x20025f0c
 800a79c:	20025f20 	.word	0x20025f20

0800a7a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a7a4:	4b03      	ldr	r3, [pc, #12]	@ (800a7b4 <vTaskMissedYield+0x14>)
 800a7a6:	2201      	movs	r2, #1
 800a7a8:	601a      	str	r2, [r3, #0]
}
 800a7aa:	bf00      	nop
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr
 800a7b4:	20025f1c 	.word	0x20025f1c

0800a7b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b083      	sub	sp, #12
 800a7bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a7be:	4b0c      	ldr	r3, [pc, #48]	@ (800a7f0 <prvResetNextTaskUnblockTime+0x38>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d104      	bne.n	800a7d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a7c8:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a7ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a7d0:	e008      	b.n	800a7e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d2:	4b07      	ldr	r3, [pc, #28]	@ (800a7f0 <prvResetNextTaskUnblockTime+0x38>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68db      	ldr	r3, [r3, #12]
 800a7d8:	68db      	ldr	r3, [r3, #12]
 800a7da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	4a04      	ldr	r2, [pc, #16]	@ (800a7f4 <prvResetNextTaskUnblockTime+0x3c>)
 800a7e2:	6013      	str	r3, [r2, #0]
}
 800a7e4:	bf00      	nop
 800a7e6:	370c      	adds	r7, #12
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ee:	4770      	bx	lr
 800a7f0:	20025ed8 	.word	0x20025ed8
 800a7f4:	20025f24 	.word	0x20025f24

0800a7f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b083      	sub	sp, #12
 800a7fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	@ (800a82c <xTaskGetSchedulerState+0x34>)
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d102      	bne.n	800a80c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a806:	2301      	movs	r3, #1
 800a808:	607b      	str	r3, [r7, #4]
 800a80a:	e008      	b.n	800a81e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a80c:	4b08      	ldr	r3, [pc, #32]	@ (800a830 <xTaskGetSchedulerState+0x38>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d102      	bne.n	800a81a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a814:	2302      	movs	r3, #2
 800a816:	607b      	str	r3, [r7, #4]
 800a818:	e001      	b.n	800a81e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a81a:	2300      	movs	r3, #0
 800a81c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a81e:	687b      	ldr	r3, [r7, #4]
	}
 800a820:	4618      	mov	r0, r3
 800a822:	370c      	adds	r7, #12
 800a824:	46bd      	mov	sp, r7
 800a826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82a:	4770      	bx	lr
 800a82c:	20025f14 	.word	0x20025f14
 800a830:	20025f28 	.word	0x20025f28

0800a834 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a834:	b580      	push	{r7, lr}
 800a836:	b086      	sub	sp, #24
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a840:	2300      	movs	r3, #0
 800a842:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d070      	beq.n	800a92c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a84a:	4b3b      	ldr	r3, [pc, #236]	@ (800a938 <xTaskPriorityDisinherit+0x104>)
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	429a      	cmp	r2, r3
 800a852:	d00b      	beq.n	800a86c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a858:	f383 8811 	msr	BASEPRI, r3
 800a85c:	f3bf 8f6f 	isb	sy
 800a860:	f3bf 8f4f 	dsb	sy
 800a864:	60fb      	str	r3, [r7, #12]
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	e7fd      	b.n	800a868 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a86c:	693b      	ldr	r3, [r7, #16]
 800a86e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a870:	2b00      	cmp	r3, #0
 800a872:	d10b      	bne.n	800a88c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a878:	f383 8811 	msr	BASEPRI, r3
 800a87c:	f3bf 8f6f 	isb	sy
 800a880:	f3bf 8f4f 	dsb	sy
 800a884:	60bb      	str	r3, [r7, #8]
}
 800a886:	bf00      	nop
 800a888:	bf00      	nop
 800a88a:	e7fd      	b.n	800a888 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a88c:	693b      	ldr	r3, [r7, #16]
 800a88e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a890:	1e5a      	subs	r2, r3, #1
 800a892:	693b      	ldr	r3, [r7, #16]
 800a894:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a89a:	693b      	ldr	r3, [r7, #16]
 800a89c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d044      	beq.n	800a92c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a8a2:	693b      	ldr	r3, [r7, #16]
 800a8a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d140      	bne.n	800a92c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8aa:	693b      	ldr	r3, [r7, #16]
 800a8ac:	3304      	adds	r3, #4
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7ff fa11 	bl	8009cd6 <uxListRemove>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d115      	bne.n	800a8e6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800a8ba:	693b      	ldr	r3, [r7, #16]
 800a8bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a8be:	491f      	ldr	r1, [pc, #124]	@ (800a93c <xTaskPriorityDisinherit+0x108>)
 800a8c0:	4613      	mov	r3, r2
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	4413      	add	r3, r2
 800a8c6:	009b      	lsls	r3, r3, #2
 800a8c8:	440b      	add	r3, r1
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d10a      	bne.n	800a8e6 <xTaskPriorityDisinherit+0xb2>
 800a8d0:	693b      	ldr	r3, [r7, #16]
 800a8d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8da:	43da      	mvns	r2, r3
 800a8dc:	4b18      	ldr	r3, [pc, #96]	@ (800a940 <xTaskPriorityDisinherit+0x10c>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4013      	ands	r3, r2
 800a8e2:	4a17      	ldr	r2, [pc, #92]	@ (800a940 <xTaskPriorityDisinherit+0x10c>)
 800a8e4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a8e6:	693b      	ldr	r3, [r7, #16]
 800a8e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a8ea:	693b      	ldr	r3, [r7, #16]
 800a8ec:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8f2:	f1c3 0207 	rsb	r2, r3, #7
 800a8f6:	693b      	ldr	r3, [r7, #16]
 800a8f8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8fe:	2201      	movs	r2, #1
 800a900:	409a      	lsls	r2, r3
 800a902:	4b0f      	ldr	r3, [pc, #60]	@ (800a940 <xTaskPriorityDisinherit+0x10c>)
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	4313      	orrs	r3, r2
 800a908:	4a0d      	ldr	r2, [pc, #52]	@ (800a940 <xTaskPriorityDisinherit+0x10c>)
 800a90a:	6013      	str	r3, [r2, #0]
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a910:	4613      	mov	r3, r2
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	4413      	add	r3, r2
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4a08      	ldr	r2, [pc, #32]	@ (800a93c <xTaskPriorityDisinherit+0x108>)
 800a91a:	441a      	add	r2, r3
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	3304      	adds	r3, #4
 800a920:	4619      	mov	r1, r3
 800a922:	4610      	mov	r0, r2
 800a924:	f7ff f97a 	bl	8009c1c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a928:	2301      	movs	r3, #1
 800a92a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a92c:	697b      	ldr	r3, [r7, #20]
	}
 800a92e:	4618      	mov	r0, r3
 800a930:	3718      	adds	r7, #24
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20025e48 	.word	0x20025e48
 800a93c:	20025e4c 	.word	0x20025e4c
 800a940:	20025f10 	.word	0x20025f10

0800a944 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a94e:	4b29      	ldr	r3, [pc, #164]	@ (800a9f4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a954:	4b28      	ldr	r3, [pc, #160]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	3304      	adds	r3, #4
 800a95a:	4618      	mov	r0, r3
 800a95c:	f7ff f9bb 	bl	8009cd6 <uxListRemove>
 800a960:	4603      	mov	r3, r0
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10b      	bne.n	800a97e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a966:	4b24      	ldr	r3, [pc, #144]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a96c:	2201      	movs	r2, #1
 800a96e:	fa02 f303 	lsl.w	r3, r2, r3
 800a972:	43da      	mvns	r2, r3
 800a974:	4b21      	ldr	r3, [pc, #132]	@ (800a9fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4013      	ands	r3, r2
 800a97a:	4a20      	ldr	r2, [pc, #128]	@ (800a9fc <prvAddCurrentTaskToDelayedList+0xb8>)
 800a97c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a984:	d10a      	bne.n	800a99c <prvAddCurrentTaskToDelayedList+0x58>
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d007      	beq.n	800a99c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a98c:	4b1a      	ldr	r3, [pc, #104]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	3304      	adds	r3, #4
 800a992:	4619      	mov	r1, r3
 800a994:	481a      	ldr	r0, [pc, #104]	@ (800aa00 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a996:	f7ff f941 	bl	8009c1c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a99a:	e026      	b.n	800a9ea <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a99c:	68fa      	ldr	r2, [r7, #12]
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9a4:	4b14      	ldr	r3, [pc, #80]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9ac:	68ba      	ldr	r2, [r7, #8]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d209      	bcs.n	800a9c8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9b4:	4b13      	ldr	r3, [pc, #76]	@ (800aa04 <prvAddCurrentTaskToDelayedList+0xc0>)
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	3304      	adds	r3, #4
 800a9be:	4619      	mov	r1, r3
 800a9c0:	4610      	mov	r0, r2
 800a9c2:	f7ff f94f 	bl	8009c64 <vListInsert>
}
 800a9c6:	e010      	b.n	800a9ea <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9c8:	4b0f      	ldr	r3, [pc, #60]	@ (800aa08 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a9f8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	4610      	mov	r0, r2
 800a9d6:	f7ff f945 	bl	8009c64 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9da:	4b0c      	ldr	r3, [pc, #48]	@ (800aa0c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d202      	bcs.n	800a9ea <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a9e4:	4a09      	ldr	r2, [pc, #36]	@ (800aa0c <prvAddCurrentTaskToDelayedList+0xc8>)
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	6013      	str	r3, [r2, #0]
}
 800a9ea:	bf00      	nop
 800a9ec:	3710      	adds	r7, #16
 800a9ee:	46bd      	mov	sp, r7
 800a9f0:	bd80      	pop	{r7, pc}
 800a9f2:	bf00      	nop
 800a9f4:	20025f0c 	.word	0x20025f0c
 800a9f8:	20025e48 	.word	0x20025e48
 800a9fc:	20025f10 	.word	0x20025f10
 800aa00:	20025ef4 	.word	0x20025ef4
 800aa04:	20025edc 	.word	0x20025edc
 800aa08:	20025ed8 	.word	0x20025ed8
 800aa0c:	20025f24 	.word	0x20025f24

0800aa10 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800aa10:	4b07      	ldr	r3, [pc, #28]	@ (800aa30 <pxCurrentTCBConst2>)
 800aa12:	6819      	ldr	r1, [r3, #0]
 800aa14:	6808      	ldr	r0, [r1, #0]
 800aa16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa1a:	f380 8809 	msr	PSP, r0
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	f04f 0000 	mov.w	r0, #0
 800aa26:	f380 8811 	msr	BASEPRI, r0
 800aa2a:	4770      	bx	lr
 800aa2c:	f3af 8000 	nop.w

0800aa30 <pxCurrentTCBConst2>:
 800aa30:	20025e48 	.word	0x20025e48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800aa34:	bf00      	nop
 800aa36:	bf00      	nop

0800aa38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa42:	f383 8811 	msr	BASEPRI, r3
 800aa46:	f3bf 8f6f 	isb	sy
 800aa4a:	f3bf 8f4f 	dsb	sy
 800aa4e:	607b      	str	r3, [r7, #4]
}
 800aa50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aa52:	4b10      	ldr	r3, [pc, #64]	@ (800aa94 <vPortEnterCritical+0x5c>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	3301      	adds	r3, #1
 800aa58:	4a0e      	ldr	r2, [pc, #56]	@ (800aa94 <vPortEnterCritical+0x5c>)
 800aa5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aa5c:	4b0d      	ldr	r3, [pc, #52]	@ (800aa94 <vPortEnterCritical+0x5c>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d110      	bne.n	800aa86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aa64:	4b0c      	ldr	r3, [pc, #48]	@ (800aa98 <vPortEnterCritical+0x60>)
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	b2db      	uxtb	r3, r3
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00b      	beq.n	800aa86 <vPortEnterCritical+0x4e>
	__asm volatile
 800aa6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa72:	f383 8811 	msr	BASEPRI, r3
 800aa76:	f3bf 8f6f 	isb	sy
 800aa7a:	f3bf 8f4f 	dsb	sy
 800aa7e:	603b      	str	r3, [r7, #0]
}
 800aa80:	bf00      	nop
 800aa82:	bf00      	nop
 800aa84:	e7fd      	b.n	800aa82 <vPortEnterCritical+0x4a>
	}
}
 800aa86:	bf00      	nop
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr
 800aa92:	bf00      	nop
 800aa94:	20000010 	.word	0x20000010
 800aa98:	e000ed04 	.word	0xe000ed04

0800aa9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aaa2:	4b12      	ldr	r3, [pc, #72]	@ (800aaec <vPortExitCritical+0x50>)
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d10b      	bne.n	800aac2 <vPortExitCritical+0x26>
	__asm volatile
 800aaaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaae:	f383 8811 	msr	BASEPRI, r3
 800aab2:	f3bf 8f6f 	isb	sy
 800aab6:	f3bf 8f4f 	dsb	sy
 800aaba:	607b      	str	r3, [r7, #4]
}
 800aabc:	bf00      	nop
 800aabe:	bf00      	nop
 800aac0:	e7fd      	b.n	800aabe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aac2:	4b0a      	ldr	r3, [pc, #40]	@ (800aaec <vPortExitCritical+0x50>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	3b01      	subs	r3, #1
 800aac8:	4a08      	ldr	r2, [pc, #32]	@ (800aaec <vPortExitCritical+0x50>)
 800aaca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aacc:	4b07      	ldr	r3, [pc, #28]	@ (800aaec <vPortExitCritical+0x50>)
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d105      	bne.n	800aae0 <vPortExitCritical+0x44>
 800aad4:	2300      	movs	r3, #0
 800aad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	f383 8811 	msr	BASEPRI, r3
}
 800aade:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aae0:	bf00      	nop
 800aae2:	370c      	adds	r7, #12
 800aae4:	46bd      	mov	sp, r7
 800aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaea:	4770      	bx	lr
 800aaec:	20000010 	.word	0x20000010

0800aaf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800aaf0:	f3ef 8009 	mrs	r0, PSP
 800aaf4:	f3bf 8f6f 	isb	sy
 800aaf8:	4b15      	ldr	r3, [pc, #84]	@ (800ab50 <pxCurrentTCBConst>)
 800aafa:	681a      	ldr	r2, [r3, #0]
 800aafc:	f01e 0f10 	tst.w	lr, #16
 800ab00:	bf08      	it	eq
 800ab02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ab06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab0a:	6010      	str	r0, [r2, #0]
 800ab0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ab10:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ab14:	f380 8811 	msr	BASEPRI, r0
 800ab18:	f3bf 8f4f 	dsb	sy
 800ab1c:	f3bf 8f6f 	isb	sy
 800ab20:	f7ff fcde 	bl	800a4e0 <vTaskSwitchContext>
 800ab24:	f04f 0000 	mov.w	r0, #0
 800ab28:	f380 8811 	msr	BASEPRI, r0
 800ab2c:	bc09      	pop	{r0, r3}
 800ab2e:	6819      	ldr	r1, [r3, #0]
 800ab30:	6808      	ldr	r0, [r1, #0]
 800ab32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab36:	f01e 0f10 	tst.w	lr, #16
 800ab3a:	bf08      	it	eq
 800ab3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ab40:	f380 8809 	msr	PSP, r0
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	f3af 8000 	nop.w

0800ab50 <pxCurrentTCBConst>:
 800ab50:	20025e48 	.word	0x20025e48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop

0800ab58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b082      	sub	sp, #8
 800ab5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ab5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab62:	f383 8811 	msr	BASEPRI, r3
 800ab66:	f3bf 8f6f 	isb	sy
 800ab6a:	f3bf 8f4f 	dsb	sy
 800ab6e:	607b      	str	r3, [r7, #4]
}
 800ab70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ab72:	f7ff fbfb 	bl	800a36c <xTaskIncrementTick>
 800ab76:	4603      	mov	r3, r0
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d003      	beq.n	800ab84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ab7c:	4b06      	ldr	r3, [pc, #24]	@ (800ab98 <SysTick_Handler+0x40>)
 800ab7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	2300      	movs	r3, #0
 800ab86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	f383 8811 	msr	BASEPRI, r3
}
 800ab8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ab90:	bf00      	nop
 800ab92:	3708      	adds	r7, #8
 800ab94:	46bd      	mov	sp, r7
 800ab96:	bd80      	pop	{r7, pc}
 800ab98:	e000ed04 	.word	0xe000ed04

0800ab9c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ab9c:	b480      	push	{r7}
 800ab9e:	b085      	sub	sp, #20
 800aba0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aba2:	f3ef 8305 	mrs	r3, IPSR
 800aba6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b0f      	cmp	r3, #15
 800abac:	d915      	bls.n	800abda <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800abae:	4a18      	ldr	r2, [pc, #96]	@ (800ac10 <vPortValidateInterruptPriority+0x74>)
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	781b      	ldrb	r3, [r3, #0]
 800abb6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800abb8:	4b16      	ldr	r3, [pc, #88]	@ (800ac14 <vPortValidateInterruptPriority+0x78>)
 800abba:	781b      	ldrb	r3, [r3, #0]
 800abbc:	7afa      	ldrb	r2, [r7, #11]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d20b      	bcs.n	800abda <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800abc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abc6:	f383 8811 	msr	BASEPRI, r3
 800abca:	f3bf 8f6f 	isb	sy
 800abce:	f3bf 8f4f 	dsb	sy
 800abd2:	607b      	str	r3, [r7, #4]
}
 800abd4:	bf00      	nop
 800abd6:	bf00      	nop
 800abd8:	e7fd      	b.n	800abd6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800abda:	4b0f      	ldr	r3, [pc, #60]	@ (800ac18 <vPortValidateInterruptPriority+0x7c>)
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800abe2:	4b0e      	ldr	r3, [pc, #56]	@ (800ac1c <vPortValidateInterruptPriority+0x80>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d90b      	bls.n	800ac02 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800abea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abee:	f383 8811 	msr	BASEPRI, r3
 800abf2:	f3bf 8f6f 	isb	sy
 800abf6:	f3bf 8f4f 	dsb	sy
 800abfa:	603b      	str	r3, [r7, #0]
}
 800abfc:	bf00      	nop
 800abfe:	bf00      	nop
 800ac00:	e7fd      	b.n	800abfe <vPortValidateInterruptPriority+0x62>
	}
 800ac02:	bf00      	nop
 800ac04:	3714      	adds	r7, #20
 800ac06:	46bd      	mov	sp, r7
 800ac08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	e000e3f0 	.word	0xe000e3f0
 800ac14:	20025f2c 	.word	0x20025f2c
 800ac18:	e000ed0c 	.word	0xe000ed0c
 800ac1c:	20025f30 	.word	0x20025f30

0800ac20 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac20:	b580      	push	{r7, lr}
 800ac22:	b082      	sub	sp, #8
 800ac24:	af00      	add	r7, sp, #0
 800ac26:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f7fe fec6 	bl	80099c0 <USBH_LL_IncTimer>
}
 800ac34:	bf00      	nop
 800ac36:	3708      	adds	r7, #8
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b082      	sub	sp, #8
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fe ff0a 	bl	8009a64 <USBH_LL_Connect>
}
 800ac50:	bf00      	nop
 800ac52:	3708      	adds	r7, #8
 800ac54:	46bd      	mov	sp, r7
 800ac56:	bd80      	pop	{r7, pc}

0800ac58 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b082      	sub	sp, #8
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe ff1f 	bl	8009aaa <USBH_LL_Disconnect>
}
 800ac6c:	bf00      	nop
 800ac6e:	3708      	adds	r7, #8
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	460b      	mov	r3, r1
 800ac7e:	70fb      	strb	r3, [r7, #3]
 800ac80:	4613      	mov	r3, r2
 800ac82:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7fe ff3f 	bl	8009b0e <USBH_LL_NotifyURBChange>
#endif
}
 800ac90:	bf00      	nop
 800ac92:	3708      	adds	r7, #8
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b082      	sub	sp, #8
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe feb4 	bl	8009a14 <USBH_LL_PortEnabled>
}
 800acac:	bf00      	nop
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fec0 	bl	8009a48 <USBH_LL_PortDisabled>
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acd8:	2300      	movs	r3, #0
 800acda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acdc:	2300      	movs	r3, #0
 800acde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f7f9 fa6f 	bl	80041ca <HAL_HCD_Stop>
 800acec:	4603      	mov	r3, r0
 800acee:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800acf0:	7bfb      	ldrb	r3, [r7, #15]
 800acf2:	4618      	mov	r0, r3
 800acf4:	f000 f808 	bl	800ad08 <USBH_Get_USB_Status>
 800acf8:	4603      	mov	r3, r0
 800acfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800acfe:	4618      	mov	r0, r3
 800ad00:	3710      	adds	r7, #16
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
	...

0800ad08 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad12:	2300      	movs	r3, #0
 800ad14:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ad16:	79fb      	ldrb	r3, [r7, #7]
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d817      	bhi.n	800ad4c <USBH_Get_USB_Status+0x44>
 800ad1c:	a201      	add	r2, pc, #4	@ (adr r2, 800ad24 <USBH_Get_USB_Status+0x1c>)
 800ad1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad22:	bf00      	nop
 800ad24:	0800ad35 	.word	0x0800ad35
 800ad28:	0800ad3b 	.word	0x0800ad3b
 800ad2c:	0800ad41 	.word	0x0800ad41
 800ad30:	0800ad47 	.word	0x0800ad47
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ad34:	2300      	movs	r3, #0
 800ad36:	73fb      	strb	r3, [r7, #15]
    break;
 800ad38:	e00b      	b.n	800ad52 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ad3a:	2302      	movs	r3, #2
 800ad3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ad3e:	e008      	b.n	800ad52 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ad40:	2301      	movs	r3, #1
 800ad42:	73fb      	strb	r3, [r7, #15]
    break;
 800ad44:	e005      	b.n	800ad52 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ad46:	2302      	movs	r3, #2
 800ad48:	73fb      	strb	r3, [r7, #15]
    break;
 800ad4a:	e002      	b.n	800ad52 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ad4c:	2302      	movs	r3, #2
 800ad4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ad50:	bf00      	nop
  }
  return usb_status;
 800ad52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad54:	4618      	mov	r0, r3
 800ad56:	3714      	adds	r7, #20
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <malloc>:
 800ad60:	4b02      	ldr	r3, [pc, #8]	@ (800ad6c <malloc+0xc>)
 800ad62:	4601      	mov	r1, r0
 800ad64:	6818      	ldr	r0, [r3, #0]
 800ad66:	f000 b825 	b.w	800adb4 <_malloc_r>
 800ad6a:	bf00      	nop
 800ad6c:	20000020 	.word	0x20000020

0800ad70 <sbrk_aligned>:
 800ad70:	b570      	push	{r4, r5, r6, lr}
 800ad72:	4e0f      	ldr	r6, [pc, #60]	@ (800adb0 <sbrk_aligned+0x40>)
 800ad74:	460c      	mov	r4, r1
 800ad76:	6831      	ldr	r1, [r6, #0]
 800ad78:	4605      	mov	r5, r0
 800ad7a:	b911      	cbnz	r1, 800ad82 <sbrk_aligned+0x12>
 800ad7c:	f000 ff46 	bl	800bc0c <_sbrk_r>
 800ad80:	6030      	str	r0, [r6, #0]
 800ad82:	4621      	mov	r1, r4
 800ad84:	4628      	mov	r0, r5
 800ad86:	f000 ff41 	bl	800bc0c <_sbrk_r>
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	d103      	bne.n	800ad96 <sbrk_aligned+0x26>
 800ad8e:	f04f 34ff 	mov.w	r4, #4294967295
 800ad92:	4620      	mov	r0, r4
 800ad94:	bd70      	pop	{r4, r5, r6, pc}
 800ad96:	1cc4      	adds	r4, r0, #3
 800ad98:	f024 0403 	bic.w	r4, r4, #3
 800ad9c:	42a0      	cmp	r0, r4
 800ad9e:	d0f8      	beq.n	800ad92 <sbrk_aligned+0x22>
 800ada0:	1a21      	subs	r1, r4, r0
 800ada2:	4628      	mov	r0, r5
 800ada4:	f000 ff32 	bl	800bc0c <_sbrk_r>
 800ada8:	3001      	adds	r0, #1
 800adaa:	d1f2      	bne.n	800ad92 <sbrk_aligned+0x22>
 800adac:	e7ef      	b.n	800ad8e <sbrk_aligned+0x1e>
 800adae:	bf00      	nop
 800adb0:	20026314 	.word	0x20026314

0800adb4 <_malloc_r>:
 800adb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb8:	1ccd      	adds	r5, r1, #3
 800adba:	f025 0503 	bic.w	r5, r5, #3
 800adbe:	3508      	adds	r5, #8
 800adc0:	2d0c      	cmp	r5, #12
 800adc2:	bf38      	it	cc
 800adc4:	250c      	movcc	r5, #12
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	4606      	mov	r6, r0
 800adca:	db01      	blt.n	800add0 <_malloc_r+0x1c>
 800adcc:	42a9      	cmp	r1, r5
 800adce:	d904      	bls.n	800adda <_malloc_r+0x26>
 800add0:	230c      	movs	r3, #12
 800add2:	6033      	str	r3, [r6, #0]
 800add4:	2000      	movs	r0, #0
 800add6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800adda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aeb0 <_malloc_r+0xfc>
 800adde:	f000 f869 	bl	800aeb4 <__malloc_lock>
 800ade2:	f8d8 3000 	ldr.w	r3, [r8]
 800ade6:	461c      	mov	r4, r3
 800ade8:	bb44      	cbnz	r4, 800ae3c <_malloc_r+0x88>
 800adea:	4629      	mov	r1, r5
 800adec:	4630      	mov	r0, r6
 800adee:	f7ff ffbf 	bl	800ad70 <sbrk_aligned>
 800adf2:	1c43      	adds	r3, r0, #1
 800adf4:	4604      	mov	r4, r0
 800adf6:	d158      	bne.n	800aeaa <_malloc_r+0xf6>
 800adf8:	f8d8 4000 	ldr.w	r4, [r8]
 800adfc:	4627      	mov	r7, r4
 800adfe:	2f00      	cmp	r7, #0
 800ae00:	d143      	bne.n	800ae8a <_malloc_r+0xd6>
 800ae02:	2c00      	cmp	r4, #0
 800ae04:	d04b      	beq.n	800ae9e <_malloc_r+0xea>
 800ae06:	6823      	ldr	r3, [r4, #0]
 800ae08:	4639      	mov	r1, r7
 800ae0a:	4630      	mov	r0, r6
 800ae0c:	eb04 0903 	add.w	r9, r4, r3
 800ae10:	f000 fefc 	bl	800bc0c <_sbrk_r>
 800ae14:	4581      	cmp	r9, r0
 800ae16:	d142      	bne.n	800ae9e <_malloc_r+0xea>
 800ae18:	6821      	ldr	r1, [r4, #0]
 800ae1a:	1a6d      	subs	r5, r5, r1
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ffa6 	bl	800ad70 <sbrk_aligned>
 800ae24:	3001      	adds	r0, #1
 800ae26:	d03a      	beq.n	800ae9e <_malloc_r+0xea>
 800ae28:	6823      	ldr	r3, [r4, #0]
 800ae2a:	442b      	add	r3, r5
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ae32:	685a      	ldr	r2, [r3, #4]
 800ae34:	bb62      	cbnz	r2, 800ae90 <_malloc_r+0xdc>
 800ae36:	f8c8 7000 	str.w	r7, [r8]
 800ae3a:	e00f      	b.n	800ae5c <_malloc_r+0xa8>
 800ae3c:	6822      	ldr	r2, [r4, #0]
 800ae3e:	1b52      	subs	r2, r2, r5
 800ae40:	d420      	bmi.n	800ae84 <_malloc_r+0xd0>
 800ae42:	2a0b      	cmp	r2, #11
 800ae44:	d917      	bls.n	800ae76 <_malloc_r+0xc2>
 800ae46:	1961      	adds	r1, r4, r5
 800ae48:	42a3      	cmp	r3, r4
 800ae4a:	6025      	str	r5, [r4, #0]
 800ae4c:	bf18      	it	ne
 800ae4e:	6059      	strne	r1, [r3, #4]
 800ae50:	6863      	ldr	r3, [r4, #4]
 800ae52:	bf08      	it	eq
 800ae54:	f8c8 1000 	streq.w	r1, [r8]
 800ae58:	5162      	str	r2, [r4, r5]
 800ae5a:	604b      	str	r3, [r1, #4]
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f000 f82f 	bl	800aec0 <__malloc_unlock>
 800ae62:	f104 000b 	add.w	r0, r4, #11
 800ae66:	1d23      	adds	r3, r4, #4
 800ae68:	f020 0007 	bic.w	r0, r0, #7
 800ae6c:	1ac2      	subs	r2, r0, r3
 800ae6e:	bf1c      	itt	ne
 800ae70:	1a1b      	subne	r3, r3, r0
 800ae72:	50a3      	strne	r3, [r4, r2]
 800ae74:	e7af      	b.n	800add6 <_malloc_r+0x22>
 800ae76:	6862      	ldr	r2, [r4, #4]
 800ae78:	42a3      	cmp	r3, r4
 800ae7a:	bf0c      	ite	eq
 800ae7c:	f8c8 2000 	streq.w	r2, [r8]
 800ae80:	605a      	strne	r2, [r3, #4]
 800ae82:	e7eb      	b.n	800ae5c <_malloc_r+0xa8>
 800ae84:	4623      	mov	r3, r4
 800ae86:	6864      	ldr	r4, [r4, #4]
 800ae88:	e7ae      	b.n	800ade8 <_malloc_r+0x34>
 800ae8a:	463c      	mov	r4, r7
 800ae8c:	687f      	ldr	r7, [r7, #4]
 800ae8e:	e7b6      	b.n	800adfe <_malloc_r+0x4a>
 800ae90:	461a      	mov	r2, r3
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	42a3      	cmp	r3, r4
 800ae96:	d1fb      	bne.n	800ae90 <_malloc_r+0xdc>
 800ae98:	2300      	movs	r3, #0
 800ae9a:	6053      	str	r3, [r2, #4]
 800ae9c:	e7de      	b.n	800ae5c <_malloc_r+0xa8>
 800ae9e:	230c      	movs	r3, #12
 800aea0:	6033      	str	r3, [r6, #0]
 800aea2:	4630      	mov	r0, r6
 800aea4:	f000 f80c 	bl	800aec0 <__malloc_unlock>
 800aea8:	e794      	b.n	800add4 <_malloc_r+0x20>
 800aeaa:	6005      	str	r5, [r0, #0]
 800aeac:	e7d6      	b.n	800ae5c <_malloc_r+0xa8>
 800aeae:	bf00      	nop
 800aeb0:	20026318 	.word	0x20026318

0800aeb4 <__malloc_lock>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	@ (800aebc <__malloc_lock+0x8>)
 800aeb6:	f000 bef6 	b.w	800bca6 <__retarget_lock_acquire_recursive>
 800aeba:	bf00      	nop
 800aebc:	2002645c 	.word	0x2002645c

0800aec0 <__malloc_unlock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	@ (800aec8 <__malloc_unlock+0x8>)
 800aec2:	f000 bef1 	b.w	800bca8 <__retarget_lock_release_recursive>
 800aec6:	bf00      	nop
 800aec8:	2002645c 	.word	0x2002645c

0800aecc <__cvt>:
 800aecc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aed0:	ec57 6b10 	vmov	r6, r7, d0
 800aed4:	2f00      	cmp	r7, #0
 800aed6:	460c      	mov	r4, r1
 800aed8:	4619      	mov	r1, r3
 800aeda:	463b      	mov	r3, r7
 800aedc:	bfbb      	ittet	lt
 800aede:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800aee2:	461f      	movlt	r7, r3
 800aee4:	2300      	movge	r3, #0
 800aee6:	232d      	movlt	r3, #45	@ 0x2d
 800aee8:	700b      	strb	r3, [r1, #0]
 800aeea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800aeec:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800aef0:	4691      	mov	r9, r2
 800aef2:	f023 0820 	bic.w	r8, r3, #32
 800aef6:	bfbc      	itt	lt
 800aef8:	4632      	movlt	r2, r6
 800aefa:	4616      	movlt	r6, r2
 800aefc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af00:	d005      	beq.n	800af0e <__cvt+0x42>
 800af02:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800af06:	d100      	bne.n	800af0a <__cvt+0x3e>
 800af08:	3401      	adds	r4, #1
 800af0a:	2102      	movs	r1, #2
 800af0c:	e000      	b.n	800af10 <__cvt+0x44>
 800af0e:	2103      	movs	r1, #3
 800af10:	ab03      	add	r3, sp, #12
 800af12:	9301      	str	r3, [sp, #4]
 800af14:	ab02      	add	r3, sp, #8
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	ec47 6b10 	vmov	d0, r6, r7
 800af1c:	4653      	mov	r3, sl
 800af1e:	4622      	mov	r2, r4
 800af20:	f000 ff5a 	bl	800bdd8 <_dtoa_r>
 800af24:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800af28:	4605      	mov	r5, r0
 800af2a:	d119      	bne.n	800af60 <__cvt+0x94>
 800af2c:	f019 0f01 	tst.w	r9, #1
 800af30:	d00e      	beq.n	800af50 <__cvt+0x84>
 800af32:	eb00 0904 	add.w	r9, r0, r4
 800af36:	2200      	movs	r2, #0
 800af38:	2300      	movs	r3, #0
 800af3a:	4630      	mov	r0, r6
 800af3c:	4639      	mov	r1, r7
 800af3e:	f7f5 fdd3 	bl	8000ae8 <__aeabi_dcmpeq>
 800af42:	b108      	cbz	r0, 800af48 <__cvt+0x7c>
 800af44:	f8cd 900c 	str.w	r9, [sp, #12]
 800af48:	2230      	movs	r2, #48	@ 0x30
 800af4a:	9b03      	ldr	r3, [sp, #12]
 800af4c:	454b      	cmp	r3, r9
 800af4e:	d31e      	bcc.n	800af8e <__cvt+0xc2>
 800af50:	9b03      	ldr	r3, [sp, #12]
 800af52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af54:	1b5b      	subs	r3, r3, r5
 800af56:	4628      	mov	r0, r5
 800af58:	6013      	str	r3, [r2, #0]
 800af5a:	b004      	add	sp, #16
 800af5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800af64:	eb00 0904 	add.w	r9, r0, r4
 800af68:	d1e5      	bne.n	800af36 <__cvt+0x6a>
 800af6a:	7803      	ldrb	r3, [r0, #0]
 800af6c:	2b30      	cmp	r3, #48	@ 0x30
 800af6e:	d10a      	bne.n	800af86 <__cvt+0xba>
 800af70:	2200      	movs	r2, #0
 800af72:	2300      	movs	r3, #0
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 fdb6 	bl	8000ae8 <__aeabi_dcmpeq>
 800af7c:	b918      	cbnz	r0, 800af86 <__cvt+0xba>
 800af7e:	f1c4 0401 	rsb	r4, r4, #1
 800af82:	f8ca 4000 	str.w	r4, [sl]
 800af86:	f8da 3000 	ldr.w	r3, [sl]
 800af8a:	4499      	add	r9, r3
 800af8c:	e7d3      	b.n	800af36 <__cvt+0x6a>
 800af8e:	1c59      	adds	r1, r3, #1
 800af90:	9103      	str	r1, [sp, #12]
 800af92:	701a      	strb	r2, [r3, #0]
 800af94:	e7d9      	b.n	800af4a <__cvt+0x7e>

0800af96 <__exponent>:
 800af96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af98:	2900      	cmp	r1, #0
 800af9a:	bfba      	itte	lt
 800af9c:	4249      	neglt	r1, r1
 800af9e:	232d      	movlt	r3, #45	@ 0x2d
 800afa0:	232b      	movge	r3, #43	@ 0x2b
 800afa2:	2909      	cmp	r1, #9
 800afa4:	7002      	strb	r2, [r0, #0]
 800afa6:	7043      	strb	r3, [r0, #1]
 800afa8:	dd29      	ble.n	800affe <__exponent+0x68>
 800afaa:	f10d 0307 	add.w	r3, sp, #7
 800afae:	461d      	mov	r5, r3
 800afb0:	270a      	movs	r7, #10
 800afb2:	461a      	mov	r2, r3
 800afb4:	fbb1 f6f7 	udiv	r6, r1, r7
 800afb8:	fb07 1416 	mls	r4, r7, r6, r1
 800afbc:	3430      	adds	r4, #48	@ 0x30
 800afbe:	f802 4c01 	strb.w	r4, [r2, #-1]
 800afc2:	460c      	mov	r4, r1
 800afc4:	2c63      	cmp	r4, #99	@ 0x63
 800afc6:	f103 33ff 	add.w	r3, r3, #4294967295
 800afca:	4631      	mov	r1, r6
 800afcc:	dcf1      	bgt.n	800afb2 <__exponent+0x1c>
 800afce:	3130      	adds	r1, #48	@ 0x30
 800afd0:	1e94      	subs	r4, r2, #2
 800afd2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800afd6:	1c41      	adds	r1, r0, #1
 800afd8:	4623      	mov	r3, r4
 800afda:	42ab      	cmp	r3, r5
 800afdc:	d30a      	bcc.n	800aff4 <__exponent+0x5e>
 800afde:	f10d 0309 	add.w	r3, sp, #9
 800afe2:	1a9b      	subs	r3, r3, r2
 800afe4:	42ac      	cmp	r4, r5
 800afe6:	bf88      	it	hi
 800afe8:	2300      	movhi	r3, #0
 800afea:	3302      	adds	r3, #2
 800afec:	4403      	add	r3, r0
 800afee:	1a18      	subs	r0, r3, r0
 800aff0:	b003      	add	sp, #12
 800aff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aff4:	f813 6b01 	ldrb.w	r6, [r3], #1
 800aff8:	f801 6f01 	strb.w	r6, [r1, #1]!
 800affc:	e7ed      	b.n	800afda <__exponent+0x44>
 800affe:	2330      	movs	r3, #48	@ 0x30
 800b000:	3130      	adds	r1, #48	@ 0x30
 800b002:	7083      	strb	r3, [r0, #2]
 800b004:	70c1      	strb	r1, [r0, #3]
 800b006:	1d03      	adds	r3, r0, #4
 800b008:	e7f1      	b.n	800afee <__exponent+0x58>
	...

0800b00c <_printf_float>:
 800b00c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b010:	b08d      	sub	sp, #52	@ 0x34
 800b012:	460c      	mov	r4, r1
 800b014:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b018:	4616      	mov	r6, r2
 800b01a:	461f      	mov	r7, r3
 800b01c:	4605      	mov	r5, r0
 800b01e:	f000 fdbd 	bl	800bb9c <_localeconv_r>
 800b022:	6803      	ldr	r3, [r0, #0]
 800b024:	9304      	str	r3, [sp, #16]
 800b026:	4618      	mov	r0, r3
 800b028:	f7f5 f932 	bl	8000290 <strlen>
 800b02c:	2300      	movs	r3, #0
 800b02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800b030:	f8d8 3000 	ldr.w	r3, [r8]
 800b034:	9005      	str	r0, [sp, #20]
 800b036:	3307      	adds	r3, #7
 800b038:	f023 0307 	bic.w	r3, r3, #7
 800b03c:	f103 0208 	add.w	r2, r3, #8
 800b040:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b044:	f8d4 b000 	ldr.w	fp, [r4]
 800b048:	f8c8 2000 	str.w	r2, [r8]
 800b04c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b050:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b054:	9307      	str	r3, [sp, #28]
 800b056:	f8cd 8018 	str.w	r8, [sp, #24]
 800b05a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b05e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b062:	4b9c      	ldr	r3, [pc, #624]	@ (800b2d4 <_printf_float+0x2c8>)
 800b064:	f04f 32ff 	mov.w	r2, #4294967295
 800b068:	f7f5 fd70 	bl	8000b4c <__aeabi_dcmpun>
 800b06c:	bb70      	cbnz	r0, 800b0cc <_printf_float+0xc0>
 800b06e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b072:	4b98      	ldr	r3, [pc, #608]	@ (800b2d4 <_printf_float+0x2c8>)
 800b074:	f04f 32ff 	mov.w	r2, #4294967295
 800b078:	f7f5 fd4a 	bl	8000b10 <__aeabi_dcmple>
 800b07c:	bb30      	cbnz	r0, 800b0cc <_printf_float+0xc0>
 800b07e:	2200      	movs	r2, #0
 800b080:	2300      	movs	r3, #0
 800b082:	4640      	mov	r0, r8
 800b084:	4649      	mov	r1, r9
 800b086:	f7f5 fd39 	bl	8000afc <__aeabi_dcmplt>
 800b08a:	b110      	cbz	r0, 800b092 <_printf_float+0x86>
 800b08c:	232d      	movs	r3, #45	@ 0x2d
 800b08e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b092:	4a91      	ldr	r2, [pc, #580]	@ (800b2d8 <_printf_float+0x2cc>)
 800b094:	4b91      	ldr	r3, [pc, #580]	@ (800b2dc <_printf_float+0x2d0>)
 800b096:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b09a:	bf8c      	ite	hi
 800b09c:	4690      	movhi	r8, r2
 800b09e:	4698      	movls	r8, r3
 800b0a0:	2303      	movs	r3, #3
 800b0a2:	6123      	str	r3, [r4, #16]
 800b0a4:	f02b 0304 	bic.w	r3, fp, #4
 800b0a8:	6023      	str	r3, [r4, #0]
 800b0aa:	f04f 0900 	mov.w	r9, #0
 800b0ae:	9700      	str	r7, [sp, #0]
 800b0b0:	4633      	mov	r3, r6
 800b0b2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b0b4:	4621      	mov	r1, r4
 800b0b6:	4628      	mov	r0, r5
 800b0b8:	f000 f9d2 	bl	800b460 <_printf_common>
 800b0bc:	3001      	adds	r0, #1
 800b0be:	f040 808d 	bne.w	800b1dc <_printf_float+0x1d0>
 800b0c2:	f04f 30ff 	mov.w	r0, #4294967295
 800b0c6:	b00d      	add	sp, #52	@ 0x34
 800b0c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0cc:	4642      	mov	r2, r8
 800b0ce:	464b      	mov	r3, r9
 800b0d0:	4640      	mov	r0, r8
 800b0d2:	4649      	mov	r1, r9
 800b0d4:	f7f5 fd3a 	bl	8000b4c <__aeabi_dcmpun>
 800b0d8:	b140      	cbz	r0, 800b0ec <_printf_float+0xe0>
 800b0da:	464b      	mov	r3, r9
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	bfbc      	itt	lt
 800b0e0:	232d      	movlt	r3, #45	@ 0x2d
 800b0e2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b0e6:	4a7e      	ldr	r2, [pc, #504]	@ (800b2e0 <_printf_float+0x2d4>)
 800b0e8:	4b7e      	ldr	r3, [pc, #504]	@ (800b2e4 <_printf_float+0x2d8>)
 800b0ea:	e7d4      	b.n	800b096 <_printf_float+0x8a>
 800b0ec:	6863      	ldr	r3, [r4, #4]
 800b0ee:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b0f2:	9206      	str	r2, [sp, #24]
 800b0f4:	1c5a      	adds	r2, r3, #1
 800b0f6:	d13b      	bne.n	800b170 <_printf_float+0x164>
 800b0f8:	2306      	movs	r3, #6
 800b0fa:	6063      	str	r3, [r4, #4]
 800b0fc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b100:	2300      	movs	r3, #0
 800b102:	6022      	str	r2, [r4, #0]
 800b104:	9303      	str	r3, [sp, #12]
 800b106:	ab0a      	add	r3, sp, #40	@ 0x28
 800b108:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b10c:	ab09      	add	r3, sp, #36	@ 0x24
 800b10e:	9300      	str	r3, [sp, #0]
 800b110:	6861      	ldr	r1, [r4, #4]
 800b112:	ec49 8b10 	vmov	d0, r8, r9
 800b116:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b11a:	4628      	mov	r0, r5
 800b11c:	f7ff fed6 	bl	800aecc <__cvt>
 800b120:	9b06      	ldr	r3, [sp, #24]
 800b122:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b124:	2b47      	cmp	r3, #71	@ 0x47
 800b126:	4680      	mov	r8, r0
 800b128:	d129      	bne.n	800b17e <_printf_float+0x172>
 800b12a:	1cc8      	adds	r0, r1, #3
 800b12c:	db02      	blt.n	800b134 <_printf_float+0x128>
 800b12e:	6863      	ldr	r3, [r4, #4]
 800b130:	4299      	cmp	r1, r3
 800b132:	dd41      	ble.n	800b1b8 <_printf_float+0x1ac>
 800b134:	f1aa 0a02 	sub.w	sl, sl, #2
 800b138:	fa5f fa8a 	uxtb.w	sl, sl
 800b13c:	3901      	subs	r1, #1
 800b13e:	4652      	mov	r2, sl
 800b140:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b144:	9109      	str	r1, [sp, #36]	@ 0x24
 800b146:	f7ff ff26 	bl	800af96 <__exponent>
 800b14a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b14c:	1813      	adds	r3, r2, r0
 800b14e:	2a01      	cmp	r2, #1
 800b150:	4681      	mov	r9, r0
 800b152:	6123      	str	r3, [r4, #16]
 800b154:	dc02      	bgt.n	800b15c <_printf_float+0x150>
 800b156:	6822      	ldr	r2, [r4, #0]
 800b158:	07d2      	lsls	r2, r2, #31
 800b15a:	d501      	bpl.n	800b160 <_printf_float+0x154>
 800b15c:	3301      	adds	r3, #1
 800b15e:	6123      	str	r3, [r4, #16]
 800b160:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0a2      	beq.n	800b0ae <_printf_float+0xa2>
 800b168:	232d      	movs	r3, #45	@ 0x2d
 800b16a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b16e:	e79e      	b.n	800b0ae <_printf_float+0xa2>
 800b170:	9a06      	ldr	r2, [sp, #24]
 800b172:	2a47      	cmp	r2, #71	@ 0x47
 800b174:	d1c2      	bne.n	800b0fc <_printf_float+0xf0>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d1c0      	bne.n	800b0fc <_printf_float+0xf0>
 800b17a:	2301      	movs	r3, #1
 800b17c:	e7bd      	b.n	800b0fa <_printf_float+0xee>
 800b17e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b182:	d9db      	bls.n	800b13c <_printf_float+0x130>
 800b184:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b188:	d118      	bne.n	800b1bc <_printf_float+0x1b0>
 800b18a:	2900      	cmp	r1, #0
 800b18c:	6863      	ldr	r3, [r4, #4]
 800b18e:	dd0b      	ble.n	800b1a8 <_printf_float+0x19c>
 800b190:	6121      	str	r1, [r4, #16]
 800b192:	b913      	cbnz	r3, 800b19a <_printf_float+0x18e>
 800b194:	6822      	ldr	r2, [r4, #0]
 800b196:	07d0      	lsls	r0, r2, #31
 800b198:	d502      	bpl.n	800b1a0 <_printf_float+0x194>
 800b19a:	3301      	adds	r3, #1
 800b19c:	440b      	add	r3, r1
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b1a2:	f04f 0900 	mov.w	r9, #0
 800b1a6:	e7db      	b.n	800b160 <_printf_float+0x154>
 800b1a8:	b913      	cbnz	r3, 800b1b0 <_printf_float+0x1a4>
 800b1aa:	6822      	ldr	r2, [r4, #0]
 800b1ac:	07d2      	lsls	r2, r2, #31
 800b1ae:	d501      	bpl.n	800b1b4 <_printf_float+0x1a8>
 800b1b0:	3302      	adds	r3, #2
 800b1b2:	e7f4      	b.n	800b19e <_printf_float+0x192>
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	e7f2      	b.n	800b19e <_printf_float+0x192>
 800b1b8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b1bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1be:	4299      	cmp	r1, r3
 800b1c0:	db05      	blt.n	800b1ce <_printf_float+0x1c2>
 800b1c2:	6823      	ldr	r3, [r4, #0]
 800b1c4:	6121      	str	r1, [r4, #16]
 800b1c6:	07d8      	lsls	r0, r3, #31
 800b1c8:	d5ea      	bpl.n	800b1a0 <_printf_float+0x194>
 800b1ca:	1c4b      	adds	r3, r1, #1
 800b1cc:	e7e7      	b.n	800b19e <_printf_float+0x192>
 800b1ce:	2900      	cmp	r1, #0
 800b1d0:	bfd4      	ite	le
 800b1d2:	f1c1 0202 	rsble	r2, r1, #2
 800b1d6:	2201      	movgt	r2, #1
 800b1d8:	4413      	add	r3, r2
 800b1da:	e7e0      	b.n	800b19e <_printf_float+0x192>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	055a      	lsls	r2, r3, #21
 800b1e0:	d407      	bmi.n	800b1f2 <_printf_float+0x1e6>
 800b1e2:	6923      	ldr	r3, [r4, #16]
 800b1e4:	4642      	mov	r2, r8
 800b1e6:	4631      	mov	r1, r6
 800b1e8:	4628      	mov	r0, r5
 800b1ea:	47b8      	blx	r7
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d12b      	bne.n	800b248 <_printf_float+0x23c>
 800b1f0:	e767      	b.n	800b0c2 <_printf_float+0xb6>
 800b1f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b1f6:	f240 80dd 	bls.w	800b3b4 <_printf_float+0x3a8>
 800b1fa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1fe:	2200      	movs	r2, #0
 800b200:	2300      	movs	r3, #0
 800b202:	f7f5 fc71 	bl	8000ae8 <__aeabi_dcmpeq>
 800b206:	2800      	cmp	r0, #0
 800b208:	d033      	beq.n	800b272 <_printf_float+0x266>
 800b20a:	4a37      	ldr	r2, [pc, #220]	@ (800b2e8 <_printf_float+0x2dc>)
 800b20c:	2301      	movs	r3, #1
 800b20e:	4631      	mov	r1, r6
 800b210:	4628      	mov	r0, r5
 800b212:	47b8      	blx	r7
 800b214:	3001      	adds	r0, #1
 800b216:	f43f af54 	beq.w	800b0c2 <_printf_float+0xb6>
 800b21a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b21e:	4543      	cmp	r3, r8
 800b220:	db02      	blt.n	800b228 <_printf_float+0x21c>
 800b222:	6823      	ldr	r3, [r4, #0]
 800b224:	07d8      	lsls	r0, r3, #31
 800b226:	d50f      	bpl.n	800b248 <_printf_float+0x23c>
 800b228:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b22c:	4631      	mov	r1, r6
 800b22e:	4628      	mov	r0, r5
 800b230:	47b8      	blx	r7
 800b232:	3001      	adds	r0, #1
 800b234:	f43f af45 	beq.w	800b0c2 <_printf_float+0xb6>
 800b238:	f04f 0900 	mov.w	r9, #0
 800b23c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b240:	f104 0a1a 	add.w	sl, r4, #26
 800b244:	45c8      	cmp	r8, r9
 800b246:	dc09      	bgt.n	800b25c <_printf_float+0x250>
 800b248:	6823      	ldr	r3, [r4, #0]
 800b24a:	079b      	lsls	r3, r3, #30
 800b24c:	f100 8103 	bmi.w	800b456 <_printf_float+0x44a>
 800b250:	68e0      	ldr	r0, [r4, #12]
 800b252:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b254:	4298      	cmp	r0, r3
 800b256:	bfb8      	it	lt
 800b258:	4618      	movlt	r0, r3
 800b25a:	e734      	b.n	800b0c6 <_printf_float+0xba>
 800b25c:	2301      	movs	r3, #1
 800b25e:	4652      	mov	r2, sl
 800b260:	4631      	mov	r1, r6
 800b262:	4628      	mov	r0, r5
 800b264:	47b8      	blx	r7
 800b266:	3001      	adds	r0, #1
 800b268:	f43f af2b 	beq.w	800b0c2 <_printf_float+0xb6>
 800b26c:	f109 0901 	add.w	r9, r9, #1
 800b270:	e7e8      	b.n	800b244 <_printf_float+0x238>
 800b272:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b274:	2b00      	cmp	r3, #0
 800b276:	dc39      	bgt.n	800b2ec <_printf_float+0x2e0>
 800b278:	4a1b      	ldr	r2, [pc, #108]	@ (800b2e8 <_printf_float+0x2dc>)
 800b27a:	2301      	movs	r3, #1
 800b27c:	4631      	mov	r1, r6
 800b27e:	4628      	mov	r0, r5
 800b280:	47b8      	blx	r7
 800b282:	3001      	adds	r0, #1
 800b284:	f43f af1d 	beq.w	800b0c2 <_printf_float+0xb6>
 800b288:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b28c:	ea59 0303 	orrs.w	r3, r9, r3
 800b290:	d102      	bne.n	800b298 <_printf_float+0x28c>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	07d9      	lsls	r1, r3, #31
 800b296:	d5d7      	bpl.n	800b248 <_printf_float+0x23c>
 800b298:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f af0d 	beq.w	800b0c2 <_printf_float+0xb6>
 800b2a8:	f04f 0a00 	mov.w	sl, #0
 800b2ac:	f104 0b1a 	add.w	fp, r4, #26
 800b2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2b2:	425b      	negs	r3, r3
 800b2b4:	4553      	cmp	r3, sl
 800b2b6:	dc01      	bgt.n	800b2bc <_printf_float+0x2b0>
 800b2b8:	464b      	mov	r3, r9
 800b2ba:	e793      	b.n	800b1e4 <_printf_float+0x1d8>
 800b2bc:	2301      	movs	r3, #1
 800b2be:	465a      	mov	r2, fp
 800b2c0:	4631      	mov	r1, r6
 800b2c2:	4628      	mov	r0, r5
 800b2c4:	47b8      	blx	r7
 800b2c6:	3001      	adds	r0, #1
 800b2c8:	f43f aefb 	beq.w	800b0c2 <_printf_float+0xb6>
 800b2cc:	f10a 0a01 	add.w	sl, sl, #1
 800b2d0:	e7ee      	b.n	800b2b0 <_printf_float+0x2a4>
 800b2d2:	bf00      	nop
 800b2d4:	7fefffff 	.word	0x7fefffff
 800b2d8:	0800e78c 	.word	0x0800e78c
 800b2dc:	0800e788 	.word	0x0800e788
 800b2e0:	0800e794 	.word	0x0800e794
 800b2e4:	0800e790 	.word	0x0800e790
 800b2e8:	0800e798 	.word	0x0800e798
 800b2ec:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b2ee:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b2f2:	4553      	cmp	r3, sl
 800b2f4:	bfa8      	it	ge
 800b2f6:	4653      	movge	r3, sl
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	4699      	mov	r9, r3
 800b2fc:	dc36      	bgt.n	800b36c <_printf_float+0x360>
 800b2fe:	f04f 0b00 	mov.w	fp, #0
 800b302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b306:	f104 021a 	add.w	r2, r4, #26
 800b30a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b30c:	9306      	str	r3, [sp, #24]
 800b30e:	eba3 0309 	sub.w	r3, r3, r9
 800b312:	455b      	cmp	r3, fp
 800b314:	dc31      	bgt.n	800b37a <_printf_float+0x36e>
 800b316:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b318:	459a      	cmp	sl, r3
 800b31a:	dc3a      	bgt.n	800b392 <_printf_float+0x386>
 800b31c:	6823      	ldr	r3, [r4, #0]
 800b31e:	07da      	lsls	r2, r3, #31
 800b320:	d437      	bmi.n	800b392 <_printf_float+0x386>
 800b322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b324:	ebaa 0903 	sub.w	r9, sl, r3
 800b328:	9b06      	ldr	r3, [sp, #24]
 800b32a:	ebaa 0303 	sub.w	r3, sl, r3
 800b32e:	4599      	cmp	r9, r3
 800b330:	bfa8      	it	ge
 800b332:	4699      	movge	r9, r3
 800b334:	f1b9 0f00 	cmp.w	r9, #0
 800b338:	dc33      	bgt.n	800b3a2 <_printf_float+0x396>
 800b33a:	f04f 0800 	mov.w	r8, #0
 800b33e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b342:	f104 0b1a 	add.w	fp, r4, #26
 800b346:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b348:	ebaa 0303 	sub.w	r3, sl, r3
 800b34c:	eba3 0309 	sub.w	r3, r3, r9
 800b350:	4543      	cmp	r3, r8
 800b352:	f77f af79 	ble.w	800b248 <_printf_float+0x23c>
 800b356:	2301      	movs	r3, #1
 800b358:	465a      	mov	r2, fp
 800b35a:	4631      	mov	r1, r6
 800b35c:	4628      	mov	r0, r5
 800b35e:	47b8      	blx	r7
 800b360:	3001      	adds	r0, #1
 800b362:	f43f aeae 	beq.w	800b0c2 <_printf_float+0xb6>
 800b366:	f108 0801 	add.w	r8, r8, #1
 800b36a:	e7ec      	b.n	800b346 <_printf_float+0x33a>
 800b36c:	4642      	mov	r2, r8
 800b36e:	4631      	mov	r1, r6
 800b370:	4628      	mov	r0, r5
 800b372:	47b8      	blx	r7
 800b374:	3001      	adds	r0, #1
 800b376:	d1c2      	bne.n	800b2fe <_printf_float+0x2f2>
 800b378:	e6a3      	b.n	800b0c2 <_printf_float+0xb6>
 800b37a:	2301      	movs	r3, #1
 800b37c:	4631      	mov	r1, r6
 800b37e:	4628      	mov	r0, r5
 800b380:	9206      	str	r2, [sp, #24]
 800b382:	47b8      	blx	r7
 800b384:	3001      	adds	r0, #1
 800b386:	f43f ae9c 	beq.w	800b0c2 <_printf_float+0xb6>
 800b38a:	9a06      	ldr	r2, [sp, #24]
 800b38c:	f10b 0b01 	add.w	fp, fp, #1
 800b390:	e7bb      	b.n	800b30a <_printf_float+0x2fe>
 800b392:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b396:	4631      	mov	r1, r6
 800b398:	4628      	mov	r0, r5
 800b39a:	47b8      	blx	r7
 800b39c:	3001      	adds	r0, #1
 800b39e:	d1c0      	bne.n	800b322 <_printf_float+0x316>
 800b3a0:	e68f      	b.n	800b0c2 <_printf_float+0xb6>
 800b3a2:	9a06      	ldr	r2, [sp, #24]
 800b3a4:	464b      	mov	r3, r9
 800b3a6:	4442      	add	r2, r8
 800b3a8:	4631      	mov	r1, r6
 800b3aa:	4628      	mov	r0, r5
 800b3ac:	47b8      	blx	r7
 800b3ae:	3001      	adds	r0, #1
 800b3b0:	d1c3      	bne.n	800b33a <_printf_float+0x32e>
 800b3b2:	e686      	b.n	800b0c2 <_printf_float+0xb6>
 800b3b4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b3b8:	f1ba 0f01 	cmp.w	sl, #1
 800b3bc:	dc01      	bgt.n	800b3c2 <_printf_float+0x3b6>
 800b3be:	07db      	lsls	r3, r3, #31
 800b3c0:	d536      	bpl.n	800b430 <_printf_float+0x424>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4642      	mov	r2, r8
 800b3c6:	4631      	mov	r1, r6
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	47b8      	blx	r7
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	f43f ae78 	beq.w	800b0c2 <_printf_float+0xb6>
 800b3d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3d6:	4631      	mov	r1, r6
 800b3d8:	4628      	mov	r0, r5
 800b3da:	47b8      	blx	r7
 800b3dc:	3001      	adds	r0, #1
 800b3de:	f43f ae70 	beq.w	800b0c2 <_printf_float+0xb6>
 800b3e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b3ee:	f7f5 fb7b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3f2:	b9c0      	cbnz	r0, 800b426 <_printf_float+0x41a>
 800b3f4:	4653      	mov	r3, sl
 800b3f6:	f108 0201 	add.w	r2, r8, #1
 800b3fa:	4631      	mov	r1, r6
 800b3fc:	4628      	mov	r0, r5
 800b3fe:	47b8      	blx	r7
 800b400:	3001      	adds	r0, #1
 800b402:	d10c      	bne.n	800b41e <_printf_float+0x412>
 800b404:	e65d      	b.n	800b0c2 <_printf_float+0xb6>
 800b406:	2301      	movs	r3, #1
 800b408:	465a      	mov	r2, fp
 800b40a:	4631      	mov	r1, r6
 800b40c:	4628      	mov	r0, r5
 800b40e:	47b8      	blx	r7
 800b410:	3001      	adds	r0, #1
 800b412:	f43f ae56 	beq.w	800b0c2 <_printf_float+0xb6>
 800b416:	f108 0801 	add.w	r8, r8, #1
 800b41a:	45d0      	cmp	r8, sl
 800b41c:	dbf3      	blt.n	800b406 <_printf_float+0x3fa>
 800b41e:	464b      	mov	r3, r9
 800b420:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b424:	e6df      	b.n	800b1e6 <_printf_float+0x1da>
 800b426:	f04f 0800 	mov.w	r8, #0
 800b42a:	f104 0b1a 	add.w	fp, r4, #26
 800b42e:	e7f4      	b.n	800b41a <_printf_float+0x40e>
 800b430:	2301      	movs	r3, #1
 800b432:	4642      	mov	r2, r8
 800b434:	e7e1      	b.n	800b3fa <_printf_float+0x3ee>
 800b436:	2301      	movs	r3, #1
 800b438:	464a      	mov	r2, r9
 800b43a:	4631      	mov	r1, r6
 800b43c:	4628      	mov	r0, r5
 800b43e:	47b8      	blx	r7
 800b440:	3001      	adds	r0, #1
 800b442:	f43f ae3e 	beq.w	800b0c2 <_printf_float+0xb6>
 800b446:	f108 0801 	add.w	r8, r8, #1
 800b44a:	68e3      	ldr	r3, [r4, #12]
 800b44c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b44e:	1a5b      	subs	r3, r3, r1
 800b450:	4543      	cmp	r3, r8
 800b452:	dcf0      	bgt.n	800b436 <_printf_float+0x42a>
 800b454:	e6fc      	b.n	800b250 <_printf_float+0x244>
 800b456:	f04f 0800 	mov.w	r8, #0
 800b45a:	f104 0919 	add.w	r9, r4, #25
 800b45e:	e7f4      	b.n	800b44a <_printf_float+0x43e>

0800b460 <_printf_common>:
 800b460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b464:	4616      	mov	r6, r2
 800b466:	4698      	mov	r8, r3
 800b468:	688a      	ldr	r2, [r1, #8]
 800b46a:	690b      	ldr	r3, [r1, #16]
 800b46c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b470:	4293      	cmp	r3, r2
 800b472:	bfb8      	it	lt
 800b474:	4613      	movlt	r3, r2
 800b476:	6033      	str	r3, [r6, #0]
 800b478:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b47c:	4607      	mov	r7, r0
 800b47e:	460c      	mov	r4, r1
 800b480:	b10a      	cbz	r2, 800b486 <_printf_common+0x26>
 800b482:	3301      	adds	r3, #1
 800b484:	6033      	str	r3, [r6, #0]
 800b486:	6823      	ldr	r3, [r4, #0]
 800b488:	0699      	lsls	r1, r3, #26
 800b48a:	bf42      	ittt	mi
 800b48c:	6833      	ldrmi	r3, [r6, #0]
 800b48e:	3302      	addmi	r3, #2
 800b490:	6033      	strmi	r3, [r6, #0]
 800b492:	6825      	ldr	r5, [r4, #0]
 800b494:	f015 0506 	ands.w	r5, r5, #6
 800b498:	d106      	bne.n	800b4a8 <_printf_common+0x48>
 800b49a:	f104 0a19 	add.w	sl, r4, #25
 800b49e:	68e3      	ldr	r3, [r4, #12]
 800b4a0:	6832      	ldr	r2, [r6, #0]
 800b4a2:	1a9b      	subs	r3, r3, r2
 800b4a4:	42ab      	cmp	r3, r5
 800b4a6:	dc26      	bgt.n	800b4f6 <_printf_common+0x96>
 800b4a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4ac:	6822      	ldr	r2, [r4, #0]
 800b4ae:	3b00      	subs	r3, #0
 800b4b0:	bf18      	it	ne
 800b4b2:	2301      	movne	r3, #1
 800b4b4:	0692      	lsls	r2, r2, #26
 800b4b6:	d42b      	bmi.n	800b510 <_printf_common+0xb0>
 800b4b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4bc:	4641      	mov	r1, r8
 800b4be:	4638      	mov	r0, r7
 800b4c0:	47c8      	blx	r9
 800b4c2:	3001      	adds	r0, #1
 800b4c4:	d01e      	beq.n	800b504 <_printf_common+0xa4>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	6922      	ldr	r2, [r4, #16]
 800b4ca:	f003 0306 	and.w	r3, r3, #6
 800b4ce:	2b04      	cmp	r3, #4
 800b4d0:	bf02      	ittt	eq
 800b4d2:	68e5      	ldreq	r5, [r4, #12]
 800b4d4:	6833      	ldreq	r3, [r6, #0]
 800b4d6:	1aed      	subeq	r5, r5, r3
 800b4d8:	68a3      	ldr	r3, [r4, #8]
 800b4da:	bf0c      	ite	eq
 800b4dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4e0:	2500      	movne	r5, #0
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	bfc4      	itt	gt
 800b4e6:	1a9b      	subgt	r3, r3, r2
 800b4e8:	18ed      	addgt	r5, r5, r3
 800b4ea:	2600      	movs	r6, #0
 800b4ec:	341a      	adds	r4, #26
 800b4ee:	42b5      	cmp	r5, r6
 800b4f0:	d11a      	bne.n	800b528 <_printf_common+0xc8>
 800b4f2:	2000      	movs	r0, #0
 800b4f4:	e008      	b.n	800b508 <_printf_common+0xa8>
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	4652      	mov	r2, sl
 800b4fa:	4641      	mov	r1, r8
 800b4fc:	4638      	mov	r0, r7
 800b4fe:	47c8      	blx	r9
 800b500:	3001      	adds	r0, #1
 800b502:	d103      	bne.n	800b50c <_printf_common+0xac>
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b50c:	3501      	adds	r5, #1
 800b50e:	e7c6      	b.n	800b49e <_printf_common+0x3e>
 800b510:	18e1      	adds	r1, r4, r3
 800b512:	1c5a      	adds	r2, r3, #1
 800b514:	2030      	movs	r0, #48	@ 0x30
 800b516:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b51a:	4422      	add	r2, r4
 800b51c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b520:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b524:	3302      	adds	r3, #2
 800b526:	e7c7      	b.n	800b4b8 <_printf_common+0x58>
 800b528:	2301      	movs	r3, #1
 800b52a:	4622      	mov	r2, r4
 800b52c:	4641      	mov	r1, r8
 800b52e:	4638      	mov	r0, r7
 800b530:	47c8      	blx	r9
 800b532:	3001      	adds	r0, #1
 800b534:	d0e6      	beq.n	800b504 <_printf_common+0xa4>
 800b536:	3601      	adds	r6, #1
 800b538:	e7d9      	b.n	800b4ee <_printf_common+0x8e>
	...

0800b53c <_printf_i>:
 800b53c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b540:	7e0f      	ldrb	r7, [r1, #24]
 800b542:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b544:	2f78      	cmp	r7, #120	@ 0x78
 800b546:	4691      	mov	r9, r2
 800b548:	4680      	mov	r8, r0
 800b54a:	460c      	mov	r4, r1
 800b54c:	469a      	mov	sl, r3
 800b54e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b552:	d807      	bhi.n	800b564 <_printf_i+0x28>
 800b554:	2f62      	cmp	r7, #98	@ 0x62
 800b556:	d80a      	bhi.n	800b56e <_printf_i+0x32>
 800b558:	2f00      	cmp	r7, #0
 800b55a:	f000 80d1 	beq.w	800b700 <_printf_i+0x1c4>
 800b55e:	2f58      	cmp	r7, #88	@ 0x58
 800b560:	f000 80b8 	beq.w	800b6d4 <_printf_i+0x198>
 800b564:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b568:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b56c:	e03a      	b.n	800b5e4 <_printf_i+0xa8>
 800b56e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b572:	2b15      	cmp	r3, #21
 800b574:	d8f6      	bhi.n	800b564 <_printf_i+0x28>
 800b576:	a101      	add	r1, pc, #4	@ (adr r1, 800b57c <_printf_i+0x40>)
 800b578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b57c:	0800b5d5 	.word	0x0800b5d5
 800b580:	0800b5e9 	.word	0x0800b5e9
 800b584:	0800b565 	.word	0x0800b565
 800b588:	0800b565 	.word	0x0800b565
 800b58c:	0800b565 	.word	0x0800b565
 800b590:	0800b565 	.word	0x0800b565
 800b594:	0800b5e9 	.word	0x0800b5e9
 800b598:	0800b565 	.word	0x0800b565
 800b59c:	0800b565 	.word	0x0800b565
 800b5a0:	0800b565 	.word	0x0800b565
 800b5a4:	0800b565 	.word	0x0800b565
 800b5a8:	0800b6e7 	.word	0x0800b6e7
 800b5ac:	0800b613 	.word	0x0800b613
 800b5b0:	0800b6a1 	.word	0x0800b6a1
 800b5b4:	0800b565 	.word	0x0800b565
 800b5b8:	0800b565 	.word	0x0800b565
 800b5bc:	0800b709 	.word	0x0800b709
 800b5c0:	0800b565 	.word	0x0800b565
 800b5c4:	0800b613 	.word	0x0800b613
 800b5c8:	0800b565 	.word	0x0800b565
 800b5cc:	0800b565 	.word	0x0800b565
 800b5d0:	0800b6a9 	.word	0x0800b6a9
 800b5d4:	6833      	ldr	r3, [r6, #0]
 800b5d6:	1d1a      	adds	r2, r3, #4
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	6032      	str	r2, [r6, #0]
 800b5dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e09c      	b.n	800b722 <_printf_i+0x1e6>
 800b5e8:	6833      	ldr	r3, [r6, #0]
 800b5ea:	6820      	ldr	r0, [r4, #0]
 800b5ec:	1d19      	adds	r1, r3, #4
 800b5ee:	6031      	str	r1, [r6, #0]
 800b5f0:	0606      	lsls	r6, r0, #24
 800b5f2:	d501      	bpl.n	800b5f8 <_printf_i+0xbc>
 800b5f4:	681d      	ldr	r5, [r3, #0]
 800b5f6:	e003      	b.n	800b600 <_printf_i+0xc4>
 800b5f8:	0645      	lsls	r5, r0, #25
 800b5fa:	d5fb      	bpl.n	800b5f4 <_printf_i+0xb8>
 800b5fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b600:	2d00      	cmp	r5, #0
 800b602:	da03      	bge.n	800b60c <_printf_i+0xd0>
 800b604:	232d      	movs	r3, #45	@ 0x2d
 800b606:	426d      	negs	r5, r5
 800b608:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b60c:	4858      	ldr	r0, [pc, #352]	@ (800b770 <_printf_i+0x234>)
 800b60e:	230a      	movs	r3, #10
 800b610:	e011      	b.n	800b636 <_printf_i+0xfa>
 800b612:	6821      	ldr	r1, [r4, #0]
 800b614:	6833      	ldr	r3, [r6, #0]
 800b616:	0608      	lsls	r0, r1, #24
 800b618:	f853 5b04 	ldr.w	r5, [r3], #4
 800b61c:	d402      	bmi.n	800b624 <_printf_i+0xe8>
 800b61e:	0649      	lsls	r1, r1, #25
 800b620:	bf48      	it	mi
 800b622:	b2ad      	uxthmi	r5, r5
 800b624:	2f6f      	cmp	r7, #111	@ 0x6f
 800b626:	4852      	ldr	r0, [pc, #328]	@ (800b770 <_printf_i+0x234>)
 800b628:	6033      	str	r3, [r6, #0]
 800b62a:	bf14      	ite	ne
 800b62c:	230a      	movne	r3, #10
 800b62e:	2308      	moveq	r3, #8
 800b630:	2100      	movs	r1, #0
 800b632:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b636:	6866      	ldr	r6, [r4, #4]
 800b638:	60a6      	str	r6, [r4, #8]
 800b63a:	2e00      	cmp	r6, #0
 800b63c:	db05      	blt.n	800b64a <_printf_i+0x10e>
 800b63e:	6821      	ldr	r1, [r4, #0]
 800b640:	432e      	orrs	r6, r5
 800b642:	f021 0104 	bic.w	r1, r1, #4
 800b646:	6021      	str	r1, [r4, #0]
 800b648:	d04b      	beq.n	800b6e2 <_printf_i+0x1a6>
 800b64a:	4616      	mov	r6, r2
 800b64c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b650:	fb03 5711 	mls	r7, r3, r1, r5
 800b654:	5dc7      	ldrb	r7, [r0, r7]
 800b656:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b65a:	462f      	mov	r7, r5
 800b65c:	42bb      	cmp	r3, r7
 800b65e:	460d      	mov	r5, r1
 800b660:	d9f4      	bls.n	800b64c <_printf_i+0x110>
 800b662:	2b08      	cmp	r3, #8
 800b664:	d10b      	bne.n	800b67e <_printf_i+0x142>
 800b666:	6823      	ldr	r3, [r4, #0]
 800b668:	07df      	lsls	r7, r3, #31
 800b66a:	d508      	bpl.n	800b67e <_printf_i+0x142>
 800b66c:	6923      	ldr	r3, [r4, #16]
 800b66e:	6861      	ldr	r1, [r4, #4]
 800b670:	4299      	cmp	r1, r3
 800b672:	bfde      	ittt	le
 800b674:	2330      	movle	r3, #48	@ 0x30
 800b676:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b67a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b67e:	1b92      	subs	r2, r2, r6
 800b680:	6122      	str	r2, [r4, #16]
 800b682:	f8cd a000 	str.w	sl, [sp]
 800b686:	464b      	mov	r3, r9
 800b688:	aa03      	add	r2, sp, #12
 800b68a:	4621      	mov	r1, r4
 800b68c:	4640      	mov	r0, r8
 800b68e:	f7ff fee7 	bl	800b460 <_printf_common>
 800b692:	3001      	adds	r0, #1
 800b694:	d14a      	bne.n	800b72c <_printf_i+0x1f0>
 800b696:	f04f 30ff 	mov.w	r0, #4294967295
 800b69a:	b004      	add	sp, #16
 800b69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6a0:	6823      	ldr	r3, [r4, #0]
 800b6a2:	f043 0320 	orr.w	r3, r3, #32
 800b6a6:	6023      	str	r3, [r4, #0]
 800b6a8:	4832      	ldr	r0, [pc, #200]	@ (800b774 <_printf_i+0x238>)
 800b6aa:	2778      	movs	r7, #120	@ 0x78
 800b6ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	6831      	ldr	r1, [r6, #0]
 800b6b4:	061f      	lsls	r7, r3, #24
 800b6b6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6ba:	d402      	bmi.n	800b6c2 <_printf_i+0x186>
 800b6bc:	065f      	lsls	r7, r3, #25
 800b6be:	bf48      	it	mi
 800b6c0:	b2ad      	uxthmi	r5, r5
 800b6c2:	6031      	str	r1, [r6, #0]
 800b6c4:	07d9      	lsls	r1, r3, #31
 800b6c6:	bf44      	itt	mi
 800b6c8:	f043 0320 	orrmi.w	r3, r3, #32
 800b6cc:	6023      	strmi	r3, [r4, #0]
 800b6ce:	b11d      	cbz	r5, 800b6d8 <_printf_i+0x19c>
 800b6d0:	2310      	movs	r3, #16
 800b6d2:	e7ad      	b.n	800b630 <_printf_i+0xf4>
 800b6d4:	4826      	ldr	r0, [pc, #152]	@ (800b770 <_printf_i+0x234>)
 800b6d6:	e7e9      	b.n	800b6ac <_printf_i+0x170>
 800b6d8:	6823      	ldr	r3, [r4, #0]
 800b6da:	f023 0320 	bic.w	r3, r3, #32
 800b6de:	6023      	str	r3, [r4, #0]
 800b6e0:	e7f6      	b.n	800b6d0 <_printf_i+0x194>
 800b6e2:	4616      	mov	r6, r2
 800b6e4:	e7bd      	b.n	800b662 <_printf_i+0x126>
 800b6e6:	6833      	ldr	r3, [r6, #0]
 800b6e8:	6825      	ldr	r5, [r4, #0]
 800b6ea:	6961      	ldr	r1, [r4, #20]
 800b6ec:	1d18      	adds	r0, r3, #4
 800b6ee:	6030      	str	r0, [r6, #0]
 800b6f0:	062e      	lsls	r6, r5, #24
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	d501      	bpl.n	800b6fa <_printf_i+0x1be>
 800b6f6:	6019      	str	r1, [r3, #0]
 800b6f8:	e002      	b.n	800b700 <_printf_i+0x1c4>
 800b6fa:	0668      	lsls	r0, r5, #25
 800b6fc:	d5fb      	bpl.n	800b6f6 <_printf_i+0x1ba>
 800b6fe:	8019      	strh	r1, [r3, #0]
 800b700:	2300      	movs	r3, #0
 800b702:	6123      	str	r3, [r4, #16]
 800b704:	4616      	mov	r6, r2
 800b706:	e7bc      	b.n	800b682 <_printf_i+0x146>
 800b708:	6833      	ldr	r3, [r6, #0]
 800b70a:	1d1a      	adds	r2, r3, #4
 800b70c:	6032      	str	r2, [r6, #0]
 800b70e:	681e      	ldr	r6, [r3, #0]
 800b710:	6862      	ldr	r2, [r4, #4]
 800b712:	2100      	movs	r1, #0
 800b714:	4630      	mov	r0, r6
 800b716:	f7f4 fd6b 	bl	80001f0 <memchr>
 800b71a:	b108      	cbz	r0, 800b720 <_printf_i+0x1e4>
 800b71c:	1b80      	subs	r0, r0, r6
 800b71e:	6060      	str	r0, [r4, #4]
 800b720:	6863      	ldr	r3, [r4, #4]
 800b722:	6123      	str	r3, [r4, #16]
 800b724:	2300      	movs	r3, #0
 800b726:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b72a:	e7aa      	b.n	800b682 <_printf_i+0x146>
 800b72c:	6923      	ldr	r3, [r4, #16]
 800b72e:	4632      	mov	r2, r6
 800b730:	4649      	mov	r1, r9
 800b732:	4640      	mov	r0, r8
 800b734:	47d0      	blx	sl
 800b736:	3001      	adds	r0, #1
 800b738:	d0ad      	beq.n	800b696 <_printf_i+0x15a>
 800b73a:	6823      	ldr	r3, [r4, #0]
 800b73c:	079b      	lsls	r3, r3, #30
 800b73e:	d413      	bmi.n	800b768 <_printf_i+0x22c>
 800b740:	68e0      	ldr	r0, [r4, #12]
 800b742:	9b03      	ldr	r3, [sp, #12]
 800b744:	4298      	cmp	r0, r3
 800b746:	bfb8      	it	lt
 800b748:	4618      	movlt	r0, r3
 800b74a:	e7a6      	b.n	800b69a <_printf_i+0x15e>
 800b74c:	2301      	movs	r3, #1
 800b74e:	4632      	mov	r2, r6
 800b750:	4649      	mov	r1, r9
 800b752:	4640      	mov	r0, r8
 800b754:	47d0      	blx	sl
 800b756:	3001      	adds	r0, #1
 800b758:	d09d      	beq.n	800b696 <_printf_i+0x15a>
 800b75a:	3501      	adds	r5, #1
 800b75c:	68e3      	ldr	r3, [r4, #12]
 800b75e:	9903      	ldr	r1, [sp, #12]
 800b760:	1a5b      	subs	r3, r3, r1
 800b762:	42ab      	cmp	r3, r5
 800b764:	dcf2      	bgt.n	800b74c <_printf_i+0x210>
 800b766:	e7eb      	b.n	800b740 <_printf_i+0x204>
 800b768:	2500      	movs	r5, #0
 800b76a:	f104 0619 	add.w	r6, r4, #25
 800b76e:	e7f5      	b.n	800b75c <_printf_i+0x220>
 800b770:	0800e79a 	.word	0x0800e79a
 800b774:	0800e7ab 	.word	0x0800e7ab

0800b778 <std>:
 800b778:	2300      	movs	r3, #0
 800b77a:	b510      	push	{r4, lr}
 800b77c:	4604      	mov	r4, r0
 800b77e:	e9c0 3300 	strd	r3, r3, [r0]
 800b782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b786:	6083      	str	r3, [r0, #8]
 800b788:	8181      	strh	r1, [r0, #12]
 800b78a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b78c:	81c2      	strh	r2, [r0, #14]
 800b78e:	6183      	str	r3, [r0, #24]
 800b790:	4619      	mov	r1, r3
 800b792:	2208      	movs	r2, #8
 800b794:	305c      	adds	r0, #92	@ 0x5c
 800b796:	f000 f9f9 	bl	800bb8c <memset>
 800b79a:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d0 <std+0x58>)
 800b79c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b79e:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d4 <std+0x5c>)
 800b7a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b7a2:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d8 <std+0x60>)
 800b7a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b7a6:	4b0d      	ldr	r3, [pc, #52]	@ (800b7dc <std+0x64>)
 800b7a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800b7aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b7e0 <std+0x68>)
 800b7ac:	6224      	str	r4, [r4, #32]
 800b7ae:	429c      	cmp	r4, r3
 800b7b0:	d006      	beq.n	800b7c0 <std+0x48>
 800b7b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b7b6:	4294      	cmp	r4, r2
 800b7b8:	d002      	beq.n	800b7c0 <std+0x48>
 800b7ba:	33d0      	adds	r3, #208	@ 0xd0
 800b7bc:	429c      	cmp	r4, r3
 800b7be:	d105      	bne.n	800b7cc <std+0x54>
 800b7c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b7c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b7c8:	f000 ba6c 	b.w	800bca4 <__retarget_lock_init_recursive>
 800b7cc:	bd10      	pop	{r4, pc}
 800b7ce:	bf00      	nop
 800b7d0:	0800b9dd 	.word	0x0800b9dd
 800b7d4:	0800b9ff 	.word	0x0800b9ff
 800b7d8:	0800ba37 	.word	0x0800ba37
 800b7dc:	0800ba5b 	.word	0x0800ba5b
 800b7e0:	2002631c 	.word	0x2002631c

0800b7e4 <stdio_exit_handler>:
 800b7e4:	4a02      	ldr	r2, [pc, #8]	@ (800b7f0 <stdio_exit_handler+0xc>)
 800b7e6:	4903      	ldr	r1, [pc, #12]	@ (800b7f4 <stdio_exit_handler+0x10>)
 800b7e8:	4803      	ldr	r0, [pc, #12]	@ (800b7f8 <stdio_exit_handler+0x14>)
 800b7ea:	f000 b869 	b.w	800b8c0 <_fwalk_sglue>
 800b7ee:	bf00      	nop
 800b7f0:	20000014 	.word	0x20000014
 800b7f4:	0800d48d 	.word	0x0800d48d
 800b7f8:	20000024 	.word	0x20000024

0800b7fc <cleanup_stdio>:
 800b7fc:	6841      	ldr	r1, [r0, #4]
 800b7fe:	4b0c      	ldr	r3, [pc, #48]	@ (800b830 <cleanup_stdio+0x34>)
 800b800:	4299      	cmp	r1, r3
 800b802:	b510      	push	{r4, lr}
 800b804:	4604      	mov	r4, r0
 800b806:	d001      	beq.n	800b80c <cleanup_stdio+0x10>
 800b808:	f001 fe40 	bl	800d48c <_fflush_r>
 800b80c:	68a1      	ldr	r1, [r4, #8]
 800b80e:	4b09      	ldr	r3, [pc, #36]	@ (800b834 <cleanup_stdio+0x38>)
 800b810:	4299      	cmp	r1, r3
 800b812:	d002      	beq.n	800b81a <cleanup_stdio+0x1e>
 800b814:	4620      	mov	r0, r4
 800b816:	f001 fe39 	bl	800d48c <_fflush_r>
 800b81a:	68e1      	ldr	r1, [r4, #12]
 800b81c:	4b06      	ldr	r3, [pc, #24]	@ (800b838 <cleanup_stdio+0x3c>)
 800b81e:	4299      	cmp	r1, r3
 800b820:	d004      	beq.n	800b82c <cleanup_stdio+0x30>
 800b822:	4620      	mov	r0, r4
 800b824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b828:	f001 be30 	b.w	800d48c <_fflush_r>
 800b82c:	bd10      	pop	{r4, pc}
 800b82e:	bf00      	nop
 800b830:	2002631c 	.word	0x2002631c
 800b834:	20026384 	.word	0x20026384
 800b838:	200263ec 	.word	0x200263ec

0800b83c <global_stdio_init.part.0>:
 800b83c:	b510      	push	{r4, lr}
 800b83e:	4b0b      	ldr	r3, [pc, #44]	@ (800b86c <global_stdio_init.part.0+0x30>)
 800b840:	4c0b      	ldr	r4, [pc, #44]	@ (800b870 <global_stdio_init.part.0+0x34>)
 800b842:	4a0c      	ldr	r2, [pc, #48]	@ (800b874 <global_stdio_init.part.0+0x38>)
 800b844:	601a      	str	r2, [r3, #0]
 800b846:	4620      	mov	r0, r4
 800b848:	2200      	movs	r2, #0
 800b84a:	2104      	movs	r1, #4
 800b84c:	f7ff ff94 	bl	800b778 <std>
 800b850:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b854:	2201      	movs	r2, #1
 800b856:	2109      	movs	r1, #9
 800b858:	f7ff ff8e 	bl	800b778 <std>
 800b85c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b860:	2202      	movs	r2, #2
 800b862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b866:	2112      	movs	r1, #18
 800b868:	f7ff bf86 	b.w	800b778 <std>
 800b86c:	20026454 	.word	0x20026454
 800b870:	2002631c 	.word	0x2002631c
 800b874:	0800b7e5 	.word	0x0800b7e5

0800b878 <__sfp_lock_acquire>:
 800b878:	4801      	ldr	r0, [pc, #4]	@ (800b880 <__sfp_lock_acquire+0x8>)
 800b87a:	f000 ba14 	b.w	800bca6 <__retarget_lock_acquire_recursive>
 800b87e:	bf00      	nop
 800b880:	2002645d 	.word	0x2002645d

0800b884 <__sfp_lock_release>:
 800b884:	4801      	ldr	r0, [pc, #4]	@ (800b88c <__sfp_lock_release+0x8>)
 800b886:	f000 ba0f 	b.w	800bca8 <__retarget_lock_release_recursive>
 800b88a:	bf00      	nop
 800b88c:	2002645d 	.word	0x2002645d

0800b890 <__sinit>:
 800b890:	b510      	push	{r4, lr}
 800b892:	4604      	mov	r4, r0
 800b894:	f7ff fff0 	bl	800b878 <__sfp_lock_acquire>
 800b898:	6a23      	ldr	r3, [r4, #32]
 800b89a:	b11b      	cbz	r3, 800b8a4 <__sinit+0x14>
 800b89c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8a0:	f7ff bff0 	b.w	800b884 <__sfp_lock_release>
 800b8a4:	4b04      	ldr	r3, [pc, #16]	@ (800b8b8 <__sinit+0x28>)
 800b8a6:	6223      	str	r3, [r4, #32]
 800b8a8:	4b04      	ldr	r3, [pc, #16]	@ (800b8bc <__sinit+0x2c>)
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d1f5      	bne.n	800b89c <__sinit+0xc>
 800b8b0:	f7ff ffc4 	bl	800b83c <global_stdio_init.part.0>
 800b8b4:	e7f2      	b.n	800b89c <__sinit+0xc>
 800b8b6:	bf00      	nop
 800b8b8:	0800b7fd 	.word	0x0800b7fd
 800b8bc:	20026454 	.word	0x20026454

0800b8c0 <_fwalk_sglue>:
 800b8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c4:	4607      	mov	r7, r0
 800b8c6:	4688      	mov	r8, r1
 800b8c8:	4614      	mov	r4, r2
 800b8ca:	2600      	movs	r6, #0
 800b8cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b8d0:	f1b9 0901 	subs.w	r9, r9, #1
 800b8d4:	d505      	bpl.n	800b8e2 <_fwalk_sglue+0x22>
 800b8d6:	6824      	ldr	r4, [r4, #0]
 800b8d8:	2c00      	cmp	r4, #0
 800b8da:	d1f7      	bne.n	800b8cc <_fwalk_sglue+0xc>
 800b8dc:	4630      	mov	r0, r6
 800b8de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8e2:	89ab      	ldrh	r3, [r5, #12]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d907      	bls.n	800b8f8 <_fwalk_sglue+0x38>
 800b8e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	d003      	beq.n	800b8f8 <_fwalk_sglue+0x38>
 800b8f0:	4629      	mov	r1, r5
 800b8f2:	4638      	mov	r0, r7
 800b8f4:	47c0      	blx	r8
 800b8f6:	4306      	orrs	r6, r0
 800b8f8:	3568      	adds	r5, #104	@ 0x68
 800b8fa:	e7e9      	b.n	800b8d0 <_fwalk_sglue+0x10>

0800b8fc <iprintf>:
 800b8fc:	b40f      	push	{r0, r1, r2, r3}
 800b8fe:	b507      	push	{r0, r1, r2, lr}
 800b900:	4906      	ldr	r1, [pc, #24]	@ (800b91c <iprintf+0x20>)
 800b902:	ab04      	add	r3, sp, #16
 800b904:	6808      	ldr	r0, [r1, #0]
 800b906:	f853 2b04 	ldr.w	r2, [r3], #4
 800b90a:	6881      	ldr	r1, [r0, #8]
 800b90c:	9301      	str	r3, [sp, #4]
 800b90e:	f001 fc21 	bl	800d154 <_vfiprintf_r>
 800b912:	b003      	add	sp, #12
 800b914:	f85d eb04 	ldr.w	lr, [sp], #4
 800b918:	b004      	add	sp, #16
 800b91a:	4770      	bx	lr
 800b91c:	20000020 	.word	0x20000020

0800b920 <_puts_r>:
 800b920:	6a03      	ldr	r3, [r0, #32]
 800b922:	b570      	push	{r4, r5, r6, lr}
 800b924:	6884      	ldr	r4, [r0, #8]
 800b926:	4605      	mov	r5, r0
 800b928:	460e      	mov	r6, r1
 800b92a:	b90b      	cbnz	r3, 800b930 <_puts_r+0x10>
 800b92c:	f7ff ffb0 	bl	800b890 <__sinit>
 800b930:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b932:	07db      	lsls	r3, r3, #31
 800b934:	d405      	bmi.n	800b942 <_puts_r+0x22>
 800b936:	89a3      	ldrh	r3, [r4, #12]
 800b938:	0598      	lsls	r0, r3, #22
 800b93a:	d402      	bmi.n	800b942 <_puts_r+0x22>
 800b93c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b93e:	f000 f9b2 	bl	800bca6 <__retarget_lock_acquire_recursive>
 800b942:	89a3      	ldrh	r3, [r4, #12]
 800b944:	0719      	lsls	r1, r3, #28
 800b946:	d502      	bpl.n	800b94e <_puts_r+0x2e>
 800b948:	6923      	ldr	r3, [r4, #16]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d135      	bne.n	800b9ba <_puts_r+0x9a>
 800b94e:	4621      	mov	r1, r4
 800b950:	4628      	mov	r0, r5
 800b952:	f000 f8c5 	bl	800bae0 <__swsetup_r>
 800b956:	b380      	cbz	r0, 800b9ba <_puts_r+0x9a>
 800b958:	f04f 35ff 	mov.w	r5, #4294967295
 800b95c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b95e:	07da      	lsls	r2, r3, #31
 800b960:	d405      	bmi.n	800b96e <_puts_r+0x4e>
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	059b      	lsls	r3, r3, #22
 800b966:	d402      	bmi.n	800b96e <_puts_r+0x4e>
 800b968:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b96a:	f000 f99d 	bl	800bca8 <__retarget_lock_release_recursive>
 800b96e:	4628      	mov	r0, r5
 800b970:	bd70      	pop	{r4, r5, r6, pc}
 800b972:	2b00      	cmp	r3, #0
 800b974:	da04      	bge.n	800b980 <_puts_r+0x60>
 800b976:	69a2      	ldr	r2, [r4, #24]
 800b978:	429a      	cmp	r2, r3
 800b97a:	dc17      	bgt.n	800b9ac <_puts_r+0x8c>
 800b97c:	290a      	cmp	r1, #10
 800b97e:	d015      	beq.n	800b9ac <_puts_r+0x8c>
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	6022      	str	r2, [r4, #0]
 800b986:	7019      	strb	r1, [r3, #0]
 800b988:	68a3      	ldr	r3, [r4, #8]
 800b98a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b98e:	3b01      	subs	r3, #1
 800b990:	60a3      	str	r3, [r4, #8]
 800b992:	2900      	cmp	r1, #0
 800b994:	d1ed      	bne.n	800b972 <_puts_r+0x52>
 800b996:	2b00      	cmp	r3, #0
 800b998:	da11      	bge.n	800b9be <_puts_r+0x9e>
 800b99a:	4622      	mov	r2, r4
 800b99c:	210a      	movs	r1, #10
 800b99e:	4628      	mov	r0, r5
 800b9a0:	f000 f85f 	bl	800ba62 <__swbuf_r>
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d0d7      	beq.n	800b958 <_puts_r+0x38>
 800b9a8:	250a      	movs	r5, #10
 800b9aa:	e7d7      	b.n	800b95c <_puts_r+0x3c>
 800b9ac:	4622      	mov	r2, r4
 800b9ae:	4628      	mov	r0, r5
 800b9b0:	f000 f857 	bl	800ba62 <__swbuf_r>
 800b9b4:	3001      	adds	r0, #1
 800b9b6:	d1e7      	bne.n	800b988 <_puts_r+0x68>
 800b9b8:	e7ce      	b.n	800b958 <_puts_r+0x38>
 800b9ba:	3e01      	subs	r6, #1
 800b9bc:	e7e4      	b.n	800b988 <_puts_r+0x68>
 800b9be:	6823      	ldr	r3, [r4, #0]
 800b9c0:	1c5a      	adds	r2, r3, #1
 800b9c2:	6022      	str	r2, [r4, #0]
 800b9c4:	220a      	movs	r2, #10
 800b9c6:	701a      	strb	r2, [r3, #0]
 800b9c8:	e7ee      	b.n	800b9a8 <_puts_r+0x88>
	...

0800b9cc <puts>:
 800b9cc:	4b02      	ldr	r3, [pc, #8]	@ (800b9d8 <puts+0xc>)
 800b9ce:	4601      	mov	r1, r0
 800b9d0:	6818      	ldr	r0, [r3, #0]
 800b9d2:	f7ff bfa5 	b.w	800b920 <_puts_r>
 800b9d6:	bf00      	nop
 800b9d8:	20000020 	.word	0x20000020

0800b9dc <__sread>:
 800b9dc:	b510      	push	{r4, lr}
 800b9de:	460c      	mov	r4, r1
 800b9e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9e4:	f000 f900 	bl	800bbe8 <_read_r>
 800b9e8:	2800      	cmp	r0, #0
 800b9ea:	bfab      	itete	ge
 800b9ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b9ee:	89a3      	ldrhlt	r3, [r4, #12]
 800b9f0:	181b      	addge	r3, r3, r0
 800b9f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b9f6:	bfac      	ite	ge
 800b9f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b9fa:	81a3      	strhlt	r3, [r4, #12]
 800b9fc:	bd10      	pop	{r4, pc}

0800b9fe <__swrite>:
 800b9fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba02:	461f      	mov	r7, r3
 800ba04:	898b      	ldrh	r3, [r1, #12]
 800ba06:	05db      	lsls	r3, r3, #23
 800ba08:	4605      	mov	r5, r0
 800ba0a:	460c      	mov	r4, r1
 800ba0c:	4616      	mov	r6, r2
 800ba0e:	d505      	bpl.n	800ba1c <__swrite+0x1e>
 800ba10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba14:	2302      	movs	r3, #2
 800ba16:	2200      	movs	r2, #0
 800ba18:	f000 f8d4 	bl	800bbc4 <_lseek_r>
 800ba1c:	89a3      	ldrh	r3, [r4, #12]
 800ba1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ba22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ba26:	81a3      	strh	r3, [r4, #12]
 800ba28:	4632      	mov	r2, r6
 800ba2a:	463b      	mov	r3, r7
 800ba2c:	4628      	mov	r0, r5
 800ba2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba32:	f000 b8fb 	b.w	800bc2c <_write_r>

0800ba36 <__sseek>:
 800ba36:	b510      	push	{r4, lr}
 800ba38:	460c      	mov	r4, r1
 800ba3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3e:	f000 f8c1 	bl	800bbc4 <_lseek_r>
 800ba42:	1c43      	adds	r3, r0, #1
 800ba44:	89a3      	ldrh	r3, [r4, #12]
 800ba46:	bf15      	itete	ne
 800ba48:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ba4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ba4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ba52:	81a3      	strheq	r3, [r4, #12]
 800ba54:	bf18      	it	ne
 800ba56:	81a3      	strhne	r3, [r4, #12]
 800ba58:	bd10      	pop	{r4, pc}

0800ba5a <__sclose>:
 800ba5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba5e:	f000 b8a1 	b.w	800bba4 <_close_r>

0800ba62 <__swbuf_r>:
 800ba62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba64:	460e      	mov	r6, r1
 800ba66:	4614      	mov	r4, r2
 800ba68:	4605      	mov	r5, r0
 800ba6a:	b118      	cbz	r0, 800ba74 <__swbuf_r+0x12>
 800ba6c:	6a03      	ldr	r3, [r0, #32]
 800ba6e:	b90b      	cbnz	r3, 800ba74 <__swbuf_r+0x12>
 800ba70:	f7ff ff0e 	bl	800b890 <__sinit>
 800ba74:	69a3      	ldr	r3, [r4, #24]
 800ba76:	60a3      	str	r3, [r4, #8]
 800ba78:	89a3      	ldrh	r3, [r4, #12]
 800ba7a:	071a      	lsls	r2, r3, #28
 800ba7c:	d501      	bpl.n	800ba82 <__swbuf_r+0x20>
 800ba7e:	6923      	ldr	r3, [r4, #16]
 800ba80:	b943      	cbnz	r3, 800ba94 <__swbuf_r+0x32>
 800ba82:	4621      	mov	r1, r4
 800ba84:	4628      	mov	r0, r5
 800ba86:	f000 f82b 	bl	800bae0 <__swsetup_r>
 800ba8a:	b118      	cbz	r0, 800ba94 <__swbuf_r+0x32>
 800ba8c:	f04f 37ff 	mov.w	r7, #4294967295
 800ba90:	4638      	mov	r0, r7
 800ba92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba94:	6823      	ldr	r3, [r4, #0]
 800ba96:	6922      	ldr	r2, [r4, #16]
 800ba98:	1a98      	subs	r0, r3, r2
 800ba9a:	6963      	ldr	r3, [r4, #20]
 800ba9c:	b2f6      	uxtb	r6, r6
 800ba9e:	4283      	cmp	r3, r0
 800baa0:	4637      	mov	r7, r6
 800baa2:	dc05      	bgt.n	800bab0 <__swbuf_r+0x4e>
 800baa4:	4621      	mov	r1, r4
 800baa6:	4628      	mov	r0, r5
 800baa8:	f001 fcf0 	bl	800d48c <_fflush_r>
 800baac:	2800      	cmp	r0, #0
 800baae:	d1ed      	bne.n	800ba8c <__swbuf_r+0x2a>
 800bab0:	68a3      	ldr	r3, [r4, #8]
 800bab2:	3b01      	subs	r3, #1
 800bab4:	60a3      	str	r3, [r4, #8]
 800bab6:	6823      	ldr	r3, [r4, #0]
 800bab8:	1c5a      	adds	r2, r3, #1
 800baba:	6022      	str	r2, [r4, #0]
 800babc:	701e      	strb	r6, [r3, #0]
 800babe:	6962      	ldr	r2, [r4, #20]
 800bac0:	1c43      	adds	r3, r0, #1
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d004      	beq.n	800bad0 <__swbuf_r+0x6e>
 800bac6:	89a3      	ldrh	r3, [r4, #12]
 800bac8:	07db      	lsls	r3, r3, #31
 800baca:	d5e1      	bpl.n	800ba90 <__swbuf_r+0x2e>
 800bacc:	2e0a      	cmp	r6, #10
 800bace:	d1df      	bne.n	800ba90 <__swbuf_r+0x2e>
 800bad0:	4621      	mov	r1, r4
 800bad2:	4628      	mov	r0, r5
 800bad4:	f001 fcda 	bl	800d48c <_fflush_r>
 800bad8:	2800      	cmp	r0, #0
 800bada:	d0d9      	beq.n	800ba90 <__swbuf_r+0x2e>
 800badc:	e7d6      	b.n	800ba8c <__swbuf_r+0x2a>
	...

0800bae0 <__swsetup_r>:
 800bae0:	b538      	push	{r3, r4, r5, lr}
 800bae2:	4b29      	ldr	r3, [pc, #164]	@ (800bb88 <__swsetup_r+0xa8>)
 800bae4:	4605      	mov	r5, r0
 800bae6:	6818      	ldr	r0, [r3, #0]
 800bae8:	460c      	mov	r4, r1
 800baea:	b118      	cbz	r0, 800baf4 <__swsetup_r+0x14>
 800baec:	6a03      	ldr	r3, [r0, #32]
 800baee:	b90b      	cbnz	r3, 800baf4 <__swsetup_r+0x14>
 800baf0:	f7ff fece 	bl	800b890 <__sinit>
 800baf4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800baf8:	0719      	lsls	r1, r3, #28
 800bafa:	d422      	bmi.n	800bb42 <__swsetup_r+0x62>
 800bafc:	06da      	lsls	r2, r3, #27
 800bafe:	d407      	bmi.n	800bb10 <__swsetup_r+0x30>
 800bb00:	2209      	movs	r2, #9
 800bb02:	602a      	str	r2, [r5, #0]
 800bb04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb08:	81a3      	strh	r3, [r4, #12]
 800bb0a:	f04f 30ff 	mov.w	r0, #4294967295
 800bb0e:	e033      	b.n	800bb78 <__swsetup_r+0x98>
 800bb10:	0758      	lsls	r0, r3, #29
 800bb12:	d512      	bpl.n	800bb3a <__swsetup_r+0x5a>
 800bb14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bb16:	b141      	cbz	r1, 800bb2a <__swsetup_r+0x4a>
 800bb18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb1c:	4299      	cmp	r1, r3
 800bb1e:	d002      	beq.n	800bb26 <__swsetup_r+0x46>
 800bb20:	4628      	mov	r0, r5
 800bb22:	f000 ff29 	bl	800c978 <_free_r>
 800bb26:	2300      	movs	r3, #0
 800bb28:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb2a:	89a3      	ldrh	r3, [r4, #12]
 800bb2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800bb30:	81a3      	strh	r3, [r4, #12]
 800bb32:	2300      	movs	r3, #0
 800bb34:	6063      	str	r3, [r4, #4]
 800bb36:	6923      	ldr	r3, [r4, #16]
 800bb38:	6023      	str	r3, [r4, #0]
 800bb3a:	89a3      	ldrh	r3, [r4, #12]
 800bb3c:	f043 0308 	orr.w	r3, r3, #8
 800bb40:	81a3      	strh	r3, [r4, #12]
 800bb42:	6923      	ldr	r3, [r4, #16]
 800bb44:	b94b      	cbnz	r3, 800bb5a <__swsetup_r+0x7a>
 800bb46:	89a3      	ldrh	r3, [r4, #12]
 800bb48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800bb4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb50:	d003      	beq.n	800bb5a <__swsetup_r+0x7a>
 800bb52:	4621      	mov	r1, r4
 800bb54:	4628      	mov	r0, r5
 800bb56:	f001 fce7 	bl	800d528 <__smakebuf_r>
 800bb5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb5e:	f013 0201 	ands.w	r2, r3, #1
 800bb62:	d00a      	beq.n	800bb7a <__swsetup_r+0x9a>
 800bb64:	2200      	movs	r2, #0
 800bb66:	60a2      	str	r2, [r4, #8]
 800bb68:	6962      	ldr	r2, [r4, #20]
 800bb6a:	4252      	negs	r2, r2
 800bb6c:	61a2      	str	r2, [r4, #24]
 800bb6e:	6922      	ldr	r2, [r4, #16]
 800bb70:	b942      	cbnz	r2, 800bb84 <__swsetup_r+0xa4>
 800bb72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800bb76:	d1c5      	bne.n	800bb04 <__swsetup_r+0x24>
 800bb78:	bd38      	pop	{r3, r4, r5, pc}
 800bb7a:	0799      	lsls	r1, r3, #30
 800bb7c:	bf58      	it	pl
 800bb7e:	6962      	ldrpl	r2, [r4, #20]
 800bb80:	60a2      	str	r2, [r4, #8]
 800bb82:	e7f4      	b.n	800bb6e <__swsetup_r+0x8e>
 800bb84:	2000      	movs	r0, #0
 800bb86:	e7f7      	b.n	800bb78 <__swsetup_r+0x98>
 800bb88:	20000020 	.word	0x20000020

0800bb8c <memset>:
 800bb8c:	4402      	add	r2, r0
 800bb8e:	4603      	mov	r3, r0
 800bb90:	4293      	cmp	r3, r2
 800bb92:	d100      	bne.n	800bb96 <memset+0xa>
 800bb94:	4770      	bx	lr
 800bb96:	f803 1b01 	strb.w	r1, [r3], #1
 800bb9a:	e7f9      	b.n	800bb90 <memset+0x4>

0800bb9c <_localeconv_r>:
 800bb9c:	4800      	ldr	r0, [pc, #0]	@ (800bba0 <_localeconv_r+0x4>)
 800bb9e:	4770      	bx	lr
 800bba0:	20000160 	.word	0x20000160

0800bba4 <_close_r>:
 800bba4:	b538      	push	{r3, r4, r5, lr}
 800bba6:	4d06      	ldr	r5, [pc, #24]	@ (800bbc0 <_close_r+0x1c>)
 800bba8:	2300      	movs	r3, #0
 800bbaa:	4604      	mov	r4, r0
 800bbac:	4608      	mov	r0, r1
 800bbae:	602b      	str	r3, [r5, #0]
 800bbb0:	f7f6 ffec 	bl	8002b8c <_close>
 800bbb4:	1c43      	adds	r3, r0, #1
 800bbb6:	d102      	bne.n	800bbbe <_close_r+0x1a>
 800bbb8:	682b      	ldr	r3, [r5, #0]
 800bbba:	b103      	cbz	r3, 800bbbe <_close_r+0x1a>
 800bbbc:	6023      	str	r3, [r4, #0]
 800bbbe:	bd38      	pop	{r3, r4, r5, pc}
 800bbc0:	20026458 	.word	0x20026458

0800bbc4 <_lseek_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4d07      	ldr	r5, [pc, #28]	@ (800bbe4 <_lseek_r+0x20>)
 800bbc8:	4604      	mov	r4, r0
 800bbca:	4608      	mov	r0, r1
 800bbcc:	4611      	mov	r1, r2
 800bbce:	2200      	movs	r2, #0
 800bbd0:	602a      	str	r2, [r5, #0]
 800bbd2:	461a      	mov	r2, r3
 800bbd4:	f7f7 f801 	bl	8002bda <_lseek>
 800bbd8:	1c43      	adds	r3, r0, #1
 800bbda:	d102      	bne.n	800bbe2 <_lseek_r+0x1e>
 800bbdc:	682b      	ldr	r3, [r5, #0]
 800bbde:	b103      	cbz	r3, 800bbe2 <_lseek_r+0x1e>
 800bbe0:	6023      	str	r3, [r4, #0]
 800bbe2:	bd38      	pop	{r3, r4, r5, pc}
 800bbe4:	20026458 	.word	0x20026458

0800bbe8 <_read_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d07      	ldr	r5, [pc, #28]	@ (800bc08 <_read_r+0x20>)
 800bbec:	4604      	mov	r4, r0
 800bbee:	4608      	mov	r0, r1
 800bbf0:	4611      	mov	r1, r2
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	602a      	str	r2, [r5, #0]
 800bbf6:	461a      	mov	r2, r3
 800bbf8:	f7f6 ffab 	bl	8002b52 <_read>
 800bbfc:	1c43      	adds	r3, r0, #1
 800bbfe:	d102      	bne.n	800bc06 <_read_r+0x1e>
 800bc00:	682b      	ldr	r3, [r5, #0]
 800bc02:	b103      	cbz	r3, 800bc06 <_read_r+0x1e>
 800bc04:	6023      	str	r3, [r4, #0]
 800bc06:	bd38      	pop	{r3, r4, r5, pc}
 800bc08:	20026458 	.word	0x20026458

0800bc0c <_sbrk_r>:
 800bc0c:	b538      	push	{r3, r4, r5, lr}
 800bc0e:	4d06      	ldr	r5, [pc, #24]	@ (800bc28 <_sbrk_r+0x1c>)
 800bc10:	2300      	movs	r3, #0
 800bc12:	4604      	mov	r4, r0
 800bc14:	4608      	mov	r0, r1
 800bc16:	602b      	str	r3, [r5, #0]
 800bc18:	f7f6 ffec 	bl	8002bf4 <_sbrk>
 800bc1c:	1c43      	adds	r3, r0, #1
 800bc1e:	d102      	bne.n	800bc26 <_sbrk_r+0x1a>
 800bc20:	682b      	ldr	r3, [r5, #0]
 800bc22:	b103      	cbz	r3, 800bc26 <_sbrk_r+0x1a>
 800bc24:	6023      	str	r3, [r4, #0]
 800bc26:	bd38      	pop	{r3, r4, r5, pc}
 800bc28:	20026458 	.word	0x20026458

0800bc2c <_write_r>:
 800bc2c:	b538      	push	{r3, r4, r5, lr}
 800bc2e:	4d07      	ldr	r5, [pc, #28]	@ (800bc4c <_write_r+0x20>)
 800bc30:	4604      	mov	r4, r0
 800bc32:	4608      	mov	r0, r1
 800bc34:	4611      	mov	r1, r2
 800bc36:	2200      	movs	r2, #0
 800bc38:	602a      	str	r2, [r5, #0]
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f7f5 fc20 	bl	8001480 <_write>
 800bc40:	1c43      	adds	r3, r0, #1
 800bc42:	d102      	bne.n	800bc4a <_write_r+0x1e>
 800bc44:	682b      	ldr	r3, [r5, #0]
 800bc46:	b103      	cbz	r3, 800bc4a <_write_r+0x1e>
 800bc48:	6023      	str	r3, [r4, #0]
 800bc4a:	bd38      	pop	{r3, r4, r5, pc}
 800bc4c:	20026458 	.word	0x20026458

0800bc50 <__errno>:
 800bc50:	4b01      	ldr	r3, [pc, #4]	@ (800bc58 <__errno+0x8>)
 800bc52:	6818      	ldr	r0, [r3, #0]
 800bc54:	4770      	bx	lr
 800bc56:	bf00      	nop
 800bc58:	20000020 	.word	0x20000020

0800bc5c <__libc_init_array>:
 800bc5c:	b570      	push	{r4, r5, r6, lr}
 800bc5e:	4d0d      	ldr	r5, [pc, #52]	@ (800bc94 <__libc_init_array+0x38>)
 800bc60:	4c0d      	ldr	r4, [pc, #52]	@ (800bc98 <__libc_init_array+0x3c>)
 800bc62:	1b64      	subs	r4, r4, r5
 800bc64:	10a4      	asrs	r4, r4, #2
 800bc66:	2600      	movs	r6, #0
 800bc68:	42a6      	cmp	r6, r4
 800bc6a:	d109      	bne.n	800bc80 <__libc_init_array+0x24>
 800bc6c:	4d0b      	ldr	r5, [pc, #44]	@ (800bc9c <__libc_init_array+0x40>)
 800bc6e:	4c0c      	ldr	r4, [pc, #48]	@ (800bca0 <__libc_init_array+0x44>)
 800bc70:	f002 fcc8 	bl	800e604 <_init>
 800bc74:	1b64      	subs	r4, r4, r5
 800bc76:	10a4      	asrs	r4, r4, #2
 800bc78:	2600      	movs	r6, #0
 800bc7a:	42a6      	cmp	r6, r4
 800bc7c:	d105      	bne.n	800bc8a <__libc_init_array+0x2e>
 800bc7e:	bd70      	pop	{r4, r5, r6, pc}
 800bc80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc84:	4798      	blx	r3
 800bc86:	3601      	adds	r6, #1
 800bc88:	e7ee      	b.n	800bc68 <__libc_init_array+0xc>
 800bc8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc8e:	4798      	blx	r3
 800bc90:	3601      	adds	r6, #1
 800bc92:	e7f2      	b.n	800bc7a <__libc_init_array+0x1e>
 800bc94:	0800eb48 	.word	0x0800eb48
 800bc98:	0800eb48 	.word	0x0800eb48
 800bc9c:	0800eb48 	.word	0x0800eb48
 800bca0:	0800eb4c 	.word	0x0800eb4c

0800bca4 <__retarget_lock_init_recursive>:
 800bca4:	4770      	bx	lr

0800bca6 <__retarget_lock_acquire_recursive>:
 800bca6:	4770      	bx	lr

0800bca8 <__retarget_lock_release_recursive>:
 800bca8:	4770      	bx	lr

0800bcaa <memcpy>:
 800bcaa:	440a      	add	r2, r1
 800bcac:	4291      	cmp	r1, r2
 800bcae:	f100 33ff 	add.w	r3, r0, #4294967295
 800bcb2:	d100      	bne.n	800bcb6 <memcpy+0xc>
 800bcb4:	4770      	bx	lr
 800bcb6:	b510      	push	{r4, lr}
 800bcb8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcc0:	4291      	cmp	r1, r2
 800bcc2:	d1f9      	bne.n	800bcb8 <memcpy+0xe>
 800bcc4:	bd10      	pop	{r4, pc}

0800bcc6 <quorem>:
 800bcc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcca:	6903      	ldr	r3, [r0, #16]
 800bccc:	690c      	ldr	r4, [r1, #16]
 800bcce:	42a3      	cmp	r3, r4
 800bcd0:	4607      	mov	r7, r0
 800bcd2:	db7e      	blt.n	800bdd2 <quorem+0x10c>
 800bcd4:	3c01      	subs	r4, #1
 800bcd6:	f101 0814 	add.w	r8, r1, #20
 800bcda:	00a3      	lsls	r3, r4, #2
 800bcdc:	f100 0514 	add.w	r5, r0, #20
 800bce0:	9300      	str	r3, [sp, #0]
 800bce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bcec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	429a      	cmp	r2, r3
 800bcf4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcf8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcfc:	d32e      	bcc.n	800bd5c <quorem+0x96>
 800bcfe:	f04f 0a00 	mov.w	sl, #0
 800bd02:	46c4      	mov	ip, r8
 800bd04:	46ae      	mov	lr, r5
 800bd06:	46d3      	mov	fp, sl
 800bd08:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd0c:	b298      	uxth	r0, r3
 800bd0e:	fb06 a000 	mla	r0, r6, r0, sl
 800bd12:	0c02      	lsrs	r2, r0, #16
 800bd14:	0c1b      	lsrs	r3, r3, #16
 800bd16:	fb06 2303 	mla	r3, r6, r3, r2
 800bd1a:	f8de 2000 	ldr.w	r2, [lr]
 800bd1e:	b280      	uxth	r0, r0
 800bd20:	b292      	uxth	r2, r2
 800bd22:	1a12      	subs	r2, r2, r0
 800bd24:	445a      	add	r2, fp
 800bd26:	f8de 0000 	ldr.w	r0, [lr]
 800bd2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd34:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd38:	b292      	uxth	r2, r2
 800bd3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd3e:	45e1      	cmp	r9, ip
 800bd40:	f84e 2b04 	str.w	r2, [lr], #4
 800bd44:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd48:	d2de      	bcs.n	800bd08 <quorem+0x42>
 800bd4a:	9b00      	ldr	r3, [sp, #0]
 800bd4c:	58eb      	ldr	r3, [r5, r3]
 800bd4e:	b92b      	cbnz	r3, 800bd5c <quorem+0x96>
 800bd50:	9b01      	ldr	r3, [sp, #4]
 800bd52:	3b04      	subs	r3, #4
 800bd54:	429d      	cmp	r5, r3
 800bd56:	461a      	mov	r2, r3
 800bd58:	d32f      	bcc.n	800bdba <quorem+0xf4>
 800bd5a:	613c      	str	r4, [r7, #16]
 800bd5c:	4638      	mov	r0, r7
 800bd5e:	f001 f8c7 	bl	800cef0 <__mcmp>
 800bd62:	2800      	cmp	r0, #0
 800bd64:	db25      	blt.n	800bdb2 <quorem+0xec>
 800bd66:	4629      	mov	r1, r5
 800bd68:	2000      	movs	r0, #0
 800bd6a:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd6e:	f8d1 c000 	ldr.w	ip, [r1]
 800bd72:	fa1f fe82 	uxth.w	lr, r2
 800bd76:	fa1f f38c 	uxth.w	r3, ip
 800bd7a:	eba3 030e 	sub.w	r3, r3, lr
 800bd7e:	4403      	add	r3, r0
 800bd80:	0c12      	lsrs	r2, r2, #16
 800bd82:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd86:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd8a:	b29b      	uxth	r3, r3
 800bd8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd90:	45c1      	cmp	r9, r8
 800bd92:	f841 3b04 	str.w	r3, [r1], #4
 800bd96:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd9a:	d2e6      	bcs.n	800bd6a <quorem+0xa4>
 800bd9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bda0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bda4:	b922      	cbnz	r2, 800bdb0 <quorem+0xea>
 800bda6:	3b04      	subs	r3, #4
 800bda8:	429d      	cmp	r5, r3
 800bdaa:	461a      	mov	r2, r3
 800bdac:	d30b      	bcc.n	800bdc6 <quorem+0x100>
 800bdae:	613c      	str	r4, [r7, #16]
 800bdb0:	3601      	adds	r6, #1
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	b003      	add	sp, #12
 800bdb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdba:	6812      	ldr	r2, [r2, #0]
 800bdbc:	3b04      	subs	r3, #4
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	d1cb      	bne.n	800bd5a <quorem+0x94>
 800bdc2:	3c01      	subs	r4, #1
 800bdc4:	e7c6      	b.n	800bd54 <quorem+0x8e>
 800bdc6:	6812      	ldr	r2, [r2, #0]
 800bdc8:	3b04      	subs	r3, #4
 800bdca:	2a00      	cmp	r2, #0
 800bdcc:	d1ef      	bne.n	800bdae <quorem+0xe8>
 800bdce:	3c01      	subs	r4, #1
 800bdd0:	e7ea      	b.n	800bda8 <quorem+0xe2>
 800bdd2:	2000      	movs	r0, #0
 800bdd4:	e7ee      	b.n	800bdb4 <quorem+0xee>
	...

0800bdd8 <_dtoa_r>:
 800bdd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bddc:	69c7      	ldr	r7, [r0, #28]
 800bdde:	b097      	sub	sp, #92	@ 0x5c
 800bde0:	ed8d 0b04 	vstr	d0, [sp, #16]
 800bde4:	ec55 4b10 	vmov	r4, r5, d0
 800bde8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800bdea:	9107      	str	r1, [sp, #28]
 800bdec:	4681      	mov	r9, r0
 800bdee:	920c      	str	r2, [sp, #48]	@ 0x30
 800bdf0:	9311      	str	r3, [sp, #68]	@ 0x44
 800bdf2:	b97f      	cbnz	r7, 800be14 <_dtoa_r+0x3c>
 800bdf4:	2010      	movs	r0, #16
 800bdf6:	f7fe ffb3 	bl	800ad60 <malloc>
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	f8c9 001c 	str.w	r0, [r9, #28]
 800be00:	b920      	cbnz	r0, 800be0c <_dtoa_r+0x34>
 800be02:	4ba9      	ldr	r3, [pc, #676]	@ (800c0a8 <_dtoa_r+0x2d0>)
 800be04:	21ef      	movs	r1, #239	@ 0xef
 800be06:	48a9      	ldr	r0, [pc, #676]	@ (800c0ac <_dtoa_r+0x2d4>)
 800be08:	f001 fbec 	bl	800d5e4 <__assert_func>
 800be0c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be10:	6007      	str	r7, [r0, #0]
 800be12:	60c7      	str	r7, [r0, #12]
 800be14:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be18:	6819      	ldr	r1, [r3, #0]
 800be1a:	b159      	cbz	r1, 800be34 <_dtoa_r+0x5c>
 800be1c:	685a      	ldr	r2, [r3, #4]
 800be1e:	604a      	str	r2, [r1, #4]
 800be20:	2301      	movs	r3, #1
 800be22:	4093      	lsls	r3, r2
 800be24:	608b      	str	r3, [r1, #8]
 800be26:	4648      	mov	r0, r9
 800be28:	f000 fe30 	bl	800ca8c <_Bfree>
 800be2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800be30:	2200      	movs	r2, #0
 800be32:	601a      	str	r2, [r3, #0]
 800be34:	1e2b      	subs	r3, r5, #0
 800be36:	bfb9      	ittee	lt
 800be38:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be3c:	9305      	strlt	r3, [sp, #20]
 800be3e:	2300      	movge	r3, #0
 800be40:	6033      	strge	r3, [r6, #0]
 800be42:	9f05      	ldr	r7, [sp, #20]
 800be44:	4b9a      	ldr	r3, [pc, #616]	@ (800c0b0 <_dtoa_r+0x2d8>)
 800be46:	bfbc      	itt	lt
 800be48:	2201      	movlt	r2, #1
 800be4a:	6032      	strlt	r2, [r6, #0]
 800be4c:	43bb      	bics	r3, r7
 800be4e:	d112      	bne.n	800be76 <_dtoa_r+0x9e>
 800be50:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800be52:	f242 730f 	movw	r3, #9999	@ 0x270f
 800be56:	6013      	str	r3, [r2, #0]
 800be58:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be5c:	4323      	orrs	r3, r4
 800be5e:	f000 855a 	beq.w	800c916 <_dtoa_r+0xb3e>
 800be62:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be64:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800c0c4 <_dtoa_r+0x2ec>
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f000 855c 	beq.w	800c926 <_dtoa_r+0xb4e>
 800be6e:	f10a 0303 	add.w	r3, sl, #3
 800be72:	f000 bd56 	b.w	800c922 <_dtoa_r+0xb4a>
 800be76:	ed9d 7b04 	vldr	d7, [sp, #16]
 800be7a:	2200      	movs	r2, #0
 800be7c:	ec51 0b17 	vmov	r0, r1, d7
 800be80:	2300      	movs	r3, #0
 800be82:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800be86:	f7f4 fe2f 	bl	8000ae8 <__aeabi_dcmpeq>
 800be8a:	4680      	mov	r8, r0
 800be8c:	b158      	cbz	r0, 800bea6 <_dtoa_r+0xce>
 800be8e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800be90:	2301      	movs	r3, #1
 800be92:	6013      	str	r3, [r2, #0]
 800be94:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800be96:	b113      	cbz	r3, 800be9e <_dtoa_r+0xc6>
 800be98:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800be9a:	4b86      	ldr	r3, [pc, #536]	@ (800c0b4 <_dtoa_r+0x2dc>)
 800be9c:	6013      	str	r3, [r2, #0]
 800be9e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800c0c8 <_dtoa_r+0x2f0>
 800bea2:	f000 bd40 	b.w	800c926 <_dtoa_r+0xb4e>
 800bea6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800beaa:	aa14      	add	r2, sp, #80	@ 0x50
 800beac:	a915      	add	r1, sp, #84	@ 0x54
 800beae:	4648      	mov	r0, r9
 800beb0:	f001 f8ce 	bl	800d050 <__d2b>
 800beb4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800beb8:	9002      	str	r0, [sp, #8]
 800beba:	2e00      	cmp	r6, #0
 800bebc:	d078      	beq.n	800bfb0 <_dtoa_r+0x1d8>
 800bebe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bec0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800bec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bec8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800becc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bed0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bed4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bed8:	4619      	mov	r1, r3
 800beda:	2200      	movs	r2, #0
 800bedc:	4b76      	ldr	r3, [pc, #472]	@ (800c0b8 <_dtoa_r+0x2e0>)
 800bede:	f7f4 f9e3 	bl	80002a8 <__aeabi_dsub>
 800bee2:	a36b      	add	r3, pc, #428	@ (adr r3, 800c090 <_dtoa_r+0x2b8>)
 800bee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee8:	f7f4 fb96 	bl	8000618 <__aeabi_dmul>
 800beec:	a36a      	add	r3, pc, #424	@ (adr r3, 800c098 <_dtoa_r+0x2c0>)
 800beee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef2:	f7f4 f9db 	bl	80002ac <__adddf3>
 800bef6:	4604      	mov	r4, r0
 800bef8:	4630      	mov	r0, r6
 800befa:	460d      	mov	r5, r1
 800befc:	f7f4 fb22 	bl	8000544 <__aeabi_i2d>
 800bf00:	a367      	add	r3, pc, #412	@ (adr r3, 800c0a0 <_dtoa_r+0x2c8>)
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f7f4 fb87 	bl	8000618 <__aeabi_dmul>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4620      	mov	r0, r4
 800bf10:	4629      	mov	r1, r5
 800bf12:	f7f4 f9cb 	bl	80002ac <__adddf3>
 800bf16:	4604      	mov	r4, r0
 800bf18:	460d      	mov	r5, r1
 800bf1a:	f7f4 fe2d 	bl	8000b78 <__aeabi_d2iz>
 800bf1e:	2200      	movs	r2, #0
 800bf20:	4607      	mov	r7, r0
 800bf22:	2300      	movs	r3, #0
 800bf24:	4620      	mov	r0, r4
 800bf26:	4629      	mov	r1, r5
 800bf28:	f7f4 fde8 	bl	8000afc <__aeabi_dcmplt>
 800bf2c:	b140      	cbz	r0, 800bf40 <_dtoa_r+0x168>
 800bf2e:	4638      	mov	r0, r7
 800bf30:	f7f4 fb08 	bl	8000544 <__aeabi_i2d>
 800bf34:	4622      	mov	r2, r4
 800bf36:	462b      	mov	r3, r5
 800bf38:	f7f4 fdd6 	bl	8000ae8 <__aeabi_dcmpeq>
 800bf3c:	b900      	cbnz	r0, 800bf40 <_dtoa_r+0x168>
 800bf3e:	3f01      	subs	r7, #1
 800bf40:	2f16      	cmp	r7, #22
 800bf42:	d852      	bhi.n	800bfea <_dtoa_r+0x212>
 800bf44:	4b5d      	ldr	r3, [pc, #372]	@ (800c0bc <_dtoa_r+0x2e4>)
 800bf46:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800bf52:	f7f4 fdd3 	bl	8000afc <__aeabi_dcmplt>
 800bf56:	2800      	cmp	r0, #0
 800bf58:	d049      	beq.n	800bfee <_dtoa_r+0x216>
 800bf5a:	3f01      	subs	r7, #1
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	9310      	str	r3, [sp, #64]	@ 0x40
 800bf60:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800bf62:	1b9b      	subs	r3, r3, r6
 800bf64:	1e5a      	subs	r2, r3, #1
 800bf66:	bf45      	ittet	mi
 800bf68:	f1c3 0301 	rsbmi	r3, r3, #1
 800bf6c:	9300      	strmi	r3, [sp, #0]
 800bf6e:	2300      	movpl	r3, #0
 800bf70:	2300      	movmi	r3, #0
 800bf72:	9206      	str	r2, [sp, #24]
 800bf74:	bf54      	ite	pl
 800bf76:	9300      	strpl	r3, [sp, #0]
 800bf78:	9306      	strmi	r3, [sp, #24]
 800bf7a:	2f00      	cmp	r7, #0
 800bf7c:	db39      	blt.n	800bff2 <_dtoa_r+0x21a>
 800bf7e:	9b06      	ldr	r3, [sp, #24]
 800bf80:	970d      	str	r7, [sp, #52]	@ 0x34
 800bf82:	443b      	add	r3, r7
 800bf84:	9306      	str	r3, [sp, #24]
 800bf86:	2300      	movs	r3, #0
 800bf88:	9308      	str	r3, [sp, #32]
 800bf8a:	9b07      	ldr	r3, [sp, #28]
 800bf8c:	2b09      	cmp	r3, #9
 800bf8e:	d863      	bhi.n	800c058 <_dtoa_r+0x280>
 800bf90:	2b05      	cmp	r3, #5
 800bf92:	bfc4      	itt	gt
 800bf94:	3b04      	subgt	r3, #4
 800bf96:	9307      	strgt	r3, [sp, #28]
 800bf98:	9b07      	ldr	r3, [sp, #28]
 800bf9a:	f1a3 0302 	sub.w	r3, r3, #2
 800bf9e:	bfcc      	ite	gt
 800bfa0:	2400      	movgt	r4, #0
 800bfa2:	2401      	movle	r4, #1
 800bfa4:	2b03      	cmp	r3, #3
 800bfa6:	d863      	bhi.n	800c070 <_dtoa_r+0x298>
 800bfa8:	e8df f003 	tbb	[pc, r3]
 800bfac:	2b375452 	.word	0x2b375452
 800bfb0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800bfb4:	441e      	add	r6, r3
 800bfb6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bfba:	2b20      	cmp	r3, #32
 800bfbc:	bfc1      	itttt	gt
 800bfbe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bfc2:	409f      	lslgt	r7, r3
 800bfc4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bfc8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bfcc:	bfd6      	itet	le
 800bfce:	f1c3 0320 	rsble	r3, r3, #32
 800bfd2:	ea47 0003 	orrgt.w	r0, r7, r3
 800bfd6:	fa04 f003 	lslle.w	r0, r4, r3
 800bfda:	f7f4 faa3 	bl	8000524 <__aeabi_ui2d>
 800bfde:	2201      	movs	r2, #1
 800bfe0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bfe4:	3e01      	subs	r6, #1
 800bfe6:	9212      	str	r2, [sp, #72]	@ 0x48
 800bfe8:	e776      	b.n	800bed8 <_dtoa_r+0x100>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e7b7      	b.n	800bf5e <_dtoa_r+0x186>
 800bfee:	9010      	str	r0, [sp, #64]	@ 0x40
 800bff0:	e7b6      	b.n	800bf60 <_dtoa_r+0x188>
 800bff2:	9b00      	ldr	r3, [sp, #0]
 800bff4:	1bdb      	subs	r3, r3, r7
 800bff6:	9300      	str	r3, [sp, #0]
 800bff8:	427b      	negs	r3, r7
 800bffa:	9308      	str	r3, [sp, #32]
 800bffc:	2300      	movs	r3, #0
 800bffe:	930d      	str	r3, [sp, #52]	@ 0x34
 800c000:	e7c3      	b.n	800bf8a <_dtoa_r+0x1b2>
 800c002:	2301      	movs	r3, #1
 800c004:	9309      	str	r3, [sp, #36]	@ 0x24
 800c006:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c008:	eb07 0b03 	add.w	fp, r7, r3
 800c00c:	f10b 0301 	add.w	r3, fp, #1
 800c010:	2b01      	cmp	r3, #1
 800c012:	9303      	str	r3, [sp, #12]
 800c014:	bfb8      	it	lt
 800c016:	2301      	movlt	r3, #1
 800c018:	e006      	b.n	800c028 <_dtoa_r+0x250>
 800c01a:	2301      	movs	r3, #1
 800c01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800c01e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c020:	2b00      	cmp	r3, #0
 800c022:	dd28      	ble.n	800c076 <_dtoa_r+0x29e>
 800c024:	469b      	mov	fp, r3
 800c026:	9303      	str	r3, [sp, #12]
 800c028:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800c02c:	2100      	movs	r1, #0
 800c02e:	2204      	movs	r2, #4
 800c030:	f102 0514 	add.w	r5, r2, #20
 800c034:	429d      	cmp	r5, r3
 800c036:	d926      	bls.n	800c086 <_dtoa_r+0x2ae>
 800c038:	6041      	str	r1, [r0, #4]
 800c03a:	4648      	mov	r0, r9
 800c03c:	f000 fce6 	bl	800ca0c <_Balloc>
 800c040:	4682      	mov	sl, r0
 800c042:	2800      	cmp	r0, #0
 800c044:	d142      	bne.n	800c0cc <_dtoa_r+0x2f4>
 800c046:	4b1e      	ldr	r3, [pc, #120]	@ (800c0c0 <_dtoa_r+0x2e8>)
 800c048:	4602      	mov	r2, r0
 800c04a:	f240 11af 	movw	r1, #431	@ 0x1af
 800c04e:	e6da      	b.n	800be06 <_dtoa_r+0x2e>
 800c050:	2300      	movs	r3, #0
 800c052:	e7e3      	b.n	800c01c <_dtoa_r+0x244>
 800c054:	2300      	movs	r3, #0
 800c056:	e7d5      	b.n	800c004 <_dtoa_r+0x22c>
 800c058:	2401      	movs	r4, #1
 800c05a:	2300      	movs	r3, #0
 800c05c:	9307      	str	r3, [sp, #28]
 800c05e:	9409      	str	r4, [sp, #36]	@ 0x24
 800c060:	f04f 3bff 	mov.w	fp, #4294967295
 800c064:	2200      	movs	r2, #0
 800c066:	f8cd b00c 	str.w	fp, [sp, #12]
 800c06a:	2312      	movs	r3, #18
 800c06c:	920c      	str	r2, [sp, #48]	@ 0x30
 800c06e:	e7db      	b.n	800c028 <_dtoa_r+0x250>
 800c070:	2301      	movs	r3, #1
 800c072:	9309      	str	r3, [sp, #36]	@ 0x24
 800c074:	e7f4      	b.n	800c060 <_dtoa_r+0x288>
 800c076:	f04f 0b01 	mov.w	fp, #1
 800c07a:	f8cd b00c 	str.w	fp, [sp, #12]
 800c07e:	465b      	mov	r3, fp
 800c080:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800c084:	e7d0      	b.n	800c028 <_dtoa_r+0x250>
 800c086:	3101      	adds	r1, #1
 800c088:	0052      	lsls	r2, r2, #1
 800c08a:	e7d1      	b.n	800c030 <_dtoa_r+0x258>
 800c08c:	f3af 8000 	nop.w
 800c090:	636f4361 	.word	0x636f4361
 800c094:	3fd287a7 	.word	0x3fd287a7
 800c098:	8b60c8b3 	.word	0x8b60c8b3
 800c09c:	3fc68a28 	.word	0x3fc68a28
 800c0a0:	509f79fb 	.word	0x509f79fb
 800c0a4:	3fd34413 	.word	0x3fd34413
 800c0a8:	0800e7c9 	.word	0x0800e7c9
 800c0ac:	0800e7e0 	.word	0x0800e7e0
 800c0b0:	7ff00000 	.word	0x7ff00000
 800c0b4:	0800e799 	.word	0x0800e799
 800c0b8:	3ff80000 	.word	0x3ff80000
 800c0bc:	0800e930 	.word	0x0800e930
 800c0c0:	0800e838 	.word	0x0800e838
 800c0c4:	0800e7c5 	.word	0x0800e7c5
 800c0c8:	0800e798 	.word	0x0800e798
 800c0cc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800c0d0:	6018      	str	r0, [r3, #0]
 800c0d2:	9b03      	ldr	r3, [sp, #12]
 800c0d4:	2b0e      	cmp	r3, #14
 800c0d6:	f200 80a1 	bhi.w	800c21c <_dtoa_r+0x444>
 800c0da:	2c00      	cmp	r4, #0
 800c0dc:	f000 809e 	beq.w	800c21c <_dtoa_r+0x444>
 800c0e0:	2f00      	cmp	r7, #0
 800c0e2:	dd33      	ble.n	800c14c <_dtoa_r+0x374>
 800c0e4:	4b9c      	ldr	r3, [pc, #624]	@ (800c358 <_dtoa_r+0x580>)
 800c0e6:	f007 020f 	and.w	r2, r7, #15
 800c0ea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0ee:	ed93 7b00 	vldr	d7, [r3]
 800c0f2:	05f8      	lsls	r0, r7, #23
 800c0f4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800c0f8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c0fc:	d516      	bpl.n	800c12c <_dtoa_r+0x354>
 800c0fe:	4b97      	ldr	r3, [pc, #604]	@ (800c35c <_dtoa_r+0x584>)
 800c100:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c104:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c108:	f7f4 fbb0 	bl	800086c <__aeabi_ddiv>
 800c10c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c110:	f004 040f 	and.w	r4, r4, #15
 800c114:	2603      	movs	r6, #3
 800c116:	4d91      	ldr	r5, [pc, #580]	@ (800c35c <_dtoa_r+0x584>)
 800c118:	b954      	cbnz	r4, 800c130 <_dtoa_r+0x358>
 800c11a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c11e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c122:	f7f4 fba3 	bl	800086c <__aeabi_ddiv>
 800c126:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c12a:	e028      	b.n	800c17e <_dtoa_r+0x3a6>
 800c12c:	2602      	movs	r6, #2
 800c12e:	e7f2      	b.n	800c116 <_dtoa_r+0x33e>
 800c130:	07e1      	lsls	r1, r4, #31
 800c132:	d508      	bpl.n	800c146 <_dtoa_r+0x36e>
 800c134:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c138:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c13c:	f7f4 fa6c 	bl	8000618 <__aeabi_dmul>
 800c140:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c144:	3601      	adds	r6, #1
 800c146:	1064      	asrs	r4, r4, #1
 800c148:	3508      	adds	r5, #8
 800c14a:	e7e5      	b.n	800c118 <_dtoa_r+0x340>
 800c14c:	f000 80af 	beq.w	800c2ae <_dtoa_r+0x4d6>
 800c150:	427c      	negs	r4, r7
 800c152:	4b81      	ldr	r3, [pc, #516]	@ (800c358 <_dtoa_r+0x580>)
 800c154:	4d81      	ldr	r5, [pc, #516]	@ (800c35c <_dtoa_r+0x584>)
 800c156:	f004 020f 	and.w	r2, r4, #15
 800c15a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c162:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800c166:	f7f4 fa57 	bl	8000618 <__aeabi_dmul>
 800c16a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c16e:	1124      	asrs	r4, r4, #4
 800c170:	2300      	movs	r3, #0
 800c172:	2602      	movs	r6, #2
 800c174:	2c00      	cmp	r4, #0
 800c176:	f040 808f 	bne.w	800c298 <_dtoa_r+0x4c0>
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d1d3      	bne.n	800c126 <_dtoa_r+0x34e>
 800c17e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c180:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c184:	2b00      	cmp	r3, #0
 800c186:	f000 8094 	beq.w	800c2b2 <_dtoa_r+0x4da>
 800c18a:	4b75      	ldr	r3, [pc, #468]	@ (800c360 <_dtoa_r+0x588>)
 800c18c:	2200      	movs	r2, #0
 800c18e:	4620      	mov	r0, r4
 800c190:	4629      	mov	r1, r5
 800c192:	f7f4 fcb3 	bl	8000afc <__aeabi_dcmplt>
 800c196:	2800      	cmp	r0, #0
 800c198:	f000 808b 	beq.w	800c2b2 <_dtoa_r+0x4da>
 800c19c:	9b03      	ldr	r3, [sp, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	f000 8087 	beq.w	800c2b2 <_dtoa_r+0x4da>
 800c1a4:	f1bb 0f00 	cmp.w	fp, #0
 800c1a8:	dd34      	ble.n	800c214 <_dtoa_r+0x43c>
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	4b6d      	ldr	r3, [pc, #436]	@ (800c364 <_dtoa_r+0x58c>)
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	4629      	mov	r1, r5
 800c1b2:	f7f4 fa31 	bl	8000618 <__aeabi_dmul>
 800c1b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1ba:	f107 38ff 	add.w	r8, r7, #4294967295
 800c1be:	3601      	adds	r6, #1
 800c1c0:	465c      	mov	r4, fp
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	f7f4 f9be 	bl	8000544 <__aeabi_i2d>
 800c1c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1cc:	f7f4 fa24 	bl	8000618 <__aeabi_dmul>
 800c1d0:	4b65      	ldr	r3, [pc, #404]	@ (800c368 <_dtoa_r+0x590>)
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f7f4 f86a 	bl	80002ac <__adddf3>
 800c1d8:	4605      	mov	r5, r0
 800c1da:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c1de:	2c00      	cmp	r4, #0
 800c1e0:	d16a      	bne.n	800c2b8 <_dtoa_r+0x4e0>
 800c1e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e6:	4b61      	ldr	r3, [pc, #388]	@ (800c36c <_dtoa_r+0x594>)
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f7f4 f85d 	bl	80002a8 <__aeabi_dsub>
 800c1ee:	4602      	mov	r2, r0
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1f6:	462a      	mov	r2, r5
 800c1f8:	4633      	mov	r3, r6
 800c1fa:	f7f4 fc9d 	bl	8000b38 <__aeabi_dcmpgt>
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f040 8298 	bne.w	800c734 <_dtoa_r+0x95c>
 800c204:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c208:	462a      	mov	r2, r5
 800c20a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c20e:	f7f4 fc75 	bl	8000afc <__aeabi_dcmplt>
 800c212:	bb38      	cbnz	r0, 800c264 <_dtoa_r+0x48c>
 800c214:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800c218:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800c21c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c21e:	2b00      	cmp	r3, #0
 800c220:	f2c0 8157 	blt.w	800c4d2 <_dtoa_r+0x6fa>
 800c224:	2f0e      	cmp	r7, #14
 800c226:	f300 8154 	bgt.w	800c4d2 <_dtoa_r+0x6fa>
 800c22a:	4b4b      	ldr	r3, [pc, #300]	@ (800c358 <_dtoa_r+0x580>)
 800c22c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c230:	ed93 7b00 	vldr	d7, [r3]
 800c234:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c236:	2b00      	cmp	r3, #0
 800c238:	ed8d 7b00 	vstr	d7, [sp]
 800c23c:	f280 80e5 	bge.w	800c40a <_dtoa_r+0x632>
 800c240:	9b03      	ldr	r3, [sp, #12]
 800c242:	2b00      	cmp	r3, #0
 800c244:	f300 80e1 	bgt.w	800c40a <_dtoa_r+0x632>
 800c248:	d10c      	bne.n	800c264 <_dtoa_r+0x48c>
 800c24a:	4b48      	ldr	r3, [pc, #288]	@ (800c36c <_dtoa_r+0x594>)
 800c24c:	2200      	movs	r2, #0
 800c24e:	ec51 0b17 	vmov	r0, r1, d7
 800c252:	f7f4 f9e1 	bl	8000618 <__aeabi_dmul>
 800c256:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c25a:	f7f4 fc63 	bl	8000b24 <__aeabi_dcmpge>
 800c25e:	2800      	cmp	r0, #0
 800c260:	f000 8266 	beq.w	800c730 <_dtoa_r+0x958>
 800c264:	2400      	movs	r4, #0
 800c266:	4625      	mov	r5, r4
 800c268:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c26a:	4656      	mov	r6, sl
 800c26c:	ea6f 0803 	mvn.w	r8, r3
 800c270:	2700      	movs	r7, #0
 800c272:	4621      	mov	r1, r4
 800c274:	4648      	mov	r0, r9
 800c276:	f000 fc09 	bl	800ca8c <_Bfree>
 800c27a:	2d00      	cmp	r5, #0
 800c27c:	f000 80bd 	beq.w	800c3fa <_dtoa_r+0x622>
 800c280:	b12f      	cbz	r7, 800c28e <_dtoa_r+0x4b6>
 800c282:	42af      	cmp	r7, r5
 800c284:	d003      	beq.n	800c28e <_dtoa_r+0x4b6>
 800c286:	4639      	mov	r1, r7
 800c288:	4648      	mov	r0, r9
 800c28a:	f000 fbff 	bl	800ca8c <_Bfree>
 800c28e:	4629      	mov	r1, r5
 800c290:	4648      	mov	r0, r9
 800c292:	f000 fbfb 	bl	800ca8c <_Bfree>
 800c296:	e0b0      	b.n	800c3fa <_dtoa_r+0x622>
 800c298:	07e2      	lsls	r2, r4, #31
 800c29a:	d505      	bpl.n	800c2a8 <_dtoa_r+0x4d0>
 800c29c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2a0:	f7f4 f9ba 	bl	8000618 <__aeabi_dmul>
 800c2a4:	3601      	adds	r6, #1
 800c2a6:	2301      	movs	r3, #1
 800c2a8:	1064      	asrs	r4, r4, #1
 800c2aa:	3508      	adds	r5, #8
 800c2ac:	e762      	b.n	800c174 <_dtoa_r+0x39c>
 800c2ae:	2602      	movs	r6, #2
 800c2b0:	e765      	b.n	800c17e <_dtoa_r+0x3a6>
 800c2b2:	9c03      	ldr	r4, [sp, #12]
 800c2b4:	46b8      	mov	r8, r7
 800c2b6:	e784      	b.n	800c1c2 <_dtoa_r+0x3ea>
 800c2b8:	4b27      	ldr	r3, [pc, #156]	@ (800c358 <_dtoa_r+0x580>)
 800c2ba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c2bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2c0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2c4:	4454      	add	r4, sl
 800c2c6:	2900      	cmp	r1, #0
 800c2c8:	d054      	beq.n	800c374 <_dtoa_r+0x59c>
 800c2ca:	4929      	ldr	r1, [pc, #164]	@ (800c370 <_dtoa_r+0x598>)
 800c2cc:	2000      	movs	r0, #0
 800c2ce:	f7f4 facd 	bl	800086c <__aeabi_ddiv>
 800c2d2:	4633      	mov	r3, r6
 800c2d4:	462a      	mov	r2, r5
 800c2d6:	f7f3 ffe7 	bl	80002a8 <__aeabi_dsub>
 800c2da:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c2de:	4656      	mov	r6, sl
 800c2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2e4:	f7f4 fc48 	bl	8000b78 <__aeabi_d2iz>
 800c2e8:	4605      	mov	r5, r0
 800c2ea:	f7f4 f92b 	bl	8000544 <__aeabi_i2d>
 800c2ee:	4602      	mov	r2, r0
 800c2f0:	460b      	mov	r3, r1
 800c2f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c2f6:	f7f3 ffd7 	bl	80002a8 <__aeabi_dsub>
 800c2fa:	3530      	adds	r5, #48	@ 0x30
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	460b      	mov	r3, r1
 800c300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c304:	f806 5b01 	strb.w	r5, [r6], #1
 800c308:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c30c:	f7f4 fbf6 	bl	8000afc <__aeabi_dcmplt>
 800c310:	2800      	cmp	r0, #0
 800c312:	d172      	bne.n	800c3fa <_dtoa_r+0x622>
 800c314:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c318:	4911      	ldr	r1, [pc, #68]	@ (800c360 <_dtoa_r+0x588>)
 800c31a:	2000      	movs	r0, #0
 800c31c:	f7f3 ffc4 	bl	80002a8 <__aeabi_dsub>
 800c320:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c324:	f7f4 fbea 	bl	8000afc <__aeabi_dcmplt>
 800c328:	2800      	cmp	r0, #0
 800c32a:	f040 80b4 	bne.w	800c496 <_dtoa_r+0x6be>
 800c32e:	42a6      	cmp	r6, r4
 800c330:	f43f af70 	beq.w	800c214 <_dtoa_r+0x43c>
 800c334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c338:	4b0a      	ldr	r3, [pc, #40]	@ (800c364 <_dtoa_r+0x58c>)
 800c33a:	2200      	movs	r2, #0
 800c33c:	f7f4 f96c 	bl	8000618 <__aeabi_dmul>
 800c340:	4b08      	ldr	r3, [pc, #32]	@ (800c364 <_dtoa_r+0x58c>)
 800c342:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c346:	2200      	movs	r2, #0
 800c348:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c34c:	f7f4 f964 	bl	8000618 <__aeabi_dmul>
 800c350:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c354:	e7c4      	b.n	800c2e0 <_dtoa_r+0x508>
 800c356:	bf00      	nop
 800c358:	0800e930 	.word	0x0800e930
 800c35c:	0800e908 	.word	0x0800e908
 800c360:	3ff00000 	.word	0x3ff00000
 800c364:	40240000 	.word	0x40240000
 800c368:	401c0000 	.word	0x401c0000
 800c36c:	40140000 	.word	0x40140000
 800c370:	3fe00000 	.word	0x3fe00000
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	f7f4 f94e 	bl	8000618 <__aeabi_dmul>
 800c37c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800c380:	9413      	str	r4, [sp, #76]	@ 0x4c
 800c382:	4656      	mov	r6, sl
 800c384:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c388:	f7f4 fbf6 	bl	8000b78 <__aeabi_d2iz>
 800c38c:	4605      	mov	r5, r0
 800c38e:	f7f4 f8d9 	bl	8000544 <__aeabi_i2d>
 800c392:	4602      	mov	r2, r0
 800c394:	460b      	mov	r3, r1
 800c396:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c39a:	f7f3 ff85 	bl	80002a8 <__aeabi_dsub>
 800c39e:	3530      	adds	r5, #48	@ 0x30
 800c3a0:	f806 5b01 	strb.w	r5, [r6], #1
 800c3a4:	4602      	mov	r2, r0
 800c3a6:	460b      	mov	r3, r1
 800c3a8:	42a6      	cmp	r6, r4
 800c3aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c3ae:	f04f 0200 	mov.w	r2, #0
 800c3b2:	d124      	bne.n	800c3fe <_dtoa_r+0x626>
 800c3b4:	4baf      	ldr	r3, [pc, #700]	@ (800c674 <_dtoa_r+0x89c>)
 800c3b6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800c3ba:	f7f3 ff77 	bl	80002ac <__adddf3>
 800c3be:	4602      	mov	r2, r0
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3c6:	f7f4 fbb7 	bl	8000b38 <__aeabi_dcmpgt>
 800c3ca:	2800      	cmp	r0, #0
 800c3cc:	d163      	bne.n	800c496 <_dtoa_r+0x6be>
 800c3ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c3d2:	49a8      	ldr	r1, [pc, #672]	@ (800c674 <_dtoa_r+0x89c>)
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	f7f3 ff67 	bl	80002a8 <__aeabi_dsub>
 800c3da:	4602      	mov	r2, r0
 800c3dc:	460b      	mov	r3, r1
 800c3de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c3e2:	f7f4 fb8b 	bl	8000afc <__aeabi_dcmplt>
 800c3e6:	2800      	cmp	r0, #0
 800c3e8:	f43f af14 	beq.w	800c214 <_dtoa_r+0x43c>
 800c3ec:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800c3ee:	1e73      	subs	r3, r6, #1
 800c3f0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c3f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c3f6:	2b30      	cmp	r3, #48	@ 0x30
 800c3f8:	d0f8      	beq.n	800c3ec <_dtoa_r+0x614>
 800c3fa:	4647      	mov	r7, r8
 800c3fc:	e03b      	b.n	800c476 <_dtoa_r+0x69e>
 800c3fe:	4b9e      	ldr	r3, [pc, #632]	@ (800c678 <_dtoa_r+0x8a0>)
 800c400:	f7f4 f90a 	bl	8000618 <__aeabi_dmul>
 800c404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c408:	e7bc      	b.n	800c384 <_dtoa_r+0x5ac>
 800c40a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800c40e:	4656      	mov	r6, sl
 800c410:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c414:	4620      	mov	r0, r4
 800c416:	4629      	mov	r1, r5
 800c418:	f7f4 fa28 	bl	800086c <__aeabi_ddiv>
 800c41c:	f7f4 fbac 	bl	8000b78 <__aeabi_d2iz>
 800c420:	4680      	mov	r8, r0
 800c422:	f7f4 f88f 	bl	8000544 <__aeabi_i2d>
 800c426:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c42a:	f7f4 f8f5 	bl	8000618 <__aeabi_dmul>
 800c42e:	4602      	mov	r2, r0
 800c430:	460b      	mov	r3, r1
 800c432:	4620      	mov	r0, r4
 800c434:	4629      	mov	r1, r5
 800c436:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c43a:	f7f3 ff35 	bl	80002a8 <__aeabi_dsub>
 800c43e:	f806 4b01 	strb.w	r4, [r6], #1
 800c442:	9d03      	ldr	r5, [sp, #12]
 800c444:	eba6 040a 	sub.w	r4, r6, sl
 800c448:	42a5      	cmp	r5, r4
 800c44a:	4602      	mov	r2, r0
 800c44c:	460b      	mov	r3, r1
 800c44e:	d133      	bne.n	800c4b8 <_dtoa_r+0x6e0>
 800c450:	f7f3 ff2c 	bl	80002ac <__adddf3>
 800c454:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c458:	4604      	mov	r4, r0
 800c45a:	460d      	mov	r5, r1
 800c45c:	f7f4 fb6c 	bl	8000b38 <__aeabi_dcmpgt>
 800c460:	b9c0      	cbnz	r0, 800c494 <_dtoa_r+0x6bc>
 800c462:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c466:	4620      	mov	r0, r4
 800c468:	4629      	mov	r1, r5
 800c46a:	f7f4 fb3d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c46e:	b110      	cbz	r0, 800c476 <_dtoa_r+0x69e>
 800c470:	f018 0f01 	tst.w	r8, #1
 800c474:	d10e      	bne.n	800c494 <_dtoa_r+0x6bc>
 800c476:	9902      	ldr	r1, [sp, #8]
 800c478:	4648      	mov	r0, r9
 800c47a:	f000 fb07 	bl	800ca8c <_Bfree>
 800c47e:	2300      	movs	r3, #0
 800c480:	7033      	strb	r3, [r6, #0]
 800c482:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c484:	3701      	adds	r7, #1
 800c486:	601f      	str	r7, [r3, #0]
 800c488:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	f000 824b 	beq.w	800c926 <_dtoa_r+0xb4e>
 800c490:	601e      	str	r6, [r3, #0]
 800c492:	e248      	b.n	800c926 <_dtoa_r+0xb4e>
 800c494:	46b8      	mov	r8, r7
 800c496:	4633      	mov	r3, r6
 800c498:	461e      	mov	r6, r3
 800c49a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c49e:	2a39      	cmp	r2, #57	@ 0x39
 800c4a0:	d106      	bne.n	800c4b0 <_dtoa_r+0x6d8>
 800c4a2:	459a      	cmp	sl, r3
 800c4a4:	d1f8      	bne.n	800c498 <_dtoa_r+0x6c0>
 800c4a6:	2230      	movs	r2, #48	@ 0x30
 800c4a8:	f108 0801 	add.w	r8, r8, #1
 800c4ac:	f88a 2000 	strb.w	r2, [sl]
 800c4b0:	781a      	ldrb	r2, [r3, #0]
 800c4b2:	3201      	adds	r2, #1
 800c4b4:	701a      	strb	r2, [r3, #0]
 800c4b6:	e7a0      	b.n	800c3fa <_dtoa_r+0x622>
 800c4b8:	4b6f      	ldr	r3, [pc, #444]	@ (800c678 <_dtoa_r+0x8a0>)
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f7f4 f8ac 	bl	8000618 <__aeabi_dmul>
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	4604      	mov	r4, r0
 800c4c6:	460d      	mov	r5, r1
 800c4c8:	f7f4 fb0e 	bl	8000ae8 <__aeabi_dcmpeq>
 800c4cc:	2800      	cmp	r0, #0
 800c4ce:	d09f      	beq.n	800c410 <_dtoa_r+0x638>
 800c4d0:	e7d1      	b.n	800c476 <_dtoa_r+0x69e>
 800c4d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4d4:	2a00      	cmp	r2, #0
 800c4d6:	f000 80ea 	beq.w	800c6ae <_dtoa_r+0x8d6>
 800c4da:	9a07      	ldr	r2, [sp, #28]
 800c4dc:	2a01      	cmp	r2, #1
 800c4de:	f300 80cd 	bgt.w	800c67c <_dtoa_r+0x8a4>
 800c4e2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c4e4:	2a00      	cmp	r2, #0
 800c4e6:	f000 80c1 	beq.w	800c66c <_dtoa_r+0x894>
 800c4ea:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c4ee:	9c08      	ldr	r4, [sp, #32]
 800c4f0:	9e00      	ldr	r6, [sp, #0]
 800c4f2:	9a00      	ldr	r2, [sp, #0]
 800c4f4:	441a      	add	r2, r3
 800c4f6:	9200      	str	r2, [sp, #0]
 800c4f8:	9a06      	ldr	r2, [sp, #24]
 800c4fa:	2101      	movs	r1, #1
 800c4fc:	441a      	add	r2, r3
 800c4fe:	4648      	mov	r0, r9
 800c500:	9206      	str	r2, [sp, #24]
 800c502:	f000 fb77 	bl	800cbf4 <__i2b>
 800c506:	4605      	mov	r5, r0
 800c508:	b166      	cbz	r6, 800c524 <_dtoa_r+0x74c>
 800c50a:	9b06      	ldr	r3, [sp, #24]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	dd09      	ble.n	800c524 <_dtoa_r+0x74c>
 800c510:	42b3      	cmp	r3, r6
 800c512:	9a00      	ldr	r2, [sp, #0]
 800c514:	bfa8      	it	ge
 800c516:	4633      	movge	r3, r6
 800c518:	1ad2      	subs	r2, r2, r3
 800c51a:	9200      	str	r2, [sp, #0]
 800c51c:	9a06      	ldr	r2, [sp, #24]
 800c51e:	1af6      	subs	r6, r6, r3
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	9306      	str	r3, [sp, #24]
 800c524:	9b08      	ldr	r3, [sp, #32]
 800c526:	b30b      	cbz	r3, 800c56c <_dtoa_r+0x794>
 800c528:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	f000 80c6 	beq.w	800c6bc <_dtoa_r+0x8e4>
 800c530:	2c00      	cmp	r4, #0
 800c532:	f000 80c0 	beq.w	800c6b6 <_dtoa_r+0x8de>
 800c536:	4629      	mov	r1, r5
 800c538:	4622      	mov	r2, r4
 800c53a:	4648      	mov	r0, r9
 800c53c:	f000 fc12 	bl	800cd64 <__pow5mult>
 800c540:	9a02      	ldr	r2, [sp, #8]
 800c542:	4601      	mov	r1, r0
 800c544:	4605      	mov	r5, r0
 800c546:	4648      	mov	r0, r9
 800c548:	f000 fb6a 	bl	800cc20 <__multiply>
 800c54c:	9902      	ldr	r1, [sp, #8]
 800c54e:	4680      	mov	r8, r0
 800c550:	4648      	mov	r0, r9
 800c552:	f000 fa9b 	bl	800ca8c <_Bfree>
 800c556:	9b08      	ldr	r3, [sp, #32]
 800c558:	1b1b      	subs	r3, r3, r4
 800c55a:	9308      	str	r3, [sp, #32]
 800c55c:	f000 80b1 	beq.w	800c6c2 <_dtoa_r+0x8ea>
 800c560:	9a08      	ldr	r2, [sp, #32]
 800c562:	4641      	mov	r1, r8
 800c564:	4648      	mov	r0, r9
 800c566:	f000 fbfd 	bl	800cd64 <__pow5mult>
 800c56a:	9002      	str	r0, [sp, #8]
 800c56c:	2101      	movs	r1, #1
 800c56e:	4648      	mov	r0, r9
 800c570:	f000 fb40 	bl	800cbf4 <__i2b>
 800c574:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c576:	4604      	mov	r4, r0
 800c578:	2b00      	cmp	r3, #0
 800c57a:	f000 81d8 	beq.w	800c92e <_dtoa_r+0xb56>
 800c57e:	461a      	mov	r2, r3
 800c580:	4601      	mov	r1, r0
 800c582:	4648      	mov	r0, r9
 800c584:	f000 fbee 	bl	800cd64 <__pow5mult>
 800c588:	9b07      	ldr	r3, [sp, #28]
 800c58a:	2b01      	cmp	r3, #1
 800c58c:	4604      	mov	r4, r0
 800c58e:	f300 809f 	bgt.w	800c6d0 <_dtoa_r+0x8f8>
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	f040 8097 	bne.w	800c6c8 <_dtoa_r+0x8f0>
 800c59a:	9b05      	ldr	r3, [sp, #20]
 800c59c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	f040 8093 	bne.w	800c6cc <_dtoa_r+0x8f4>
 800c5a6:	9b05      	ldr	r3, [sp, #20]
 800c5a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c5ac:	0d1b      	lsrs	r3, r3, #20
 800c5ae:	051b      	lsls	r3, r3, #20
 800c5b0:	b133      	cbz	r3, 800c5c0 <_dtoa_r+0x7e8>
 800c5b2:	9b00      	ldr	r3, [sp, #0]
 800c5b4:	3301      	adds	r3, #1
 800c5b6:	9300      	str	r3, [sp, #0]
 800c5b8:	9b06      	ldr	r3, [sp, #24]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	9306      	str	r3, [sp, #24]
 800c5be:	2301      	movs	r3, #1
 800c5c0:	9308      	str	r3, [sp, #32]
 800c5c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	f000 81b8 	beq.w	800c93a <_dtoa_r+0xb62>
 800c5ca:	6923      	ldr	r3, [r4, #16]
 800c5cc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5d0:	6918      	ldr	r0, [r3, #16]
 800c5d2:	f000 fac3 	bl	800cb5c <__hi0bits>
 800c5d6:	f1c0 0020 	rsb	r0, r0, #32
 800c5da:	9b06      	ldr	r3, [sp, #24]
 800c5dc:	4418      	add	r0, r3
 800c5de:	f010 001f 	ands.w	r0, r0, #31
 800c5e2:	f000 8082 	beq.w	800c6ea <_dtoa_r+0x912>
 800c5e6:	f1c0 0320 	rsb	r3, r0, #32
 800c5ea:	2b04      	cmp	r3, #4
 800c5ec:	dd73      	ble.n	800c6d6 <_dtoa_r+0x8fe>
 800c5ee:	9b00      	ldr	r3, [sp, #0]
 800c5f0:	f1c0 001c 	rsb	r0, r0, #28
 800c5f4:	4403      	add	r3, r0
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	9b06      	ldr	r3, [sp, #24]
 800c5fa:	4403      	add	r3, r0
 800c5fc:	4406      	add	r6, r0
 800c5fe:	9306      	str	r3, [sp, #24]
 800c600:	9b00      	ldr	r3, [sp, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	dd05      	ble.n	800c612 <_dtoa_r+0x83a>
 800c606:	9902      	ldr	r1, [sp, #8]
 800c608:	461a      	mov	r2, r3
 800c60a:	4648      	mov	r0, r9
 800c60c:	f000 fc04 	bl	800ce18 <__lshift>
 800c610:	9002      	str	r0, [sp, #8]
 800c612:	9b06      	ldr	r3, [sp, #24]
 800c614:	2b00      	cmp	r3, #0
 800c616:	dd05      	ble.n	800c624 <_dtoa_r+0x84c>
 800c618:	4621      	mov	r1, r4
 800c61a:	461a      	mov	r2, r3
 800c61c:	4648      	mov	r0, r9
 800c61e:	f000 fbfb 	bl	800ce18 <__lshift>
 800c622:	4604      	mov	r4, r0
 800c624:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c626:	2b00      	cmp	r3, #0
 800c628:	d061      	beq.n	800c6ee <_dtoa_r+0x916>
 800c62a:	9802      	ldr	r0, [sp, #8]
 800c62c:	4621      	mov	r1, r4
 800c62e:	f000 fc5f 	bl	800cef0 <__mcmp>
 800c632:	2800      	cmp	r0, #0
 800c634:	da5b      	bge.n	800c6ee <_dtoa_r+0x916>
 800c636:	2300      	movs	r3, #0
 800c638:	9902      	ldr	r1, [sp, #8]
 800c63a:	220a      	movs	r2, #10
 800c63c:	4648      	mov	r0, r9
 800c63e:	f000 fa47 	bl	800cad0 <__multadd>
 800c642:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c644:	9002      	str	r0, [sp, #8]
 800c646:	f107 38ff 	add.w	r8, r7, #4294967295
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 8177 	beq.w	800c93e <_dtoa_r+0xb66>
 800c650:	4629      	mov	r1, r5
 800c652:	2300      	movs	r3, #0
 800c654:	220a      	movs	r2, #10
 800c656:	4648      	mov	r0, r9
 800c658:	f000 fa3a 	bl	800cad0 <__multadd>
 800c65c:	f1bb 0f00 	cmp.w	fp, #0
 800c660:	4605      	mov	r5, r0
 800c662:	dc6f      	bgt.n	800c744 <_dtoa_r+0x96c>
 800c664:	9b07      	ldr	r3, [sp, #28]
 800c666:	2b02      	cmp	r3, #2
 800c668:	dc49      	bgt.n	800c6fe <_dtoa_r+0x926>
 800c66a:	e06b      	b.n	800c744 <_dtoa_r+0x96c>
 800c66c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c66e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c672:	e73c      	b.n	800c4ee <_dtoa_r+0x716>
 800c674:	3fe00000 	.word	0x3fe00000
 800c678:	40240000 	.word	0x40240000
 800c67c:	9b03      	ldr	r3, [sp, #12]
 800c67e:	1e5c      	subs	r4, r3, #1
 800c680:	9b08      	ldr	r3, [sp, #32]
 800c682:	42a3      	cmp	r3, r4
 800c684:	db09      	blt.n	800c69a <_dtoa_r+0x8c2>
 800c686:	1b1c      	subs	r4, r3, r4
 800c688:	9b03      	ldr	r3, [sp, #12]
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	f6bf af30 	bge.w	800c4f0 <_dtoa_r+0x718>
 800c690:	9b00      	ldr	r3, [sp, #0]
 800c692:	9a03      	ldr	r2, [sp, #12]
 800c694:	1a9e      	subs	r6, r3, r2
 800c696:	2300      	movs	r3, #0
 800c698:	e72b      	b.n	800c4f2 <_dtoa_r+0x71a>
 800c69a:	9b08      	ldr	r3, [sp, #32]
 800c69c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c69e:	9408      	str	r4, [sp, #32]
 800c6a0:	1ae3      	subs	r3, r4, r3
 800c6a2:	441a      	add	r2, r3
 800c6a4:	9e00      	ldr	r6, [sp, #0]
 800c6a6:	9b03      	ldr	r3, [sp, #12]
 800c6a8:	920d      	str	r2, [sp, #52]	@ 0x34
 800c6aa:	2400      	movs	r4, #0
 800c6ac:	e721      	b.n	800c4f2 <_dtoa_r+0x71a>
 800c6ae:	9c08      	ldr	r4, [sp, #32]
 800c6b0:	9e00      	ldr	r6, [sp, #0]
 800c6b2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800c6b4:	e728      	b.n	800c508 <_dtoa_r+0x730>
 800c6b6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800c6ba:	e751      	b.n	800c560 <_dtoa_r+0x788>
 800c6bc:	9a08      	ldr	r2, [sp, #32]
 800c6be:	9902      	ldr	r1, [sp, #8]
 800c6c0:	e750      	b.n	800c564 <_dtoa_r+0x78c>
 800c6c2:	f8cd 8008 	str.w	r8, [sp, #8]
 800c6c6:	e751      	b.n	800c56c <_dtoa_r+0x794>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	e779      	b.n	800c5c0 <_dtoa_r+0x7e8>
 800c6cc:	9b04      	ldr	r3, [sp, #16]
 800c6ce:	e777      	b.n	800c5c0 <_dtoa_r+0x7e8>
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	9308      	str	r3, [sp, #32]
 800c6d4:	e779      	b.n	800c5ca <_dtoa_r+0x7f2>
 800c6d6:	d093      	beq.n	800c600 <_dtoa_r+0x828>
 800c6d8:	9a00      	ldr	r2, [sp, #0]
 800c6da:	331c      	adds	r3, #28
 800c6dc:	441a      	add	r2, r3
 800c6de:	9200      	str	r2, [sp, #0]
 800c6e0:	9a06      	ldr	r2, [sp, #24]
 800c6e2:	441a      	add	r2, r3
 800c6e4:	441e      	add	r6, r3
 800c6e6:	9206      	str	r2, [sp, #24]
 800c6e8:	e78a      	b.n	800c600 <_dtoa_r+0x828>
 800c6ea:	4603      	mov	r3, r0
 800c6ec:	e7f4      	b.n	800c6d8 <_dtoa_r+0x900>
 800c6ee:	9b03      	ldr	r3, [sp, #12]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	46b8      	mov	r8, r7
 800c6f4:	dc20      	bgt.n	800c738 <_dtoa_r+0x960>
 800c6f6:	469b      	mov	fp, r3
 800c6f8:	9b07      	ldr	r3, [sp, #28]
 800c6fa:	2b02      	cmp	r3, #2
 800c6fc:	dd1e      	ble.n	800c73c <_dtoa_r+0x964>
 800c6fe:	f1bb 0f00 	cmp.w	fp, #0
 800c702:	f47f adb1 	bne.w	800c268 <_dtoa_r+0x490>
 800c706:	4621      	mov	r1, r4
 800c708:	465b      	mov	r3, fp
 800c70a:	2205      	movs	r2, #5
 800c70c:	4648      	mov	r0, r9
 800c70e:	f000 f9df 	bl	800cad0 <__multadd>
 800c712:	4601      	mov	r1, r0
 800c714:	4604      	mov	r4, r0
 800c716:	9802      	ldr	r0, [sp, #8]
 800c718:	f000 fbea 	bl	800cef0 <__mcmp>
 800c71c:	2800      	cmp	r0, #0
 800c71e:	f77f ada3 	ble.w	800c268 <_dtoa_r+0x490>
 800c722:	4656      	mov	r6, sl
 800c724:	2331      	movs	r3, #49	@ 0x31
 800c726:	f806 3b01 	strb.w	r3, [r6], #1
 800c72a:	f108 0801 	add.w	r8, r8, #1
 800c72e:	e59f      	b.n	800c270 <_dtoa_r+0x498>
 800c730:	9c03      	ldr	r4, [sp, #12]
 800c732:	46b8      	mov	r8, r7
 800c734:	4625      	mov	r5, r4
 800c736:	e7f4      	b.n	800c722 <_dtoa_r+0x94a>
 800c738:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800c73c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f000 8101 	beq.w	800c946 <_dtoa_r+0xb6e>
 800c744:	2e00      	cmp	r6, #0
 800c746:	dd05      	ble.n	800c754 <_dtoa_r+0x97c>
 800c748:	4629      	mov	r1, r5
 800c74a:	4632      	mov	r2, r6
 800c74c:	4648      	mov	r0, r9
 800c74e:	f000 fb63 	bl	800ce18 <__lshift>
 800c752:	4605      	mov	r5, r0
 800c754:	9b08      	ldr	r3, [sp, #32]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d05c      	beq.n	800c814 <_dtoa_r+0xa3c>
 800c75a:	6869      	ldr	r1, [r5, #4]
 800c75c:	4648      	mov	r0, r9
 800c75e:	f000 f955 	bl	800ca0c <_Balloc>
 800c762:	4606      	mov	r6, r0
 800c764:	b928      	cbnz	r0, 800c772 <_dtoa_r+0x99a>
 800c766:	4b82      	ldr	r3, [pc, #520]	@ (800c970 <_dtoa_r+0xb98>)
 800c768:	4602      	mov	r2, r0
 800c76a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c76e:	f7ff bb4a 	b.w	800be06 <_dtoa_r+0x2e>
 800c772:	692a      	ldr	r2, [r5, #16]
 800c774:	3202      	adds	r2, #2
 800c776:	0092      	lsls	r2, r2, #2
 800c778:	f105 010c 	add.w	r1, r5, #12
 800c77c:	300c      	adds	r0, #12
 800c77e:	f7ff fa94 	bl	800bcaa <memcpy>
 800c782:	2201      	movs	r2, #1
 800c784:	4631      	mov	r1, r6
 800c786:	4648      	mov	r0, r9
 800c788:	f000 fb46 	bl	800ce18 <__lshift>
 800c78c:	f10a 0301 	add.w	r3, sl, #1
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	eb0a 030b 	add.w	r3, sl, fp
 800c796:	9308      	str	r3, [sp, #32]
 800c798:	9b04      	ldr	r3, [sp, #16]
 800c79a:	f003 0301 	and.w	r3, r3, #1
 800c79e:	462f      	mov	r7, r5
 800c7a0:	9306      	str	r3, [sp, #24]
 800c7a2:	4605      	mov	r5, r0
 800c7a4:	9b00      	ldr	r3, [sp, #0]
 800c7a6:	9802      	ldr	r0, [sp, #8]
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	f103 3bff 	add.w	fp, r3, #4294967295
 800c7ae:	f7ff fa8a 	bl	800bcc6 <quorem>
 800c7b2:	4603      	mov	r3, r0
 800c7b4:	3330      	adds	r3, #48	@ 0x30
 800c7b6:	9003      	str	r0, [sp, #12]
 800c7b8:	4639      	mov	r1, r7
 800c7ba:	9802      	ldr	r0, [sp, #8]
 800c7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7be:	f000 fb97 	bl	800cef0 <__mcmp>
 800c7c2:	462a      	mov	r2, r5
 800c7c4:	9004      	str	r0, [sp, #16]
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4648      	mov	r0, r9
 800c7ca:	f000 fbad 	bl	800cf28 <__mdiff>
 800c7ce:	68c2      	ldr	r2, [r0, #12]
 800c7d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7d2:	4606      	mov	r6, r0
 800c7d4:	bb02      	cbnz	r2, 800c818 <_dtoa_r+0xa40>
 800c7d6:	4601      	mov	r1, r0
 800c7d8:	9802      	ldr	r0, [sp, #8]
 800c7da:	f000 fb89 	bl	800cef0 <__mcmp>
 800c7de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	4631      	mov	r1, r6
 800c7e4:	4648      	mov	r0, r9
 800c7e6:	920c      	str	r2, [sp, #48]	@ 0x30
 800c7e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800c7ea:	f000 f94f 	bl	800ca8c <_Bfree>
 800c7ee:	9b07      	ldr	r3, [sp, #28]
 800c7f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c7f2:	9e00      	ldr	r6, [sp, #0]
 800c7f4:	ea42 0103 	orr.w	r1, r2, r3
 800c7f8:	9b06      	ldr	r3, [sp, #24]
 800c7fa:	4319      	orrs	r1, r3
 800c7fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7fe:	d10d      	bne.n	800c81c <_dtoa_r+0xa44>
 800c800:	2b39      	cmp	r3, #57	@ 0x39
 800c802:	d027      	beq.n	800c854 <_dtoa_r+0xa7c>
 800c804:	9a04      	ldr	r2, [sp, #16]
 800c806:	2a00      	cmp	r2, #0
 800c808:	dd01      	ble.n	800c80e <_dtoa_r+0xa36>
 800c80a:	9b03      	ldr	r3, [sp, #12]
 800c80c:	3331      	adds	r3, #49	@ 0x31
 800c80e:	f88b 3000 	strb.w	r3, [fp]
 800c812:	e52e      	b.n	800c272 <_dtoa_r+0x49a>
 800c814:	4628      	mov	r0, r5
 800c816:	e7b9      	b.n	800c78c <_dtoa_r+0x9b4>
 800c818:	2201      	movs	r2, #1
 800c81a:	e7e2      	b.n	800c7e2 <_dtoa_r+0xa0a>
 800c81c:	9904      	ldr	r1, [sp, #16]
 800c81e:	2900      	cmp	r1, #0
 800c820:	db04      	blt.n	800c82c <_dtoa_r+0xa54>
 800c822:	9807      	ldr	r0, [sp, #28]
 800c824:	4301      	orrs	r1, r0
 800c826:	9806      	ldr	r0, [sp, #24]
 800c828:	4301      	orrs	r1, r0
 800c82a:	d120      	bne.n	800c86e <_dtoa_r+0xa96>
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	ddee      	ble.n	800c80e <_dtoa_r+0xa36>
 800c830:	9902      	ldr	r1, [sp, #8]
 800c832:	9300      	str	r3, [sp, #0]
 800c834:	2201      	movs	r2, #1
 800c836:	4648      	mov	r0, r9
 800c838:	f000 faee 	bl	800ce18 <__lshift>
 800c83c:	4621      	mov	r1, r4
 800c83e:	9002      	str	r0, [sp, #8]
 800c840:	f000 fb56 	bl	800cef0 <__mcmp>
 800c844:	2800      	cmp	r0, #0
 800c846:	9b00      	ldr	r3, [sp, #0]
 800c848:	dc02      	bgt.n	800c850 <_dtoa_r+0xa78>
 800c84a:	d1e0      	bne.n	800c80e <_dtoa_r+0xa36>
 800c84c:	07da      	lsls	r2, r3, #31
 800c84e:	d5de      	bpl.n	800c80e <_dtoa_r+0xa36>
 800c850:	2b39      	cmp	r3, #57	@ 0x39
 800c852:	d1da      	bne.n	800c80a <_dtoa_r+0xa32>
 800c854:	2339      	movs	r3, #57	@ 0x39
 800c856:	f88b 3000 	strb.w	r3, [fp]
 800c85a:	4633      	mov	r3, r6
 800c85c:	461e      	mov	r6, r3
 800c85e:	3b01      	subs	r3, #1
 800c860:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c864:	2a39      	cmp	r2, #57	@ 0x39
 800c866:	d04e      	beq.n	800c906 <_dtoa_r+0xb2e>
 800c868:	3201      	adds	r2, #1
 800c86a:	701a      	strb	r2, [r3, #0]
 800c86c:	e501      	b.n	800c272 <_dtoa_r+0x49a>
 800c86e:	2a00      	cmp	r2, #0
 800c870:	dd03      	ble.n	800c87a <_dtoa_r+0xaa2>
 800c872:	2b39      	cmp	r3, #57	@ 0x39
 800c874:	d0ee      	beq.n	800c854 <_dtoa_r+0xa7c>
 800c876:	3301      	adds	r3, #1
 800c878:	e7c9      	b.n	800c80e <_dtoa_r+0xa36>
 800c87a:	9a00      	ldr	r2, [sp, #0]
 800c87c:	9908      	ldr	r1, [sp, #32]
 800c87e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c882:	428a      	cmp	r2, r1
 800c884:	d028      	beq.n	800c8d8 <_dtoa_r+0xb00>
 800c886:	9902      	ldr	r1, [sp, #8]
 800c888:	2300      	movs	r3, #0
 800c88a:	220a      	movs	r2, #10
 800c88c:	4648      	mov	r0, r9
 800c88e:	f000 f91f 	bl	800cad0 <__multadd>
 800c892:	42af      	cmp	r7, r5
 800c894:	9002      	str	r0, [sp, #8]
 800c896:	f04f 0300 	mov.w	r3, #0
 800c89a:	f04f 020a 	mov.w	r2, #10
 800c89e:	4639      	mov	r1, r7
 800c8a0:	4648      	mov	r0, r9
 800c8a2:	d107      	bne.n	800c8b4 <_dtoa_r+0xadc>
 800c8a4:	f000 f914 	bl	800cad0 <__multadd>
 800c8a8:	4607      	mov	r7, r0
 800c8aa:	4605      	mov	r5, r0
 800c8ac:	9b00      	ldr	r3, [sp, #0]
 800c8ae:	3301      	adds	r3, #1
 800c8b0:	9300      	str	r3, [sp, #0]
 800c8b2:	e777      	b.n	800c7a4 <_dtoa_r+0x9cc>
 800c8b4:	f000 f90c 	bl	800cad0 <__multadd>
 800c8b8:	4629      	mov	r1, r5
 800c8ba:	4607      	mov	r7, r0
 800c8bc:	2300      	movs	r3, #0
 800c8be:	220a      	movs	r2, #10
 800c8c0:	4648      	mov	r0, r9
 800c8c2:	f000 f905 	bl	800cad0 <__multadd>
 800c8c6:	4605      	mov	r5, r0
 800c8c8:	e7f0      	b.n	800c8ac <_dtoa_r+0xad4>
 800c8ca:	f1bb 0f00 	cmp.w	fp, #0
 800c8ce:	bfcc      	ite	gt
 800c8d0:	465e      	movgt	r6, fp
 800c8d2:	2601      	movle	r6, #1
 800c8d4:	4456      	add	r6, sl
 800c8d6:	2700      	movs	r7, #0
 800c8d8:	9902      	ldr	r1, [sp, #8]
 800c8da:	9300      	str	r3, [sp, #0]
 800c8dc:	2201      	movs	r2, #1
 800c8de:	4648      	mov	r0, r9
 800c8e0:	f000 fa9a 	bl	800ce18 <__lshift>
 800c8e4:	4621      	mov	r1, r4
 800c8e6:	9002      	str	r0, [sp, #8]
 800c8e8:	f000 fb02 	bl	800cef0 <__mcmp>
 800c8ec:	2800      	cmp	r0, #0
 800c8ee:	dcb4      	bgt.n	800c85a <_dtoa_r+0xa82>
 800c8f0:	d102      	bne.n	800c8f8 <_dtoa_r+0xb20>
 800c8f2:	9b00      	ldr	r3, [sp, #0]
 800c8f4:	07db      	lsls	r3, r3, #31
 800c8f6:	d4b0      	bmi.n	800c85a <_dtoa_r+0xa82>
 800c8f8:	4633      	mov	r3, r6
 800c8fa:	461e      	mov	r6, r3
 800c8fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c900:	2a30      	cmp	r2, #48	@ 0x30
 800c902:	d0fa      	beq.n	800c8fa <_dtoa_r+0xb22>
 800c904:	e4b5      	b.n	800c272 <_dtoa_r+0x49a>
 800c906:	459a      	cmp	sl, r3
 800c908:	d1a8      	bne.n	800c85c <_dtoa_r+0xa84>
 800c90a:	2331      	movs	r3, #49	@ 0x31
 800c90c:	f108 0801 	add.w	r8, r8, #1
 800c910:	f88a 3000 	strb.w	r3, [sl]
 800c914:	e4ad      	b.n	800c272 <_dtoa_r+0x49a>
 800c916:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800c918:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800c974 <_dtoa_r+0xb9c>
 800c91c:	b11b      	cbz	r3, 800c926 <_dtoa_r+0xb4e>
 800c91e:	f10a 0308 	add.w	r3, sl, #8
 800c922:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800c924:	6013      	str	r3, [r2, #0]
 800c926:	4650      	mov	r0, sl
 800c928:	b017      	add	sp, #92	@ 0x5c
 800c92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c92e:	9b07      	ldr	r3, [sp, #28]
 800c930:	2b01      	cmp	r3, #1
 800c932:	f77f ae2e 	ble.w	800c592 <_dtoa_r+0x7ba>
 800c936:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c938:	9308      	str	r3, [sp, #32]
 800c93a:	2001      	movs	r0, #1
 800c93c:	e64d      	b.n	800c5da <_dtoa_r+0x802>
 800c93e:	f1bb 0f00 	cmp.w	fp, #0
 800c942:	f77f aed9 	ble.w	800c6f8 <_dtoa_r+0x920>
 800c946:	4656      	mov	r6, sl
 800c948:	9802      	ldr	r0, [sp, #8]
 800c94a:	4621      	mov	r1, r4
 800c94c:	f7ff f9bb 	bl	800bcc6 <quorem>
 800c950:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800c954:	f806 3b01 	strb.w	r3, [r6], #1
 800c958:	eba6 020a 	sub.w	r2, r6, sl
 800c95c:	4593      	cmp	fp, r2
 800c95e:	ddb4      	ble.n	800c8ca <_dtoa_r+0xaf2>
 800c960:	9902      	ldr	r1, [sp, #8]
 800c962:	2300      	movs	r3, #0
 800c964:	220a      	movs	r2, #10
 800c966:	4648      	mov	r0, r9
 800c968:	f000 f8b2 	bl	800cad0 <__multadd>
 800c96c:	9002      	str	r0, [sp, #8]
 800c96e:	e7eb      	b.n	800c948 <_dtoa_r+0xb70>
 800c970:	0800e838 	.word	0x0800e838
 800c974:	0800e7bc 	.word	0x0800e7bc

0800c978 <_free_r>:
 800c978:	b538      	push	{r3, r4, r5, lr}
 800c97a:	4605      	mov	r5, r0
 800c97c:	2900      	cmp	r1, #0
 800c97e:	d041      	beq.n	800ca04 <_free_r+0x8c>
 800c980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c984:	1f0c      	subs	r4, r1, #4
 800c986:	2b00      	cmp	r3, #0
 800c988:	bfb8      	it	lt
 800c98a:	18e4      	addlt	r4, r4, r3
 800c98c:	f7fe fa92 	bl	800aeb4 <__malloc_lock>
 800c990:	4a1d      	ldr	r2, [pc, #116]	@ (800ca08 <_free_r+0x90>)
 800c992:	6813      	ldr	r3, [r2, #0]
 800c994:	b933      	cbnz	r3, 800c9a4 <_free_r+0x2c>
 800c996:	6063      	str	r3, [r4, #4]
 800c998:	6014      	str	r4, [r2, #0]
 800c99a:	4628      	mov	r0, r5
 800c99c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9a0:	f7fe ba8e 	b.w	800aec0 <__malloc_unlock>
 800c9a4:	42a3      	cmp	r3, r4
 800c9a6:	d908      	bls.n	800c9ba <_free_r+0x42>
 800c9a8:	6820      	ldr	r0, [r4, #0]
 800c9aa:	1821      	adds	r1, r4, r0
 800c9ac:	428b      	cmp	r3, r1
 800c9ae:	bf01      	itttt	eq
 800c9b0:	6819      	ldreq	r1, [r3, #0]
 800c9b2:	685b      	ldreq	r3, [r3, #4]
 800c9b4:	1809      	addeq	r1, r1, r0
 800c9b6:	6021      	streq	r1, [r4, #0]
 800c9b8:	e7ed      	b.n	800c996 <_free_r+0x1e>
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	685b      	ldr	r3, [r3, #4]
 800c9be:	b10b      	cbz	r3, 800c9c4 <_free_r+0x4c>
 800c9c0:	42a3      	cmp	r3, r4
 800c9c2:	d9fa      	bls.n	800c9ba <_free_r+0x42>
 800c9c4:	6811      	ldr	r1, [r2, #0]
 800c9c6:	1850      	adds	r0, r2, r1
 800c9c8:	42a0      	cmp	r0, r4
 800c9ca:	d10b      	bne.n	800c9e4 <_free_r+0x6c>
 800c9cc:	6820      	ldr	r0, [r4, #0]
 800c9ce:	4401      	add	r1, r0
 800c9d0:	1850      	adds	r0, r2, r1
 800c9d2:	4283      	cmp	r3, r0
 800c9d4:	6011      	str	r1, [r2, #0]
 800c9d6:	d1e0      	bne.n	800c99a <_free_r+0x22>
 800c9d8:	6818      	ldr	r0, [r3, #0]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	6053      	str	r3, [r2, #4]
 800c9de:	4408      	add	r0, r1
 800c9e0:	6010      	str	r0, [r2, #0]
 800c9e2:	e7da      	b.n	800c99a <_free_r+0x22>
 800c9e4:	d902      	bls.n	800c9ec <_free_r+0x74>
 800c9e6:	230c      	movs	r3, #12
 800c9e8:	602b      	str	r3, [r5, #0]
 800c9ea:	e7d6      	b.n	800c99a <_free_r+0x22>
 800c9ec:	6820      	ldr	r0, [r4, #0]
 800c9ee:	1821      	adds	r1, r4, r0
 800c9f0:	428b      	cmp	r3, r1
 800c9f2:	bf04      	itt	eq
 800c9f4:	6819      	ldreq	r1, [r3, #0]
 800c9f6:	685b      	ldreq	r3, [r3, #4]
 800c9f8:	6063      	str	r3, [r4, #4]
 800c9fa:	bf04      	itt	eq
 800c9fc:	1809      	addeq	r1, r1, r0
 800c9fe:	6021      	streq	r1, [r4, #0]
 800ca00:	6054      	str	r4, [r2, #4]
 800ca02:	e7ca      	b.n	800c99a <_free_r+0x22>
 800ca04:	bd38      	pop	{r3, r4, r5, pc}
 800ca06:	bf00      	nop
 800ca08:	20026318 	.word	0x20026318

0800ca0c <_Balloc>:
 800ca0c:	b570      	push	{r4, r5, r6, lr}
 800ca0e:	69c6      	ldr	r6, [r0, #28]
 800ca10:	4604      	mov	r4, r0
 800ca12:	460d      	mov	r5, r1
 800ca14:	b976      	cbnz	r6, 800ca34 <_Balloc+0x28>
 800ca16:	2010      	movs	r0, #16
 800ca18:	f7fe f9a2 	bl	800ad60 <malloc>
 800ca1c:	4602      	mov	r2, r0
 800ca1e:	61e0      	str	r0, [r4, #28]
 800ca20:	b920      	cbnz	r0, 800ca2c <_Balloc+0x20>
 800ca22:	4b18      	ldr	r3, [pc, #96]	@ (800ca84 <_Balloc+0x78>)
 800ca24:	4818      	ldr	r0, [pc, #96]	@ (800ca88 <_Balloc+0x7c>)
 800ca26:	216b      	movs	r1, #107	@ 0x6b
 800ca28:	f000 fddc 	bl	800d5e4 <__assert_func>
 800ca2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca30:	6006      	str	r6, [r0, #0]
 800ca32:	60c6      	str	r6, [r0, #12]
 800ca34:	69e6      	ldr	r6, [r4, #28]
 800ca36:	68f3      	ldr	r3, [r6, #12]
 800ca38:	b183      	cbz	r3, 800ca5c <_Balloc+0x50>
 800ca3a:	69e3      	ldr	r3, [r4, #28]
 800ca3c:	68db      	ldr	r3, [r3, #12]
 800ca3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca42:	b9b8      	cbnz	r0, 800ca74 <_Balloc+0x68>
 800ca44:	2101      	movs	r1, #1
 800ca46:	fa01 f605 	lsl.w	r6, r1, r5
 800ca4a:	1d72      	adds	r2, r6, #5
 800ca4c:	0092      	lsls	r2, r2, #2
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 fde6 	bl	800d620 <_calloc_r>
 800ca54:	b160      	cbz	r0, 800ca70 <_Balloc+0x64>
 800ca56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ca5a:	e00e      	b.n	800ca7a <_Balloc+0x6e>
 800ca5c:	2221      	movs	r2, #33	@ 0x21
 800ca5e:	2104      	movs	r1, #4
 800ca60:	4620      	mov	r0, r4
 800ca62:	f000 fddd 	bl	800d620 <_calloc_r>
 800ca66:	69e3      	ldr	r3, [r4, #28]
 800ca68:	60f0      	str	r0, [r6, #12]
 800ca6a:	68db      	ldr	r3, [r3, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e4      	bne.n	800ca3a <_Balloc+0x2e>
 800ca70:	2000      	movs	r0, #0
 800ca72:	bd70      	pop	{r4, r5, r6, pc}
 800ca74:	6802      	ldr	r2, [r0, #0]
 800ca76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ca80:	e7f7      	b.n	800ca72 <_Balloc+0x66>
 800ca82:	bf00      	nop
 800ca84:	0800e7c9 	.word	0x0800e7c9
 800ca88:	0800e849 	.word	0x0800e849

0800ca8c <_Bfree>:
 800ca8c:	b570      	push	{r4, r5, r6, lr}
 800ca8e:	69c6      	ldr	r6, [r0, #28]
 800ca90:	4605      	mov	r5, r0
 800ca92:	460c      	mov	r4, r1
 800ca94:	b976      	cbnz	r6, 800cab4 <_Bfree+0x28>
 800ca96:	2010      	movs	r0, #16
 800ca98:	f7fe f962 	bl	800ad60 <malloc>
 800ca9c:	4602      	mov	r2, r0
 800ca9e:	61e8      	str	r0, [r5, #28]
 800caa0:	b920      	cbnz	r0, 800caac <_Bfree+0x20>
 800caa2:	4b09      	ldr	r3, [pc, #36]	@ (800cac8 <_Bfree+0x3c>)
 800caa4:	4809      	ldr	r0, [pc, #36]	@ (800cacc <_Bfree+0x40>)
 800caa6:	218f      	movs	r1, #143	@ 0x8f
 800caa8:	f000 fd9c 	bl	800d5e4 <__assert_func>
 800caac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cab0:	6006      	str	r6, [r0, #0]
 800cab2:	60c6      	str	r6, [r0, #12]
 800cab4:	b13c      	cbz	r4, 800cac6 <_Bfree+0x3a>
 800cab6:	69eb      	ldr	r3, [r5, #28]
 800cab8:	6862      	ldr	r2, [r4, #4]
 800caba:	68db      	ldr	r3, [r3, #12]
 800cabc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cac0:	6021      	str	r1, [r4, #0]
 800cac2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cac6:	bd70      	pop	{r4, r5, r6, pc}
 800cac8:	0800e7c9 	.word	0x0800e7c9
 800cacc:	0800e849 	.word	0x0800e849

0800cad0 <__multadd>:
 800cad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad4:	690d      	ldr	r5, [r1, #16]
 800cad6:	4607      	mov	r7, r0
 800cad8:	460c      	mov	r4, r1
 800cada:	461e      	mov	r6, r3
 800cadc:	f101 0c14 	add.w	ip, r1, #20
 800cae0:	2000      	movs	r0, #0
 800cae2:	f8dc 3000 	ldr.w	r3, [ip]
 800cae6:	b299      	uxth	r1, r3
 800cae8:	fb02 6101 	mla	r1, r2, r1, r6
 800caec:	0c1e      	lsrs	r6, r3, #16
 800caee:	0c0b      	lsrs	r3, r1, #16
 800caf0:	fb02 3306 	mla	r3, r2, r6, r3
 800caf4:	b289      	uxth	r1, r1
 800caf6:	3001      	adds	r0, #1
 800caf8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cafc:	4285      	cmp	r5, r0
 800cafe:	f84c 1b04 	str.w	r1, [ip], #4
 800cb02:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb06:	dcec      	bgt.n	800cae2 <__multadd+0x12>
 800cb08:	b30e      	cbz	r6, 800cb4e <__multadd+0x7e>
 800cb0a:	68a3      	ldr	r3, [r4, #8]
 800cb0c:	42ab      	cmp	r3, r5
 800cb0e:	dc19      	bgt.n	800cb44 <__multadd+0x74>
 800cb10:	6861      	ldr	r1, [r4, #4]
 800cb12:	4638      	mov	r0, r7
 800cb14:	3101      	adds	r1, #1
 800cb16:	f7ff ff79 	bl	800ca0c <_Balloc>
 800cb1a:	4680      	mov	r8, r0
 800cb1c:	b928      	cbnz	r0, 800cb2a <__multadd+0x5a>
 800cb1e:	4602      	mov	r2, r0
 800cb20:	4b0c      	ldr	r3, [pc, #48]	@ (800cb54 <__multadd+0x84>)
 800cb22:	480d      	ldr	r0, [pc, #52]	@ (800cb58 <__multadd+0x88>)
 800cb24:	21ba      	movs	r1, #186	@ 0xba
 800cb26:	f000 fd5d 	bl	800d5e4 <__assert_func>
 800cb2a:	6922      	ldr	r2, [r4, #16]
 800cb2c:	3202      	adds	r2, #2
 800cb2e:	f104 010c 	add.w	r1, r4, #12
 800cb32:	0092      	lsls	r2, r2, #2
 800cb34:	300c      	adds	r0, #12
 800cb36:	f7ff f8b8 	bl	800bcaa <memcpy>
 800cb3a:	4621      	mov	r1, r4
 800cb3c:	4638      	mov	r0, r7
 800cb3e:	f7ff ffa5 	bl	800ca8c <_Bfree>
 800cb42:	4644      	mov	r4, r8
 800cb44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb48:	3501      	adds	r5, #1
 800cb4a:	615e      	str	r6, [r3, #20]
 800cb4c:	6125      	str	r5, [r4, #16]
 800cb4e:	4620      	mov	r0, r4
 800cb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb54:	0800e838 	.word	0x0800e838
 800cb58:	0800e849 	.word	0x0800e849

0800cb5c <__hi0bits>:
 800cb5c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cb60:	4603      	mov	r3, r0
 800cb62:	bf36      	itet	cc
 800cb64:	0403      	lslcc	r3, r0, #16
 800cb66:	2000      	movcs	r0, #0
 800cb68:	2010      	movcc	r0, #16
 800cb6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cb6e:	bf3c      	itt	cc
 800cb70:	021b      	lslcc	r3, r3, #8
 800cb72:	3008      	addcc	r0, #8
 800cb74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cb78:	bf3c      	itt	cc
 800cb7a:	011b      	lslcc	r3, r3, #4
 800cb7c:	3004      	addcc	r0, #4
 800cb7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb82:	bf3c      	itt	cc
 800cb84:	009b      	lslcc	r3, r3, #2
 800cb86:	3002      	addcc	r0, #2
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	db05      	blt.n	800cb98 <__hi0bits+0x3c>
 800cb8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cb90:	f100 0001 	add.w	r0, r0, #1
 800cb94:	bf08      	it	eq
 800cb96:	2020      	moveq	r0, #32
 800cb98:	4770      	bx	lr

0800cb9a <__lo0bits>:
 800cb9a:	6803      	ldr	r3, [r0, #0]
 800cb9c:	4602      	mov	r2, r0
 800cb9e:	f013 0007 	ands.w	r0, r3, #7
 800cba2:	d00b      	beq.n	800cbbc <__lo0bits+0x22>
 800cba4:	07d9      	lsls	r1, r3, #31
 800cba6:	d421      	bmi.n	800cbec <__lo0bits+0x52>
 800cba8:	0798      	lsls	r0, r3, #30
 800cbaa:	bf49      	itett	mi
 800cbac:	085b      	lsrmi	r3, r3, #1
 800cbae:	089b      	lsrpl	r3, r3, #2
 800cbb0:	2001      	movmi	r0, #1
 800cbb2:	6013      	strmi	r3, [r2, #0]
 800cbb4:	bf5c      	itt	pl
 800cbb6:	6013      	strpl	r3, [r2, #0]
 800cbb8:	2002      	movpl	r0, #2
 800cbba:	4770      	bx	lr
 800cbbc:	b299      	uxth	r1, r3
 800cbbe:	b909      	cbnz	r1, 800cbc4 <__lo0bits+0x2a>
 800cbc0:	0c1b      	lsrs	r3, r3, #16
 800cbc2:	2010      	movs	r0, #16
 800cbc4:	b2d9      	uxtb	r1, r3
 800cbc6:	b909      	cbnz	r1, 800cbcc <__lo0bits+0x32>
 800cbc8:	3008      	adds	r0, #8
 800cbca:	0a1b      	lsrs	r3, r3, #8
 800cbcc:	0719      	lsls	r1, r3, #28
 800cbce:	bf04      	itt	eq
 800cbd0:	091b      	lsreq	r3, r3, #4
 800cbd2:	3004      	addeq	r0, #4
 800cbd4:	0799      	lsls	r1, r3, #30
 800cbd6:	bf04      	itt	eq
 800cbd8:	089b      	lsreq	r3, r3, #2
 800cbda:	3002      	addeq	r0, #2
 800cbdc:	07d9      	lsls	r1, r3, #31
 800cbde:	d403      	bmi.n	800cbe8 <__lo0bits+0x4e>
 800cbe0:	085b      	lsrs	r3, r3, #1
 800cbe2:	f100 0001 	add.w	r0, r0, #1
 800cbe6:	d003      	beq.n	800cbf0 <__lo0bits+0x56>
 800cbe8:	6013      	str	r3, [r2, #0]
 800cbea:	4770      	bx	lr
 800cbec:	2000      	movs	r0, #0
 800cbee:	4770      	bx	lr
 800cbf0:	2020      	movs	r0, #32
 800cbf2:	4770      	bx	lr

0800cbf4 <__i2b>:
 800cbf4:	b510      	push	{r4, lr}
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	2101      	movs	r1, #1
 800cbfa:	f7ff ff07 	bl	800ca0c <_Balloc>
 800cbfe:	4602      	mov	r2, r0
 800cc00:	b928      	cbnz	r0, 800cc0e <__i2b+0x1a>
 800cc02:	4b05      	ldr	r3, [pc, #20]	@ (800cc18 <__i2b+0x24>)
 800cc04:	4805      	ldr	r0, [pc, #20]	@ (800cc1c <__i2b+0x28>)
 800cc06:	f240 1145 	movw	r1, #325	@ 0x145
 800cc0a:	f000 fceb 	bl	800d5e4 <__assert_func>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	6144      	str	r4, [r0, #20]
 800cc12:	6103      	str	r3, [r0, #16]
 800cc14:	bd10      	pop	{r4, pc}
 800cc16:	bf00      	nop
 800cc18:	0800e838 	.word	0x0800e838
 800cc1c:	0800e849 	.word	0x0800e849

0800cc20 <__multiply>:
 800cc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc24:	4617      	mov	r7, r2
 800cc26:	690a      	ldr	r2, [r1, #16]
 800cc28:	693b      	ldr	r3, [r7, #16]
 800cc2a:	429a      	cmp	r2, r3
 800cc2c:	bfa8      	it	ge
 800cc2e:	463b      	movge	r3, r7
 800cc30:	4689      	mov	r9, r1
 800cc32:	bfa4      	itt	ge
 800cc34:	460f      	movge	r7, r1
 800cc36:	4699      	movge	r9, r3
 800cc38:	693d      	ldr	r5, [r7, #16]
 800cc3a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cc3e:	68bb      	ldr	r3, [r7, #8]
 800cc40:	6879      	ldr	r1, [r7, #4]
 800cc42:	eb05 060a 	add.w	r6, r5, sl
 800cc46:	42b3      	cmp	r3, r6
 800cc48:	b085      	sub	sp, #20
 800cc4a:	bfb8      	it	lt
 800cc4c:	3101      	addlt	r1, #1
 800cc4e:	f7ff fedd 	bl	800ca0c <_Balloc>
 800cc52:	b930      	cbnz	r0, 800cc62 <__multiply+0x42>
 800cc54:	4602      	mov	r2, r0
 800cc56:	4b41      	ldr	r3, [pc, #260]	@ (800cd5c <__multiply+0x13c>)
 800cc58:	4841      	ldr	r0, [pc, #260]	@ (800cd60 <__multiply+0x140>)
 800cc5a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cc5e:	f000 fcc1 	bl	800d5e4 <__assert_func>
 800cc62:	f100 0414 	add.w	r4, r0, #20
 800cc66:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800cc6a:	4623      	mov	r3, r4
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	4573      	cmp	r3, lr
 800cc70:	d320      	bcc.n	800ccb4 <__multiply+0x94>
 800cc72:	f107 0814 	add.w	r8, r7, #20
 800cc76:	f109 0114 	add.w	r1, r9, #20
 800cc7a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800cc7e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800cc82:	9302      	str	r3, [sp, #8]
 800cc84:	1beb      	subs	r3, r5, r7
 800cc86:	3b15      	subs	r3, #21
 800cc88:	f023 0303 	bic.w	r3, r3, #3
 800cc8c:	3304      	adds	r3, #4
 800cc8e:	3715      	adds	r7, #21
 800cc90:	42bd      	cmp	r5, r7
 800cc92:	bf38      	it	cc
 800cc94:	2304      	movcc	r3, #4
 800cc96:	9301      	str	r3, [sp, #4]
 800cc98:	9b02      	ldr	r3, [sp, #8]
 800cc9a:	9103      	str	r1, [sp, #12]
 800cc9c:	428b      	cmp	r3, r1
 800cc9e:	d80c      	bhi.n	800ccba <__multiply+0x9a>
 800cca0:	2e00      	cmp	r6, #0
 800cca2:	dd03      	ble.n	800ccac <__multiply+0x8c>
 800cca4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d055      	beq.n	800cd58 <__multiply+0x138>
 800ccac:	6106      	str	r6, [r0, #16]
 800ccae:	b005      	add	sp, #20
 800ccb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccb4:	f843 2b04 	str.w	r2, [r3], #4
 800ccb8:	e7d9      	b.n	800cc6e <__multiply+0x4e>
 800ccba:	f8b1 a000 	ldrh.w	sl, [r1]
 800ccbe:	f1ba 0f00 	cmp.w	sl, #0
 800ccc2:	d01f      	beq.n	800cd04 <__multiply+0xe4>
 800ccc4:	46c4      	mov	ip, r8
 800ccc6:	46a1      	mov	r9, r4
 800ccc8:	2700      	movs	r7, #0
 800ccca:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ccce:	f8d9 3000 	ldr.w	r3, [r9]
 800ccd2:	fa1f fb82 	uxth.w	fp, r2
 800ccd6:	b29b      	uxth	r3, r3
 800ccd8:	fb0a 330b 	mla	r3, sl, fp, r3
 800ccdc:	443b      	add	r3, r7
 800ccde:	f8d9 7000 	ldr.w	r7, [r9]
 800cce2:	0c12      	lsrs	r2, r2, #16
 800cce4:	0c3f      	lsrs	r7, r7, #16
 800cce6:	fb0a 7202 	mla	r2, sl, r2, r7
 800ccea:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800ccee:	b29b      	uxth	r3, r3
 800ccf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccf4:	4565      	cmp	r5, ip
 800ccf6:	f849 3b04 	str.w	r3, [r9], #4
 800ccfa:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ccfe:	d8e4      	bhi.n	800ccca <__multiply+0xaa>
 800cd00:	9b01      	ldr	r3, [sp, #4]
 800cd02:	50e7      	str	r7, [r4, r3]
 800cd04:	9b03      	ldr	r3, [sp, #12]
 800cd06:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cd0a:	3104      	adds	r1, #4
 800cd0c:	f1b9 0f00 	cmp.w	r9, #0
 800cd10:	d020      	beq.n	800cd54 <__multiply+0x134>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	4647      	mov	r7, r8
 800cd16:	46a4      	mov	ip, r4
 800cd18:	f04f 0a00 	mov.w	sl, #0
 800cd1c:	f8b7 b000 	ldrh.w	fp, [r7]
 800cd20:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800cd24:	fb09 220b 	mla	r2, r9, fp, r2
 800cd28:	4452      	add	r2, sl
 800cd2a:	b29b      	uxth	r3, r3
 800cd2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cd30:	f84c 3b04 	str.w	r3, [ip], #4
 800cd34:	f857 3b04 	ldr.w	r3, [r7], #4
 800cd38:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd3c:	f8bc 3000 	ldrh.w	r3, [ip]
 800cd40:	fb09 330a 	mla	r3, r9, sl, r3
 800cd44:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800cd48:	42bd      	cmp	r5, r7
 800cd4a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cd4e:	d8e5      	bhi.n	800cd1c <__multiply+0xfc>
 800cd50:	9a01      	ldr	r2, [sp, #4]
 800cd52:	50a3      	str	r3, [r4, r2]
 800cd54:	3404      	adds	r4, #4
 800cd56:	e79f      	b.n	800cc98 <__multiply+0x78>
 800cd58:	3e01      	subs	r6, #1
 800cd5a:	e7a1      	b.n	800cca0 <__multiply+0x80>
 800cd5c:	0800e838 	.word	0x0800e838
 800cd60:	0800e849 	.word	0x0800e849

0800cd64 <__pow5mult>:
 800cd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd68:	4615      	mov	r5, r2
 800cd6a:	f012 0203 	ands.w	r2, r2, #3
 800cd6e:	4607      	mov	r7, r0
 800cd70:	460e      	mov	r6, r1
 800cd72:	d007      	beq.n	800cd84 <__pow5mult+0x20>
 800cd74:	4c25      	ldr	r4, [pc, #148]	@ (800ce0c <__pow5mult+0xa8>)
 800cd76:	3a01      	subs	r2, #1
 800cd78:	2300      	movs	r3, #0
 800cd7a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cd7e:	f7ff fea7 	bl	800cad0 <__multadd>
 800cd82:	4606      	mov	r6, r0
 800cd84:	10ad      	asrs	r5, r5, #2
 800cd86:	d03d      	beq.n	800ce04 <__pow5mult+0xa0>
 800cd88:	69fc      	ldr	r4, [r7, #28]
 800cd8a:	b97c      	cbnz	r4, 800cdac <__pow5mult+0x48>
 800cd8c:	2010      	movs	r0, #16
 800cd8e:	f7fd ffe7 	bl	800ad60 <malloc>
 800cd92:	4602      	mov	r2, r0
 800cd94:	61f8      	str	r0, [r7, #28]
 800cd96:	b928      	cbnz	r0, 800cda4 <__pow5mult+0x40>
 800cd98:	4b1d      	ldr	r3, [pc, #116]	@ (800ce10 <__pow5mult+0xac>)
 800cd9a:	481e      	ldr	r0, [pc, #120]	@ (800ce14 <__pow5mult+0xb0>)
 800cd9c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cda0:	f000 fc20 	bl	800d5e4 <__assert_func>
 800cda4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cda8:	6004      	str	r4, [r0, #0]
 800cdaa:	60c4      	str	r4, [r0, #12]
 800cdac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cdb0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cdb4:	b94c      	cbnz	r4, 800cdca <__pow5mult+0x66>
 800cdb6:	f240 2171 	movw	r1, #625	@ 0x271
 800cdba:	4638      	mov	r0, r7
 800cdbc:	f7ff ff1a 	bl	800cbf4 <__i2b>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	f8c8 0008 	str.w	r0, [r8, #8]
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	6003      	str	r3, [r0, #0]
 800cdca:	f04f 0900 	mov.w	r9, #0
 800cdce:	07eb      	lsls	r3, r5, #31
 800cdd0:	d50a      	bpl.n	800cde8 <__pow5mult+0x84>
 800cdd2:	4631      	mov	r1, r6
 800cdd4:	4622      	mov	r2, r4
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	f7ff ff22 	bl	800cc20 <__multiply>
 800cddc:	4631      	mov	r1, r6
 800cdde:	4680      	mov	r8, r0
 800cde0:	4638      	mov	r0, r7
 800cde2:	f7ff fe53 	bl	800ca8c <_Bfree>
 800cde6:	4646      	mov	r6, r8
 800cde8:	106d      	asrs	r5, r5, #1
 800cdea:	d00b      	beq.n	800ce04 <__pow5mult+0xa0>
 800cdec:	6820      	ldr	r0, [r4, #0]
 800cdee:	b938      	cbnz	r0, 800ce00 <__pow5mult+0x9c>
 800cdf0:	4622      	mov	r2, r4
 800cdf2:	4621      	mov	r1, r4
 800cdf4:	4638      	mov	r0, r7
 800cdf6:	f7ff ff13 	bl	800cc20 <__multiply>
 800cdfa:	6020      	str	r0, [r4, #0]
 800cdfc:	f8c0 9000 	str.w	r9, [r0]
 800ce00:	4604      	mov	r4, r0
 800ce02:	e7e4      	b.n	800cdce <__pow5mult+0x6a>
 800ce04:	4630      	mov	r0, r6
 800ce06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ce0a:	bf00      	nop
 800ce0c:	0800e8fc 	.word	0x0800e8fc
 800ce10:	0800e7c9 	.word	0x0800e7c9
 800ce14:	0800e849 	.word	0x0800e849

0800ce18 <__lshift>:
 800ce18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	6849      	ldr	r1, [r1, #4]
 800ce20:	6923      	ldr	r3, [r4, #16]
 800ce22:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ce26:	68a3      	ldr	r3, [r4, #8]
 800ce28:	4607      	mov	r7, r0
 800ce2a:	4691      	mov	r9, r2
 800ce2c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ce30:	f108 0601 	add.w	r6, r8, #1
 800ce34:	42b3      	cmp	r3, r6
 800ce36:	db0b      	blt.n	800ce50 <__lshift+0x38>
 800ce38:	4638      	mov	r0, r7
 800ce3a:	f7ff fde7 	bl	800ca0c <_Balloc>
 800ce3e:	4605      	mov	r5, r0
 800ce40:	b948      	cbnz	r0, 800ce56 <__lshift+0x3e>
 800ce42:	4602      	mov	r2, r0
 800ce44:	4b28      	ldr	r3, [pc, #160]	@ (800cee8 <__lshift+0xd0>)
 800ce46:	4829      	ldr	r0, [pc, #164]	@ (800ceec <__lshift+0xd4>)
 800ce48:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ce4c:	f000 fbca 	bl	800d5e4 <__assert_func>
 800ce50:	3101      	adds	r1, #1
 800ce52:	005b      	lsls	r3, r3, #1
 800ce54:	e7ee      	b.n	800ce34 <__lshift+0x1c>
 800ce56:	2300      	movs	r3, #0
 800ce58:	f100 0114 	add.w	r1, r0, #20
 800ce5c:	f100 0210 	add.w	r2, r0, #16
 800ce60:	4618      	mov	r0, r3
 800ce62:	4553      	cmp	r3, sl
 800ce64:	db33      	blt.n	800cece <__lshift+0xb6>
 800ce66:	6920      	ldr	r0, [r4, #16]
 800ce68:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ce6c:	f104 0314 	add.w	r3, r4, #20
 800ce70:	f019 091f 	ands.w	r9, r9, #31
 800ce74:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ce78:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ce7c:	d02b      	beq.n	800ced6 <__lshift+0xbe>
 800ce7e:	f1c9 0e20 	rsb	lr, r9, #32
 800ce82:	468a      	mov	sl, r1
 800ce84:	2200      	movs	r2, #0
 800ce86:	6818      	ldr	r0, [r3, #0]
 800ce88:	fa00 f009 	lsl.w	r0, r0, r9
 800ce8c:	4310      	orrs	r0, r2
 800ce8e:	f84a 0b04 	str.w	r0, [sl], #4
 800ce92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce96:	459c      	cmp	ip, r3
 800ce98:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce9c:	d8f3      	bhi.n	800ce86 <__lshift+0x6e>
 800ce9e:	ebac 0304 	sub.w	r3, ip, r4
 800cea2:	3b15      	subs	r3, #21
 800cea4:	f023 0303 	bic.w	r3, r3, #3
 800cea8:	3304      	adds	r3, #4
 800ceaa:	f104 0015 	add.w	r0, r4, #21
 800ceae:	4560      	cmp	r0, ip
 800ceb0:	bf88      	it	hi
 800ceb2:	2304      	movhi	r3, #4
 800ceb4:	50ca      	str	r2, [r1, r3]
 800ceb6:	b10a      	cbz	r2, 800cebc <__lshift+0xa4>
 800ceb8:	f108 0602 	add.w	r6, r8, #2
 800cebc:	3e01      	subs	r6, #1
 800cebe:	4638      	mov	r0, r7
 800cec0:	612e      	str	r6, [r5, #16]
 800cec2:	4621      	mov	r1, r4
 800cec4:	f7ff fde2 	bl	800ca8c <_Bfree>
 800cec8:	4628      	mov	r0, r5
 800ceca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cece:	f842 0f04 	str.w	r0, [r2, #4]!
 800ced2:	3301      	adds	r3, #1
 800ced4:	e7c5      	b.n	800ce62 <__lshift+0x4a>
 800ced6:	3904      	subs	r1, #4
 800ced8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cedc:	f841 2f04 	str.w	r2, [r1, #4]!
 800cee0:	459c      	cmp	ip, r3
 800cee2:	d8f9      	bhi.n	800ced8 <__lshift+0xc0>
 800cee4:	e7ea      	b.n	800cebc <__lshift+0xa4>
 800cee6:	bf00      	nop
 800cee8:	0800e838 	.word	0x0800e838
 800ceec:	0800e849 	.word	0x0800e849

0800cef0 <__mcmp>:
 800cef0:	690a      	ldr	r2, [r1, #16]
 800cef2:	4603      	mov	r3, r0
 800cef4:	6900      	ldr	r0, [r0, #16]
 800cef6:	1a80      	subs	r0, r0, r2
 800cef8:	b530      	push	{r4, r5, lr}
 800cefa:	d10e      	bne.n	800cf1a <__mcmp+0x2a>
 800cefc:	3314      	adds	r3, #20
 800cefe:	3114      	adds	r1, #20
 800cf00:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cf04:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cf08:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cf0c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cf10:	4295      	cmp	r5, r2
 800cf12:	d003      	beq.n	800cf1c <__mcmp+0x2c>
 800cf14:	d205      	bcs.n	800cf22 <__mcmp+0x32>
 800cf16:	f04f 30ff 	mov.w	r0, #4294967295
 800cf1a:	bd30      	pop	{r4, r5, pc}
 800cf1c:	42a3      	cmp	r3, r4
 800cf1e:	d3f3      	bcc.n	800cf08 <__mcmp+0x18>
 800cf20:	e7fb      	b.n	800cf1a <__mcmp+0x2a>
 800cf22:	2001      	movs	r0, #1
 800cf24:	e7f9      	b.n	800cf1a <__mcmp+0x2a>
	...

0800cf28 <__mdiff>:
 800cf28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	4689      	mov	r9, r1
 800cf2e:	4606      	mov	r6, r0
 800cf30:	4611      	mov	r1, r2
 800cf32:	4648      	mov	r0, r9
 800cf34:	4614      	mov	r4, r2
 800cf36:	f7ff ffdb 	bl	800cef0 <__mcmp>
 800cf3a:	1e05      	subs	r5, r0, #0
 800cf3c:	d112      	bne.n	800cf64 <__mdiff+0x3c>
 800cf3e:	4629      	mov	r1, r5
 800cf40:	4630      	mov	r0, r6
 800cf42:	f7ff fd63 	bl	800ca0c <_Balloc>
 800cf46:	4602      	mov	r2, r0
 800cf48:	b928      	cbnz	r0, 800cf56 <__mdiff+0x2e>
 800cf4a:	4b3f      	ldr	r3, [pc, #252]	@ (800d048 <__mdiff+0x120>)
 800cf4c:	f240 2137 	movw	r1, #567	@ 0x237
 800cf50:	483e      	ldr	r0, [pc, #248]	@ (800d04c <__mdiff+0x124>)
 800cf52:	f000 fb47 	bl	800d5e4 <__assert_func>
 800cf56:	2301      	movs	r3, #1
 800cf58:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cf5c:	4610      	mov	r0, r2
 800cf5e:	b003      	add	sp, #12
 800cf60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf64:	bfbc      	itt	lt
 800cf66:	464b      	movlt	r3, r9
 800cf68:	46a1      	movlt	r9, r4
 800cf6a:	4630      	mov	r0, r6
 800cf6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cf70:	bfba      	itte	lt
 800cf72:	461c      	movlt	r4, r3
 800cf74:	2501      	movlt	r5, #1
 800cf76:	2500      	movge	r5, #0
 800cf78:	f7ff fd48 	bl	800ca0c <_Balloc>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	b918      	cbnz	r0, 800cf88 <__mdiff+0x60>
 800cf80:	4b31      	ldr	r3, [pc, #196]	@ (800d048 <__mdiff+0x120>)
 800cf82:	f240 2145 	movw	r1, #581	@ 0x245
 800cf86:	e7e3      	b.n	800cf50 <__mdiff+0x28>
 800cf88:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf8c:	6926      	ldr	r6, [r4, #16]
 800cf8e:	60c5      	str	r5, [r0, #12]
 800cf90:	f109 0310 	add.w	r3, r9, #16
 800cf94:	f109 0514 	add.w	r5, r9, #20
 800cf98:	f104 0e14 	add.w	lr, r4, #20
 800cf9c:	f100 0b14 	add.w	fp, r0, #20
 800cfa0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cfa4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cfa8:	9301      	str	r3, [sp, #4]
 800cfaa:	46d9      	mov	r9, fp
 800cfac:	f04f 0c00 	mov.w	ip, #0
 800cfb0:	9b01      	ldr	r3, [sp, #4]
 800cfb2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cfb6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cfba:	9301      	str	r3, [sp, #4]
 800cfbc:	fa1f f38a 	uxth.w	r3, sl
 800cfc0:	4619      	mov	r1, r3
 800cfc2:	b283      	uxth	r3, r0
 800cfc4:	1acb      	subs	r3, r1, r3
 800cfc6:	0c00      	lsrs	r0, r0, #16
 800cfc8:	4463      	add	r3, ip
 800cfca:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cfce:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cfd2:	b29b      	uxth	r3, r3
 800cfd4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cfd8:	4576      	cmp	r6, lr
 800cfda:	f849 3b04 	str.w	r3, [r9], #4
 800cfde:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cfe2:	d8e5      	bhi.n	800cfb0 <__mdiff+0x88>
 800cfe4:	1b33      	subs	r3, r6, r4
 800cfe6:	3b15      	subs	r3, #21
 800cfe8:	f023 0303 	bic.w	r3, r3, #3
 800cfec:	3415      	adds	r4, #21
 800cfee:	3304      	adds	r3, #4
 800cff0:	42a6      	cmp	r6, r4
 800cff2:	bf38      	it	cc
 800cff4:	2304      	movcc	r3, #4
 800cff6:	441d      	add	r5, r3
 800cff8:	445b      	add	r3, fp
 800cffa:	461e      	mov	r6, r3
 800cffc:	462c      	mov	r4, r5
 800cffe:	4544      	cmp	r4, r8
 800d000:	d30e      	bcc.n	800d020 <__mdiff+0xf8>
 800d002:	f108 0103 	add.w	r1, r8, #3
 800d006:	1b49      	subs	r1, r1, r5
 800d008:	f021 0103 	bic.w	r1, r1, #3
 800d00c:	3d03      	subs	r5, #3
 800d00e:	45a8      	cmp	r8, r5
 800d010:	bf38      	it	cc
 800d012:	2100      	movcc	r1, #0
 800d014:	440b      	add	r3, r1
 800d016:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d01a:	b191      	cbz	r1, 800d042 <__mdiff+0x11a>
 800d01c:	6117      	str	r7, [r2, #16]
 800d01e:	e79d      	b.n	800cf5c <__mdiff+0x34>
 800d020:	f854 1b04 	ldr.w	r1, [r4], #4
 800d024:	46e6      	mov	lr, ip
 800d026:	0c08      	lsrs	r0, r1, #16
 800d028:	fa1c fc81 	uxtah	ip, ip, r1
 800d02c:	4471      	add	r1, lr
 800d02e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d032:	b289      	uxth	r1, r1
 800d034:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d038:	f846 1b04 	str.w	r1, [r6], #4
 800d03c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d040:	e7dd      	b.n	800cffe <__mdiff+0xd6>
 800d042:	3f01      	subs	r7, #1
 800d044:	e7e7      	b.n	800d016 <__mdiff+0xee>
 800d046:	bf00      	nop
 800d048:	0800e838 	.word	0x0800e838
 800d04c:	0800e849 	.word	0x0800e849

0800d050 <__d2b>:
 800d050:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d054:	460f      	mov	r7, r1
 800d056:	2101      	movs	r1, #1
 800d058:	ec59 8b10 	vmov	r8, r9, d0
 800d05c:	4616      	mov	r6, r2
 800d05e:	f7ff fcd5 	bl	800ca0c <_Balloc>
 800d062:	4604      	mov	r4, r0
 800d064:	b930      	cbnz	r0, 800d074 <__d2b+0x24>
 800d066:	4602      	mov	r2, r0
 800d068:	4b23      	ldr	r3, [pc, #140]	@ (800d0f8 <__d2b+0xa8>)
 800d06a:	4824      	ldr	r0, [pc, #144]	@ (800d0fc <__d2b+0xac>)
 800d06c:	f240 310f 	movw	r1, #783	@ 0x30f
 800d070:	f000 fab8 	bl	800d5e4 <__assert_func>
 800d074:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d078:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d07c:	b10d      	cbz	r5, 800d082 <__d2b+0x32>
 800d07e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d082:	9301      	str	r3, [sp, #4]
 800d084:	f1b8 0300 	subs.w	r3, r8, #0
 800d088:	d023      	beq.n	800d0d2 <__d2b+0x82>
 800d08a:	4668      	mov	r0, sp
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	f7ff fd84 	bl	800cb9a <__lo0bits>
 800d092:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d096:	b1d0      	cbz	r0, 800d0ce <__d2b+0x7e>
 800d098:	f1c0 0320 	rsb	r3, r0, #32
 800d09c:	fa02 f303 	lsl.w	r3, r2, r3
 800d0a0:	430b      	orrs	r3, r1
 800d0a2:	40c2      	lsrs	r2, r0
 800d0a4:	6163      	str	r3, [r4, #20]
 800d0a6:	9201      	str	r2, [sp, #4]
 800d0a8:	9b01      	ldr	r3, [sp, #4]
 800d0aa:	61a3      	str	r3, [r4, #24]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	bf0c      	ite	eq
 800d0b0:	2201      	moveq	r2, #1
 800d0b2:	2202      	movne	r2, #2
 800d0b4:	6122      	str	r2, [r4, #16]
 800d0b6:	b1a5      	cbz	r5, 800d0e2 <__d2b+0x92>
 800d0b8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d0bc:	4405      	add	r5, r0
 800d0be:	603d      	str	r5, [r7, #0]
 800d0c0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d0c4:	6030      	str	r0, [r6, #0]
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	b003      	add	sp, #12
 800d0ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d0ce:	6161      	str	r1, [r4, #20]
 800d0d0:	e7ea      	b.n	800d0a8 <__d2b+0x58>
 800d0d2:	a801      	add	r0, sp, #4
 800d0d4:	f7ff fd61 	bl	800cb9a <__lo0bits>
 800d0d8:	9b01      	ldr	r3, [sp, #4]
 800d0da:	6163      	str	r3, [r4, #20]
 800d0dc:	3020      	adds	r0, #32
 800d0de:	2201      	movs	r2, #1
 800d0e0:	e7e8      	b.n	800d0b4 <__d2b+0x64>
 800d0e2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d0e6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d0ea:	6038      	str	r0, [r7, #0]
 800d0ec:	6918      	ldr	r0, [r3, #16]
 800d0ee:	f7ff fd35 	bl	800cb5c <__hi0bits>
 800d0f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d0f6:	e7e5      	b.n	800d0c4 <__d2b+0x74>
 800d0f8:	0800e838 	.word	0x0800e838
 800d0fc:	0800e849 	.word	0x0800e849

0800d100 <__sfputc_r>:
 800d100:	6893      	ldr	r3, [r2, #8]
 800d102:	3b01      	subs	r3, #1
 800d104:	2b00      	cmp	r3, #0
 800d106:	b410      	push	{r4}
 800d108:	6093      	str	r3, [r2, #8]
 800d10a:	da08      	bge.n	800d11e <__sfputc_r+0x1e>
 800d10c:	6994      	ldr	r4, [r2, #24]
 800d10e:	42a3      	cmp	r3, r4
 800d110:	db01      	blt.n	800d116 <__sfputc_r+0x16>
 800d112:	290a      	cmp	r1, #10
 800d114:	d103      	bne.n	800d11e <__sfputc_r+0x1e>
 800d116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d11a:	f7fe bca2 	b.w	800ba62 <__swbuf_r>
 800d11e:	6813      	ldr	r3, [r2, #0]
 800d120:	1c58      	adds	r0, r3, #1
 800d122:	6010      	str	r0, [r2, #0]
 800d124:	7019      	strb	r1, [r3, #0]
 800d126:	4608      	mov	r0, r1
 800d128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <__sfputs_r>:
 800d12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d130:	4606      	mov	r6, r0
 800d132:	460f      	mov	r7, r1
 800d134:	4614      	mov	r4, r2
 800d136:	18d5      	adds	r5, r2, r3
 800d138:	42ac      	cmp	r4, r5
 800d13a:	d101      	bne.n	800d140 <__sfputs_r+0x12>
 800d13c:	2000      	movs	r0, #0
 800d13e:	e007      	b.n	800d150 <__sfputs_r+0x22>
 800d140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d144:	463a      	mov	r2, r7
 800d146:	4630      	mov	r0, r6
 800d148:	f7ff ffda 	bl	800d100 <__sfputc_r>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d1f3      	bne.n	800d138 <__sfputs_r+0xa>
 800d150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d154 <_vfiprintf_r>:
 800d154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d158:	460d      	mov	r5, r1
 800d15a:	b09d      	sub	sp, #116	@ 0x74
 800d15c:	4614      	mov	r4, r2
 800d15e:	4698      	mov	r8, r3
 800d160:	4606      	mov	r6, r0
 800d162:	b118      	cbz	r0, 800d16c <_vfiprintf_r+0x18>
 800d164:	6a03      	ldr	r3, [r0, #32]
 800d166:	b90b      	cbnz	r3, 800d16c <_vfiprintf_r+0x18>
 800d168:	f7fe fb92 	bl	800b890 <__sinit>
 800d16c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d16e:	07d9      	lsls	r1, r3, #31
 800d170:	d405      	bmi.n	800d17e <_vfiprintf_r+0x2a>
 800d172:	89ab      	ldrh	r3, [r5, #12]
 800d174:	059a      	lsls	r2, r3, #22
 800d176:	d402      	bmi.n	800d17e <_vfiprintf_r+0x2a>
 800d178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d17a:	f7fe fd94 	bl	800bca6 <__retarget_lock_acquire_recursive>
 800d17e:	89ab      	ldrh	r3, [r5, #12]
 800d180:	071b      	lsls	r3, r3, #28
 800d182:	d501      	bpl.n	800d188 <_vfiprintf_r+0x34>
 800d184:	692b      	ldr	r3, [r5, #16]
 800d186:	b99b      	cbnz	r3, 800d1b0 <_vfiprintf_r+0x5c>
 800d188:	4629      	mov	r1, r5
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7fe fca8 	bl	800bae0 <__swsetup_r>
 800d190:	b170      	cbz	r0, 800d1b0 <_vfiprintf_r+0x5c>
 800d192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d194:	07dc      	lsls	r4, r3, #31
 800d196:	d504      	bpl.n	800d1a2 <_vfiprintf_r+0x4e>
 800d198:	f04f 30ff 	mov.w	r0, #4294967295
 800d19c:	b01d      	add	sp, #116	@ 0x74
 800d19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1a2:	89ab      	ldrh	r3, [r5, #12]
 800d1a4:	0598      	lsls	r0, r3, #22
 800d1a6:	d4f7      	bmi.n	800d198 <_vfiprintf_r+0x44>
 800d1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d1aa:	f7fe fd7d 	bl	800bca8 <__retarget_lock_release_recursive>
 800d1ae:	e7f3      	b.n	800d198 <_vfiprintf_r+0x44>
 800d1b0:	2300      	movs	r3, #0
 800d1b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1b4:	2320      	movs	r3, #32
 800d1b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800d1be:	2330      	movs	r3, #48	@ 0x30
 800d1c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d370 <_vfiprintf_r+0x21c>
 800d1c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d1c8:	f04f 0901 	mov.w	r9, #1
 800d1cc:	4623      	mov	r3, r4
 800d1ce:	469a      	mov	sl, r3
 800d1d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d1d4:	b10a      	cbz	r2, 800d1da <_vfiprintf_r+0x86>
 800d1d6:	2a25      	cmp	r2, #37	@ 0x25
 800d1d8:	d1f9      	bne.n	800d1ce <_vfiprintf_r+0x7a>
 800d1da:	ebba 0b04 	subs.w	fp, sl, r4
 800d1de:	d00b      	beq.n	800d1f8 <_vfiprintf_r+0xa4>
 800d1e0:	465b      	mov	r3, fp
 800d1e2:	4622      	mov	r2, r4
 800d1e4:	4629      	mov	r1, r5
 800d1e6:	4630      	mov	r0, r6
 800d1e8:	f7ff ffa1 	bl	800d12e <__sfputs_r>
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	f000 80a7 	beq.w	800d340 <_vfiprintf_r+0x1ec>
 800d1f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1f4:	445a      	add	r2, fp
 800d1f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f000 809f 	beq.w	800d340 <_vfiprintf_r+0x1ec>
 800d202:	2300      	movs	r3, #0
 800d204:	f04f 32ff 	mov.w	r2, #4294967295
 800d208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d20c:	f10a 0a01 	add.w	sl, sl, #1
 800d210:	9304      	str	r3, [sp, #16]
 800d212:	9307      	str	r3, [sp, #28]
 800d214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d218:	931a      	str	r3, [sp, #104]	@ 0x68
 800d21a:	4654      	mov	r4, sl
 800d21c:	2205      	movs	r2, #5
 800d21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d222:	4853      	ldr	r0, [pc, #332]	@ (800d370 <_vfiprintf_r+0x21c>)
 800d224:	f7f2 ffe4 	bl	80001f0 <memchr>
 800d228:	9a04      	ldr	r2, [sp, #16]
 800d22a:	b9d8      	cbnz	r0, 800d264 <_vfiprintf_r+0x110>
 800d22c:	06d1      	lsls	r1, r2, #27
 800d22e:	bf44      	itt	mi
 800d230:	2320      	movmi	r3, #32
 800d232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d236:	0713      	lsls	r3, r2, #28
 800d238:	bf44      	itt	mi
 800d23a:	232b      	movmi	r3, #43	@ 0x2b
 800d23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d240:	f89a 3000 	ldrb.w	r3, [sl]
 800d244:	2b2a      	cmp	r3, #42	@ 0x2a
 800d246:	d015      	beq.n	800d274 <_vfiprintf_r+0x120>
 800d248:	9a07      	ldr	r2, [sp, #28]
 800d24a:	4654      	mov	r4, sl
 800d24c:	2000      	movs	r0, #0
 800d24e:	f04f 0c0a 	mov.w	ip, #10
 800d252:	4621      	mov	r1, r4
 800d254:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d258:	3b30      	subs	r3, #48	@ 0x30
 800d25a:	2b09      	cmp	r3, #9
 800d25c:	d94b      	bls.n	800d2f6 <_vfiprintf_r+0x1a2>
 800d25e:	b1b0      	cbz	r0, 800d28e <_vfiprintf_r+0x13a>
 800d260:	9207      	str	r2, [sp, #28]
 800d262:	e014      	b.n	800d28e <_vfiprintf_r+0x13a>
 800d264:	eba0 0308 	sub.w	r3, r0, r8
 800d268:	fa09 f303 	lsl.w	r3, r9, r3
 800d26c:	4313      	orrs	r3, r2
 800d26e:	9304      	str	r3, [sp, #16]
 800d270:	46a2      	mov	sl, r4
 800d272:	e7d2      	b.n	800d21a <_vfiprintf_r+0xc6>
 800d274:	9b03      	ldr	r3, [sp, #12]
 800d276:	1d19      	adds	r1, r3, #4
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	9103      	str	r1, [sp, #12]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	bfbb      	ittet	lt
 800d280:	425b      	neglt	r3, r3
 800d282:	f042 0202 	orrlt.w	r2, r2, #2
 800d286:	9307      	strge	r3, [sp, #28]
 800d288:	9307      	strlt	r3, [sp, #28]
 800d28a:	bfb8      	it	lt
 800d28c:	9204      	strlt	r2, [sp, #16]
 800d28e:	7823      	ldrb	r3, [r4, #0]
 800d290:	2b2e      	cmp	r3, #46	@ 0x2e
 800d292:	d10a      	bne.n	800d2aa <_vfiprintf_r+0x156>
 800d294:	7863      	ldrb	r3, [r4, #1]
 800d296:	2b2a      	cmp	r3, #42	@ 0x2a
 800d298:	d132      	bne.n	800d300 <_vfiprintf_r+0x1ac>
 800d29a:	9b03      	ldr	r3, [sp, #12]
 800d29c:	1d1a      	adds	r2, r3, #4
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	9203      	str	r2, [sp, #12]
 800d2a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d2a6:	3402      	adds	r4, #2
 800d2a8:	9305      	str	r3, [sp, #20]
 800d2aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d380 <_vfiprintf_r+0x22c>
 800d2ae:	7821      	ldrb	r1, [r4, #0]
 800d2b0:	2203      	movs	r2, #3
 800d2b2:	4650      	mov	r0, sl
 800d2b4:	f7f2 ff9c 	bl	80001f0 <memchr>
 800d2b8:	b138      	cbz	r0, 800d2ca <_vfiprintf_r+0x176>
 800d2ba:	9b04      	ldr	r3, [sp, #16]
 800d2bc:	eba0 000a 	sub.w	r0, r0, sl
 800d2c0:	2240      	movs	r2, #64	@ 0x40
 800d2c2:	4082      	lsls	r2, r0
 800d2c4:	4313      	orrs	r3, r2
 800d2c6:	3401      	adds	r4, #1
 800d2c8:	9304      	str	r3, [sp, #16]
 800d2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d2ce:	4829      	ldr	r0, [pc, #164]	@ (800d374 <_vfiprintf_r+0x220>)
 800d2d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d2d4:	2206      	movs	r2, #6
 800d2d6:	f7f2 ff8b 	bl	80001f0 <memchr>
 800d2da:	2800      	cmp	r0, #0
 800d2dc:	d03f      	beq.n	800d35e <_vfiprintf_r+0x20a>
 800d2de:	4b26      	ldr	r3, [pc, #152]	@ (800d378 <_vfiprintf_r+0x224>)
 800d2e0:	bb1b      	cbnz	r3, 800d32a <_vfiprintf_r+0x1d6>
 800d2e2:	9b03      	ldr	r3, [sp, #12]
 800d2e4:	3307      	adds	r3, #7
 800d2e6:	f023 0307 	bic.w	r3, r3, #7
 800d2ea:	3308      	adds	r3, #8
 800d2ec:	9303      	str	r3, [sp, #12]
 800d2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2f0:	443b      	add	r3, r7
 800d2f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2f4:	e76a      	b.n	800d1cc <_vfiprintf_r+0x78>
 800d2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2fa:	460c      	mov	r4, r1
 800d2fc:	2001      	movs	r0, #1
 800d2fe:	e7a8      	b.n	800d252 <_vfiprintf_r+0xfe>
 800d300:	2300      	movs	r3, #0
 800d302:	3401      	adds	r4, #1
 800d304:	9305      	str	r3, [sp, #20]
 800d306:	4619      	mov	r1, r3
 800d308:	f04f 0c0a 	mov.w	ip, #10
 800d30c:	4620      	mov	r0, r4
 800d30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d312:	3a30      	subs	r2, #48	@ 0x30
 800d314:	2a09      	cmp	r2, #9
 800d316:	d903      	bls.n	800d320 <_vfiprintf_r+0x1cc>
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d0c6      	beq.n	800d2aa <_vfiprintf_r+0x156>
 800d31c:	9105      	str	r1, [sp, #20]
 800d31e:	e7c4      	b.n	800d2aa <_vfiprintf_r+0x156>
 800d320:	fb0c 2101 	mla	r1, ip, r1, r2
 800d324:	4604      	mov	r4, r0
 800d326:	2301      	movs	r3, #1
 800d328:	e7f0      	b.n	800d30c <_vfiprintf_r+0x1b8>
 800d32a:	ab03      	add	r3, sp, #12
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	462a      	mov	r2, r5
 800d330:	4b12      	ldr	r3, [pc, #72]	@ (800d37c <_vfiprintf_r+0x228>)
 800d332:	a904      	add	r1, sp, #16
 800d334:	4630      	mov	r0, r6
 800d336:	f7fd fe69 	bl	800b00c <_printf_float>
 800d33a:	4607      	mov	r7, r0
 800d33c:	1c78      	adds	r0, r7, #1
 800d33e:	d1d6      	bne.n	800d2ee <_vfiprintf_r+0x19a>
 800d340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d342:	07d9      	lsls	r1, r3, #31
 800d344:	d405      	bmi.n	800d352 <_vfiprintf_r+0x1fe>
 800d346:	89ab      	ldrh	r3, [r5, #12]
 800d348:	059a      	lsls	r2, r3, #22
 800d34a:	d402      	bmi.n	800d352 <_vfiprintf_r+0x1fe>
 800d34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d34e:	f7fe fcab 	bl	800bca8 <__retarget_lock_release_recursive>
 800d352:	89ab      	ldrh	r3, [r5, #12]
 800d354:	065b      	lsls	r3, r3, #25
 800d356:	f53f af1f 	bmi.w	800d198 <_vfiprintf_r+0x44>
 800d35a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d35c:	e71e      	b.n	800d19c <_vfiprintf_r+0x48>
 800d35e:	ab03      	add	r3, sp, #12
 800d360:	9300      	str	r3, [sp, #0]
 800d362:	462a      	mov	r2, r5
 800d364:	4b05      	ldr	r3, [pc, #20]	@ (800d37c <_vfiprintf_r+0x228>)
 800d366:	a904      	add	r1, sp, #16
 800d368:	4630      	mov	r0, r6
 800d36a:	f7fe f8e7 	bl	800b53c <_printf_i>
 800d36e:	e7e4      	b.n	800d33a <_vfiprintf_r+0x1e6>
 800d370:	0800e8a2 	.word	0x0800e8a2
 800d374:	0800e8ac 	.word	0x0800e8ac
 800d378:	0800b00d 	.word	0x0800b00d
 800d37c:	0800d12f 	.word	0x0800d12f
 800d380:	0800e8a8 	.word	0x0800e8a8

0800d384 <__sflush_r>:
 800d384:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d38c:	0716      	lsls	r6, r2, #28
 800d38e:	4605      	mov	r5, r0
 800d390:	460c      	mov	r4, r1
 800d392:	d454      	bmi.n	800d43e <__sflush_r+0xba>
 800d394:	684b      	ldr	r3, [r1, #4]
 800d396:	2b00      	cmp	r3, #0
 800d398:	dc02      	bgt.n	800d3a0 <__sflush_r+0x1c>
 800d39a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	dd48      	ble.n	800d432 <__sflush_r+0xae>
 800d3a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3a2:	2e00      	cmp	r6, #0
 800d3a4:	d045      	beq.n	800d432 <__sflush_r+0xae>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d3ac:	682f      	ldr	r7, [r5, #0]
 800d3ae:	6a21      	ldr	r1, [r4, #32]
 800d3b0:	602b      	str	r3, [r5, #0]
 800d3b2:	d030      	beq.n	800d416 <__sflush_r+0x92>
 800d3b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d3b6:	89a3      	ldrh	r3, [r4, #12]
 800d3b8:	0759      	lsls	r1, r3, #29
 800d3ba:	d505      	bpl.n	800d3c8 <__sflush_r+0x44>
 800d3bc:	6863      	ldr	r3, [r4, #4]
 800d3be:	1ad2      	subs	r2, r2, r3
 800d3c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d3c2:	b10b      	cbz	r3, 800d3c8 <__sflush_r+0x44>
 800d3c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d3c6:	1ad2      	subs	r2, r2, r3
 800d3c8:	2300      	movs	r3, #0
 800d3ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d3cc:	6a21      	ldr	r1, [r4, #32]
 800d3ce:	4628      	mov	r0, r5
 800d3d0:	47b0      	blx	r6
 800d3d2:	1c43      	adds	r3, r0, #1
 800d3d4:	89a3      	ldrh	r3, [r4, #12]
 800d3d6:	d106      	bne.n	800d3e6 <__sflush_r+0x62>
 800d3d8:	6829      	ldr	r1, [r5, #0]
 800d3da:	291d      	cmp	r1, #29
 800d3dc:	d82b      	bhi.n	800d436 <__sflush_r+0xb2>
 800d3de:	4a2a      	ldr	r2, [pc, #168]	@ (800d488 <__sflush_r+0x104>)
 800d3e0:	40ca      	lsrs	r2, r1
 800d3e2:	07d6      	lsls	r6, r2, #31
 800d3e4:	d527      	bpl.n	800d436 <__sflush_r+0xb2>
 800d3e6:	2200      	movs	r2, #0
 800d3e8:	6062      	str	r2, [r4, #4]
 800d3ea:	04d9      	lsls	r1, r3, #19
 800d3ec:	6922      	ldr	r2, [r4, #16]
 800d3ee:	6022      	str	r2, [r4, #0]
 800d3f0:	d504      	bpl.n	800d3fc <__sflush_r+0x78>
 800d3f2:	1c42      	adds	r2, r0, #1
 800d3f4:	d101      	bne.n	800d3fa <__sflush_r+0x76>
 800d3f6:	682b      	ldr	r3, [r5, #0]
 800d3f8:	b903      	cbnz	r3, 800d3fc <__sflush_r+0x78>
 800d3fa:	6560      	str	r0, [r4, #84]	@ 0x54
 800d3fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d3fe:	602f      	str	r7, [r5, #0]
 800d400:	b1b9      	cbz	r1, 800d432 <__sflush_r+0xae>
 800d402:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d406:	4299      	cmp	r1, r3
 800d408:	d002      	beq.n	800d410 <__sflush_r+0x8c>
 800d40a:	4628      	mov	r0, r5
 800d40c:	f7ff fab4 	bl	800c978 <_free_r>
 800d410:	2300      	movs	r3, #0
 800d412:	6363      	str	r3, [r4, #52]	@ 0x34
 800d414:	e00d      	b.n	800d432 <__sflush_r+0xae>
 800d416:	2301      	movs	r3, #1
 800d418:	4628      	mov	r0, r5
 800d41a:	47b0      	blx	r6
 800d41c:	4602      	mov	r2, r0
 800d41e:	1c50      	adds	r0, r2, #1
 800d420:	d1c9      	bne.n	800d3b6 <__sflush_r+0x32>
 800d422:	682b      	ldr	r3, [r5, #0]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d0c6      	beq.n	800d3b6 <__sflush_r+0x32>
 800d428:	2b1d      	cmp	r3, #29
 800d42a:	d001      	beq.n	800d430 <__sflush_r+0xac>
 800d42c:	2b16      	cmp	r3, #22
 800d42e:	d11e      	bne.n	800d46e <__sflush_r+0xea>
 800d430:	602f      	str	r7, [r5, #0]
 800d432:	2000      	movs	r0, #0
 800d434:	e022      	b.n	800d47c <__sflush_r+0xf8>
 800d436:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d43a:	b21b      	sxth	r3, r3
 800d43c:	e01b      	b.n	800d476 <__sflush_r+0xf2>
 800d43e:	690f      	ldr	r7, [r1, #16]
 800d440:	2f00      	cmp	r7, #0
 800d442:	d0f6      	beq.n	800d432 <__sflush_r+0xae>
 800d444:	0793      	lsls	r3, r2, #30
 800d446:	680e      	ldr	r6, [r1, #0]
 800d448:	bf08      	it	eq
 800d44a:	694b      	ldreq	r3, [r1, #20]
 800d44c:	600f      	str	r7, [r1, #0]
 800d44e:	bf18      	it	ne
 800d450:	2300      	movne	r3, #0
 800d452:	eba6 0807 	sub.w	r8, r6, r7
 800d456:	608b      	str	r3, [r1, #8]
 800d458:	f1b8 0f00 	cmp.w	r8, #0
 800d45c:	dde9      	ble.n	800d432 <__sflush_r+0xae>
 800d45e:	6a21      	ldr	r1, [r4, #32]
 800d460:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d462:	4643      	mov	r3, r8
 800d464:	463a      	mov	r2, r7
 800d466:	4628      	mov	r0, r5
 800d468:	47b0      	blx	r6
 800d46a:	2800      	cmp	r0, #0
 800d46c:	dc08      	bgt.n	800d480 <__sflush_r+0xfc>
 800d46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d472:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d476:	81a3      	strh	r3, [r4, #12]
 800d478:	f04f 30ff 	mov.w	r0, #4294967295
 800d47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d480:	4407      	add	r7, r0
 800d482:	eba8 0800 	sub.w	r8, r8, r0
 800d486:	e7e7      	b.n	800d458 <__sflush_r+0xd4>
 800d488:	20400001 	.word	0x20400001

0800d48c <_fflush_r>:
 800d48c:	b538      	push	{r3, r4, r5, lr}
 800d48e:	690b      	ldr	r3, [r1, #16]
 800d490:	4605      	mov	r5, r0
 800d492:	460c      	mov	r4, r1
 800d494:	b913      	cbnz	r3, 800d49c <_fflush_r+0x10>
 800d496:	2500      	movs	r5, #0
 800d498:	4628      	mov	r0, r5
 800d49a:	bd38      	pop	{r3, r4, r5, pc}
 800d49c:	b118      	cbz	r0, 800d4a6 <_fflush_r+0x1a>
 800d49e:	6a03      	ldr	r3, [r0, #32]
 800d4a0:	b90b      	cbnz	r3, 800d4a6 <_fflush_r+0x1a>
 800d4a2:	f7fe f9f5 	bl	800b890 <__sinit>
 800d4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d0f3      	beq.n	800d496 <_fflush_r+0xa>
 800d4ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d4b0:	07d0      	lsls	r0, r2, #31
 800d4b2:	d404      	bmi.n	800d4be <_fflush_r+0x32>
 800d4b4:	0599      	lsls	r1, r3, #22
 800d4b6:	d402      	bmi.n	800d4be <_fflush_r+0x32>
 800d4b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4ba:	f7fe fbf4 	bl	800bca6 <__retarget_lock_acquire_recursive>
 800d4be:	4628      	mov	r0, r5
 800d4c0:	4621      	mov	r1, r4
 800d4c2:	f7ff ff5f 	bl	800d384 <__sflush_r>
 800d4c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d4c8:	07da      	lsls	r2, r3, #31
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	d4e4      	bmi.n	800d498 <_fflush_r+0xc>
 800d4ce:	89a3      	ldrh	r3, [r4, #12]
 800d4d0:	059b      	lsls	r3, r3, #22
 800d4d2:	d4e1      	bmi.n	800d498 <_fflush_r+0xc>
 800d4d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d4d6:	f7fe fbe7 	bl	800bca8 <__retarget_lock_release_recursive>
 800d4da:	e7dd      	b.n	800d498 <_fflush_r+0xc>

0800d4dc <__swhatbuf_r>:
 800d4dc:	b570      	push	{r4, r5, r6, lr}
 800d4de:	460c      	mov	r4, r1
 800d4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d4e4:	2900      	cmp	r1, #0
 800d4e6:	b096      	sub	sp, #88	@ 0x58
 800d4e8:	4615      	mov	r5, r2
 800d4ea:	461e      	mov	r6, r3
 800d4ec:	da0d      	bge.n	800d50a <__swhatbuf_r+0x2e>
 800d4ee:	89a3      	ldrh	r3, [r4, #12]
 800d4f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d4f4:	f04f 0100 	mov.w	r1, #0
 800d4f8:	bf14      	ite	ne
 800d4fa:	2340      	movne	r3, #64	@ 0x40
 800d4fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d500:	2000      	movs	r0, #0
 800d502:	6031      	str	r1, [r6, #0]
 800d504:	602b      	str	r3, [r5, #0]
 800d506:	b016      	add	sp, #88	@ 0x58
 800d508:	bd70      	pop	{r4, r5, r6, pc}
 800d50a:	466a      	mov	r2, sp
 800d50c:	f000 f848 	bl	800d5a0 <_fstat_r>
 800d510:	2800      	cmp	r0, #0
 800d512:	dbec      	blt.n	800d4ee <__swhatbuf_r+0x12>
 800d514:	9901      	ldr	r1, [sp, #4]
 800d516:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d51a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d51e:	4259      	negs	r1, r3
 800d520:	4159      	adcs	r1, r3
 800d522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d526:	e7eb      	b.n	800d500 <__swhatbuf_r+0x24>

0800d528 <__smakebuf_r>:
 800d528:	898b      	ldrh	r3, [r1, #12]
 800d52a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d52c:	079d      	lsls	r5, r3, #30
 800d52e:	4606      	mov	r6, r0
 800d530:	460c      	mov	r4, r1
 800d532:	d507      	bpl.n	800d544 <__smakebuf_r+0x1c>
 800d534:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d538:	6023      	str	r3, [r4, #0]
 800d53a:	6123      	str	r3, [r4, #16]
 800d53c:	2301      	movs	r3, #1
 800d53e:	6163      	str	r3, [r4, #20]
 800d540:	b003      	add	sp, #12
 800d542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d544:	ab01      	add	r3, sp, #4
 800d546:	466a      	mov	r2, sp
 800d548:	f7ff ffc8 	bl	800d4dc <__swhatbuf_r>
 800d54c:	9f00      	ldr	r7, [sp, #0]
 800d54e:	4605      	mov	r5, r0
 800d550:	4639      	mov	r1, r7
 800d552:	4630      	mov	r0, r6
 800d554:	f7fd fc2e 	bl	800adb4 <_malloc_r>
 800d558:	b948      	cbnz	r0, 800d56e <__smakebuf_r+0x46>
 800d55a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d55e:	059a      	lsls	r2, r3, #22
 800d560:	d4ee      	bmi.n	800d540 <__smakebuf_r+0x18>
 800d562:	f023 0303 	bic.w	r3, r3, #3
 800d566:	f043 0302 	orr.w	r3, r3, #2
 800d56a:	81a3      	strh	r3, [r4, #12]
 800d56c:	e7e2      	b.n	800d534 <__smakebuf_r+0xc>
 800d56e:	89a3      	ldrh	r3, [r4, #12]
 800d570:	6020      	str	r0, [r4, #0]
 800d572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d576:	81a3      	strh	r3, [r4, #12]
 800d578:	9b01      	ldr	r3, [sp, #4]
 800d57a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d57e:	b15b      	cbz	r3, 800d598 <__smakebuf_r+0x70>
 800d580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d584:	4630      	mov	r0, r6
 800d586:	f000 f81d 	bl	800d5c4 <_isatty_r>
 800d58a:	b128      	cbz	r0, 800d598 <__smakebuf_r+0x70>
 800d58c:	89a3      	ldrh	r3, [r4, #12]
 800d58e:	f023 0303 	bic.w	r3, r3, #3
 800d592:	f043 0301 	orr.w	r3, r3, #1
 800d596:	81a3      	strh	r3, [r4, #12]
 800d598:	89a3      	ldrh	r3, [r4, #12]
 800d59a:	431d      	orrs	r5, r3
 800d59c:	81a5      	strh	r5, [r4, #12]
 800d59e:	e7cf      	b.n	800d540 <__smakebuf_r+0x18>

0800d5a0 <_fstat_r>:
 800d5a0:	b538      	push	{r3, r4, r5, lr}
 800d5a2:	4d07      	ldr	r5, [pc, #28]	@ (800d5c0 <_fstat_r+0x20>)
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	4604      	mov	r4, r0
 800d5a8:	4608      	mov	r0, r1
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	602b      	str	r3, [r5, #0]
 800d5ae:	f7f5 faf9 	bl	8002ba4 <_fstat>
 800d5b2:	1c43      	adds	r3, r0, #1
 800d5b4:	d102      	bne.n	800d5bc <_fstat_r+0x1c>
 800d5b6:	682b      	ldr	r3, [r5, #0]
 800d5b8:	b103      	cbz	r3, 800d5bc <_fstat_r+0x1c>
 800d5ba:	6023      	str	r3, [r4, #0]
 800d5bc:	bd38      	pop	{r3, r4, r5, pc}
 800d5be:	bf00      	nop
 800d5c0:	20026458 	.word	0x20026458

0800d5c4 <_isatty_r>:
 800d5c4:	b538      	push	{r3, r4, r5, lr}
 800d5c6:	4d06      	ldr	r5, [pc, #24]	@ (800d5e0 <_isatty_r+0x1c>)
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	4604      	mov	r4, r0
 800d5cc:	4608      	mov	r0, r1
 800d5ce:	602b      	str	r3, [r5, #0]
 800d5d0:	f7f5 faf8 	bl	8002bc4 <_isatty>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_isatty_r+0x1a>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_isatty_r+0x1a>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	20026458 	.word	0x20026458

0800d5e4 <__assert_func>:
 800d5e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d5e6:	4614      	mov	r4, r2
 800d5e8:	461a      	mov	r2, r3
 800d5ea:	4b09      	ldr	r3, [pc, #36]	@ (800d610 <__assert_func+0x2c>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	4605      	mov	r5, r0
 800d5f0:	68d8      	ldr	r0, [r3, #12]
 800d5f2:	b14c      	cbz	r4, 800d608 <__assert_func+0x24>
 800d5f4:	4b07      	ldr	r3, [pc, #28]	@ (800d614 <__assert_func+0x30>)
 800d5f6:	9100      	str	r1, [sp, #0]
 800d5f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d5fc:	4906      	ldr	r1, [pc, #24]	@ (800d618 <__assert_func+0x34>)
 800d5fe:	462b      	mov	r3, r5
 800d600:	f000 f842 	bl	800d688 <fiprintf>
 800d604:	f000 f852 	bl	800d6ac <abort>
 800d608:	4b04      	ldr	r3, [pc, #16]	@ (800d61c <__assert_func+0x38>)
 800d60a:	461c      	mov	r4, r3
 800d60c:	e7f3      	b.n	800d5f6 <__assert_func+0x12>
 800d60e:	bf00      	nop
 800d610:	20000020 	.word	0x20000020
 800d614:	0800e8bd 	.word	0x0800e8bd
 800d618:	0800e8ca 	.word	0x0800e8ca
 800d61c:	0800e8f8 	.word	0x0800e8f8

0800d620 <_calloc_r>:
 800d620:	b570      	push	{r4, r5, r6, lr}
 800d622:	fba1 5402 	umull	r5, r4, r1, r2
 800d626:	b934      	cbnz	r4, 800d636 <_calloc_r+0x16>
 800d628:	4629      	mov	r1, r5
 800d62a:	f7fd fbc3 	bl	800adb4 <_malloc_r>
 800d62e:	4606      	mov	r6, r0
 800d630:	b928      	cbnz	r0, 800d63e <_calloc_r+0x1e>
 800d632:	4630      	mov	r0, r6
 800d634:	bd70      	pop	{r4, r5, r6, pc}
 800d636:	220c      	movs	r2, #12
 800d638:	6002      	str	r2, [r0, #0]
 800d63a:	2600      	movs	r6, #0
 800d63c:	e7f9      	b.n	800d632 <_calloc_r+0x12>
 800d63e:	462a      	mov	r2, r5
 800d640:	4621      	mov	r1, r4
 800d642:	f7fe faa3 	bl	800bb8c <memset>
 800d646:	e7f4      	b.n	800d632 <_calloc_r+0x12>

0800d648 <__ascii_mbtowc>:
 800d648:	b082      	sub	sp, #8
 800d64a:	b901      	cbnz	r1, 800d64e <__ascii_mbtowc+0x6>
 800d64c:	a901      	add	r1, sp, #4
 800d64e:	b142      	cbz	r2, 800d662 <__ascii_mbtowc+0x1a>
 800d650:	b14b      	cbz	r3, 800d666 <__ascii_mbtowc+0x1e>
 800d652:	7813      	ldrb	r3, [r2, #0]
 800d654:	600b      	str	r3, [r1, #0]
 800d656:	7812      	ldrb	r2, [r2, #0]
 800d658:	1e10      	subs	r0, r2, #0
 800d65a:	bf18      	it	ne
 800d65c:	2001      	movne	r0, #1
 800d65e:	b002      	add	sp, #8
 800d660:	4770      	bx	lr
 800d662:	4610      	mov	r0, r2
 800d664:	e7fb      	b.n	800d65e <__ascii_mbtowc+0x16>
 800d666:	f06f 0001 	mvn.w	r0, #1
 800d66a:	e7f8      	b.n	800d65e <__ascii_mbtowc+0x16>

0800d66c <__ascii_wctomb>:
 800d66c:	4603      	mov	r3, r0
 800d66e:	4608      	mov	r0, r1
 800d670:	b141      	cbz	r1, 800d684 <__ascii_wctomb+0x18>
 800d672:	2aff      	cmp	r2, #255	@ 0xff
 800d674:	d904      	bls.n	800d680 <__ascii_wctomb+0x14>
 800d676:	228a      	movs	r2, #138	@ 0x8a
 800d678:	601a      	str	r2, [r3, #0]
 800d67a:	f04f 30ff 	mov.w	r0, #4294967295
 800d67e:	4770      	bx	lr
 800d680:	700a      	strb	r2, [r1, #0]
 800d682:	2001      	movs	r0, #1
 800d684:	4770      	bx	lr
	...

0800d688 <fiprintf>:
 800d688:	b40e      	push	{r1, r2, r3}
 800d68a:	b503      	push	{r0, r1, lr}
 800d68c:	4601      	mov	r1, r0
 800d68e:	ab03      	add	r3, sp, #12
 800d690:	4805      	ldr	r0, [pc, #20]	@ (800d6a8 <fiprintf+0x20>)
 800d692:	f853 2b04 	ldr.w	r2, [r3], #4
 800d696:	6800      	ldr	r0, [r0, #0]
 800d698:	9301      	str	r3, [sp, #4]
 800d69a:	f7ff fd5b 	bl	800d154 <_vfiprintf_r>
 800d69e:	b002      	add	sp, #8
 800d6a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d6a4:	b003      	add	sp, #12
 800d6a6:	4770      	bx	lr
 800d6a8:	20000020 	.word	0x20000020

0800d6ac <abort>:
 800d6ac:	b508      	push	{r3, lr}
 800d6ae:	2006      	movs	r0, #6
 800d6b0:	f000 f82c 	bl	800d70c <raise>
 800d6b4:	2001      	movs	r0, #1
 800d6b6:	f7f5 fa41 	bl	8002b3c <_exit>

0800d6ba <_raise_r>:
 800d6ba:	291f      	cmp	r1, #31
 800d6bc:	b538      	push	{r3, r4, r5, lr}
 800d6be:	4605      	mov	r5, r0
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	d904      	bls.n	800d6ce <_raise_r+0x14>
 800d6c4:	2316      	movs	r3, #22
 800d6c6:	6003      	str	r3, [r0, #0]
 800d6c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d6cc:	bd38      	pop	{r3, r4, r5, pc}
 800d6ce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d6d0:	b112      	cbz	r2, 800d6d8 <_raise_r+0x1e>
 800d6d2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d6d6:	b94b      	cbnz	r3, 800d6ec <_raise_r+0x32>
 800d6d8:	4628      	mov	r0, r5
 800d6da:	f000 f831 	bl	800d740 <_getpid_r>
 800d6de:	4622      	mov	r2, r4
 800d6e0:	4601      	mov	r1, r0
 800d6e2:	4628      	mov	r0, r5
 800d6e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d6e8:	f000 b818 	b.w	800d71c <_kill_r>
 800d6ec:	2b01      	cmp	r3, #1
 800d6ee:	d00a      	beq.n	800d706 <_raise_r+0x4c>
 800d6f0:	1c59      	adds	r1, r3, #1
 800d6f2:	d103      	bne.n	800d6fc <_raise_r+0x42>
 800d6f4:	2316      	movs	r3, #22
 800d6f6:	6003      	str	r3, [r0, #0]
 800d6f8:	2001      	movs	r0, #1
 800d6fa:	e7e7      	b.n	800d6cc <_raise_r+0x12>
 800d6fc:	2100      	movs	r1, #0
 800d6fe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d702:	4620      	mov	r0, r4
 800d704:	4798      	blx	r3
 800d706:	2000      	movs	r0, #0
 800d708:	e7e0      	b.n	800d6cc <_raise_r+0x12>
	...

0800d70c <raise>:
 800d70c:	4b02      	ldr	r3, [pc, #8]	@ (800d718 <raise+0xc>)
 800d70e:	4601      	mov	r1, r0
 800d710:	6818      	ldr	r0, [r3, #0]
 800d712:	f7ff bfd2 	b.w	800d6ba <_raise_r>
 800d716:	bf00      	nop
 800d718:	20000020 	.word	0x20000020

0800d71c <_kill_r>:
 800d71c:	b538      	push	{r3, r4, r5, lr}
 800d71e:	4d07      	ldr	r5, [pc, #28]	@ (800d73c <_kill_r+0x20>)
 800d720:	2300      	movs	r3, #0
 800d722:	4604      	mov	r4, r0
 800d724:	4608      	mov	r0, r1
 800d726:	4611      	mov	r1, r2
 800d728:	602b      	str	r3, [r5, #0]
 800d72a:	f7f5 f9f7 	bl	8002b1c <_kill>
 800d72e:	1c43      	adds	r3, r0, #1
 800d730:	d102      	bne.n	800d738 <_kill_r+0x1c>
 800d732:	682b      	ldr	r3, [r5, #0]
 800d734:	b103      	cbz	r3, 800d738 <_kill_r+0x1c>
 800d736:	6023      	str	r3, [r4, #0]
 800d738:	bd38      	pop	{r3, r4, r5, pc}
 800d73a:	bf00      	nop
 800d73c:	20026458 	.word	0x20026458

0800d740 <_getpid_r>:
 800d740:	f7f5 b9e4 	b.w	8002b0c <_getpid>

0800d744 <pow>:
 800d744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d746:	ed2d 8b02 	vpush	{d8}
 800d74a:	eeb0 8a40 	vmov.f32	s16, s0
 800d74e:	eef0 8a60 	vmov.f32	s17, s1
 800d752:	ec55 4b11 	vmov	r4, r5, d1
 800d756:	f000 f873 	bl	800d840 <__ieee754_pow>
 800d75a:	4622      	mov	r2, r4
 800d75c:	462b      	mov	r3, r5
 800d75e:	4620      	mov	r0, r4
 800d760:	4629      	mov	r1, r5
 800d762:	ec57 6b10 	vmov	r6, r7, d0
 800d766:	f7f3 f9f1 	bl	8000b4c <__aeabi_dcmpun>
 800d76a:	2800      	cmp	r0, #0
 800d76c:	d13b      	bne.n	800d7e6 <pow+0xa2>
 800d76e:	ec51 0b18 	vmov	r0, r1, d8
 800d772:	2200      	movs	r2, #0
 800d774:	2300      	movs	r3, #0
 800d776:	f7f3 f9b7 	bl	8000ae8 <__aeabi_dcmpeq>
 800d77a:	b1b8      	cbz	r0, 800d7ac <pow+0x68>
 800d77c:	2200      	movs	r2, #0
 800d77e:	2300      	movs	r3, #0
 800d780:	4620      	mov	r0, r4
 800d782:	4629      	mov	r1, r5
 800d784:	f7f3 f9b0 	bl	8000ae8 <__aeabi_dcmpeq>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d146      	bne.n	800d81a <pow+0xd6>
 800d78c:	ec45 4b10 	vmov	d0, r4, r5
 800d790:	f000 f848 	bl	800d824 <finite>
 800d794:	b338      	cbz	r0, 800d7e6 <pow+0xa2>
 800d796:	2200      	movs	r2, #0
 800d798:	2300      	movs	r3, #0
 800d79a:	4620      	mov	r0, r4
 800d79c:	4629      	mov	r1, r5
 800d79e:	f7f3 f9ad 	bl	8000afc <__aeabi_dcmplt>
 800d7a2:	b300      	cbz	r0, 800d7e6 <pow+0xa2>
 800d7a4:	f7fe fa54 	bl	800bc50 <__errno>
 800d7a8:	2322      	movs	r3, #34	@ 0x22
 800d7aa:	e01b      	b.n	800d7e4 <pow+0xa0>
 800d7ac:	ec47 6b10 	vmov	d0, r6, r7
 800d7b0:	f000 f838 	bl	800d824 <finite>
 800d7b4:	b9e0      	cbnz	r0, 800d7f0 <pow+0xac>
 800d7b6:	eeb0 0a48 	vmov.f32	s0, s16
 800d7ba:	eef0 0a68 	vmov.f32	s1, s17
 800d7be:	f000 f831 	bl	800d824 <finite>
 800d7c2:	b1a8      	cbz	r0, 800d7f0 <pow+0xac>
 800d7c4:	ec45 4b10 	vmov	d0, r4, r5
 800d7c8:	f000 f82c 	bl	800d824 <finite>
 800d7cc:	b180      	cbz	r0, 800d7f0 <pow+0xac>
 800d7ce:	4632      	mov	r2, r6
 800d7d0:	463b      	mov	r3, r7
 800d7d2:	4630      	mov	r0, r6
 800d7d4:	4639      	mov	r1, r7
 800d7d6:	f7f3 f9b9 	bl	8000b4c <__aeabi_dcmpun>
 800d7da:	2800      	cmp	r0, #0
 800d7dc:	d0e2      	beq.n	800d7a4 <pow+0x60>
 800d7de:	f7fe fa37 	bl	800bc50 <__errno>
 800d7e2:	2321      	movs	r3, #33	@ 0x21
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	ecbd 8b02 	vpop	{d8}
 800d7ea:	ec47 6b10 	vmov	d0, r6, r7
 800d7ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	4630      	mov	r0, r6
 800d7f6:	4639      	mov	r1, r7
 800d7f8:	f7f3 f976 	bl	8000ae8 <__aeabi_dcmpeq>
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d0f2      	beq.n	800d7e6 <pow+0xa2>
 800d800:	eeb0 0a48 	vmov.f32	s0, s16
 800d804:	eef0 0a68 	vmov.f32	s1, s17
 800d808:	f000 f80c 	bl	800d824 <finite>
 800d80c:	2800      	cmp	r0, #0
 800d80e:	d0ea      	beq.n	800d7e6 <pow+0xa2>
 800d810:	ec45 4b10 	vmov	d0, r4, r5
 800d814:	f000 f806 	bl	800d824 <finite>
 800d818:	e7c3      	b.n	800d7a2 <pow+0x5e>
 800d81a:	4f01      	ldr	r7, [pc, #4]	@ (800d820 <pow+0xdc>)
 800d81c:	2600      	movs	r6, #0
 800d81e:	e7e2      	b.n	800d7e6 <pow+0xa2>
 800d820:	3ff00000 	.word	0x3ff00000

0800d824 <finite>:
 800d824:	b082      	sub	sp, #8
 800d826:	ed8d 0b00 	vstr	d0, [sp]
 800d82a:	9801      	ldr	r0, [sp, #4]
 800d82c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800d830:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800d834:	0fc0      	lsrs	r0, r0, #31
 800d836:	b002      	add	sp, #8
 800d838:	4770      	bx	lr
 800d83a:	0000      	movs	r0, r0
 800d83c:	0000      	movs	r0, r0
	...

0800d840 <__ieee754_pow>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	b091      	sub	sp, #68	@ 0x44
 800d846:	ed8d 1b00 	vstr	d1, [sp]
 800d84a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800d84e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800d852:	ea5a 0001 	orrs.w	r0, sl, r1
 800d856:	ec57 6b10 	vmov	r6, r7, d0
 800d85a:	d113      	bne.n	800d884 <__ieee754_pow+0x44>
 800d85c:	19b3      	adds	r3, r6, r6
 800d85e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800d862:	4152      	adcs	r2, r2
 800d864:	4298      	cmp	r0, r3
 800d866:	4b9a      	ldr	r3, [pc, #616]	@ (800dad0 <__ieee754_pow+0x290>)
 800d868:	4193      	sbcs	r3, r2
 800d86a:	f080 84ee 	bcs.w	800e24a <__ieee754_pow+0xa0a>
 800d86e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d872:	4630      	mov	r0, r6
 800d874:	4639      	mov	r1, r7
 800d876:	f7f2 fd19 	bl	80002ac <__adddf3>
 800d87a:	ec41 0b10 	vmov	d0, r0, r1
 800d87e:	b011      	add	sp, #68	@ 0x44
 800d880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d884:	4a93      	ldr	r2, [pc, #588]	@ (800dad4 <__ieee754_pow+0x294>)
 800d886:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 800d88a:	4295      	cmp	r5, r2
 800d88c:	46b8      	mov	r8, r7
 800d88e:	4633      	mov	r3, r6
 800d890:	d80a      	bhi.n	800d8a8 <__ieee754_pow+0x68>
 800d892:	d104      	bne.n	800d89e <__ieee754_pow+0x5e>
 800d894:	2e00      	cmp	r6, #0
 800d896:	d1ea      	bne.n	800d86e <__ieee754_pow+0x2e>
 800d898:	45aa      	cmp	sl, r5
 800d89a:	d8e8      	bhi.n	800d86e <__ieee754_pow+0x2e>
 800d89c:	e001      	b.n	800d8a2 <__ieee754_pow+0x62>
 800d89e:	4592      	cmp	sl, r2
 800d8a0:	d802      	bhi.n	800d8a8 <__ieee754_pow+0x68>
 800d8a2:	4592      	cmp	sl, r2
 800d8a4:	d10f      	bne.n	800d8c6 <__ieee754_pow+0x86>
 800d8a6:	b171      	cbz	r1, 800d8c6 <__ieee754_pow+0x86>
 800d8a8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800d8ac:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800d8b0:	ea58 0803 	orrs.w	r8, r8, r3
 800d8b4:	d1db      	bne.n	800d86e <__ieee754_pow+0x2e>
 800d8b6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d8ba:	18db      	adds	r3, r3, r3
 800d8bc:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800d8c0:	4152      	adcs	r2, r2
 800d8c2:	4598      	cmp	r8, r3
 800d8c4:	e7cf      	b.n	800d866 <__ieee754_pow+0x26>
 800d8c6:	f1b8 0f00 	cmp.w	r8, #0
 800d8ca:	46ab      	mov	fp, r5
 800d8cc:	da43      	bge.n	800d956 <__ieee754_pow+0x116>
 800d8ce:	4a82      	ldr	r2, [pc, #520]	@ (800dad8 <__ieee754_pow+0x298>)
 800d8d0:	4592      	cmp	sl, r2
 800d8d2:	d856      	bhi.n	800d982 <__ieee754_pow+0x142>
 800d8d4:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800d8d8:	4592      	cmp	sl, r2
 800d8da:	f240 84c5 	bls.w	800e268 <__ieee754_pow+0xa28>
 800d8de:	ea4f 522a 	mov.w	r2, sl, asr #20
 800d8e2:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800d8e6:	2a14      	cmp	r2, #20
 800d8e8:	dd18      	ble.n	800d91c <__ieee754_pow+0xdc>
 800d8ea:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800d8ee:	fa21 f402 	lsr.w	r4, r1, r2
 800d8f2:	fa04 f202 	lsl.w	r2, r4, r2
 800d8f6:	428a      	cmp	r2, r1
 800d8f8:	f040 84b6 	bne.w	800e268 <__ieee754_pow+0xa28>
 800d8fc:	f004 0401 	and.w	r4, r4, #1
 800d900:	f1c4 0402 	rsb	r4, r4, #2
 800d904:	2900      	cmp	r1, #0
 800d906:	d159      	bne.n	800d9bc <__ieee754_pow+0x17c>
 800d908:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800d90c:	d148      	bne.n	800d9a0 <__ieee754_pow+0x160>
 800d90e:	4632      	mov	r2, r6
 800d910:	463b      	mov	r3, r7
 800d912:	4630      	mov	r0, r6
 800d914:	4639      	mov	r1, r7
 800d916:	f7f2 fe7f 	bl	8000618 <__aeabi_dmul>
 800d91a:	e7ae      	b.n	800d87a <__ieee754_pow+0x3a>
 800d91c:	2900      	cmp	r1, #0
 800d91e:	d14c      	bne.n	800d9ba <__ieee754_pow+0x17a>
 800d920:	f1c2 0214 	rsb	r2, r2, #20
 800d924:	fa4a f402 	asr.w	r4, sl, r2
 800d928:	fa04 f202 	lsl.w	r2, r4, r2
 800d92c:	4552      	cmp	r2, sl
 800d92e:	f040 8498 	bne.w	800e262 <__ieee754_pow+0xa22>
 800d932:	f004 0401 	and.w	r4, r4, #1
 800d936:	f1c4 0402 	rsb	r4, r4, #2
 800d93a:	4a68      	ldr	r2, [pc, #416]	@ (800dadc <__ieee754_pow+0x29c>)
 800d93c:	4592      	cmp	sl, r2
 800d93e:	d1e3      	bne.n	800d908 <__ieee754_pow+0xc8>
 800d940:	f1b9 0f00 	cmp.w	r9, #0
 800d944:	f280 8489 	bge.w	800e25a <__ieee754_pow+0xa1a>
 800d948:	4964      	ldr	r1, [pc, #400]	@ (800dadc <__ieee754_pow+0x29c>)
 800d94a:	4632      	mov	r2, r6
 800d94c:	463b      	mov	r3, r7
 800d94e:	2000      	movs	r0, #0
 800d950:	f7f2 ff8c 	bl	800086c <__aeabi_ddiv>
 800d954:	e791      	b.n	800d87a <__ieee754_pow+0x3a>
 800d956:	2400      	movs	r4, #0
 800d958:	bb81      	cbnz	r1, 800d9bc <__ieee754_pow+0x17c>
 800d95a:	4a5e      	ldr	r2, [pc, #376]	@ (800dad4 <__ieee754_pow+0x294>)
 800d95c:	4592      	cmp	sl, r2
 800d95e:	d1ec      	bne.n	800d93a <__ieee754_pow+0xfa>
 800d960:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800d964:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800d968:	431a      	orrs	r2, r3
 800d96a:	f000 846e 	beq.w	800e24a <__ieee754_pow+0xa0a>
 800d96e:	4b5c      	ldr	r3, [pc, #368]	@ (800dae0 <__ieee754_pow+0x2a0>)
 800d970:	429d      	cmp	r5, r3
 800d972:	d908      	bls.n	800d986 <__ieee754_pow+0x146>
 800d974:	f1b9 0f00 	cmp.w	r9, #0
 800d978:	f280 846b 	bge.w	800e252 <__ieee754_pow+0xa12>
 800d97c:	2000      	movs	r0, #0
 800d97e:	2100      	movs	r1, #0
 800d980:	e77b      	b.n	800d87a <__ieee754_pow+0x3a>
 800d982:	2402      	movs	r4, #2
 800d984:	e7e8      	b.n	800d958 <__ieee754_pow+0x118>
 800d986:	f1b9 0f00 	cmp.w	r9, #0
 800d98a:	f04f 0000 	mov.w	r0, #0
 800d98e:	f04f 0100 	mov.w	r1, #0
 800d992:	f6bf af72 	bge.w	800d87a <__ieee754_pow+0x3a>
 800d996:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d99a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800d99e:	e76c      	b.n	800d87a <__ieee754_pow+0x3a>
 800d9a0:	4a50      	ldr	r2, [pc, #320]	@ (800dae4 <__ieee754_pow+0x2a4>)
 800d9a2:	4591      	cmp	r9, r2
 800d9a4:	d10a      	bne.n	800d9bc <__ieee754_pow+0x17c>
 800d9a6:	f1b8 0f00 	cmp.w	r8, #0
 800d9aa:	db07      	blt.n	800d9bc <__ieee754_pow+0x17c>
 800d9ac:	ec47 6b10 	vmov	d0, r6, r7
 800d9b0:	b011      	add	sp, #68	@ 0x44
 800d9b2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9b6:	f000 bd4f 	b.w	800e458 <__ieee754_sqrt>
 800d9ba:	2400      	movs	r4, #0
 800d9bc:	ec47 6b10 	vmov	d0, r6, r7
 800d9c0:	9302      	str	r3, [sp, #8]
 800d9c2:	f000 fc87 	bl	800e2d4 <fabs>
 800d9c6:	9b02      	ldr	r3, [sp, #8]
 800d9c8:	ec51 0b10 	vmov	r0, r1, d0
 800d9cc:	bb43      	cbnz	r3, 800da20 <__ieee754_pow+0x1e0>
 800d9ce:	4b43      	ldr	r3, [pc, #268]	@ (800dadc <__ieee754_pow+0x29c>)
 800d9d0:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d000      	beq.n	800d9da <__ieee754_pow+0x19a>
 800d9d8:	bb15      	cbnz	r5, 800da20 <__ieee754_pow+0x1e0>
 800d9da:	f1b9 0f00 	cmp.w	r9, #0
 800d9de:	da05      	bge.n	800d9ec <__ieee754_pow+0x1ac>
 800d9e0:	4602      	mov	r2, r0
 800d9e2:	460b      	mov	r3, r1
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	493d      	ldr	r1, [pc, #244]	@ (800dadc <__ieee754_pow+0x29c>)
 800d9e8:	f7f2 ff40 	bl	800086c <__aeabi_ddiv>
 800d9ec:	f1b8 0f00 	cmp.w	r8, #0
 800d9f0:	f6bf af43 	bge.w	800d87a <__ieee754_pow+0x3a>
 800d9f4:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800d9f8:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800d9fc:	4325      	orrs	r5, r4
 800d9fe:	d108      	bne.n	800da12 <__ieee754_pow+0x1d2>
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	4610      	mov	r0, r2
 800da06:	4619      	mov	r1, r3
 800da08:	f7f2 fc4e 	bl	80002a8 <__aeabi_dsub>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	e79e      	b.n	800d950 <__ieee754_pow+0x110>
 800da12:	2c01      	cmp	r4, #1
 800da14:	f47f af31 	bne.w	800d87a <__ieee754_pow+0x3a>
 800da18:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800da1c:	4619      	mov	r1, r3
 800da1e:	e72c      	b.n	800d87a <__ieee754_pow+0x3a>
 800da20:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800da24:	3b01      	subs	r3, #1
 800da26:	ea53 0204 	orrs.w	r2, r3, r4
 800da2a:	d102      	bne.n	800da32 <__ieee754_pow+0x1f2>
 800da2c:	4632      	mov	r2, r6
 800da2e:	463b      	mov	r3, r7
 800da30:	e7e8      	b.n	800da04 <__ieee754_pow+0x1c4>
 800da32:	3c01      	subs	r4, #1
 800da34:	431c      	orrs	r4, r3
 800da36:	d016      	beq.n	800da66 <__ieee754_pow+0x226>
 800da38:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dac0 <__ieee754_pow+0x280>
 800da3c:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800da40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800da44:	f240 8110 	bls.w	800dc68 <__ieee754_pow+0x428>
 800da48:	4b27      	ldr	r3, [pc, #156]	@ (800dae8 <__ieee754_pow+0x2a8>)
 800da4a:	459a      	cmp	sl, r3
 800da4c:	4b24      	ldr	r3, [pc, #144]	@ (800dae0 <__ieee754_pow+0x2a0>)
 800da4e:	d916      	bls.n	800da7e <__ieee754_pow+0x23e>
 800da50:	429d      	cmp	r5, r3
 800da52:	d80b      	bhi.n	800da6c <__ieee754_pow+0x22c>
 800da54:	f1b9 0f00 	cmp.w	r9, #0
 800da58:	da0b      	bge.n	800da72 <__ieee754_pow+0x232>
 800da5a:	2000      	movs	r0, #0
 800da5c:	b011      	add	sp, #68	@ 0x44
 800da5e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da62:	f000 bcf1 	b.w	800e448 <__math_oflow>
 800da66:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 800dac8 <__ieee754_pow+0x288>
 800da6a:	e7e7      	b.n	800da3c <__ieee754_pow+0x1fc>
 800da6c:	f1b9 0f00 	cmp.w	r9, #0
 800da70:	dcf3      	bgt.n	800da5a <__ieee754_pow+0x21a>
 800da72:	2000      	movs	r0, #0
 800da74:	b011      	add	sp, #68	@ 0x44
 800da76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7a:	f000 bcdd 	b.w	800e438 <__math_uflow>
 800da7e:	429d      	cmp	r5, r3
 800da80:	d20c      	bcs.n	800da9c <__ieee754_pow+0x25c>
 800da82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800da86:	2200      	movs	r2, #0
 800da88:	2300      	movs	r3, #0
 800da8a:	f7f3 f837 	bl	8000afc <__aeabi_dcmplt>
 800da8e:	3800      	subs	r0, #0
 800da90:	bf18      	it	ne
 800da92:	2001      	movne	r0, #1
 800da94:	f1b9 0f00 	cmp.w	r9, #0
 800da98:	daec      	bge.n	800da74 <__ieee754_pow+0x234>
 800da9a:	e7df      	b.n	800da5c <__ieee754_pow+0x21c>
 800da9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dadc <__ieee754_pow+0x29c>)
 800da9e:	429d      	cmp	r5, r3
 800daa0:	f04f 0200 	mov.w	r2, #0
 800daa4:	d922      	bls.n	800daec <__ieee754_pow+0x2ac>
 800daa6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800daaa:	2300      	movs	r3, #0
 800daac:	f7f3 f826 	bl	8000afc <__aeabi_dcmplt>
 800dab0:	3800      	subs	r0, #0
 800dab2:	bf18      	it	ne
 800dab4:	2001      	movne	r0, #1
 800dab6:	f1b9 0f00 	cmp.w	r9, #0
 800daba:	dccf      	bgt.n	800da5c <__ieee754_pow+0x21c>
 800dabc:	e7da      	b.n	800da74 <__ieee754_pow+0x234>
 800dabe:	bf00      	nop
 800dac0:	00000000 	.word	0x00000000
 800dac4:	3ff00000 	.word	0x3ff00000
 800dac8:	00000000 	.word	0x00000000
 800dacc:	bff00000 	.word	0xbff00000
 800dad0:	fff00000 	.word	0xfff00000
 800dad4:	7ff00000 	.word	0x7ff00000
 800dad8:	433fffff 	.word	0x433fffff
 800dadc:	3ff00000 	.word	0x3ff00000
 800dae0:	3fefffff 	.word	0x3fefffff
 800dae4:	3fe00000 	.word	0x3fe00000
 800dae8:	43f00000 	.word	0x43f00000
 800daec:	4b5a      	ldr	r3, [pc, #360]	@ (800dc58 <__ieee754_pow+0x418>)
 800daee:	f7f2 fbdb 	bl	80002a8 <__aeabi_dsub>
 800daf2:	a351      	add	r3, pc, #324	@ (adr r3, 800dc38 <__ieee754_pow+0x3f8>)
 800daf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daf8:	4604      	mov	r4, r0
 800dafa:	460d      	mov	r5, r1
 800dafc:	f7f2 fd8c 	bl	8000618 <__aeabi_dmul>
 800db00:	a34f      	add	r3, pc, #316	@ (adr r3, 800dc40 <__ieee754_pow+0x400>)
 800db02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db06:	4606      	mov	r6, r0
 800db08:	460f      	mov	r7, r1
 800db0a:	4620      	mov	r0, r4
 800db0c:	4629      	mov	r1, r5
 800db0e:	f7f2 fd83 	bl	8000618 <__aeabi_dmul>
 800db12:	4b52      	ldr	r3, [pc, #328]	@ (800dc5c <__ieee754_pow+0x41c>)
 800db14:	4682      	mov	sl, r0
 800db16:	468b      	mov	fp, r1
 800db18:	2200      	movs	r2, #0
 800db1a:	4620      	mov	r0, r4
 800db1c:	4629      	mov	r1, r5
 800db1e:	f7f2 fd7b 	bl	8000618 <__aeabi_dmul>
 800db22:	4602      	mov	r2, r0
 800db24:	460b      	mov	r3, r1
 800db26:	a148      	add	r1, pc, #288	@ (adr r1, 800dc48 <__ieee754_pow+0x408>)
 800db28:	e9d1 0100 	ldrd	r0, r1, [r1]
 800db2c:	f7f2 fbbc 	bl	80002a8 <__aeabi_dsub>
 800db30:	4622      	mov	r2, r4
 800db32:	462b      	mov	r3, r5
 800db34:	f7f2 fd70 	bl	8000618 <__aeabi_dmul>
 800db38:	4602      	mov	r2, r0
 800db3a:	460b      	mov	r3, r1
 800db3c:	2000      	movs	r0, #0
 800db3e:	4948      	ldr	r1, [pc, #288]	@ (800dc60 <__ieee754_pow+0x420>)
 800db40:	f7f2 fbb2 	bl	80002a8 <__aeabi_dsub>
 800db44:	4622      	mov	r2, r4
 800db46:	4680      	mov	r8, r0
 800db48:	4689      	mov	r9, r1
 800db4a:	462b      	mov	r3, r5
 800db4c:	4620      	mov	r0, r4
 800db4e:	4629      	mov	r1, r5
 800db50:	f7f2 fd62 	bl	8000618 <__aeabi_dmul>
 800db54:	4602      	mov	r2, r0
 800db56:	460b      	mov	r3, r1
 800db58:	4640      	mov	r0, r8
 800db5a:	4649      	mov	r1, r9
 800db5c:	f7f2 fd5c 	bl	8000618 <__aeabi_dmul>
 800db60:	a33b      	add	r3, pc, #236	@ (adr r3, 800dc50 <__ieee754_pow+0x410>)
 800db62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db66:	f7f2 fd57 	bl	8000618 <__aeabi_dmul>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	4650      	mov	r0, sl
 800db70:	4659      	mov	r1, fp
 800db72:	f7f2 fb99 	bl	80002a8 <__aeabi_dsub>
 800db76:	4602      	mov	r2, r0
 800db78:	460b      	mov	r3, r1
 800db7a:	4680      	mov	r8, r0
 800db7c:	4689      	mov	r9, r1
 800db7e:	4630      	mov	r0, r6
 800db80:	4639      	mov	r1, r7
 800db82:	f7f2 fb93 	bl	80002ac <__adddf3>
 800db86:	2400      	movs	r4, #0
 800db88:	4632      	mov	r2, r6
 800db8a:	463b      	mov	r3, r7
 800db8c:	4620      	mov	r0, r4
 800db8e:	460d      	mov	r5, r1
 800db90:	f7f2 fb8a 	bl	80002a8 <__aeabi_dsub>
 800db94:	4602      	mov	r2, r0
 800db96:	460b      	mov	r3, r1
 800db98:	4640      	mov	r0, r8
 800db9a:	4649      	mov	r1, r9
 800db9c:	f7f2 fb84 	bl	80002a8 <__aeabi_dsub>
 800dba0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dba4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dba8:	2300      	movs	r3, #0
 800dbaa:	9304      	str	r3, [sp, #16]
 800dbac:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	460f      	mov	r7, r1
 800dbb4:	465b      	mov	r3, fp
 800dbb6:	4652      	mov	r2, sl
 800dbb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbbc:	f7f2 fb74 	bl	80002a8 <__aeabi_dsub>
 800dbc0:	4622      	mov	r2, r4
 800dbc2:	462b      	mov	r3, r5
 800dbc4:	f7f2 fd28 	bl	8000618 <__aeabi_dmul>
 800dbc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dbcc:	4680      	mov	r8, r0
 800dbce:	4689      	mov	r9, r1
 800dbd0:	4630      	mov	r0, r6
 800dbd2:	4639      	mov	r1, r7
 800dbd4:	f7f2 fd20 	bl	8000618 <__aeabi_dmul>
 800dbd8:	4602      	mov	r2, r0
 800dbda:	460b      	mov	r3, r1
 800dbdc:	4640      	mov	r0, r8
 800dbde:	4649      	mov	r1, r9
 800dbe0:	f7f2 fb64 	bl	80002ac <__adddf3>
 800dbe4:	465b      	mov	r3, fp
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460f      	mov	r7, r1
 800dbea:	4652      	mov	r2, sl
 800dbec:	4620      	mov	r0, r4
 800dbee:	4629      	mov	r1, r5
 800dbf0:	f7f2 fd12 	bl	8000618 <__aeabi_dmul>
 800dbf4:	460b      	mov	r3, r1
 800dbf6:	4602      	mov	r2, r0
 800dbf8:	4680      	mov	r8, r0
 800dbfa:	4689      	mov	r9, r1
 800dbfc:	4630      	mov	r0, r6
 800dbfe:	4639      	mov	r1, r7
 800dc00:	f7f2 fb54 	bl	80002ac <__adddf3>
 800dc04:	4b17      	ldr	r3, [pc, #92]	@ (800dc64 <__ieee754_pow+0x424>)
 800dc06:	4299      	cmp	r1, r3
 800dc08:	4604      	mov	r4, r0
 800dc0a:	460d      	mov	r5, r1
 800dc0c:	468b      	mov	fp, r1
 800dc0e:	f340 820b 	ble.w	800e028 <__ieee754_pow+0x7e8>
 800dc12:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800dc16:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800dc1a:	4303      	orrs	r3, r0
 800dc1c:	f000 81ea 	beq.w	800dff4 <__ieee754_pow+0x7b4>
 800dc20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800dc24:	2200      	movs	r2, #0
 800dc26:	2300      	movs	r3, #0
 800dc28:	f7f2 ff68 	bl	8000afc <__aeabi_dcmplt>
 800dc2c:	3800      	subs	r0, #0
 800dc2e:	bf18      	it	ne
 800dc30:	2001      	movne	r0, #1
 800dc32:	e713      	b.n	800da5c <__ieee754_pow+0x21c>
 800dc34:	f3af 8000 	nop.w
 800dc38:	60000000 	.word	0x60000000
 800dc3c:	3ff71547 	.word	0x3ff71547
 800dc40:	f85ddf44 	.word	0xf85ddf44
 800dc44:	3e54ae0b 	.word	0x3e54ae0b
 800dc48:	55555555 	.word	0x55555555
 800dc4c:	3fd55555 	.word	0x3fd55555
 800dc50:	652b82fe 	.word	0x652b82fe
 800dc54:	3ff71547 	.word	0x3ff71547
 800dc58:	3ff00000 	.word	0x3ff00000
 800dc5c:	3fd00000 	.word	0x3fd00000
 800dc60:	3fe00000 	.word	0x3fe00000
 800dc64:	408fffff 	.word	0x408fffff
 800dc68:	4bd5      	ldr	r3, [pc, #852]	@ (800dfc0 <__ieee754_pow+0x780>)
 800dc6a:	ea08 0303 	and.w	r3, r8, r3
 800dc6e:	2200      	movs	r2, #0
 800dc70:	b92b      	cbnz	r3, 800dc7e <__ieee754_pow+0x43e>
 800dc72:	4bd4      	ldr	r3, [pc, #848]	@ (800dfc4 <__ieee754_pow+0x784>)
 800dc74:	f7f2 fcd0 	bl	8000618 <__aeabi_dmul>
 800dc78:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800dc7c:	468b      	mov	fp, r1
 800dc7e:	ea4f 532b 	mov.w	r3, fp, asr #20
 800dc82:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800dc86:	4413      	add	r3, r2
 800dc88:	930a      	str	r3, [sp, #40]	@ 0x28
 800dc8a:	4bcf      	ldr	r3, [pc, #828]	@ (800dfc8 <__ieee754_pow+0x788>)
 800dc8c:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800dc90:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800dc94:	459b      	cmp	fp, r3
 800dc96:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800dc9a:	dd08      	ble.n	800dcae <__ieee754_pow+0x46e>
 800dc9c:	4bcb      	ldr	r3, [pc, #812]	@ (800dfcc <__ieee754_pow+0x78c>)
 800dc9e:	459b      	cmp	fp, r3
 800dca0:	f340 81a5 	ble.w	800dfee <__ieee754_pow+0x7ae>
 800dca4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dca6:	3301      	adds	r3, #1
 800dca8:	930a      	str	r3, [sp, #40]	@ 0x28
 800dcaa:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800dcae:	f04f 0a00 	mov.w	sl, #0
 800dcb2:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800dcb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dcb8:	4bc5      	ldr	r3, [pc, #788]	@ (800dfd0 <__ieee754_pow+0x790>)
 800dcba:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dcbe:	ed93 7b00 	vldr	d7, [r3]
 800dcc2:	4629      	mov	r1, r5
 800dcc4:	ec53 2b17 	vmov	r2, r3, d7
 800dcc8:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dccc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dcd0:	f7f2 faea 	bl	80002a8 <__aeabi_dsub>
 800dcd4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800dcd8:	4606      	mov	r6, r0
 800dcda:	460f      	mov	r7, r1
 800dcdc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dce0:	f7f2 fae4 	bl	80002ac <__adddf3>
 800dce4:	4602      	mov	r2, r0
 800dce6:	460b      	mov	r3, r1
 800dce8:	2000      	movs	r0, #0
 800dcea:	49ba      	ldr	r1, [pc, #744]	@ (800dfd4 <__ieee754_pow+0x794>)
 800dcec:	f7f2 fdbe 	bl	800086c <__aeabi_ddiv>
 800dcf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800dcf4:	4602      	mov	r2, r0
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	4639      	mov	r1, r7
 800dcfc:	f7f2 fc8c 	bl	8000618 <__aeabi_dmul>
 800dd00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dd04:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800dd08:	106d      	asrs	r5, r5, #1
 800dd0a:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800dd0e:	f04f 0b00 	mov.w	fp, #0
 800dd12:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800dd16:	4661      	mov	r1, ip
 800dd18:	2200      	movs	r2, #0
 800dd1a:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800dd1e:	4658      	mov	r0, fp
 800dd20:	46e1      	mov	r9, ip
 800dd22:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800dd26:	4614      	mov	r4, r2
 800dd28:	461d      	mov	r5, r3
 800dd2a:	f7f2 fc75 	bl	8000618 <__aeabi_dmul>
 800dd2e:	4602      	mov	r2, r0
 800dd30:	460b      	mov	r3, r1
 800dd32:	4630      	mov	r0, r6
 800dd34:	4639      	mov	r1, r7
 800dd36:	f7f2 fab7 	bl	80002a8 <__aeabi_dsub>
 800dd3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dd3e:	4606      	mov	r6, r0
 800dd40:	460f      	mov	r7, r1
 800dd42:	4620      	mov	r0, r4
 800dd44:	4629      	mov	r1, r5
 800dd46:	f7f2 faaf 	bl	80002a8 <__aeabi_dsub>
 800dd4a:	4602      	mov	r2, r0
 800dd4c:	460b      	mov	r3, r1
 800dd4e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd52:	f7f2 faa9 	bl	80002a8 <__aeabi_dsub>
 800dd56:	465a      	mov	r2, fp
 800dd58:	464b      	mov	r3, r9
 800dd5a:	f7f2 fc5d 	bl	8000618 <__aeabi_dmul>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	460b      	mov	r3, r1
 800dd62:	4630      	mov	r0, r6
 800dd64:	4639      	mov	r1, r7
 800dd66:	f7f2 fa9f 	bl	80002a8 <__aeabi_dsub>
 800dd6a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800dd6e:	f7f2 fc53 	bl	8000618 <__aeabi_dmul>
 800dd72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dd76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dd7a:	4610      	mov	r0, r2
 800dd7c:	4619      	mov	r1, r3
 800dd7e:	f7f2 fc4b 	bl	8000618 <__aeabi_dmul>
 800dd82:	a37d      	add	r3, pc, #500	@ (adr r3, 800df78 <__ieee754_pow+0x738>)
 800dd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd88:	4604      	mov	r4, r0
 800dd8a:	460d      	mov	r5, r1
 800dd8c:	f7f2 fc44 	bl	8000618 <__aeabi_dmul>
 800dd90:	a37b      	add	r3, pc, #492	@ (adr r3, 800df80 <__ieee754_pow+0x740>)
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	f7f2 fa89 	bl	80002ac <__adddf3>
 800dd9a:	4622      	mov	r2, r4
 800dd9c:	462b      	mov	r3, r5
 800dd9e:	f7f2 fc3b 	bl	8000618 <__aeabi_dmul>
 800dda2:	a379      	add	r3, pc, #484	@ (adr r3, 800df88 <__ieee754_pow+0x748>)
 800dda4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dda8:	f7f2 fa80 	bl	80002ac <__adddf3>
 800ddac:	4622      	mov	r2, r4
 800ddae:	462b      	mov	r3, r5
 800ddb0:	f7f2 fc32 	bl	8000618 <__aeabi_dmul>
 800ddb4:	a376      	add	r3, pc, #472	@ (adr r3, 800df90 <__ieee754_pow+0x750>)
 800ddb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddba:	f7f2 fa77 	bl	80002ac <__adddf3>
 800ddbe:	4622      	mov	r2, r4
 800ddc0:	462b      	mov	r3, r5
 800ddc2:	f7f2 fc29 	bl	8000618 <__aeabi_dmul>
 800ddc6:	a374      	add	r3, pc, #464	@ (adr r3, 800df98 <__ieee754_pow+0x758>)
 800ddc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddcc:	f7f2 fa6e 	bl	80002ac <__adddf3>
 800ddd0:	4622      	mov	r2, r4
 800ddd2:	462b      	mov	r3, r5
 800ddd4:	f7f2 fc20 	bl	8000618 <__aeabi_dmul>
 800ddd8:	a371      	add	r3, pc, #452	@ (adr r3, 800dfa0 <__ieee754_pow+0x760>)
 800ddda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddde:	f7f2 fa65 	bl	80002ac <__adddf3>
 800dde2:	4622      	mov	r2, r4
 800dde4:	4606      	mov	r6, r0
 800dde6:	460f      	mov	r7, r1
 800dde8:	462b      	mov	r3, r5
 800ddea:	4620      	mov	r0, r4
 800ddec:	4629      	mov	r1, r5
 800ddee:	f7f2 fc13 	bl	8000618 <__aeabi_dmul>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	460b      	mov	r3, r1
 800ddf6:	4630      	mov	r0, r6
 800ddf8:	4639      	mov	r1, r7
 800ddfa:	f7f2 fc0d 	bl	8000618 <__aeabi_dmul>
 800ddfe:	465a      	mov	r2, fp
 800de00:	4604      	mov	r4, r0
 800de02:	460d      	mov	r5, r1
 800de04:	464b      	mov	r3, r9
 800de06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800de0a:	f7f2 fa4f 	bl	80002ac <__adddf3>
 800de0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800de12:	f7f2 fc01 	bl	8000618 <__aeabi_dmul>
 800de16:	4622      	mov	r2, r4
 800de18:	462b      	mov	r3, r5
 800de1a:	f7f2 fa47 	bl	80002ac <__adddf3>
 800de1e:	465a      	mov	r2, fp
 800de20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de24:	464b      	mov	r3, r9
 800de26:	4658      	mov	r0, fp
 800de28:	4649      	mov	r1, r9
 800de2a:	f7f2 fbf5 	bl	8000618 <__aeabi_dmul>
 800de2e:	4b6a      	ldr	r3, [pc, #424]	@ (800dfd8 <__ieee754_pow+0x798>)
 800de30:	2200      	movs	r2, #0
 800de32:	4606      	mov	r6, r0
 800de34:	460f      	mov	r7, r1
 800de36:	f7f2 fa39 	bl	80002ac <__adddf3>
 800de3a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800de3e:	f7f2 fa35 	bl	80002ac <__adddf3>
 800de42:	46d8      	mov	r8, fp
 800de44:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800de48:	460d      	mov	r5, r1
 800de4a:	465a      	mov	r2, fp
 800de4c:	460b      	mov	r3, r1
 800de4e:	4640      	mov	r0, r8
 800de50:	4649      	mov	r1, r9
 800de52:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800de56:	f7f2 fbdf 	bl	8000618 <__aeabi_dmul>
 800de5a:	465c      	mov	r4, fp
 800de5c:	4680      	mov	r8, r0
 800de5e:	4689      	mov	r9, r1
 800de60:	4b5d      	ldr	r3, [pc, #372]	@ (800dfd8 <__ieee754_pow+0x798>)
 800de62:	2200      	movs	r2, #0
 800de64:	4620      	mov	r0, r4
 800de66:	4629      	mov	r1, r5
 800de68:	f7f2 fa1e 	bl	80002a8 <__aeabi_dsub>
 800de6c:	4632      	mov	r2, r6
 800de6e:	463b      	mov	r3, r7
 800de70:	f7f2 fa1a 	bl	80002a8 <__aeabi_dsub>
 800de74:	4602      	mov	r2, r0
 800de76:	460b      	mov	r3, r1
 800de78:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800de7c:	f7f2 fa14 	bl	80002a8 <__aeabi_dsub>
 800de80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de84:	f7f2 fbc8 	bl	8000618 <__aeabi_dmul>
 800de88:	4622      	mov	r2, r4
 800de8a:	4606      	mov	r6, r0
 800de8c:	460f      	mov	r7, r1
 800de8e:	462b      	mov	r3, r5
 800de90:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800de94:	f7f2 fbc0 	bl	8000618 <__aeabi_dmul>
 800de98:	4602      	mov	r2, r0
 800de9a:	460b      	mov	r3, r1
 800de9c:	4630      	mov	r0, r6
 800de9e:	4639      	mov	r1, r7
 800dea0:	f7f2 fa04 	bl	80002ac <__adddf3>
 800dea4:	4606      	mov	r6, r0
 800dea6:	460f      	mov	r7, r1
 800dea8:	4602      	mov	r2, r0
 800deaa:	460b      	mov	r3, r1
 800deac:	4640      	mov	r0, r8
 800deae:	4649      	mov	r1, r9
 800deb0:	f7f2 f9fc 	bl	80002ac <__adddf3>
 800deb4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800deb8:	a33b      	add	r3, pc, #236	@ (adr r3, 800dfa8 <__ieee754_pow+0x768>)
 800deba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debe:	4658      	mov	r0, fp
 800dec0:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800dec4:	460d      	mov	r5, r1
 800dec6:	f7f2 fba7 	bl	8000618 <__aeabi_dmul>
 800deca:	465c      	mov	r4, fp
 800decc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ded0:	4642      	mov	r2, r8
 800ded2:	464b      	mov	r3, r9
 800ded4:	4620      	mov	r0, r4
 800ded6:	4629      	mov	r1, r5
 800ded8:	f7f2 f9e6 	bl	80002a8 <__aeabi_dsub>
 800dedc:	4602      	mov	r2, r0
 800dede:	460b      	mov	r3, r1
 800dee0:	4630      	mov	r0, r6
 800dee2:	4639      	mov	r1, r7
 800dee4:	f7f2 f9e0 	bl	80002a8 <__aeabi_dsub>
 800dee8:	a331      	add	r3, pc, #196	@ (adr r3, 800dfb0 <__ieee754_pow+0x770>)
 800deea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deee:	f7f2 fb93 	bl	8000618 <__aeabi_dmul>
 800def2:	a331      	add	r3, pc, #196	@ (adr r3, 800dfb8 <__ieee754_pow+0x778>)
 800def4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def8:	4606      	mov	r6, r0
 800defa:	460f      	mov	r7, r1
 800defc:	4620      	mov	r0, r4
 800defe:	4629      	mov	r1, r5
 800df00:	f7f2 fb8a 	bl	8000618 <__aeabi_dmul>
 800df04:	4602      	mov	r2, r0
 800df06:	460b      	mov	r3, r1
 800df08:	4630      	mov	r0, r6
 800df0a:	4639      	mov	r1, r7
 800df0c:	f7f2 f9ce 	bl	80002ac <__adddf3>
 800df10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800df12:	4b32      	ldr	r3, [pc, #200]	@ (800dfdc <__ieee754_pow+0x79c>)
 800df14:	4413      	add	r3, r2
 800df16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1a:	f7f2 f9c7 	bl	80002ac <__adddf3>
 800df1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800df22:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800df24:	f7f2 fb0e 	bl	8000544 <__aeabi_i2d>
 800df28:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800df2a:	4b2d      	ldr	r3, [pc, #180]	@ (800dfe0 <__ieee754_pow+0x7a0>)
 800df2c:	4413      	add	r3, r2
 800df2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800df32:	4606      	mov	r6, r0
 800df34:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800df38:	460f      	mov	r7, r1
 800df3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df3e:	f7f2 f9b5 	bl	80002ac <__adddf3>
 800df42:	4642      	mov	r2, r8
 800df44:	464b      	mov	r3, r9
 800df46:	f7f2 f9b1 	bl	80002ac <__adddf3>
 800df4a:	4632      	mov	r2, r6
 800df4c:	463b      	mov	r3, r7
 800df4e:	f7f2 f9ad 	bl	80002ac <__adddf3>
 800df52:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800df56:	4632      	mov	r2, r6
 800df58:	463b      	mov	r3, r7
 800df5a:	4658      	mov	r0, fp
 800df5c:	460d      	mov	r5, r1
 800df5e:	f7f2 f9a3 	bl	80002a8 <__aeabi_dsub>
 800df62:	4642      	mov	r2, r8
 800df64:	464b      	mov	r3, r9
 800df66:	f7f2 f99f 	bl	80002a8 <__aeabi_dsub>
 800df6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df6e:	f7f2 f99b 	bl	80002a8 <__aeabi_dsub>
 800df72:	465c      	mov	r4, fp
 800df74:	e036      	b.n	800dfe4 <__ieee754_pow+0x7a4>
 800df76:	bf00      	nop
 800df78:	4a454eef 	.word	0x4a454eef
 800df7c:	3fca7e28 	.word	0x3fca7e28
 800df80:	93c9db65 	.word	0x93c9db65
 800df84:	3fcd864a 	.word	0x3fcd864a
 800df88:	a91d4101 	.word	0xa91d4101
 800df8c:	3fd17460 	.word	0x3fd17460
 800df90:	518f264d 	.word	0x518f264d
 800df94:	3fd55555 	.word	0x3fd55555
 800df98:	db6fabff 	.word	0xdb6fabff
 800df9c:	3fdb6db6 	.word	0x3fdb6db6
 800dfa0:	33333303 	.word	0x33333303
 800dfa4:	3fe33333 	.word	0x3fe33333
 800dfa8:	e0000000 	.word	0xe0000000
 800dfac:	3feec709 	.word	0x3feec709
 800dfb0:	dc3a03fd 	.word	0xdc3a03fd
 800dfb4:	3feec709 	.word	0x3feec709
 800dfb8:	145b01f5 	.word	0x145b01f5
 800dfbc:	be3e2fe0 	.word	0xbe3e2fe0
 800dfc0:	7ff00000 	.word	0x7ff00000
 800dfc4:	43400000 	.word	0x43400000
 800dfc8:	0003988e 	.word	0x0003988e
 800dfcc:	000bb679 	.word	0x000bb679
 800dfd0:	0800eb20 	.word	0x0800eb20
 800dfd4:	3ff00000 	.word	0x3ff00000
 800dfd8:	40080000 	.word	0x40080000
 800dfdc:	0800eb00 	.word	0x0800eb00
 800dfe0:	0800eb10 	.word	0x0800eb10
 800dfe4:	4602      	mov	r2, r0
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dfec:	e5d6      	b.n	800db9c <__ieee754_pow+0x35c>
 800dfee:	f04f 0a01 	mov.w	sl, #1
 800dff2:	e65e      	b.n	800dcb2 <__ieee754_pow+0x472>
 800dff4:	a3b5      	add	r3, pc, #724	@ (adr r3, 800e2cc <__ieee754_pow+0xa8c>)
 800dff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dffa:	4630      	mov	r0, r6
 800dffc:	4639      	mov	r1, r7
 800dffe:	f7f2 f955 	bl	80002ac <__adddf3>
 800e002:	4642      	mov	r2, r8
 800e004:	e9cd 0100 	strd	r0, r1, [sp]
 800e008:	464b      	mov	r3, r9
 800e00a:	4620      	mov	r0, r4
 800e00c:	4629      	mov	r1, r5
 800e00e:	f7f2 f94b 	bl	80002a8 <__aeabi_dsub>
 800e012:	4602      	mov	r2, r0
 800e014:	460b      	mov	r3, r1
 800e016:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e01a:	f7f2 fd8d 	bl	8000b38 <__aeabi_dcmpgt>
 800e01e:	2800      	cmp	r0, #0
 800e020:	f47f adfe 	bne.w	800dc20 <__ieee754_pow+0x3e0>
 800e024:	4ba2      	ldr	r3, [pc, #648]	@ (800e2b0 <__ieee754_pow+0xa70>)
 800e026:	e022      	b.n	800e06e <__ieee754_pow+0x82e>
 800e028:	4ca2      	ldr	r4, [pc, #648]	@ (800e2b4 <__ieee754_pow+0xa74>)
 800e02a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e02e:	42a3      	cmp	r3, r4
 800e030:	d919      	bls.n	800e066 <__ieee754_pow+0x826>
 800e032:	4ba1      	ldr	r3, [pc, #644]	@ (800e2b8 <__ieee754_pow+0xa78>)
 800e034:	440b      	add	r3, r1
 800e036:	4303      	orrs	r3, r0
 800e038:	d009      	beq.n	800e04e <__ieee754_pow+0x80e>
 800e03a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e03e:	2200      	movs	r2, #0
 800e040:	2300      	movs	r3, #0
 800e042:	f7f2 fd5b 	bl	8000afc <__aeabi_dcmplt>
 800e046:	3800      	subs	r0, #0
 800e048:	bf18      	it	ne
 800e04a:	2001      	movne	r0, #1
 800e04c:	e512      	b.n	800da74 <__ieee754_pow+0x234>
 800e04e:	4642      	mov	r2, r8
 800e050:	464b      	mov	r3, r9
 800e052:	f7f2 f929 	bl	80002a8 <__aeabi_dsub>
 800e056:	4632      	mov	r2, r6
 800e058:	463b      	mov	r3, r7
 800e05a:	f7f2 fd63 	bl	8000b24 <__aeabi_dcmpge>
 800e05e:	2800      	cmp	r0, #0
 800e060:	d1eb      	bne.n	800e03a <__ieee754_pow+0x7fa>
 800e062:	4b96      	ldr	r3, [pc, #600]	@ (800e2bc <__ieee754_pow+0xa7c>)
 800e064:	e003      	b.n	800e06e <__ieee754_pow+0x82e>
 800e066:	4a96      	ldr	r2, [pc, #600]	@ (800e2c0 <__ieee754_pow+0xa80>)
 800e068:	4293      	cmp	r3, r2
 800e06a:	f240 80e7 	bls.w	800e23c <__ieee754_pow+0x9fc>
 800e06e:	151b      	asrs	r3, r3, #20
 800e070:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 800e074:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 800e078:	fa4a fa03 	asr.w	sl, sl, r3
 800e07c:	44da      	add	sl, fp
 800e07e:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e082:	4890      	ldr	r0, [pc, #576]	@ (800e2c4 <__ieee754_pow+0xa84>)
 800e084:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e088:	4108      	asrs	r0, r1
 800e08a:	ea00 030a 	and.w	r3, r0, sl
 800e08e:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e092:	f1c1 0114 	rsb	r1, r1, #20
 800e096:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e09a:	fa4a fa01 	asr.w	sl, sl, r1
 800e09e:	f1bb 0f00 	cmp.w	fp, #0
 800e0a2:	4640      	mov	r0, r8
 800e0a4:	4649      	mov	r1, r9
 800e0a6:	f04f 0200 	mov.w	r2, #0
 800e0aa:	bfb8      	it	lt
 800e0ac:	f1ca 0a00 	rsblt	sl, sl, #0
 800e0b0:	f7f2 f8fa 	bl	80002a8 <__aeabi_dsub>
 800e0b4:	4680      	mov	r8, r0
 800e0b6:	4689      	mov	r9, r1
 800e0b8:	4632      	mov	r2, r6
 800e0ba:	463b      	mov	r3, r7
 800e0bc:	4640      	mov	r0, r8
 800e0be:	4649      	mov	r1, r9
 800e0c0:	f7f2 f8f4 	bl	80002ac <__adddf3>
 800e0c4:	2400      	movs	r4, #0
 800e0c6:	a36a      	add	r3, pc, #424	@ (adr r3, 800e270 <__ieee754_pow+0xa30>)
 800e0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0cc:	4620      	mov	r0, r4
 800e0ce:	460d      	mov	r5, r1
 800e0d0:	f7f2 faa2 	bl	8000618 <__aeabi_dmul>
 800e0d4:	4642      	mov	r2, r8
 800e0d6:	e9cd 0100 	strd	r0, r1, [sp]
 800e0da:	464b      	mov	r3, r9
 800e0dc:	4620      	mov	r0, r4
 800e0de:	4629      	mov	r1, r5
 800e0e0:	f7f2 f8e2 	bl	80002a8 <__aeabi_dsub>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	4639      	mov	r1, r7
 800e0ec:	f7f2 f8dc 	bl	80002a8 <__aeabi_dsub>
 800e0f0:	a361      	add	r3, pc, #388	@ (adr r3, 800e278 <__ieee754_pow+0xa38>)
 800e0f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f6:	f7f2 fa8f 	bl	8000618 <__aeabi_dmul>
 800e0fa:	a361      	add	r3, pc, #388	@ (adr r3, 800e280 <__ieee754_pow+0xa40>)
 800e0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e100:	4680      	mov	r8, r0
 800e102:	4689      	mov	r9, r1
 800e104:	4620      	mov	r0, r4
 800e106:	4629      	mov	r1, r5
 800e108:	f7f2 fa86 	bl	8000618 <__aeabi_dmul>
 800e10c:	4602      	mov	r2, r0
 800e10e:	460b      	mov	r3, r1
 800e110:	4640      	mov	r0, r8
 800e112:	4649      	mov	r1, r9
 800e114:	f7f2 f8ca 	bl	80002ac <__adddf3>
 800e118:	4604      	mov	r4, r0
 800e11a:	460d      	mov	r5, r1
 800e11c:	4602      	mov	r2, r0
 800e11e:	460b      	mov	r3, r1
 800e120:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e124:	f7f2 f8c2 	bl	80002ac <__adddf3>
 800e128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e12c:	4680      	mov	r8, r0
 800e12e:	4689      	mov	r9, r1
 800e130:	f7f2 f8ba 	bl	80002a8 <__aeabi_dsub>
 800e134:	4602      	mov	r2, r0
 800e136:	460b      	mov	r3, r1
 800e138:	4620      	mov	r0, r4
 800e13a:	4629      	mov	r1, r5
 800e13c:	f7f2 f8b4 	bl	80002a8 <__aeabi_dsub>
 800e140:	4642      	mov	r2, r8
 800e142:	4606      	mov	r6, r0
 800e144:	460f      	mov	r7, r1
 800e146:	464b      	mov	r3, r9
 800e148:	4640      	mov	r0, r8
 800e14a:	4649      	mov	r1, r9
 800e14c:	f7f2 fa64 	bl	8000618 <__aeabi_dmul>
 800e150:	a34d      	add	r3, pc, #308	@ (adr r3, 800e288 <__ieee754_pow+0xa48>)
 800e152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e156:	4604      	mov	r4, r0
 800e158:	460d      	mov	r5, r1
 800e15a:	f7f2 fa5d 	bl	8000618 <__aeabi_dmul>
 800e15e:	a34c      	add	r3, pc, #304	@ (adr r3, 800e290 <__ieee754_pow+0xa50>)
 800e160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e164:	f7f2 f8a0 	bl	80002a8 <__aeabi_dsub>
 800e168:	4622      	mov	r2, r4
 800e16a:	462b      	mov	r3, r5
 800e16c:	f7f2 fa54 	bl	8000618 <__aeabi_dmul>
 800e170:	a349      	add	r3, pc, #292	@ (adr r3, 800e298 <__ieee754_pow+0xa58>)
 800e172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e176:	f7f2 f899 	bl	80002ac <__adddf3>
 800e17a:	4622      	mov	r2, r4
 800e17c:	462b      	mov	r3, r5
 800e17e:	f7f2 fa4b 	bl	8000618 <__aeabi_dmul>
 800e182:	a347      	add	r3, pc, #284	@ (adr r3, 800e2a0 <__ieee754_pow+0xa60>)
 800e184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e188:	f7f2 f88e 	bl	80002a8 <__aeabi_dsub>
 800e18c:	4622      	mov	r2, r4
 800e18e:	462b      	mov	r3, r5
 800e190:	f7f2 fa42 	bl	8000618 <__aeabi_dmul>
 800e194:	a344      	add	r3, pc, #272	@ (adr r3, 800e2a8 <__ieee754_pow+0xa68>)
 800e196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19a:	f7f2 f887 	bl	80002ac <__adddf3>
 800e19e:	4622      	mov	r2, r4
 800e1a0:	462b      	mov	r3, r5
 800e1a2:	f7f2 fa39 	bl	8000618 <__aeabi_dmul>
 800e1a6:	4602      	mov	r2, r0
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	4640      	mov	r0, r8
 800e1ac:	4649      	mov	r1, r9
 800e1ae:	f7f2 f87b 	bl	80002a8 <__aeabi_dsub>
 800e1b2:	4604      	mov	r4, r0
 800e1b4:	460d      	mov	r5, r1
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	4640      	mov	r0, r8
 800e1bc:	4649      	mov	r1, r9
 800e1be:	f7f2 fa2b 	bl	8000618 <__aeabi_dmul>
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	e9cd 0100 	strd	r0, r1, [sp]
 800e1c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e1cc:	4620      	mov	r0, r4
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	f7f2 f86a 	bl	80002a8 <__aeabi_dsub>
 800e1d4:	4602      	mov	r2, r0
 800e1d6:	460b      	mov	r3, r1
 800e1d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1dc:	f7f2 fb46 	bl	800086c <__aeabi_ddiv>
 800e1e0:	4632      	mov	r2, r6
 800e1e2:	4604      	mov	r4, r0
 800e1e4:	460d      	mov	r5, r1
 800e1e6:	463b      	mov	r3, r7
 800e1e8:	4640      	mov	r0, r8
 800e1ea:	4649      	mov	r1, r9
 800e1ec:	f7f2 fa14 	bl	8000618 <__aeabi_dmul>
 800e1f0:	4632      	mov	r2, r6
 800e1f2:	463b      	mov	r3, r7
 800e1f4:	f7f2 f85a 	bl	80002ac <__adddf3>
 800e1f8:	4602      	mov	r2, r0
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	4620      	mov	r0, r4
 800e1fe:	4629      	mov	r1, r5
 800e200:	f7f2 f852 	bl	80002a8 <__aeabi_dsub>
 800e204:	4642      	mov	r2, r8
 800e206:	464b      	mov	r3, r9
 800e208:	f7f2 f84e 	bl	80002a8 <__aeabi_dsub>
 800e20c:	460b      	mov	r3, r1
 800e20e:	4602      	mov	r2, r0
 800e210:	492d      	ldr	r1, [pc, #180]	@ (800e2c8 <__ieee754_pow+0xa88>)
 800e212:	2000      	movs	r0, #0
 800e214:	f7f2 f848 	bl	80002a8 <__aeabi_dsub>
 800e218:	ec41 0b10 	vmov	d0, r0, r1
 800e21c:	ee10 3a90 	vmov	r3, s1
 800e220:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e224:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e228:	da0b      	bge.n	800e242 <__ieee754_pow+0xa02>
 800e22a:	4650      	mov	r0, sl
 800e22c:	f000 f85c 	bl	800e2e8 <scalbn>
 800e230:	ec51 0b10 	vmov	r0, r1, d0
 800e234:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e238:	f7ff bb6d 	b.w	800d916 <__ieee754_pow+0xd6>
 800e23c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e240:	e73a      	b.n	800e0b8 <__ieee754_pow+0x878>
 800e242:	ec51 0b10 	vmov	r0, r1, d0
 800e246:	4619      	mov	r1, r3
 800e248:	e7f4      	b.n	800e234 <__ieee754_pow+0x9f4>
 800e24a:	491f      	ldr	r1, [pc, #124]	@ (800e2c8 <__ieee754_pow+0xa88>)
 800e24c:	2000      	movs	r0, #0
 800e24e:	f7ff bb14 	b.w	800d87a <__ieee754_pow+0x3a>
 800e252:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e256:	f7ff bb10 	b.w	800d87a <__ieee754_pow+0x3a>
 800e25a:	4630      	mov	r0, r6
 800e25c:	4639      	mov	r1, r7
 800e25e:	f7ff bb0c 	b.w	800d87a <__ieee754_pow+0x3a>
 800e262:	460c      	mov	r4, r1
 800e264:	f7ff bb69 	b.w	800d93a <__ieee754_pow+0xfa>
 800e268:	2400      	movs	r4, #0
 800e26a:	f7ff bb4b 	b.w	800d904 <__ieee754_pow+0xc4>
 800e26e:	bf00      	nop
 800e270:	00000000 	.word	0x00000000
 800e274:	3fe62e43 	.word	0x3fe62e43
 800e278:	fefa39ef 	.word	0xfefa39ef
 800e27c:	3fe62e42 	.word	0x3fe62e42
 800e280:	0ca86c39 	.word	0x0ca86c39
 800e284:	be205c61 	.word	0xbe205c61
 800e288:	72bea4d0 	.word	0x72bea4d0
 800e28c:	3e663769 	.word	0x3e663769
 800e290:	c5d26bf1 	.word	0xc5d26bf1
 800e294:	3ebbbd41 	.word	0x3ebbbd41
 800e298:	af25de2c 	.word	0xaf25de2c
 800e29c:	3f11566a 	.word	0x3f11566a
 800e2a0:	16bebd93 	.word	0x16bebd93
 800e2a4:	3f66c16c 	.word	0x3f66c16c
 800e2a8:	5555553e 	.word	0x5555553e
 800e2ac:	3fc55555 	.word	0x3fc55555
 800e2b0:	40900000 	.word	0x40900000
 800e2b4:	4090cbff 	.word	0x4090cbff
 800e2b8:	3f6f3400 	.word	0x3f6f3400
 800e2bc:	4090cc00 	.word	0x4090cc00
 800e2c0:	3fe00000 	.word	0x3fe00000
 800e2c4:	fff00000 	.word	0xfff00000
 800e2c8:	3ff00000 	.word	0x3ff00000
 800e2cc:	652b82fe 	.word	0x652b82fe
 800e2d0:	3c971547 	.word	0x3c971547

0800e2d4 <fabs>:
 800e2d4:	ec51 0b10 	vmov	r0, r1, d0
 800e2d8:	4602      	mov	r2, r0
 800e2da:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e2de:	ec43 2b10 	vmov	d0, r2, r3
 800e2e2:	4770      	bx	lr
 800e2e4:	0000      	movs	r0, r0
	...

0800e2e8 <scalbn>:
 800e2e8:	b570      	push	{r4, r5, r6, lr}
 800e2ea:	ec55 4b10 	vmov	r4, r5, d0
 800e2ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e2f2:	4606      	mov	r6, r0
 800e2f4:	462b      	mov	r3, r5
 800e2f6:	b991      	cbnz	r1, 800e31e <scalbn+0x36>
 800e2f8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e2fc:	4323      	orrs	r3, r4
 800e2fe:	d03b      	beq.n	800e378 <scalbn+0x90>
 800e300:	4b33      	ldr	r3, [pc, #204]	@ (800e3d0 <scalbn+0xe8>)
 800e302:	4620      	mov	r0, r4
 800e304:	4629      	mov	r1, r5
 800e306:	2200      	movs	r2, #0
 800e308:	f7f2 f986 	bl	8000618 <__aeabi_dmul>
 800e30c:	4b31      	ldr	r3, [pc, #196]	@ (800e3d4 <scalbn+0xec>)
 800e30e:	429e      	cmp	r6, r3
 800e310:	4604      	mov	r4, r0
 800e312:	460d      	mov	r5, r1
 800e314:	da0f      	bge.n	800e336 <scalbn+0x4e>
 800e316:	a326      	add	r3, pc, #152	@ (adr r3, 800e3b0 <scalbn+0xc8>)
 800e318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31c:	e01e      	b.n	800e35c <scalbn+0x74>
 800e31e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e322:	4291      	cmp	r1, r2
 800e324:	d10b      	bne.n	800e33e <scalbn+0x56>
 800e326:	4622      	mov	r2, r4
 800e328:	4620      	mov	r0, r4
 800e32a:	4629      	mov	r1, r5
 800e32c:	f7f1 ffbe 	bl	80002ac <__adddf3>
 800e330:	4604      	mov	r4, r0
 800e332:	460d      	mov	r5, r1
 800e334:	e020      	b.n	800e378 <scalbn+0x90>
 800e336:	460b      	mov	r3, r1
 800e338:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e33c:	3936      	subs	r1, #54	@ 0x36
 800e33e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e342:	4296      	cmp	r6, r2
 800e344:	dd0d      	ble.n	800e362 <scalbn+0x7a>
 800e346:	2d00      	cmp	r5, #0
 800e348:	a11b      	add	r1, pc, #108	@ (adr r1, 800e3b8 <scalbn+0xd0>)
 800e34a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e34e:	da02      	bge.n	800e356 <scalbn+0x6e>
 800e350:	a11b      	add	r1, pc, #108	@ (adr r1, 800e3c0 <scalbn+0xd8>)
 800e352:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e356:	a318      	add	r3, pc, #96	@ (adr r3, 800e3b8 <scalbn+0xd0>)
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	f7f2 f95c 	bl	8000618 <__aeabi_dmul>
 800e360:	e7e6      	b.n	800e330 <scalbn+0x48>
 800e362:	1872      	adds	r2, r6, r1
 800e364:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e368:	428a      	cmp	r2, r1
 800e36a:	dcec      	bgt.n	800e346 <scalbn+0x5e>
 800e36c:	2a00      	cmp	r2, #0
 800e36e:	dd06      	ble.n	800e37e <scalbn+0x96>
 800e370:	f36f 531e 	bfc	r3, #20, #11
 800e374:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e378:	ec45 4b10 	vmov	d0, r4, r5
 800e37c:	bd70      	pop	{r4, r5, r6, pc}
 800e37e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e382:	da08      	bge.n	800e396 <scalbn+0xae>
 800e384:	2d00      	cmp	r5, #0
 800e386:	a10a      	add	r1, pc, #40	@ (adr r1, 800e3b0 <scalbn+0xc8>)
 800e388:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e38c:	dac3      	bge.n	800e316 <scalbn+0x2e>
 800e38e:	a10e      	add	r1, pc, #56	@ (adr r1, 800e3c8 <scalbn+0xe0>)
 800e390:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e394:	e7bf      	b.n	800e316 <scalbn+0x2e>
 800e396:	3236      	adds	r2, #54	@ 0x36
 800e398:	f36f 531e 	bfc	r3, #20, #11
 800e39c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e3a0:	4620      	mov	r0, r4
 800e3a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e3d8 <scalbn+0xf0>)
 800e3a4:	4629      	mov	r1, r5
 800e3a6:	2200      	movs	r2, #0
 800e3a8:	e7d8      	b.n	800e35c <scalbn+0x74>
 800e3aa:	bf00      	nop
 800e3ac:	f3af 8000 	nop.w
 800e3b0:	c2f8f359 	.word	0xc2f8f359
 800e3b4:	01a56e1f 	.word	0x01a56e1f
 800e3b8:	8800759c 	.word	0x8800759c
 800e3bc:	7e37e43c 	.word	0x7e37e43c
 800e3c0:	8800759c 	.word	0x8800759c
 800e3c4:	fe37e43c 	.word	0xfe37e43c
 800e3c8:	c2f8f359 	.word	0xc2f8f359
 800e3cc:	81a56e1f 	.word	0x81a56e1f
 800e3d0:	43500000 	.word	0x43500000
 800e3d4:	ffff3cb0 	.word	0xffff3cb0
 800e3d8:	3c900000 	.word	0x3c900000

0800e3dc <with_errno>:
 800e3dc:	b510      	push	{r4, lr}
 800e3de:	ed2d 8b02 	vpush	{d8}
 800e3e2:	eeb0 8a40 	vmov.f32	s16, s0
 800e3e6:	eef0 8a60 	vmov.f32	s17, s1
 800e3ea:	4604      	mov	r4, r0
 800e3ec:	f7fd fc30 	bl	800bc50 <__errno>
 800e3f0:	eeb0 0a48 	vmov.f32	s0, s16
 800e3f4:	eef0 0a68 	vmov.f32	s1, s17
 800e3f8:	ecbd 8b02 	vpop	{d8}
 800e3fc:	6004      	str	r4, [r0, #0]
 800e3fe:	bd10      	pop	{r4, pc}

0800e400 <xflow>:
 800e400:	4603      	mov	r3, r0
 800e402:	b507      	push	{r0, r1, r2, lr}
 800e404:	ec51 0b10 	vmov	r0, r1, d0
 800e408:	b183      	cbz	r3, 800e42c <xflow+0x2c>
 800e40a:	4602      	mov	r2, r0
 800e40c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e410:	e9cd 2300 	strd	r2, r3, [sp]
 800e414:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e418:	f7f2 f8fe 	bl	8000618 <__aeabi_dmul>
 800e41c:	ec41 0b10 	vmov	d0, r0, r1
 800e420:	2022      	movs	r0, #34	@ 0x22
 800e422:	b003      	add	sp, #12
 800e424:	f85d eb04 	ldr.w	lr, [sp], #4
 800e428:	f7ff bfd8 	b.w	800e3dc <with_errno>
 800e42c:	4602      	mov	r2, r0
 800e42e:	460b      	mov	r3, r1
 800e430:	e7ee      	b.n	800e410 <xflow+0x10>
 800e432:	0000      	movs	r0, r0
 800e434:	0000      	movs	r0, r0
	...

0800e438 <__math_uflow>:
 800e438:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e440 <__math_uflow+0x8>
 800e43c:	f7ff bfe0 	b.w	800e400 <xflow>
 800e440:	00000000 	.word	0x00000000
 800e444:	10000000 	.word	0x10000000

0800e448 <__math_oflow>:
 800e448:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e450 <__math_oflow+0x8>
 800e44c:	f7ff bfd8 	b.w	800e400 <xflow>
 800e450:	00000000 	.word	0x00000000
 800e454:	70000000 	.word	0x70000000

0800e458 <__ieee754_sqrt>:
 800e458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45c:	4a66      	ldr	r2, [pc, #408]	@ (800e5f8 <__ieee754_sqrt+0x1a0>)
 800e45e:	ec55 4b10 	vmov	r4, r5, d0
 800e462:	43aa      	bics	r2, r5
 800e464:	462b      	mov	r3, r5
 800e466:	4621      	mov	r1, r4
 800e468:	d110      	bne.n	800e48c <__ieee754_sqrt+0x34>
 800e46a:	4622      	mov	r2, r4
 800e46c:	4620      	mov	r0, r4
 800e46e:	4629      	mov	r1, r5
 800e470:	f7f2 f8d2 	bl	8000618 <__aeabi_dmul>
 800e474:	4602      	mov	r2, r0
 800e476:	460b      	mov	r3, r1
 800e478:	4620      	mov	r0, r4
 800e47a:	4629      	mov	r1, r5
 800e47c:	f7f1 ff16 	bl	80002ac <__adddf3>
 800e480:	4604      	mov	r4, r0
 800e482:	460d      	mov	r5, r1
 800e484:	ec45 4b10 	vmov	d0, r4, r5
 800e488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e48c:	2d00      	cmp	r5, #0
 800e48e:	dc0e      	bgt.n	800e4ae <__ieee754_sqrt+0x56>
 800e490:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800e494:	4322      	orrs	r2, r4
 800e496:	d0f5      	beq.n	800e484 <__ieee754_sqrt+0x2c>
 800e498:	b19d      	cbz	r5, 800e4c2 <__ieee754_sqrt+0x6a>
 800e49a:	4622      	mov	r2, r4
 800e49c:	4620      	mov	r0, r4
 800e49e:	4629      	mov	r1, r5
 800e4a0:	f7f1 ff02 	bl	80002a8 <__aeabi_dsub>
 800e4a4:	4602      	mov	r2, r0
 800e4a6:	460b      	mov	r3, r1
 800e4a8:	f7f2 f9e0 	bl	800086c <__aeabi_ddiv>
 800e4ac:	e7e8      	b.n	800e480 <__ieee754_sqrt+0x28>
 800e4ae:	152a      	asrs	r2, r5, #20
 800e4b0:	d115      	bne.n	800e4de <__ieee754_sqrt+0x86>
 800e4b2:	2000      	movs	r0, #0
 800e4b4:	e009      	b.n	800e4ca <__ieee754_sqrt+0x72>
 800e4b6:	0acb      	lsrs	r3, r1, #11
 800e4b8:	3a15      	subs	r2, #21
 800e4ba:	0549      	lsls	r1, r1, #21
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d0fa      	beq.n	800e4b6 <__ieee754_sqrt+0x5e>
 800e4c0:	e7f7      	b.n	800e4b2 <__ieee754_sqrt+0x5a>
 800e4c2:	462a      	mov	r2, r5
 800e4c4:	e7fa      	b.n	800e4bc <__ieee754_sqrt+0x64>
 800e4c6:	005b      	lsls	r3, r3, #1
 800e4c8:	3001      	adds	r0, #1
 800e4ca:	02dc      	lsls	r4, r3, #11
 800e4cc:	d5fb      	bpl.n	800e4c6 <__ieee754_sqrt+0x6e>
 800e4ce:	1e44      	subs	r4, r0, #1
 800e4d0:	1b12      	subs	r2, r2, r4
 800e4d2:	f1c0 0420 	rsb	r4, r0, #32
 800e4d6:	fa21 f404 	lsr.w	r4, r1, r4
 800e4da:	4323      	orrs	r3, r4
 800e4dc:	4081      	lsls	r1, r0
 800e4de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e4e2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 800e4e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e4ea:	07d2      	lsls	r2, r2, #31
 800e4ec:	bf5c      	itt	pl
 800e4ee:	005b      	lslpl	r3, r3, #1
 800e4f0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800e4f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800e4f8:	bf58      	it	pl
 800e4fa:	0049      	lslpl	r1, r1, #1
 800e4fc:	2600      	movs	r6, #0
 800e4fe:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800e502:	107f      	asrs	r7, r7, #1
 800e504:	0049      	lsls	r1, r1, #1
 800e506:	2016      	movs	r0, #22
 800e508:	4632      	mov	r2, r6
 800e50a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800e50e:	1915      	adds	r5, r2, r4
 800e510:	429d      	cmp	r5, r3
 800e512:	bfde      	ittt	le
 800e514:	192a      	addle	r2, r5, r4
 800e516:	1b5b      	suble	r3, r3, r5
 800e518:	1936      	addle	r6, r6, r4
 800e51a:	0fcd      	lsrs	r5, r1, #31
 800e51c:	3801      	subs	r0, #1
 800e51e:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 800e522:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e526:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e52a:	d1f0      	bne.n	800e50e <__ieee754_sqrt+0xb6>
 800e52c:	4605      	mov	r5, r0
 800e52e:	2420      	movs	r4, #32
 800e530:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e534:	4293      	cmp	r3, r2
 800e536:	eb0c 0e00 	add.w	lr, ip, r0
 800e53a:	dc02      	bgt.n	800e542 <__ieee754_sqrt+0xea>
 800e53c:	d113      	bne.n	800e566 <__ieee754_sqrt+0x10e>
 800e53e:	458e      	cmp	lr, r1
 800e540:	d811      	bhi.n	800e566 <__ieee754_sqrt+0x10e>
 800e542:	f1be 0f00 	cmp.w	lr, #0
 800e546:	eb0e 000c 	add.w	r0, lr, ip
 800e54a:	da3f      	bge.n	800e5cc <__ieee754_sqrt+0x174>
 800e54c:	2800      	cmp	r0, #0
 800e54e:	db3d      	blt.n	800e5cc <__ieee754_sqrt+0x174>
 800e550:	f102 0801 	add.w	r8, r2, #1
 800e554:	1a9b      	subs	r3, r3, r2
 800e556:	458e      	cmp	lr, r1
 800e558:	bf88      	it	hi
 800e55a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800e55e:	eba1 010e 	sub.w	r1, r1, lr
 800e562:	4465      	add	r5, ip
 800e564:	4642      	mov	r2, r8
 800e566:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e56a:	3c01      	subs	r4, #1
 800e56c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e570:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e574:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e578:	d1dc      	bne.n	800e534 <__ieee754_sqrt+0xdc>
 800e57a:	4319      	orrs	r1, r3
 800e57c:	d01b      	beq.n	800e5b6 <__ieee754_sqrt+0x15e>
 800e57e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 800e5fc <__ieee754_sqrt+0x1a4>
 800e582:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 800e600 <__ieee754_sqrt+0x1a8>
 800e586:	e9da 0100 	ldrd	r0, r1, [sl]
 800e58a:	e9db 2300 	ldrd	r2, r3, [fp]
 800e58e:	f7f1 fe8b 	bl	80002a8 <__aeabi_dsub>
 800e592:	e9da 8900 	ldrd	r8, r9, [sl]
 800e596:	4602      	mov	r2, r0
 800e598:	460b      	mov	r3, r1
 800e59a:	4640      	mov	r0, r8
 800e59c:	4649      	mov	r1, r9
 800e59e:	f7f2 fab7 	bl	8000b10 <__aeabi_dcmple>
 800e5a2:	b140      	cbz	r0, 800e5b6 <__ieee754_sqrt+0x15e>
 800e5a4:	f1b5 3fff 	cmp.w	r5, #4294967295
 800e5a8:	e9da 0100 	ldrd	r0, r1, [sl]
 800e5ac:	e9db 2300 	ldrd	r2, r3, [fp]
 800e5b0:	d10e      	bne.n	800e5d0 <__ieee754_sqrt+0x178>
 800e5b2:	3601      	adds	r6, #1
 800e5b4:	4625      	mov	r5, r4
 800e5b6:	1073      	asrs	r3, r6, #1
 800e5b8:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 800e5bc:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 800e5c0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 800e5c4:	086b      	lsrs	r3, r5, #1
 800e5c6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 800e5ca:	e759      	b.n	800e480 <__ieee754_sqrt+0x28>
 800e5cc:	4690      	mov	r8, r2
 800e5ce:	e7c1      	b.n	800e554 <__ieee754_sqrt+0xfc>
 800e5d0:	f7f1 fe6c 	bl	80002ac <__adddf3>
 800e5d4:	e9da 8900 	ldrd	r8, r9, [sl]
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	4640      	mov	r0, r8
 800e5de:	4649      	mov	r1, r9
 800e5e0:	f7f2 fa8c 	bl	8000afc <__aeabi_dcmplt>
 800e5e4:	b120      	cbz	r0, 800e5f0 <__ieee754_sqrt+0x198>
 800e5e6:	1cab      	adds	r3, r5, #2
 800e5e8:	bf08      	it	eq
 800e5ea:	3601      	addeq	r6, #1
 800e5ec:	3502      	adds	r5, #2
 800e5ee:	e7e2      	b.n	800e5b6 <__ieee754_sqrt+0x15e>
 800e5f0:	1c6b      	adds	r3, r5, #1
 800e5f2:	f023 0501 	bic.w	r5, r3, #1
 800e5f6:	e7de      	b.n	800e5b6 <__ieee754_sqrt+0x15e>
 800e5f8:	7ff00000 	.word	0x7ff00000
 800e5fc:	0800eb38 	.word	0x0800eb38
 800e600:	0800eb30 	.word	0x0800eb30

0800e604 <_init>:
 800e604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e606:	bf00      	nop
 800e608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e60a:	bc08      	pop	{r3}
 800e60c:	469e      	mov	lr, r3
 800e60e:	4770      	bx	lr

0800e610 <_fini>:
 800e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e612:	bf00      	nop
 800e614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e616:	bc08      	pop	{r3}
 800e618:	469e      	mov	lr, r3
 800e61a:	4770      	bx	lr
