
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6c4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800d874  0800d874  0000e874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d924  0800d924  0000f080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d924  0800d924  0000e924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d92c  0800d92c  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d92c  0800d92c  0000e92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d930  0800d930  0000e930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800d934  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          00008f90  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009010  20009010  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b671  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006da3  00000000  00000000  0003a721  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023e0  00000000  00000000  000414c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b91  00000000  00000000  000438a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cbf5  00000000  00000000  00045439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002e78f  00000000  00000000  0007202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5862  00000000  00000000  000a07bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019601f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000989c  00000000  00000000  00196064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0019f900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d85c 	.word	0x0800d85c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800d85c 	.word	0x0800d85c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_CRC_Init+0x20>)
 8000522:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <MX_CRC_Init+0x24>)
 8000524:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_CRC_Init+0x20>)
 8000528:	f001 fa82 	bl	8001a30 <HAL_CRC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000532:	f000 fe6f 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000009c 	.word	0x2000009c
 8000540:	40023000 	.word	0x40023000

08000544 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <HAL_CRC_MspInit+0x3c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d10d      	bne.n	8000572 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000560:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023000 	.word	0x40023000
 8000584:	40023800 	.word	0x40023800

08000588 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA2D_Init+0x60>)
 8000590:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000592:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005be:	f001 fa53 	bl	8001a68 <HAL_DMA2D_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005c8:	f000 fe24 	bl	8001214 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005cc:	2101      	movs	r1, #1
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005d0:	f001 fba4 	bl	8001d1c <HAL_DMA2D_ConfigLayer>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005da:	f000 fe1b 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000a4 	.word	0x200000a4
 80005e8:	4002b000 	.word	0x4002b000

080005ec <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <HAL_DMA2D_MspInit+0x48>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d115      	bne.n	800062a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000608:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	205a      	movs	r0, #90	@ 0x5a
 8000620:	f001 f9dc 	bl	80019dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000624:	205a      	movs	r0, #90	@ 0x5a
 8000626:	f001 f9f5 	bl	8001a14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	4002b000 	.word	0x4002b000
 8000638:	40023800 	.word	0x40023800

0800063c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <MX_FMC_Init+0x9c>)
 8000658:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <MX_FMC_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000668:	2204      	movs	r2, #4
 800066a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <MX_FMC_Init+0x98>)
 800066e:	2210      	movs	r2, #16
 8000670:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000674:	2240      	movs	r2, #64	@ 0x40
 8000676:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_FMC_Init+0x98>)
 800067a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800067e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000696:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800069a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_FMC_Init+0x98>)
 80006be:	f005 fa6b 	bl	8005b98 <HAL_SDRAM_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80006c8:	f000 fda4 	bl	8001214 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000e4 	.word	0x200000e4
 80006d8:	a0000140 	.word	0xa0000140

080006dc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006f0:	4b3b      	ldr	r3, [pc, #236]	@ (80007e0 <HAL_FMC_MspInit+0x104>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d16f      	bne.n	80007d8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006f8:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <HAL_FMC_MspInit+0x104>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000706:	4a37      	ldr	r2, [pc, #220]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6393      	str	r3, [r2, #56]	@ 0x38
 800070e:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800071a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800071e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072c:	230c      	movs	r3, #12
 800072e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	482c      	ldr	r0, [pc, #176]	@ (80007e8 <HAL_FMC_MspInit+0x10c>)
 8000736:	f001 fb83 	bl	8001e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074a:	230c      	movs	r3, #12
 800074c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4826      	ldr	r0, [pc, #152]	@ (80007ec <HAL_FMC_MspInit+0x110>)
 8000754:	f001 fb74 	bl	8001e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000758:	f248 1333 	movw	r3, #33075	@ 0x8133
 800075c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <HAL_FMC_MspInit+0x114>)
 8000774:	f001 fb64 	bl	8001e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000778:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800077c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078a:	230c      	movs	r3, #12
 800078c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4818      	ldr	r0, [pc, #96]	@ (80007f4 <HAL_FMC_MspInit+0x118>)
 8000794:	f001 fb54 	bl	8001e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000798:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800079c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007aa:	230c      	movs	r3, #12
 80007ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <HAL_FMC_MspInit+0x11c>)
 80007b4:	f001 fb44 	bl	8001e40 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80007b8:	2360      	movs	r3, #96	@ 0x60
 80007ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c8:	230c      	movs	r3, #12
 80007ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <HAL_FMC_MspInit+0x120>)
 80007d2:	f001 fb35 	bl	8001e40 <HAL_GPIO_Init>
 80007d6:	e000      	b.n	80007da <HAL_FMC_MspInit+0xfe>
    return;
 80007d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000118 	.word	0x20000118
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40021400 	.word	0x40021400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40021800 	.word	0x40021800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	40020400 	.word	0x40020400

08000800 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000808:	f7ff ff68 	bl	80006dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <vApplicationGetIdleTaskMemory+0x2c>)
 8000858:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4a06      	ldr	r2, [pc, #24]	@ (8000878 <vApplicationGetIdleTaskMemory+0x30>)
 800085e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2280      	movs	r2, #128	@ 0x80
 8000864:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000120 	.word	0x20000120
 8000878:	20000178 	.word	0x20000178

0800087c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_FREERTOS_Init+0x30>)
 8000884:	1d3c      	adds	r4, r7, #4
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f00a f8d8 	bl	800aa4e <osThreadCreate>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a03      	ldr	r2, [pc, #12]	@ (80008b0 <MX_FREERTOS_Init+0x34>)
 80008a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bdb0      	pop	{r4, r5, r7, pc}
 80008ac:	0800d880 	.word	0x0800d880
 80008b0:	2000011c 	.word	0x2000011c

080008b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80008bc:	f00c fb6a 	bl	800cf94 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f00a f910 	bl	800aae6 <osDelay>
 80008c6:	e7fb      	b.n	80008c0 <StartDefaultTask+0xc>

080008c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	@ 0x38
 80008cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
 80008e2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a7a      	ldr	r2, [pc, #488]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b78      	ldr	r3, [pc, #480]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	623b      	str	r3, [r7, #32]
 80008f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
 80008fe:	4b74      	ldr	r3, [pc, #464]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a73      	ldr	r2, [pc, #460]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000904:	f043 0320 	orr.w	r3, r3, #32
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b71      	ldr	r3, [pc, #452]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0320 	and.w	r3, r3, #32
 8000912:	61fb      	str	r3, [r7, #28]
 8000914:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a6c      	ldr	r2, [pc, #432]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b6a      	ldr	r3, [pc, #424]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	4b66      	ldr	r3, [pc, #408]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a65      	ldr	r2, [pc, #404]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b63      	ldr	r3, [pc, #396]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b5f      	ldr	r3, [pc, #380]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a5e      	ldr	r2, [pc, #376]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b58      	ldr	r3, [pc, #352]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a57      	ldr	r2, [pc, #348]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b55      	ldr	r3, [pc, #340]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b51      	ldr	r3, [pc, #324]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a50      	ldr	r2, [pc, #320]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a49      	ldr	r2, [pc, #292]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b47      	ldr	r3, [pc, #284]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2116      	movs	r1, #22
 80009c2:	4844      	ldr	r0, [pc, #272]	@ (8000ad4 <MX_GPIO_Init+0x20c>)
 80009c4:	f001 fbe8 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2180      	movs	r1, #128	@ 0x80
 80009cc:	4842      	ldr	r0, [pc, #264]	@ (8000ad8 <MX_GPIO_Init+0x210>)
 80009ce:	f001 fbe3 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80009d8:	4840      	ldr	r0, [pc, #256]	@ (8000adc <MX_GPIO_Init+0x214>)
 80009da:	f001 fbdd 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80009e4:	483e      	ldr	r0, [pc, #248]	@ (8000ae0 <MX_GPIO_Init+0x218>)
 80009e6:	f001 fbd7 	bl	8002198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009ea:	2316      	movs	r3, #22
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4834      	ldr	r0, [pc, #208]	@ (8000ad4 <MX_GPIO_Init+0x20c>)
 8000a02:	f001 fa1d 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000a06:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	482e      	ldr	r0, [pc, #184]	@ (8000ad8 <MX_GPIO_Init+0x210>)
 8000a1e:	f001 fa0f 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4827      	ldr	r0, [pc, #156]	@ (8000ad8 <MX_GPIO_Init+0x210>)
 8000a3a:	f001 fa01 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a42:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	4820      	ldr	r0, [pc, #128]	@ (8000ad4 <MX_GPIO_Init+0x20c>)
 8000a54:	f001 f9f4 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481e      	ldr	r0, [pc, #120]	@ (8000ae4 <MX_GPIO_Init+0x21c>)
 8000a6c:	f001 f9e8 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	@ (8000adc <MX_GPIO_Init+0x214>)
 8000a86:	f001 f9db 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480e      	ldr	r0, [pc, #56]	@ (8000adc <MX_GPIO_Init+0x214>)
 8000aa4:	f001 f9cc 	bl	8001e40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000aa8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	@ (8000ae0 <MX_GPIO_Init+0x218>)
 8000ac2:	f001 f9bd 	bl	8001e40 <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3738      	adds	r7, #56	@ 0x38
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	@ (8000b60 <MX_I2C3_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <MX_I2C3_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b18:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b26:	f003 fc85 	bl	8004434 <HAL_I2C_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b30:	f000 fb70 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b38:	f003 fdc0 	bl	80046bc <HAL_I2CEx_ConfigAnalogFilter>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b42:	f000 fb67 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b4a:	f003 fdf3 	bl	8004734 <HAL_I2CEx_ConfigDigitalFilter>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b54:	f000 fb5e 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000378 	.word	0x20000378
 8000b60:	40005c00 	.word	0x40005c00
 8000b64:	000186a0 	.word	0x000186a0

08000b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a29      	ldr	r2, [pc, #164]	@ (8000c2c <HAL_I2C_MspInit+0xc4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d14b      	bne.n	8000c22 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a27      	ldr	r2, [pc, #156]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a20      	ldr	r2, [pc, #128]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc8:	2312      	movs	r3, #18
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4815      	ldr	r0, [pc, #84]	@ (8000c34 <HAL_I2C_MspInit+0xcc>)
 8000be0:	f001 f92e 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bea:	2312      	movs	r3, #18
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <HAL_I2C_MspInit+0xd0>)
 8000c02:	f001 f91d 	bl	8001e40 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40005c00 	.word	0x40005c00
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020800 	.word	0x40020800
 8000c38:	40020000 	.word	0x40020000

08000c3c <lcd_cmd>:
		CMD(COLMOD), 0x05,
		CMD(MAC), 0x00,
};


static void lcd_cmd(uint8_t cmd){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	4603      	mov	r3, r0
 8000c44:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 8000c46:	2200      	movs	r2, #0
 8000c48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c4c:	480b      	ldr	r0, [pc, #44]	@ (8000c7c <lcd_cmd+0x40>)
 8000c4e:	f001 faa3 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2104      	movs	r1, #4
 8000c56:	480a      	ldr	r0, [pc, #40]	@ (8000c80 <lcd_cmd+0x44>)
 8000c58:	f001 fa9e 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 8000c5c:	1df9      	adds	r1, r7, #7
 8000c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c62:	2201      	movs	r2, #1
 8000c64:	4807      	ldr	r0, [pc, #28]	@ (8000c84 <lcd_cmd+0x48>)
 8000c66:	f005 f854 	bl	8005d12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2104      	movs	r1, #4
 8000c6e:	4804      	ldr	r0, [pc, #16]	@ (8000c80 <lcd_cmd+0x44>)
 8000c70:	f001 fa92 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000c74:	bf00      	nop
 8000c76:	3708      	adds	r7, #8
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	40020c00 	.word	0x40020c00
 8000c80:	40020800 	.word	0x40020800
 8000c84:	20000474 	.word	0x20000474

08000c88 <lcd_data>:

static void lcd_data(uint8_t data){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 8000c92:	2201      	movs	r2, #1
 8000c94:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c98:	480b      	ldr	r0, [pc, #44]	@ (8000cc8 <lcd_data+0x40>)
 8000c9a:	f001 fa7d 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	480a      	ldr	r0, [pc, #40]	@ (8000ccc <lcd_data+0x44>)
 8000ca4:	f001 fa78 	bl	8002198 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 8000ca8:	1df9      	adds	r1, r7, #7
 8000caa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cae:	2201      	movs	r2, #1
 8000cb0:	4807      	ldr	r0, [pc, #28]	@ (8000cd0 <lcd_data+0x48>)
 8000cb2:	f005 f82e 	bl	8005d12 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <lcd_data+0x44>)
 8000cbc:	f001 fa6c 	bl	8002198 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	3708      	adds	r7, #8
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40020c00 	.word	0x40020c00
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	20000474 	.word	0x20000474

08000cd4 <lcd_send>:
static void lcd_send(uint16_t value){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8000cde:	88fb      	ldrh	r3, [r7, #6]
 8000ce0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d005      	beq.n	8000cf4 <lcd_send+0x20>
		lcd_cmd(value);
 8000ce8:	88fb      	ldrh	r3, [r7, #6]
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ffa5 	bl	8000c3c <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8000cf2:	e004      	b.n	8000cfe <lcd_send+0x2a>
		lcd_data(value);
 8000cf4:	88fb      	ldrh	r3, [r7, #6]
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ffc5 	bl	8000c88 <lcd_data>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <lcd_init>:
void lcd_init(void){
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000d14:	4817      	ldr	r0, [pc, #92]	@ (8000d74 <lcd_init+0x6c>)
 8000d16:	f001 fa3f 	bl	8002198 <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 8000d1a:	2064      	movs	r0, #100	@ 0x64
 8000d1c:	f000 fd82 	bl	8001824 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_GPIO_Port, GPIO_PIN_SET);
 8000d20:	2201      	movs	r2, #1
 8000d22:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8000d26:	4813      	ldr	r0, [pc, #76]	@ (8000d74 <lcd_init+0x6c>)
 8000d28:	f001 fa36 	bl	8002198 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000d2c:	2064      	movs	r0, #100	@ 0x64
 8000d2e:	f000 fd79 	bl	8001824 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000d32:	2300      	movs	r3, #0
 8000d34:	607b      	str	r3, [r7, #4]
 8000d36:	e009      	b.n	8000d4c <lcd_init+0x44>
    lcd_send(init_table[i]);
 8000d38:	4a0f      	ldr	r2, [pc, #60]	@ (8000d78 <lcd_init+0x70>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ffc7 	bl	8000cd4 <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b15      	cmp	r3, #21
 8000d50:	d9f2      	bls.n	8000d38 <lcd_init+0x30>
  }
  HAL_Delay(200);
 8000d52:	20c8      	movs	r0, #200	@ 0xc8
 8000d54:	f000 fd66 	bl	8001824 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 8000d58:	2011      	movs	r0, #17
 8000d5a:	f7ff ff6f 	bl	8000c3c <lcd_cmd>
  HAL_Delay(120);
 8000d5e:	2078      	movs	r0, #120	@ 0x78
 8000d60:	f000 fd60 	bl	8001824 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 8000d64:	2029      	movs	r0, #41	@ 0x29
 8000d66:	f7ff ff69 	bl	8000c3c <lcd_cmd>
}
 8000d6a:	bf00      	nop
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	40020c00 	.word	0x40020c00
 8000d78:	0800d8e0 	.word	0x0800d8e0

08000d7c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08e      	sub	sp, #56	@ 0x38
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2234      	movs	r2, #52	@ 0x34
 8000d86:	2100      	movs	r1, #0
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f00c fccb 	bl	800d724 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000d8e:	4b39      	ldr	r3, [pc, #228]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000d90:	4a39      	ldr	r2, [pc, #228]	@ (8000e78 <MX_LTDC_Init+0xfc>)
 8000d92:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000d94:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000d9a:	4b36      	ldr	r3, [pc, #216]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000da0:	4b34      	ldr	r3, [pc, #208]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000da6:	4b33      	ldr	r3, [pc, #204]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000dac:	4b31      	ldr	r3, [pc, #196]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dae:	2209      	movs	r2, #9
 8000db0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000db2:	4b30      	ldr	r3, [pc, #192]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000db8:	4b2e      	ldr	r3, [pc, #184]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dba:	221d      	movs	r2, #29
 8000dbc:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000dc4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dc6:	f240 120d 	movw	r2, #269	@ 0x10d
 8000dca:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000dcc:	4b29      	ldr	r3, [pc, #164]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dce:	f240 1243 	movw	r2, #323	@ 0x143
 8000dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000dd4:	4b27      	ldr	r3, [pc, #156]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dd6:	f240 1217 	movw	r2, #279	@ 0x117
 8000dda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dde:	f240 1247 	movw	r2, #327	@ 0x147
 8000de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000de4:	4b23      	ldr	r3, [pc, #140]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000dec:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000dfc:	481d      	ldr	r0, [pc, #116]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000dfe:	f003 fcd9 	bl	80047b4 <HAL_LTDC_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000e08:	f000 fa04 	bl	8001214 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000e10:	23f0      	movs	r3, #240	@ 0xf0
 8000e12:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000e18:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e1c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000e22:	23ff      	movs	r3, #255	@ 0xff
 8000e24:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000e2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e2e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e30:	2307      	movs	r3, #7
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e34:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000e38:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000e3a:	23f0      	movs	r3, #240	@ 0xf0
 8000e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000e3e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000e42:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000e50:	2300      	movs	r3, #0
 8000e52:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4805      	ldr	r0, [pc, #20]	@ (8000e74 <MX_LTDC_Init+0xf8>)
 8000e5e:	f003 fe3b 	bl	8004ad8 <HAL_LTDC_ConfigLayer>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000e68:	f000 f9d4 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000e6c:	bf00      	nop
 8000e6e:	3738      	adds	r7, #56	@ 0x38
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	200003cc 	.word	0x200003cc
 8000e78:	40016800 	.word	0x40016800

08000e7c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b09a      	sub	sp, #104	@ 0x68
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e88:	2200      	movs	r2, #0
 8000e8a:	601a      	str	r2, [r3, #0]
 8000e8c:	605a      	str	r2, [r3, #4]
 8000e8e:	609a      	str	r2, [r3, #8]
 8000e90:	60da      	str	r2, [r3, #12]
 8000e92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e98:	2230      	movs	r2, #48	@ 0x30
 8000e9a:	2100      	movs	r1, #0
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f00c fc41 	bl	800d724 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4a85      	ldr	r2, [pc, #532]	@ (80010bc <HAL_LTDC_MspInit+0x240>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	f040 8102 	bne.w	80010b2 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000eae:	2308      	movs	r3, #8
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000eb2:	2332      	movs	r3, #50	@ 0x32
 8000eb4:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000eb6:	2302      	movs	r3, #2
 8000eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ebe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f004 fca8 	bl	8005818 <HAL_RCCEx_PeriphCLKConfig>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000ece:	f000 f9a1 	bl	8001214 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
 8000ed6:	4b7a      	ldr	r3, [pc, #488]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eda:	4a79      	ldr	r2, [pc, #484]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000edc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ee0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ee2:	4b77      	ldr	r3, [pc, #476]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000eea:	623b      	str	r3, [r7, #32]
 8000eec:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
 8000ef2:	4b73      	ldr	r3, [pc, #460]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a72      	ldr	r2, [pc, #456]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000ef8:	f043 0320 	orr.w	r3, r3, #32
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b70      	ldr	r3, [pc, #448]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0320 	and.w	r3, r3, #32
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
 8000f0e:	4b6c      	ldr	r3, [pc, #432]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a6b      	ldr	r2, [pc, #428]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b69      	ldr	r3, [pc, #420]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	61bb      	str	r3, [r7, #24]
 8000f24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	4b65      	ldr	r3, [pc, #404]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a64      	ldr	r2, [pc, #400]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b62      	ldr	r3, [pc, #392]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	4b5e      	ldr	r3, [pc, #376]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a5d      	ldr	r2, [pc, #372]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b5b      	ldr	r3, [pc, #364]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f5a:	613b      	str	r3, [r7, #16]
 8000f5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b57      	ldr	r3, [pc, #348]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a56      	ldr	r2, [pc, #344]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f68:	f043 0304 	orr.w	r3, r3, #4
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b54      	ldr	r3, [pc, #336]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0304 	and.w	r3, r3, #4
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b50      	ldr	r3, [pc, #320]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a4f      	ldr	r2, [pc, #316]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f84:	f043 0308 	orr.w	r3, r3, #8
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b4d      	ldr	r3, [pc, #308]	@ (80010c0 <HAL_LTDC_MspInit+0x244>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0308 	and.w	r3, r3, #8
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa8:	230e      	movs	r3, #14
 8000faa:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000fac:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4844      	ldr	r0, [pc, #272]	@ (80010c4 <HAL_LTDC_MspInit+0x248>)
 8000fb4:	f000 ff44 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000fb8:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000fbc:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fca:	230e      	movs	r3, #14
 8000fcc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	483c      	ldr	r0, [pc, #240]	@ (80010c8 <HAL_LTDC_MspInit+0x24c>)
 8000fd6:	f000 ff33 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fda:	2303      	movs	r3, #3
 8000fdc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fea:	2309      	movs	r3, #9
 8000fec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4835      	ldr	r0, [pc, #212]	@ (80010cc <HAL_LTDC_MspInit+0x250>)
 8000ff6:	f000 ff23 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000ffa:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000ffe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001000:	2302      	movs	r3, #2
 8001002:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001004:	2300      	movs	r3, #0
 8001006:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800100c:	230e      	movs	r3, #14
 800100e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001014:	4619      	mov	r1, r3
 8001016:	482d      	ldr	r0, [pc, #180]	@ (80010cc <HAL_LTDC_MspInit+0x250>)
 8001018:	f000 ff12 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800101c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001020:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800102e:	230e      	movs	r3, #14
 8001030:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001032:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001036:	4619      	mov	r1, r3
 8001038:	4825      	ldr	r0, [pc, #148]	@ (80010d0 <HAL_LTDC_MspInit+0x254>)
 800103a:	f000 ff01 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800103e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001042:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001044:	2302      	movs	r3, #2
 8001046:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800104c:	2300      	movs	r3, #0
 800104e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001050:	230e      	movs	r3, #14
 8001052:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001054:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001058:	4619      	mov	r1, r3
 800105a:	481e      	ldr	r0, [pc, #120]	@ (80010d4 <HAL_LTDC_MspInit+0x258>)
 800105c:	f000 fef0 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001060:	2348      	movs	r3, #72	@ 0x48
 8001062:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2302      	movs	r3, #2
 8001066:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001070:	230e      	movs	r3, #14
 8001072:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001074:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001078:	4619      	mov	r1, r3
 800107a:	4817      	ldr	r0, [pc, #92]	@ (80010d8 <HAL_LTDC_MspInit+0x25c>)
 800107c:	f000 fee0 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001080:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001084:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2300      	movs	r3, #0
 8001090:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001092:	2309      	movs	r3, #9
 8001094:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001096:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <HAL_LTDC_MspInit+0x254>)
 800109e:	f000 fecf 	bl	8001e40 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2105      	movs	r1, #5
 80010a6:	2058      	movs	r0, #88	@ 0x58
 80010a8:	f000 fc98 	bl	80019dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80010ac:	2058      	movs	r0, #88	@ 0x58
 80010ae:	f000 fcb1 	bl	8001a14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3768      	adds	r7, #104	@ 0x68
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40016800 	.word	0x40016800
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40021400 	.word	0x40021400
 80010c8:	40020000 	.word	0x40020000
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40021800 	.word	0x40021800
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00

080010dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010e0:	f000 fb5e 	bl	80017a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e4:	f000 f81a 	bl	800111c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e8:	f7ff fbee 	bl	80008c8 <MX_GPIO_Init>
  MX_CRC_Init();
 80010ec:	f7ff fa16 	bl	800051c <MX_CRC_Init>
  MX_DMA2D_Init();
 80010f0:	f7ff fa4a 	bl	8000588 <MX_DMA2D_Init>
  MX_FMC_Init();
 80010f4:	f7ff faa2 	bl	800063c <MX_FMC_Init>
  MX_I2C3_Init();
 80010f8:	f7ff fcf6 	bl	8000ae8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80010fc:	f7ff fe3e 	bl	8000d7c <MX_LTDC_Init>
  MX_SPI5_Init();
 8001100:	f000 f88e 	bl	8001220 <MX_SPI5_Init>
  MX_TIM1_Init();
 8001104:	f000 fa3e 	bl	8001584 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001108:	f000 faae 	bl	8001668 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800110c:	f7ff fbb6 	bl	800087c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001110:	f009 fc96 	bl	800aa40 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  lcd_init();
 8001114:	f7ff fdf8 	bl	8000d08 <lcd_init>
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <main+0x3c>

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b094      	sub	sp, #80	@ 0x50
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0320 	add.w	r3, r7, #32
 8001126:	2230      	movs	r2, #48	@ 0x30
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f00c fafa 	bl	800d724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	2300      	movs	r3, #0
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b28      	ldr	r3, [pc, #160]	@ (80011e8 <SystemClock_Config+0xcc>)
 8001146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001148:	4a27      	ldr	r2, [pc, #156]	@ (80011e8 <SystemClock_Config+0xcc>)
 800114a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800114e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001150:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <SystemClock_Config+0xcc>)
 8001152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001154:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001158:	60bb      	str	r3, [r7, #8]
 800115a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	4b22      	ldr	r3, [pc, #136]	@ (80011ec <SystemClock_Config+0xd0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001168:	4a20      	ldr	r2, [pc, #128]	@ (80011ec <SystemClock_Config+0xd0>)
 800116a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116e:	6013      	str	r3, [r2, #0]
 8001170:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <SystemClock_Config+0xd0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800117c:	2301      	movs	r3, #1
 800117e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001180:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001184:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001186:	2302      	movs	r3, #2
 8001188:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800118a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800118e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001190:	2304      	movs	r3, #4
 8001192:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001194:	2348      	movs	r3, #72	@ 0x48
 8001196:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001198:	2302      	movs	r3, #2
 800119a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800119c:	2303      	movs	r3, #3
 800119e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a0:	f107 0320 	add.w	r3, r7, #32
 80011a4:	4618      	mov	r0, r3
 80011a6:	f003 fe6d 	bl	8004e84 <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80011b0:	f000 f830 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b4:	230f      	movs	r3, #15
 80011b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011b8:	2302      	movs	r3, #2
 80011ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011c6:	2300      	movs	r3, #0
 80011c8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	2102      	movs	r1, #2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 f8cf 	bl	8005374 <HAL_RCC_ClockConfig>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011dc:	f000 f81a 	bl	8001214 <Error_Handler>
  }
}
 80011e0:	bf00      	nop
 80011e2:	3750      	adds	r7, #80	@ 0x50
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001202:	f000 faef 	bl	80017e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40001000 	.word	0x40001000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001224:	4b17      	ldr	r3, [pc, #92]	@ (8001284 <MX_SPI5_Init+0x64>)
 8001226:	4a18      	ldr	r2, [pc, #96]	@ (8001288 <MX_SPI5_Init+0x68>)
 8001228:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800122a:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_SPI5_Init+0x64>)
 800122c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001230:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001232:	4b14      	ldr	r3, [pc, #80]	@ (8001284 <MX_SPI5_Init+0x64>)
 8001234:	2200      	movs	r2, #0
 8001236:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001238:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <MX_SPI5_Init+0x64>)
 800123a:	2200      	movs	r2, #0
 800123c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800123e:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <MX_SPI5_Init+0x64>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001244:	4b0f      	ldr	r3, [pc, #60]	@ (8001284 <MX_SPI5_Init+0x64>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800124a:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <MX_SPI5_Init+0x64>)
 800124c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001250:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <MX_SPI5_Init+0x64>)
 8001254:	2218      	movs	r2, #24
 8001256:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001258:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <MX_SPI5_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800125e:	4b09      	ldr	r3, [pc, #36]	@ (8001284 <MX_SPI5_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001264:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <MX_SPI5_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <MX_SPI5_Init+0x64>)
 800126c:	220a      	movs	r2, #10
 800126e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001270:	4804      	ldr	r0, [pc, #16]	@ (8001284 <MX_SPI5_Init+0x64>)
 8001272:	f004 fcc5 	bl	8005c00 <HAL_SPI_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800127c:	f7ff ffca 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000474 	.word	0x20000474
 8001288:	40015000 	.word	0x40015000

0800128c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	@ 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a19      	ldr	r2, [pc, #100]	@ (8001310 <HAL_SPI_MspInit+0x84>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d12c      	bne.n	8001308 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	4b18      	ldr	r3, [pc, #96]	@ (8001314 <HAL_SPI_MspInit+0x88>)
 80012b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012b6:	4a17      	ldr	r2, [pc, #92]	@ (8001314 <HAL_SPI_MspInit+0x88>)
 80012b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <HAL_SPI_MspInit+0x88>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	60fb      	str	r3, [r7, #12]
 80012ce:	4b11      	ldr	r3, [pc, #68]	@ (8001314 <HAL_SPI_MspInit+0x88>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a10      	ldr	r2, [pc, #64]	@ (8001314 <HAL_SPI_MspInit+0x88>)
 80012d4:	f043 0320 	orr.w	r3, r3, #32
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b0e      	ldr	r3, [pc, #56]	@ (8001314 <HAL_SPI_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0320 	and.w	r3, r3, #32
 80012e2:	60fb      	str	r3, [r7, #12]
 80012e4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012e6:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012f8:	2305      	movs	r3, #5
 80012fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012fc:	f107 0314 	add.w	r3, r7, #20
 8001300:	4619      	mov	r1, r3
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <HAL_SPI_MspInit+0x8c>)
 8001304:	f000 fd9c 	bl	8001e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001308:	bf00      	nop
 800130a:	3728      	adds	r7, #40	@ 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40015000 	.word	0x40015000
 8001314:	40023800 	.word	0x40023800
 8001318:	40021400 	.word	0x40021400

0800131c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b12      	ldr	r3, [pc, #72]	@ (8001370 <HAL_MspInit+0x54>)
 8001328:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132a:	4a11      	ldr	r2, [pc, #68]	@ (8001370 <HAL_MspInit+0x54>)
 800132c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001330:	6453      	str	r3, [r2, #68]	@ 0x44
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_MspInit+0x54>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001336:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	603b      	str	r3, [r7, #0]
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <HAL_MspInit+0x54>)
 8001344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <HAL_MspInit+0x54>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800134c:	6413      	str	r3, [r2, #64]	@ 0x40
 800134e:	4b08      	ldr	r3, [pc, #32]	@ (8001370 <HAL_MspInit+0x54>)
 8001350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001352:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800135a:	2200      	movs	r2, #0
 800135c:	210f      	movs	r1, #15
 800135e:	f06f 0001 	mvn.w	r0, #1
 8001362:	f000 fb3b 	bl	80019dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800

08001374 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08e      	sub	sp, #56	@ 0x38
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	4b33      	ldr	r3, [pc, #204]	@ (8001458 <HAL_InitTick+0xe4>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800138c:	4a32      	ldr	r2, [pc, #200]	@ (8001458 <HAL_InitTick+0xe4>)
 800138e:	f043 0310 	orr.w	r3, r3, #16
 8001392:	6413      	str	r3, [r2, #64]	@ 0x40
 8001394:	4b30      	ldr	r3, [pc, #192]	@ (8001458 <HAL_InitTick+0xe4>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	f003 0310 	and.w	r3, r3, #16
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013a0:	f107 0210 	add.w	r2, r7, #16
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4611      	mov	r1, r2
 80013aa:	4618      	mov	r0, r3
 80013ac:	f004 fa02 	bl	80057b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80013b0:	6a3b      	ldr	r3, [r7, #32]
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80013b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d103      	bne.n	80013c2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80013ba:	f004 f9d3 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 80013be:	6378      	str	r0, [r7, #52]	@ 0x34
 80013c0:	e004      	b.n	80013cc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013c2:	f004 f9cf 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 80013c6:	4603      	mov	r3, r0
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013ce:	4a23      	ldr	r2, [pc, #140]	@ (800145c <HAL_InitTick+0xe8>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0c9b      	lsrs	r3, r3, #18
 80013d6:	3b01      	subs	r3, #1
 80013d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013da:	4b21      	ldr	r3, [pc, #132]	@ (8001460 <HAL_InitTick+0xec>)
 80013dc:	4a21      	ldr	r2, [pc, #132]	@ (8001464 <HAL_InitTick+0xf0>)
 80013de:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001460 <HAL_InitTick+0xec>)
 80013e2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013e6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001460 <HAL_InitTick+0xec>)
 80013ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013ec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013ee:	4b1c      	ldr	r3, [pc, #112]	@ (8001460 <HAL_InitTick+0xec>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001460 <HAL_InitTick+0xec>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fa:	4b19      	ldr	r3, [pc, #100]	@ (8001460 <HAL_InitTick+0xec>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001400:	4817      	ldr	r0, [pc, #92]	@ (8001460 <HAL_InitTick+0xec>)
 8001402:	f004 fea7 	bl	8006154 <HAL_TIM_Base_Init>
 8001406:	4603      	mov	r3, r0
 8001408:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800140c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001410:	2b00      	cmp	r3, #0
 8001412:	d11b      	bne.n	800144c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001414:	4812      	ldr	r0, [pc, #72]	@ (8001460 <HAL_InitTick+0xec>)
 8001416:	f004 feed 	bl	80061f4 <HAL_TIM_Base_Start_IT>
 800141a:	4603      	mov	r3, r0
 800141c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001420:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001424:	2b00      	cmp	r3, #0
 8001426:	d111      	bne.n	800144c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001428:	2036      	movs	r0, #54	@ 0x36
 800142a:	f000 faf3 	bl	8001a14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2b0f      	cmp	r3, #15
 8001432:	d808      	bhi.n	8001446 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001434:	2200      	movs	r2, #0
 8001436:	6879      	ldr	r1, [r7, #4]
 8001438:	2036      	movs	r0, #54	@ 0x36
 800143a:	f000 facf 	bl	80019dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800143e:	4a0a      	ldr	r2, [pc, #40]	@ (8001468 <HAL_InitTick+0xf4>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6013      	str	r3, [r2, #0]
 8001444:	e002      	b.n	800144c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800144c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001450:	4618      	mov	r0, r3
 8001452:	3738      	adds	r7, #56	@ 0x38
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	40023800 	.word	0x40023800
 800145c:	431bde83 	.word	0x431bde83
 8001460:	200004cc 	.word	0x200004cc
 8001464:	40001000 	.word	0x40001000
 8001468:	20000004 	.word	0x20000004

0800146c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001470:	bf00      	nop
 8001472:	e7fd      	b.n	8001470 <NMI_Handler+0x4>

08001474 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001478:	bf00      	nop
 800147a:	e7fd      	b.n	8001478 <HardFault_Handler+0x4>

0800147c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001480:	bf00      	nop
 8001482:	e7fd      	b.n	8001480 <MemManage_Handler+0x4>

08001484 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <BusFault_Handler+0x4>

0800148c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001490:	bf00      	nop
 8001492:	e7fd      	b.n	8001490 <UsageFault_Handler+0x4>

08001494 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
	...

080014a4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014a8:	4802      	ldr	r0, [pc, #8]	@ (80014b4 <TIM6_DAC_IRQHandler+0x10>)
 80014aa:	f004 ff13 	bl	80062d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014ae:	bf00      	nop
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	200004cc 	.word	0x200004cc

080014b8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014bc:	4802      	ldr	r0, [pc, #8]	@ (80014c8 <OTG_HS_IRQHandler+0x10>)
 80014be:	f001 f965 	bl	800278c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20008ae8 	.word	0x20008ae8

080014cc <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014d0:	4802      	ldr	r0, [pc, #8]	@ (80014dc <LTDC_IRQHandler+0x10>)
 80014d2:	f003 fa3f 	bl	8004954 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014d6:	bf00      	nop
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	200003cc 	.word	0x200003cc

080014e0 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014e4:	4802      	ldr	r0, [pc, #8]	@ (80014f0 <DMA2D_IRQHandler+0x10>)
 80014e6:	f000 fb08 	bl	8001afa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200000a4 	.word	0x200000a4

080014f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014fc:	4a14      	ldr	r2, [pc, #80]	@ (8001550 <_sbrk+0x5c>)
 80014fe:	4b15      	ldr	r3, [pc, #84]	@ (8001554 <_sbrk+0x60>)
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001508:	4b13      	ldr	r3, [pc, #76]	@ (8001558 <_sbrk+0x64>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001510:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <_sbrk+0x64>)
 8001512:	4a12      	ldr	r2, [pc, #72]	@ (800155c <_sbrk+0x68>)
 8001514:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001516:	4b10      	ldr	r3, [pc, #64]	@ (8001558 <_sbrk+0x64>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4413      	add	r3, r2
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	429a      	cmp	r2, r3
 8001522:	d207      	bcs.n	8001534 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001524:	f00c f916 	bl	800d754 <__errno>
 8001528:	4603      	mov	r3, r0
 800152a:	220c      	movs	r2, #12
 800152c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800152e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001532:	e009      	b.n	8001548 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001534:	4b08      	ldr	r3, [pc, #32]	@ (8001558 <_sbrk+0x64>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <_sbrk+0x64>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4413      	add	r3, r2
 8001542:	4a05      	ldr	r2, [pc, #20]	@ (8001558 <_sbrk+0x64>)
 8001544:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001546:	68fb      	ldr	r3, [r7, #12]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20030000 	.word	0x20030000
 8001554:	00000400 	.word	0x00000400
 8001558:	20000514 	.word	0x20000514
 800155c:	20009010 	.word	0x20009010

08001560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001564:	4b06      	ldr	r3, [pc, #24]	@ (8001580 <SystemInit+0x20>)
 8001566:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156a:	4a05      	ldr	r2, [pc, #20]	@ (8001580 <SystemInit+0x20>)
 800156c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001570:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed00 	.word	0xe000ed00

08001584 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0308 	add.w	r3, r7, #8
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	463b      	mov	r3, r7
 800159a:	2200      	movs	r2, #0
 800159c:	601a      	str	r2, [r3, #0]
 800159e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80015a0:	4b1e      	ldr	r3, [pc, #120]	@ (800161c <MX_TIM1_Init+0x98>)
 80015a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001620 <MX_TIM1_Init+0x9c>)
 80015a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80015a6:	4b1d      	ldr	r3, [pc, #116]	@ (800161c <MX_TIM1_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ac:	4b1b      	ldr	r3, [pc, #108]	@ (800161c <MX_TIM1_Init+0x98>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80015b2:	4b1a      	ldr	r3, [pc, #104]	@ (800161c <MX_TIM1_Init+0x98>)
 80015b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80015b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ba:	4b18      	ldr	r3, [pc, #96]	@ (800161c <MX_TIM1_Init+0x98>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015c0:	4b16      	ldr	r3, [pc, #88]	@ (800161c <MX_TIM1_Init+0x98>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <MX_TIM1_Init+0x98>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015cc:	4813      	ldr	r0, [pc, #76]	@ (800161c <MX_TIM1_Init+0x98>)
 80015ce:	f004 fdc1 	bl	8006154 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80015d8:	f7ff fe1c 	bl	8001214 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	4619      	mov	r1, r3
 80015e8:	480c      	ldr	r0, [pc, #48]	@ (800161c <MX_TIM1_Init+0x98>)
 80015ea:	f004 ff63 	bl	80064b4 <HAL_TIM_ConfigClockSource>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015f4:	f7ff fe0e 	bl	8001214 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f8:	2300      	movs	r3, #0
 80015fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fc:	2300      	movs	r3, #0
 80015fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001600:	463b      	mov	r3, r7
 8001602:	4619      	mov	r1, r3
 8001604:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_TIM1_Init+0x98>)
 8001606:	f005 f98b 	bl	8006920 <HAL_TIMEx_MasterConfigSynchronization>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001610:	f7ff fe00 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	20000518 	.word	0x20000518
 8001620:	40010000 	.word	0x40010000

08001624 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a0b      	ldr	r2, [pc, #44]	@ (8001660 <HAL_TIM_Base_MspInit+0x3c>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d10d      	bne.n	8001652 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b0a      	ldr	r3, [pc, #40]	@ (8001664 <HAL_TIM_Base_MspInit+0x40>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	4a09      	ldr	r2, [pc, #36]	@ (8001664 <HAL_TIM_Base_MspInit+0x40>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6453      	str	r3, [r2, #68]	@ 0x44
 8001646:	4b07      	ldr	r3, [pc, #28]	@ (8001664 <HAL_TIM_Base_MspInit+0x40>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001652:	bf00      	nop
 8001654:	3714      	adds	r7, #20
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	40010000 	.word	0x40010000
 8001664:	40023800 	.word	0x40023800

08001668 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800166c:	4b11      	ldr	r3, [pc, #68]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 800166e:	4a12      	ldr	r2, [pc, #72]	@ (80016b8 <MX_USART1_UART_Init+0x50>)
 8001670:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001674:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001678:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800167a:	4b0e      	ldr	r3, [pc, #56]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 800167c:	2200      	movs	r2, #0
 800167e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001680:	4b0c      	ldr	r3, [pc, #48]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001682:	2200      	movs	r2, #0
 8001684:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001688:	2200      	movs	r2, #0
 800168a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800168c:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 800168e:	220c      	movs	r2, #12
 8001690:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001692:	4b08      	ldr	r3, [pc, #32]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 8001694:	2200      	movs	r2, #0
 8001696:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001698:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 800169a:	2200      	movs	r2, #0
 800169c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	@ (80016b4 <MX_USART1_UART_Init+0x4c>)
 80016a0:	f005 f9ce 	bl	8006a40 <HAL_UART_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80016aa:	f7ff fdb3 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000560 	.word	0x20000560
 80016b8:	40011000 	.word	0x40011000

080016bc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	@ 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a19      	ldr	r2, [pc, #100]	@ (8001740 <HAL_UART_MspInit+0x84>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d12c      	bne.n	8001738 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	613b      	str	r3, [r7, #16]
 80016e2:	4b18      	ldr	r3, [pc, #96]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	4a17      	ldr	r2, [pc, #92]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016e8:	f043 0310 	orr.w	r3, r3, #16
 80016ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_UART_MspInit+0x88>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	f003 0310 	and.w	r3, r3, #16
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016fa:	2300      	movs	r3, #0
 80016fc:	60fb      	str	r3, [r7, #12]
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_UART_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	4a10      	ldr	r2, [pc, #64]	@ (8001744 <HAL_UART_MspInit+0x88>)
 8001704:	f043 0301 	orr.w	r3, r3, #1
 8001708:	6313      	str	r3, [r2, #48]	@ 0x30
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <HAL_UART_MspInit+0x88>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	f003 0301 	and.w	r3, r3, #1
 8001712:	60fb      	str	r3, [r7, #12]
 8001714:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001716:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800171a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171c:	2302      	movs	r3, #2
 800171e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001724:	2303      	movs	r3, #3
 8001726:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001728:	2307      	movs	r3, #7
 800172a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172c:	f107 0314 	add.w	r3, r7, #20
 8001730:	4619      	mov	r1, r3
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <HAL_UART_MspInit+0x8c>)
 8001734:	f000 fb84 	bl	8001e40 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001738:	bf00      	nop
 800173a:	3728      	adds	r7, #40	@ 0x28
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40011000 	.word	0x40011000
 8001744:	40023800 	.word	0x40023800
 8001748:	40020000 	.word	0x40020000

0800174c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800174c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001784 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001750:	f7ff ff06 	bl	8001560 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001756:	490d      	ldr	r1, [pc, #52]	@ (800178c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001758:	4a0d      	ldr	r2, [pc, #52]	@ (8001790 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0a      	ldr	r2, [pc, #40]	@ (8001794 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800176c:	4c0a      	ldr	r4, [pc, #40]	@ (8001798 <LoopFillZerobss+0x22>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800177a:	f00b fff1 	bl	800d760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177e:	f7ff fcad 	bl	80010dc <main>
  bx  lr    
 8001782:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001784:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800178c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001790:	0800d934 	.word	0x0800d934
  ldr r2, =_sbss
 8001794:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001798:	20009010 	.word	0x20009010

0800179c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800179c:	e7fe      	b.n	800179c <ADC_IRQHandler>
	...

080017a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80017a4:	4b0e      	ldr	r3, [pc, #56]	@ (80017e0 <HAL_Init+0x40>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a0d      	ldr	r2, [pc, #52]	@ (80017e0 <HAL_Init+0x40>)
 80017aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80017b0:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <HAL_Init+0x40>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a0a      	ldr	r2, [pc, #40]	@ (80017e0 <HAL_Init+0x40>)
 80017b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <HAL_Init+0x40>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a07      	ldr	r2, [pc, #28]	@ (80017e0 <HAL_Init+0x40>)
 80017c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017c8:	2003      	movs	r0, #3
 80017ca:	f000 f8fc 	bl	80019c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ce:	2000      	movs	r0, #0
 80017d0:	f7ff fdd0 	bl	8001374 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017d4:	f7ff fda2 	bl	800131c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40023c00 	.word	0x40023c00

080017e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017e8:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <HAL_IncTick+0x20>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	461a      	mov	r2, r3
 80017ee:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <HAL_IncTick+0x24>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	4a04      	ldr	r2, [pc, #16]	@ (8001808 <HAL_IncTick+0x24>)
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	20000008 	.word	0x20000008
 8001808:	200005a8 	.word	0x200005a8

0800180c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return uwTick;
 8001810:	4b03      	ldr	r3, [pc, #12]	@ (8001820 <HAL_GetTick+0x14>)
 8001812:	681b      	ldr	r3, [r3, #0]
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	200005a8 	.word	0x200005a8

08001824 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ffee 	bl	800180c <HAL_GetTick>
 8001830:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800183c:	d005      	beq.n	800184a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800183e:	4b0a      	ldr	r3, [pc, #40]	@ (8001868 <HAL_Delay+0x44>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	4413      	add	r3, r2
 8001848:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800184a:	bf00      	nop
 800184c:	f7ff ffde 	bl	800180c <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	429a      	cmp	r2, r3
 800185a:	d8f7      	bhi.n	800184c <HAL_Delay+0x28>
  {
  }
}
 800185c:	bf00      	nop
 800185e:	bf00      	nop
 8001860:	3710      	adds	r7, #16
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000008 	.word	0x20000008

0800186c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800186c:	b480      	push	{r7}
 800186e:	b085      	sub	sp, #20
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001882:	68ba      	ldr	r2, [r7, #8]
 8001884:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001888:	4013      	ands	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001894:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800189c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189e:	4a04      	ldr	r2, [pc, #16]	@ (80018b0 <__NVIC_SetPriorityGrouping+0x44>)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	60d3      	str	r3, [r2, #12]
}
 80018a4:	bf00      	nop
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b8:	4b04      	ldr	r3, [pc, #16]	@ (80018cc <__NVIC_GetPriorityGrouping+0x18>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	0a1b      	lsrs	r3, r3, #8
 80018be:	f003 0307 	and.w	r3, r3, #7
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	db0b      	blt.n	80018fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018e2:	79fb      	ldrb	r3, [r7, #7]
 80018e4:	f003 021f 	and.w	r2, r3, #31
 80018e8:	4907      	ldr	r1, [pc, #28]	@ (8001908 <__NVIC_EnableIRQ+0x38>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	095b      	lsrs	r3, r3, #5
 80018f0:	2001      	movs	r0, #1
 80018f2:	fa00 f202 	lsl.w	r2, r0, r2
 80018f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018fa:	bf00      	nop
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000e100 	.word	0xe000e100

0800190c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001918:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191c:	2b00      	cmp	r3, #0
 800191e:	db0a      	blt.n	8001936 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	b2da      	uxtb	r2, r3
 8001924:	490c      	ldr	r1, [pc, #48]	@ (8001958 <__NVIC_SetPriority+0x4c>)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	0112      	lsls	r2, r2, #4
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	440b      	add	r3, r1
 8001930:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001934:	e00a      	b.n	800194c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	b2da      	uxtb	r2, r3
 800193a:	4908      	ldr	r1, [pc, #32]	@ (800195c <__NVIC_SetPriority+0x50>)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	3b04      	subs	r3, #4
 8001944:	0112      	lsls	r2, r2, #4
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	440b      	add	r3, r1
 800194a:	761a      	strb	r2, [r3, #24]
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000e100 	.word	0xe000e100
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001960:	b480      	push	{r7}
 8001962:	b089      	sub	sp, #36	@ 0x24
 8001964:	af00      	add	r7, sp, #0
 8001966:	60f8      	str	r0, [r7, #12]
 8001968:	60b9      	str	r1, [r7, #8]
 800196a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	f1c3 0307 	rsb	r3, r3, #7
 800197a:	2b04      	cmp	r3, #4
 800197c:	bf28      	it	cs
 800197e:	2304      	movcs	r3, #4
 8001980:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	3304      	adds	r3, #4
 8001986:	2b06      	cmp	r3, #6
 8001988:	d902      	bls.n	8001990 <NVIC_EncodePriority+0x30>
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3b03      	subs	r3, #3
 800198e:	e000      	b.n	8001992 <NVIC_EncodePriority+0x32>
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43da      	mvns	r2, r3
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	401a      	ands	r2, r3
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa01 f303 	lsl.w	r3, r1, r3
 80019b2:	43d9      	mvns	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b8:	4313      	orrs	r3, r2
         );
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3724      	adds	r7, #36	@ 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b082      	sub	sp, #8
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f7ff ff4c 	bl	800186c <__NVIC_SetPriorityGrouping>
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019dc:	b580      	push	{r7, lr}
 80019de:	b086      	sub	sp, #24
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	607a      	str	r2, [r7, #4]
 80019e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019ee:	f7ff ff61 	bl	80018b4 <__NVIC_GetPriorityGrouping>
 80019f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	68b9      	ldr	r1, [r7, #8]
 80019f8:	6978      	ldr	r0, [r7, #20]
 80019fa:	f7ff ffb1 	bl	8001960 <NVIC_EncodePriority>
 80019fe:	4602      	mov	r2, r0
 8001a00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff80 	bl	800190c <__NVIC_SetPriority>
}
 8001a0c:	bf00      	nop
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff ff54 	bl	80018d0 <__NVIC_EnableIRQ>
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00e      	b.n	8001a60 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	795b      	ldrb	r3, [r3, #5]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d105      	bne.n	8001a58 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f7fe fd76 	bl	8000544 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}

08001a68 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e03b      	b.n	8001af2 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7fe fdac 	bl	80005ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2202      	movs	r2, #2
 8001a98:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ab8:	f023 0107 	bic.w	r1, r3, #7
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001ad2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	68d1      	ldr	r1, [r2, #12]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	6812      	ldr	r2, [r2, #0]
 8001ade:	430b      	orrs	r3, r1
 8001ae0:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b084      	sub	sp, #16
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d026      	beq.n	8001b6a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d021      	beq.n	8001b6a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b34:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b3a:	f043 0201 	orr.w	r2, r3, #1
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d003      	beq.n	8001b6a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	695b      	ldr	r3, [r3, #20]
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f003 0320 	and.w	r3, r3, #32
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d026      	beq.n	8001bc2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d021      	beq.n	8001bc2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2220      	movs	r2, #32
 8001b94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b9a:	f043 0202 	orr.w	r2, r3, #2
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2204      	movs	r2, #4
 8001ba6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	f003 0308 	and.w	r3, r3, #8
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d026      	beq.n	8001c1a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d021      	beq.n	8001c1a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001be4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2208      	movs	r2, #8
 8001bec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bf2:	f043 0204 	orr.w	r2, r3, #4
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	f003 0304 	and.w	r3, r3, #4
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d013      	beq.n	8001c4c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00e      	beq.n	8001c4c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2204      	movs	r2, #4
 8001c44:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f853 	bl	8001cf2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d024      	beq.n	8001ca0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d01f      	beq.n	8001ca0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2202      	movs	r2, #2
 8001c76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d003      	beq.n	8001ca0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	f003 0310 	and.w	r3, r3, #16
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01f      	beq.n	8001cea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d01a      	beq.n	8001cea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001cc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2210      	movs	r2, #16
 8001cca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f80e 	bl	8001d06 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_DMA2D_ConfigLayer+0x20>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e079      	b.n	8001e30 <HAL_DMA2D_ConfigLayer+0x114>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2202      	movs	r2, #2
 8001d48:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	3318      	adds	r3, #24
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	685a      	ldr	r2, [r3, #4]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	4313      	orrs	r3, r2
 8001d64:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001d66:	4b35      	ldr	r3, [pc, #212]	@ (8001e3c <HAL_DMA2D_ConfigLayer+0x120>)
 8001d68:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b0a      	cmp	r3, #10
 8001d70:	d003      	beq.n	8001d7a <HAL_DMA2D_ConfigLayer+0x5e>
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d107      	bne.n	8001d8a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	617b      	str	r3, [r7, #20]
 8001d88:	e005      	b.n	8001d96 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	061b      	lsls	r3, r3, #24
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d120      	bne.n	8001dde <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43db      	mvns	r3, r3
 8001da6:	ea02 0103 	and.w	r1, r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	6812      	ldr	r2, [r2, #0]
 8001dbc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	2b0a      	cmp	r3, #10
 8001dc4:	d003      	beq.n	8001dce <HAL_DMA2D_ConfigLayer+0xb2>
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	2b09      	cmp	r3, #9
 8001dcc:	d127      	bne.n	8001e1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001dda:	629a      	str	r2, [r3, #40]	@ 0x28
 8001ddc:	e01f      	b.n	8001e1e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	69da      	ldr	r2, [r3, #28]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	ea02 0103 	and.w	r1, r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	697a      	ldr	r2, [r7, #20]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	693a      	ldr	r2, [r7, #16]
 8001dfc:	6812      	ldr	r2, [r2, #0]
 8001dfe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b0a      	cmp	r3, #10
 8001e06:	d003      	beq.n	8001e10 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b09      	cmp	r3, #9
 8001e0e:	d106      	bne.n	8001e1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	68da      	ldr	r2, [r3, #12]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e1c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2201      	movs	r2, #1
 8001e22:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	371c      	adds	r7, #28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr
 8001e3c:	ff03000f 	.word	0xff03000f

08001e40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b089      	sub	sp, #36	@ 0x24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
 8001e5a:	e177      	b.n	800214c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e70:	693a      	ldr	r2, [r7, #16]
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	f040 8166 	bne.w	8002146 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d005      	beq.n	8001e92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d130      	bne.n	8001ef4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	69ba      	ldr	r2, [r7, #24]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec8:	2201      	movs	r2, #1
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	091b      	lsrs	r3, r3, #4
 8001ede:	f003 0201 	and.w	r2, r3, #1
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	4313      	orrs	r3, r2
 8001eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d017      	beq.n	8001f30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	2203      	movs	r2, #3
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689a      	ldr	r2, [r3, #8]
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f003 0303 	and.w	r3, r3, #3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d123      	bne.n	8001f84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	08da      	lsrs	r2, r3, #3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3208      	adds	r2, #8
 8001f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	220f      	movs	r2, #15
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	691a      	ldr	r2, [r3, #16]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4313      	orrs	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	08da      	lsrs	r2, r3, #3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	3208      	adds	r2, #8
 8001f7e:	69b9      	ldr	r1, [r7, #24]
 8001f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	2203      	movs	r2, #3
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f003 0203 	and.w	r2, r3, #3
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	f000 80c0 	beq.w	8002146 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	60fb      	str	r3, [r7, #12]
 8001fca:	4b66      	ldr	r3, [pc, #408]	@ (8002164 <HAL_GPIO_Init+0x324>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a65      	ldr	r2, [pc, #404]	@ (8002164 <HAL_GPIO_Init+0x324>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b63      	ldr	r3, [pc, #396]	@ (8002164 <HAL_GPIO_Init+0x324>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fe2:	4a61      	ldr	r2, [pc, #388]	@ (8002168 <HAL_GPIO_Init+0x328>)
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	089b      	lsrs	r3, r3, #2
 8001fe8:	3302      	adds	r3, #2
 8001fea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ff0:	69fb      	ldr	r3, [r7, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	220f      	movs	r2, #15
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43db      	mvns	r3, r3
 8002000:	69ba      	ldr	r2, [r7, #24]
 8002002:	4013      	ands	r3, r2
 8002004:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a58      	ldr	r2, [pc, #352]	@ (800216c <HAL_GPIO_Init+0x32c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d037      	beq.n	800207e <HAL_GPIO_Init+0x23e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a57      	ldr	r2, [pc, #348]	@ (8002170 <HAL_GPIO_Init+0x330>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d031      	beq.n	800207a <HAL_GPIO_Init+0x23a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a56      	ldr	r2, [pc, #344]	@ (8002174 <HAL_GPIO_Init+0x334>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d02b      	beq.n	8002076 <HAL_GPIO_Init+0x236>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a55      	ldr	r2, [pc, #340]	@ (8002178 <HAL_GPIO_Init+0x338>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d025      	beq.n	8002072 <HAL_GPIO_Init+0x232>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a54      	ldr	r2, [pc, #336]	@ (800217c <HAL_GPIO_Init+0x33c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01f      	beq.n	800206e <HAL_GPIO_Init+0x22e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a53      	ldr	r2, [pc, #332]	@ (8002180 <HAL_GPIO_Init+0x340>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d019      	beq.n	800206a <HAL_GPIO_Init+0x22a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a52      	ldr	r2, [pc, #328]	@ (8002184 <HAL_GPIO_Init+0x344>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0x226>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a51      	ldr	r2, [pc, #324]	@ (8002188 <HAL_GPIO_Init+0x348>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d00d      	beq.n	8002062 <HAL_GPIO_Init+0x222>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a50      	ldr	r2, [pc, #320]	@ (800218c <HAL_GPIO_Init+0x34c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d007      	beq.n	800205e <HAL_GPIO_Init+0x21e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a4f      	ldr	r2, [pc, #316]	@ (8002190 <HAL_GPIO_Init+0x350>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d101      	bne.n	800205a <HAL_GPIO_Init+0x21a>
 8002056:	2309      	movs	r3, #9
 8002058:	e012      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800205a:	230a      	movs	r3, #10
 800205c:	e010      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800205e:	2308      	movs	r3, #8
 8002060:	e00e      	b.n	8002080 <HAL_GPIO_Init+0x240>
 8002062:	2307      	movs	r3, #7
 8002064:	e00c      	b.n	8002080 <HAL_GPIO_Init+0x240>
 8002066:	2306      	movs	r3, #6
 8002068:	e00a      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800206a:	2305      	movs	r3, #5
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800206e:	2304      	movs	r3, #4
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x240>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x240>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x240>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4935      	ldr	r1, [pc, #212]	@ (8002168 <HAL_GPIO_Init+0x328>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800209e:	4b3d      	ldr	r3, [pc, #244]	@ (8002194 <HAL_GPIO_Init+0x354>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c2:	4a34      	ldr	r2, [pc, #208]	@ (8002194 <HAL_GPIO_Init+0x354>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020c8:	4b32      	ldr	r3, [pc, #200]	@ (8002194 <HAL_GPIO_Init+0x354>)
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ec:	4a29      	ldr	r2, [pc, #164]	@ (8002194 <HAL_GPIO_Init+0x354>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f2:	4b28      	ldr	r3, [pc, #160]	@ (8002194 <HAL_GPIO_Init+0x354>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002116:	4a1f      	ldr	r2, [pc, #124]	@ (8002194 <HAL_GPIO_Init+0x354>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800211c:	4b1d      	ldr	r3, [pc, #116]	@ (8002194 <HAL_GPIO_Init+0x354>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002140:	4a14      	ldr	r2, [pc, #80]	@ (8002194 <HAL_GPIO_Init+0x354>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f ae84 	bls.w	8001e5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	@ 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40013800 	.word	0x40013800
 800216c:	40020000 	.word	0x40020000
 8002170:	40020400 	.word	0x40020400
 8002174:	40020800 	.word	0x40020800
 8002178:	40020c00 	.word	0x40020c00
 800217c:	40021000 	.word	0x40021000
 8002180:	40021400 	.word	0x40021400
 8002184:	40021800 	.word	0x40021800
 8002188:	40021c00 	.word	0x40021c00
 800218c:	40022000 	.word	0x40022000
 8002190:	40022400 	.word	0x40022400
 8002194:	40013c00 	.word	0x40013c00

08002198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
 80021a4:	4613      	mov	r3, r2
 80021a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80021a8:	787b      	ldrb	r3, [r7, #1]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ae:	887a      	ldrh	r2, [r7, #2]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b4:	e003      	b.n	80021be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021b6:	887b      	ldrh	r3, [r7, #2]
 80021b8:	041a      	lsls	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	619a      	str	r2, [r3, #24]
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c8:	4770      	bx	lr

080021ca <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b086      	sub	sp, #24
 80021ce:	af02      	add	r7, sp, #8
 80021d0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e059      	b.n	8002290 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d106      	bne.n	80021fc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f00a ff20 	bl	800d03c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2203      	movs	r2, #3
 8002200:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800220a:	d102      	bne.n	8002212 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2200      	movs	r2, #0
 8002210:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4618      	mov	r0, r3
 8002218:	f005 f811 	bl	800723e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6818      	ldr	r0, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	7c1a      	ldrb	r2, [r3, #16]
 8002224:	f88d 2000 	strb.w	r2, [sp]
 8002228:	3304      	adds	r3, #4
 800222a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800222c:	f004 ff92 	bl	8007154 <USB_CoreInit>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d005      	beq.n	8002242 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2202      	movs	r2, #2
 800223a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e026      	b.n	8002290 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	2101      	movs	r1, #1
 8002248:	4618      	mov	r0, r3
 800224a:	f005 f809 	bl	8007260 <USB_SetCurrentMode>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2202      	movs	r2, #2
 8002258:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e017      	b.n	8002290 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6818      	ldr	r0, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	7c1a      	ldrb	r2, [r3, #16]
 8002268:	f88d 2000 	strb.w	r2, [sp]
 800226c:	3304      	adds	r3, #4
 800226e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002270:	f005 f9ac 	bl	80075cc <USB_HostInit>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d005      	beq.n	8002286 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2202      	movs	r2, #2
 800227e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e004      	b.n	8002290 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002298:	b590      	push	{r4, r7, lr}
 800229a:	b08b      	sub	sp, #44	@ 0x2c
 800229c:	af04      	add	r7, sp, #16
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	4608      	mov	r0, r1
 80022a2:	4611      	mov	r1, r2
 80022a4:	461a      	mov	r2, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	70fb      	strb	r3, [r7, #3]
 80022aa:	460b      	mov	r3, r1
 80022ac:	70bb      	strb	r3, [r7, #2]
 80022ae:	4613      	mov	r3, r2
 80022b0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80022b2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80022b4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d101      	bne.n	80022c4 <HAL_HCD_HC_Init+0x2c>
 80022c0:	2302      	movs	r3, #2
 80022c2:	e09d      	b.n	8002400 <HAL_HCD_HC_Init+0x168>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80022cc:	78fa      	ldrb	r2, [r7, #3]
 80022ce:	6879      	ldr	r1, [r7, #4]
 80022d0:	4613      	mov	r3, r2
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	1a9b      	subs	r3, r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	440b      	add	r3, r1
 80022da:	3319      	adds	r3, #25
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	4613      	mov	r3, r2
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	1a9b      	subs	r3, r3, r2
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	440b      	add	r3, r1
 80022ee:	3314      	adds	r3, #20
 80022f0:	787a      	ldrb	r2, [r7, #1]
 80022f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80022f4:	78fa      	ldrb	r2, [r7, #3]
 80022f6:	6879      	ldr	r1, [r7, #4]
 80022f8:	4613      	mov	r3, r2
 80022fa:	011b      	lsls	r3, r3, #4
 80022fc:	1a9b      	subs	r3, r3, r2
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	440b      	add	r3, r1
 8002302:	3315      	adds	r3, #21
 8002304:	78fa      	ldrb	r2, [r7, #3]
 8002306:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	3326      	adds	r3, #38	@ 0x26
 8002318:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800231c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	78bb      	ldrb	r3, [r7, #2]
 8002322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002326:	b2d8      	uxtb	r0, r3
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	011b      	lsls	r3, r3, #4
 800232e:	1a9b      	subs	r3, r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3316      	adds	r3, #22
 8002336:	4602      	mov	r2, r0
 8002338:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800233a:	78fb      	ldrb	r3, [r7, #3]
 800233c:	4619      	mov	r1, r3
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fbc8 	bl	8002ad4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002344:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002348:	2b00      	cmp	r3, #0
 800234a:	da0a      	bge.n	8002362 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3317      	adds	r3, #23
 800235c:	2201      	movs	r2, #1
 800235e:	701a      	strb	r2, [r3, #0]
 8002360:	e009      	b.n	8002376 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	6879      	ldr	r1, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	009b      	lsls	r3, r3, #2
 800236e:	440b      	add	r3, r1
 8002370:	3317      	adds	r3, #23
 8002372:	2200      	movs	r2, #0
 8002374:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f005 fa8a 	bl	8007894 <USB_GetHostSpeed>
 8002380:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002382:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002386:	2b01      	cmp	r3, #1
 8002388:	d10b      	bne.n	80023a2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800238a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800238e:	2b01      	cmp	r3, #1
 8002390:	d107      	bne.n	80023a2 <HAL_HCD_HC_Init+0x10a>
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d104      	bne.n	80023a2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	2bbc      	cmp	r3, #188	@ 0xbc
 800239c:	d901      	bls.n	80023a2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800239e:	23bc      	movs	r3, #188	@ 0xbc
 80023a0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3318      	adds	r3, #24
 80023b2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80023b6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	b298      	uxth	r0, r3
 80023be:	6879      	ldr	r1, [r7, #4]
 80023c0:	4613      	mov	r3, r2
 80023c2:	011b      	lsls	r3, r3, #4
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	3328      	adds	r3, #40	@ 0x28
 80023cc:	4602      	mov	r2, r0
 80023ce:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	787c      	ldrb	r4, [r7, #1]
 80023da:	78ba      	ldrb	r2, [r7, #2]
 80023dc:	78f9      	ldrb	r1, [r7, #3]
 80023de:	9302      	str	r3, [sp, #8]
 80023e0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023e4:	9301      	str	r3, [sp, #4]
 80023e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	4623      	mov	r3, r4
 80023ee:	f005 fa79 	bl	80078e4 <USB_HC_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2200      	movs	r2, #0
 80023fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002400:	4618      	mov	r0, r3
 8002402:	371c      	adds	r7, #28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd90      	pop	{r4, r7, pc}

08002408 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b084      	sub	sp, #16
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002414:	2300      	movs	r3, #0
 8002416:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_HCD_HC_Halt+0x1e>
 8002422:	2302      	movs	r3, #2
 8002424:	e00f      	b.n	8002446 <HAL_HCD_HC_Halt+0x3e>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2201      	movs	r2, #1
 800242a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	4611      	mov	r1, r2
 8002436:	4618      	mov	r0, r3
 8002438:	f005 fe0b 	bl	8008052 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
	...

08002450 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	4608      	mov	r0, r1
 800245a:	4611      	mov	r1, r2
 800245c:	461a      	mov	r2, r3
 800245e:	4603      	mov	r3, r0
 8002460:	70fb      	strb	r3, [r7, #3]
 8002462:	460b      	mov	r3, r1
 8002464:	70bb      	strb	r3, [r7, #2]
 8002466:	4613      	mov	r3, r2
 8002468:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800246a:	78fa      	ldrb	r2, [r7, #3]
 800246c:	6879      	ldr	r1, [r7, #4]
 800246e:	4613      	mov	r3, r2
 8002470:	011b      	lsls	r3, r3, #4
 8002472:	1a9b      	subs	r3, r3, r2
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	440b      	add	r3, r1
 8002478:	3317      	adds	r3, #23
 800247a:	78ba      	ldrb	r2, [r7, #2]
 800247c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	6879      	ldr	r1, [r7, #4]
 8002482:	4613      	mov	r3, r2
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	1a9b      	subs	r3, r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	3326      	adds	r3, #38	@ 0x26
 800248e:	787a      	ldrb	r2, [r7, #1]
 8002490:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002492:	7c3b      	ldrb	r3, [r7, #16]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d114      	bne.n	80024c2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002498:	78fa      	ldrb	r2, [r7, #3]
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4613      	mov	r3, r2
 800249e:	011b      	lsls	r3, r3, #4
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	440b      	add	r3, r1
 80024a6:	332a      	adds	r3, #42	@ 0x2a
 80024a8:	2203      	movs	r2, #3
 80024aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	3319      	adds	r3, #25
 80024bc:	7f3a      	ldrb	r2, [r7, #28]
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e009      	b.n	80024d6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	332a      	adds	r3, #42	@ 0x2a
 80024d2:	2202      	movs	r2, #2
 80024d4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80024d6:	787b      	ldrb	r3, [r7, #1]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	f200 8102 	bhi.w	80026e2 <HAL_HCD_HC_SubmitRequest+0x292>
 80024de:	a201      	add	r2, pc, #4	@ (adr r2, 80024e4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80024e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024e4:	080024f5 	.word	0x080024f5
 80024e8:	080026cd 	.word	0x080026cd
 80024ec:	080025b9 	.word	0x080025b9
 80024f0:	08002643 	.word	0x08002643
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80024f4:	7c3b      	ldrb	r3, [r7, #16]
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	f040 80f5 	bne.w	80026e6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80024fc:	78bb      	ldrb	r3, [r7, #2]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d12d      	bne.n	800255e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002502:	8b3b      	ldrh	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d109      	bne.n	800251c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	6879      	ldr	r1, [r7, #4]
 800250c:	4613      	mov	r3, r2
 800250e:	011b      	lsls	r3, r3, #4
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	009b      	lsls	r3, r3, #2
 8002514:	440b      	add	r3, r1
 8002516:	333d      	adds	r3, #61	@ 0x3d
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800251c:	78fa      	ldrb	r2, [r7, #3]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	333d      	adds	r3, #61	@ 0x3d
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10a      	bne.n	8002548 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002532:	78fa      	ldrb	r2, [r7, #3]
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	4613      	mov	r3, r2
 8002538:	011b      	lsls	r3, r3, #4
 800253a:	1a9b      	subs	r3, r3, r2
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	440b      	add	r3, r1
 8002540:	332a      	adds	r3, #42	@ 0x2a
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002546:	e0ce      	b.n	80026e6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002548:	78fa      	ldrb	r2, [r7, #3]
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	4613      	mov	r3, r2
 800254e:	011b      	lsls	r3, r3, #4
 8002550:	1a9b      	subs	r3, r3, r2
 8002552:	009b      	lsls	r3, r3, #2
 8002554:	440b      	add	r3, r1
 8002556:	332a      	adds	r3, #42	@ 0x2a
 8002558:	2202      	movs	r2, #2
 800255a:	701a      	strb	r2, [r3, #0]
      break;
 800255c:	e0c3      	b.n	80026e6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800255e:	78fa      	ldrb	r2, [r7, #3]
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	011b      	lsls	r3, r3, #4
 8002566:	1a9b      	subs	r3, r3, r2
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	440b      	add	r3, r1
 800256c:	331a      	adds	r3, #26
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	2b01      	cmp	r3, #1
 8002572:	f040 80b8 	bne.w	80026e6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002576:	78fa      	ldrb	r2, [r7, #3]
 8002578:	6879      	ldr	r1, [r7, #4]
 800257a:	4613      	mov	r3, r2
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	1a9b      	subs	r3, r3, r2
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	333c      	adds	r3, #60	@ 0x3c
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10a      	bne.n	80025a2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800258c:	78fa      	ldrb	r2, [r7, #3]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	332a      	adds	r3, #42	@ 0x2a
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
      break;
 80025a0:	e0a1      	b.n	80026e6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	6879      	ldr	r1, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	011b      	lsls	r3, r3, #4
 80025aa:	1a9b      	subs	r3, r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	332a      	adds	r3, #42	@ 0x2a
 80025b2:	2202      	movs	r2, #2
 80025b4:	701a      	strb	r2, [r3, #0]
      break;
 80025b6:	e096      	b.n	80026e6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80025b8:	78bb      	ldrb	r3, [r7, #2]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d120      	bne.n	8002600 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	333d      	adds	r3, #61	@ 0x3d
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d10a      	bne.n	80025ea <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	6879      	ldr	r1, [r7, #4]
 80025d8:	4613      	mov	r3, r2
 80025da:	011b      	lsls	r3, r3, #4
 80025dc:	1a9b      	subs	r3, r3, r2
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	332a      	adds	r3, #42	@ 0x2a
 80025e4:	2200      	movs	r2, #0
 80025e6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80025e8:	e07e      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025ea:	78fa      	ldrb	r2, [r7, #3]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	1a9b      	subs	r3, r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	332a      	adds	r3, #42	@ 0x2a
 80025fa:	2202      	movs	r2, #2
 80025fc:	701a      	strb	r2, [r3, #0]
      break;
 80025fe:	e073      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002600:	78fa      	ldrb	r2, [r7, #3]
 8002602:	6879      	ldr	r1, [r7, #4]
 8002604:	4613      	mov	r3, r2
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	1a9b      	subs	r3, r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	333c      	adds	r3, #60	@ 0x3c
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10a      	bne.n	800262c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	011b      	lsls	r3, r3, #4
 800261e:	1a9b      	subs	r3, r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	440b      	add	r3, r1
 8002624:	332a      	adds	r3, #42	@ 0x2a
 8002626:	2200      	movs	r2, #0
 8002628:	701a      	strb	r2, [r3, #0]
      break;
 800262a:	e05d      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800262c:	78fa      	ldrb	r2, [r7, #3]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	1a9b      	subs	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	332a      	adds	r3, #42	@ 0x2a
 800263c:	2202      	movs	r2, #2
 800263e:	701a      	strb	r2, [r3, #0]
      break;
 8002640:	e052      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002642:	78bb      	ldrb	r3, [r7, #2]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d120      	bne.n	800268a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002648:	78fa      	ldrb	r2, [r7, #3]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	011b      	lsls	r3, r3, #4
 8002650:	1a9b      	subs	r3, r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	333d      	adds	r3, #61	@ 0x3d
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d10a      	bne.n	8002674 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800265e:	78fa      	ldrb	r2, [r7, #3]
 8002660:	6879      	ldr	r1, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	011b      	lsls	r3, r3, #4
 8002666:	1a9b      	subs	r3, r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	332a      	adds	r3, #42	@ 0x2a
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002672:	e039      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	332a      	adds	r3, #42	@ 0x2a
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
      break;
 8002688:	e02e      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800268a:	78fa      	ldrb	r2, [r7, #3]
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	440b      	add	r3, r1
 8002698:	333c      	adds	r3, #60	@ 0x3c
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10a      	bne.n	80026b6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026a0:	78fa      	ldrb	r2, [r7, #3]
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	4613      	mov	r3, r2
 80026a6:	011b      	lsls	r3, r3, #4
 80026a8:	1a9b      	subs	r3, r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	440b      	add	r3, r1
 80026ae:	332a      	adds	r3, #42	@ 0x2a
 80026b0:	2200      	movs	r2, #0
 80026b2:	701a      	strb	r2, [r3, #0]
      break;
 80026b4:	e018      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80026b6:	78fa      	ldrb	r2, [r7, #3]
 80026b8:	6879      	ldr	r1, [r7, #4]
 80026ba:	4613      	mov	r3, r2
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	1a9b      	subs	r3, r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	440b      	add	r3, r1
 80026c4:	332a      	adds	r3, #42	@ 0x2a
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]
      break;
 80026ca:	e00d      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80026cc:	78fa      	ldrb	r2, [r7, #3]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	4613      	mov	r3, r2
 80026d2:	011b      	lsls	r3, r3, #4
 80026d4:	1a9b      	subs	r3, r3, r2
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	332a      	adds	r3, #42	@ 0x2a
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
      break;
 80026e0:	e002      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80026e2:	bf00      	nop
 80026e4:	e000      	b.n	80026e8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80026e6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80026e8:	78fa      	ldrb	r2, [r7, #3]
 80026ea:	6879      	ldr	r1, [r7, #4]
 80026ec:	4613      	mov	r3, r2
 80026ee:	011b      	lsls	r3, r3, #4
 80026f0:	1a9b      	subs	r3, r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	332c      	adds	r3, #44	@ 0x2c
 80026f8:	697a      	ldr	r2, [r7, #20]
 80026fa:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80026fc:	78fa      	ldrb	r2, [r7, #3]
 80026fe:	8b39      	ldrh	r1, [r7, #24]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4613      	mov	r3, r2
 8002704:	011b      	lsls	r3, r3, #4
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	009b      	lsls	r3, r3, #2
 800270a:	4403      	add	r3, r0
 800270c:	3334      	adds	r3, #52	@ 0x34
 800270e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002710:	78fa      	ldrb	r2, [r7, #3]
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4613      	mov	r3, r2
 8002716:	011b      	lsls	r3, r3, #4
 8002718:	1a9b      	subs	r3, r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	440b      	add	r3, r1
 800271e:	334c      	adds	r3, #76	@ 0x4c
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002724:	78fa      	ldrb	r2, [r7, #3]
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	1a9b      	subs	r3, r3, r2
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	3338      	adds	r3, #56	@ 0x38
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	6879      	ldr	r1, [r7, #4]
 800273c:	4613      	mov	r3, r2
 800273e:	011b      	lsls	r3, r3, #4
 8002740:	1a9b      	subs	r3, r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	3315      	adds	r3, #21
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800274c:	78fa      	ldrb	r2, [r7, #3]
 800274e:	6879      	ldr	r1, [r7, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	440b      	add	r3, r1
 800275a:	334d      	adds	r3, #77	@ 0x4d
 800275c:	2200      	movs	r2, #0
 800275e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	78fa      	ldrb	r2, [r7, #3]
 8002766:	4613      	mov	r3, r2
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	1a9b      	subs	r3, r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	3310      	adds	r3, #16
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	4413      	add	r3, r2
 8002774:	1d19      	adds	r1, r3, #4
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	799b      	ldrb	r3, [r3, #6]
 800277a:	461a      	mov	r2, r3
 800277c:	f005 f9de 	bl	8007b3c <USB_HC_StartXfer>
 8002780:	4603      	mov	r3, r0
}
 8002782:	4618      	mov	r0, r3
 8002784:	3708      	adds	r7, #8
 8002786:	46bd      	mov	sp, r7
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop

0800278c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b086      	sub	sp, #24
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f004 fed2 	bl	800754c <USB_GetMode>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	f040 80fb 	bne.w	80029a6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4618      	mov	r0, r3
 80027b6:	f004 fe95 	bl	80074e4 <USB_ReadInterrupts>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	f000 80f1 	beq.w	80029a4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f004 fe8c 	bl	80074e4 <USB_ReadInterrupts>
 80027cc:	4603      	mov	r3, r0
 80027ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027d6:	d104      	bne.n	80027e2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80027e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f004 fe7c 	bl	80074e4 <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027f6:	d104      	bne.n	8002802 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002800:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f004 fe6c 	bl	80074e4 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002812:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002816:	d104      	bne.n	8002822 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002820:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f004 fe5c 	bl	80074e4 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b02      	cmp	r3, #2
 8002834:	d103      	bne.n	800283e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2202      	movs	r2, #2
 800283c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fe4e 	bl	80074e4 <USB_ReadInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800284e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002852:	d120      	bne.n	8002896 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800285c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	2b00      	cmp	r3, #0
 800286c:	d113      	bne.n	8002896 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800286e:	2110      	movs	r1, #16
 8002870:	6938      	ldr	r0, [r7, #16]
 8002872:	f004 fd41 	bl	80072f8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002876:	6938      	ldr	r0, [r7, #16]
 8002878:	f004 fd70 	bl	800735c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7a5b      	ldrb	r3, [r3, #9]
 8002880:	2b02      	cmp	r3, #2
 8002882:	d105      	bne.n	8002890 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2101      	movs	r1, #1
 800288a:	4618      	mov	r0, r3
 800288c:	f004 ff62 	bl	8007754 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f00a fc4d 	bl	800d130 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fe22 	bl	80074e4 <USB_ReadInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028aa:	d102      	bne.n	80028b2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80028ac:	6878      	ldr	r0, [r7, #4]
 80028ae:	f001 fd4d 	bl	800434c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f004 fe14 	bl	80074e4 <USB_ReadInterrupts>
 80028bc:	4603      	mov	r3, r0
 80028be:	f003 0308 	and.w	r3, r3, #8
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d106      	bne.n	80028d4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f00a fc16 	bl	800d0f8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2208      	movs	r2, #8
 80028d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 fe03 	bl	80074e4 <USB_ReadInterrupts>
 80028de:	4603      	mov	r3, r0
 80028e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028e8:	d139      	bne.n	800295e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f005 fb9e 	bl	8008030 <USB_HC_ReadInterrupt>
 80028f4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e025      	b.n	8002948 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	68ba      	ldr	r2, [r7, #8]
 8002904:	fa22 f303 	lsr.w	r3, r2, r3
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d018      	beq.n	8002942 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002926:	d106      	bne.n	8002936 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f905 	bl	8002b3e <HCD_HC_IN_IRQHandler>
 8002934:	e005      	b.n	8002942 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	b2db      	uxtb	r3, r3
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f000 ff67 	bl	8003810 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	3301      	adds	r3, #1
 8002946:	617b      	str	r3, [r7, #20]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	795b      	ldrb	r3, [r3, #5]
 800294c:	461a      	mov	r2, r3
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	4293      	cmp	r3, r2
 8002952:	d3d3      	bcc.n	80028fc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800295c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4618      	mov	r0, r3
 8002964:	f004 fdbe 	bl	80074e4 <USB_ReadInterrupts>
 8002968:	4603      	mov	r3, r0
 800296a:	f003 0310 	and.w	r3, r3, #16
 800296e:	2b10      	cmp	r3, #16
 8002970:	d101      	bne.n	8002976 <HAL_HCD_IRQHandler+0x1ea>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <HAL_HCD_IRQHandler+0x1ec>
 8002976:	2300      	movs	r3, #0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d014      	beq.n	80029a6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f022 0210 	bic.w	r2, r2, #16
 800298a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800298c:	6878      	ldr	r0, [r7, #4]
 800298e:	f001 fbfe 	bl	800418e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	699a      	ldr	r2, [r3, #24]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f042 0210 	orr.w	r2, r2, #16
 80029a0:	619a      	str	r2, [r3, #24]
 80029a2:	e000      	b.n	80029a6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80029a4:	bf00      	nop
    }
  }
}
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b082      	sub	sp, #8
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80029ba:	2b01      	cmp	r3, #1
 80029bc:	d101      	bne.n	80029c2 <HAL_HCD_Start+0x16>
 80029be:	2302      	movs	r3, #2
 80029c0:	e013      	b.n	80029ea <HAL_HCD_Start+0x3e>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2101      	movs	r1, #1
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 ff26 	bl	8007822 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4618      	mov	r0, r3
 80029dc:	f004 fc1e 	bl	800721c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d101      	bne.n	8002a08 <HAL_HCD_Stop+0x16>
 8002a04:	2302      	movs	r3, #2
 8002a06:	e00d      	b.n	8002a24 <HAL_HCD_Stop+0x32>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f005 fc79 	bl	800830c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3708      	adds	r7, #8
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 fec8 	bl	80077ce <USB_ResetPort>
 8002a3e:	4603      	mov	r3, r0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	460b      	mov	r3, r1
 8002a52:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002a54:	78fa      	ldrb	r2, [r7, #3]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	011b      	lsls	r3, r3, #4
 8002a5c:	1a9b      	subs	r3, r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	334c      	adds	r3, #76	@ 0x4c
 8002a64:	781b      	ldrb	r3, [r3, #0]
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	6879      	ldr	r1, [r7, #4]
 8002a82:	4613      	mov	r3, r2
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	1a9b      	subs	r3, r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	440b      	add	r3, r1
 8002a8c:	3338      	adds	r3, #56	@ 0x38
 8002a8e:	681b      	ldr	r3, [r3, #0]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f004 ff0a 	bl	80078c2 <USB_GetCurrentFrame>
 8002aae:	4603      	mov	r3, r0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}

08002ab8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f004 fee5 	bl	8007894 <USB_GetHostSpeed>
 8002aca:	4603      	mov	r3, r0
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3708      	adds	r7, #8
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	460b      	mov	r3, r1
 8002ade:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	331a      	adds	r3, #26
 8002af0:	2200      	movs	r2, #0
 8002af2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	331b      	adds	r3, #27
 8002b04:	2200      	movs	r2, #0
 8002b06:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	6879      	ldr	r1, [r7, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	1a9b      	subs	r3, r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	440b      	add	r3, r1
 8002b16:	3325      	adds	r3, #37	@ 0x25
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	3324      	adds	r3, #36	@ 0x24
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b086      	sub	sp, #24
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	78fa      	ldrb	r2, [r7, #3]
 8002b5a:	4611      	mov	r1, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f004 fcd4 	bl	800750a <USB_ReadChInterrupts>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	d11a      	bne.n	8002ba2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002b6c:	78fb      	ldrb	r3, [r7, #3]
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	334d      	adds	r3, #77	@ 0x4d
 8002b8e:	2207      	movs	r2, #7
 8002b90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	78fa      	ldrb	r2, [r7, #3]
 8002b98:	4611      	mov	r1, r2
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f005 fa59 	bl	8008052 <USB_HC_Halt>
 8002ba0:	e09e      	b.n	8002ce0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	4611      	mov	r1, r2
 8002baa:	4618      	mov	r0, r3
 8002bac:	f004 fcad 	bl	800750a <USB_ReadChInterrupts>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bba:	d11b      	bne.n	8002bf4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc8:	461a      	mov	r2, r3
 8002bca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002bd0:	78fa      	ldrb	r2, [r7, #3]
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	4613      	mov	r3, r2
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	1a9b      	subs	r3, r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	440b      	add	r3, r1
 8002bde:	334d      	adds	r3, #77	@ 0x4d
 8002be0:	2208      	movs	r2, #8
 8002be2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f005 fa30 	bl	8008052 <USB_HC_Halt>
 8002bf2:	e075      	b.n	8002ce0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 fc84 	bl	800750a <USB_ReadChInterrupts>
 8002c02:	4603      	mov	r3, r0
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d11a      	bne.n	8002c42 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002c0c:	78fb      	ldrb	r3, [r7, #3]
 8002c0e:	015a      	lsls	r2, r3, #5
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4413      	add	r3, r2
 8002c14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c18:	461a      	mov	r2, r3
 8002c1a:	2308      	movs	r3, #8
 8002c1c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002c1e:	78fa      	ldrb	r2, [r7, #3]
 8002c20:	6879      	ldr	r1, [r7, #4]
 8002c22:	4613      	mov	r3, r2
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	1a9b      	subs	r3, r3, r2
 8002c28:	009b      	lsls	r3, r3, #2
 8002c2a:	440b      	add	r3, r1
 8002c2c:	334d      	adds	r3, #77	@ 0x4d
 8002c2e:	2206      	movs	r2, #6
 8002c30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	78fa      	ldrb	r2, [r7, #3]
 8002c38:	4611      	mov	r1, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f005 fa09 	bl	8008052 <USB_HC_Halt>
 8002c40:	e04e      	b.n	8002ce0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 fc5d 	bl	800750a <USB_ReadChInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c5a:	d11b      	bne.n	8002c94 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002c5c:	78fb      	ldrb	r3, [r7, #3]
 8002c5e:	015a      	lsls	r2, r3, #5
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	4413      	add	r3, r2
 8002c64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c6e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334d      	adds	r3, #77	@ 0x4d
 8002c80:	2209      	movs	r2, #9
 8002c82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f005 f9e0 	bl	8008052 <USB_HC_Halt>
 8002c92:	e025      	b.n	8002ce0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	4611      	mov	r1, r2
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f004 fc34 	bl	800750a <USB_ReadChInterrupts>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ca8:	2b80      	cmp	r3, #128	@ 0x80
 8002caa:	d119      	bne.n	8002ce0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002cac:	78fb      	ldrb	r3, [r7, #3]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2380      	movs	r3, #128	@ 0x80
 8002cbc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002cbe:	78fa      	ldrb	r2, [r7, #3]
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	1a9b      	subs	r3, r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	334d      	adds	r3, #77	@ 0x4d
 8002cce:	2207      	movs	r2, #7
 8002cd0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	4611      	mov	r1, r2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f005 f9b9 	bl	8008052 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f004 fc0e 	bl	800750a <USB_ReadChInterrupts>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cf4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cf8:	d112      	bne.n	8002d20 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f005 f9a5 	bl	8008052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002d08:	78fb      	ldrb	r3, [r7, #3]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d1a:	6093      	str	r3, [r2, #8]
 8002d1c:	f000 bd75 	b.w	800380a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f004 fbee 	bl	800750a <USB_ReadChInterrupts>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f003 0301 	and.w	r3, r3, #1
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	f040 8128 	bne.w	8002f8a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d3a:	78fb      	ldrb	r3, [r7, #3]
 8002d3c:	015a      	lsls	r2, r3, #5
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	4413      	add	r3, r2
 8002d42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d46:	461a      	mov	r2, r3
 8002d48:	2320      	movs	r3, #32
 8002d4a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002d4c:	78fa      	ldrb	r2, [r7, #3]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	011b      	lsls	r3, r3, #4
 8002d54:	1a9b      	subs	r3, r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	331b      	adds	r3, #27
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d119      	bne.n	8002d96 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	6879      	ldr	r1, [r7, #4]
 8002d66:	4613      	mov	r3, r2
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	1a9b      	subs	r3, r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	440b      	add	r3, r1
 8002d70:	331b      	adds	r3, #27
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	015a      	lsls	r2, r3, #5
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4413      	add	r3, r2
 8002d7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	0151      	lsls	r1, r2, #5
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	440a      	add	r2, r1
 8002d8c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d94:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	799b      	ldrb	r3, [r3, #6]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d01b      	beq.n	8002dd6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3330      	adds	r3, #48	@ 0x30
 8002dae:	6819      	ldr	r1, [r3, #0]
 8002db0:	78fb      	ldrb	r3, [r7, #3]
 8002db2:	015a      	lsls	r2, r3, #5
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	4413      	add	r3, r2
 8002db8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	1ac9      	subs	r1, r1, r3
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4403      	add	r3, r0
 8002dd2:	3338      	adds	r3, #56	@ 0x38
 8002dd4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002dd6:	78fa      	ldrb	r2, [r7, #3]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	011b      	lsls	r3, r3, #4
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	334d      	adds	r3, #77	@ 0x4d
 8002de6:	2201      	movs	r2, #1
 8002de8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002dea:	78fa      	ldrb	r2, [r7, #3]
 8002dec:	6879      	ldr	r1, [r7, #4]
 8002dee:	4613      	mov	r3, r2
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	1a9b      	subs	r3, r3, r2
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	440b      	add	r3, r1
 8002df8:	3344      	adds	r3, #68	@ 0x44
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	015a      	lsls	r2, r3, #5
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4413      	add	r3, r2
 8002e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e10:	78fa      	ldrb	r2, [r7, #3]
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	4613      	mov	r3, r2
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	1a9b      	subs	r3, r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	440b      	add	r3, r1
 8002e1e:	3326      	adds	r3, #38	@ 0x26
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00a      	beq.n	8002e3c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	6879      	ldr	r1, [r7, #4]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	1a9b      	subs	r3, r3, r2
 8002e30:	009b      	lsls	r3, r3, #2
 8002e32:	440b      	add	r3, r1
 8002e34:	3326      	adds	r3, #38	@ 0x26
 8002e36:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d110      	bne.n	8002e5e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	78fa      	ldrb	r2, [r7, #3]
 8002e42:	4611      	mov	r1, r2
 8002e44:	4618      	mov	r0, r3
 8002e46:	f005 f904 	bl	8008052 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e4a:	78fb      	ldrb	r3, [r7, #3]
 8002e4c:	015a      	lsls	r2, r3, #5
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	4413      	add	r3, r2
 8002e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e56:	461a      	mov	r2, r3
 8002e58:	2310      	movs	r3, #16
 8002e5a:	6093      	str	r3, [r2, #8]
 8002e5c:	e03d      	b.n	8002eda <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	6879      	ldr	r1, [r7, #4]
 8002e62:	4613      	mov	r3, r2
 8002e64:	011b      	lsls	r3, r3, #4
 8002e66:	1a9b      	subs	r3, r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3326      	adds	r3, #38	@ 0x26
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d00a      	beq.n	8002e8a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002e74:	78fa      	ldrb	r2, [r7, #3]
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	011b      	lsls	r3, r3, #4
 8002e7c:	1a9b      	subs	r3, r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3326      	adds	r3, #38	@ 0x26
 8002e84:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d127      	bne.n	8002eda <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002e8a:	78fb      	ldrb	r3, [r7, #3]
 8002e8c:	015a      	lsls	r2, r3, #5
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	4413      	add	r3, r2
 8002e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	78fa      	ldrb	r2, [r7, #3]
 8002e9a:	0151      	lsls	r1, r2, #5
 8002e9c:	693a      	ldr	r2, [r7, #16]
 8002e9e:	440a      	add	r2, r1
 8002ea0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ea4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ea8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	334c      	adds	r3, #76	@ 0x4c
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ebe:	78fa      	ldrb	r2, [r7, #3]
 8002ec0:	6879      	ldr	r1, [r7, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	011b      	lsls	r3, r3, #4
 8002ec6:	1a9b      	subs	r3, r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	334c      	adds	r3, #76	@ 0x4c
 8002ece:	781a      	ldrb	r2, [r3, #0]
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f00a f939 	bl	800d14c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	799b      	ldrb	r3, [r3, #6]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d13b      	bne.n	8002f5a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3338      	adds	r3, #56	@ 0x38
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4403      	add	r3, r0
 8002f02:	3328      	adds	r3, #40	@ 0x28
 8002f04:	881b      	ldrh	r3, [r3, #0]
 8002f06:	440b      	add	r3, r1
 8002f08:	1e59      	subs	r1, r3, #1
 8002f0a:	78fa      	ldrb	r2, [r7, #3]
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4613      	mov	r3, r2
 8002f10:	011b      	lsls	r3, r3, #4
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	4403      	add	r3, r0
 8002f18:	3328      	adds	r3, #40	@ 0x28
 8002f1a:	881b      	ldrh	r3, [r3, #0]
 8002f1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	f000 8470 	beq.w	800380a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	333c      	adds	r3, #60	@ 0x3c
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	f083 0301 	eor.w	r3, r3, #1
 8002f42:	b2d8      	uxtb	r0, r3
 8002f44:	6879      	ldr	r1, [r7, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	011b      	lsls	r3, r3, #4
 8002f4a:	1a9b      	subs	r3, r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	440b      	add	r3, r1
 8002f50:	333c      	adds	r3, #60	@ 0x3c
 8002f52:	4602      	mov	r2, r0
 8002f54:	701a      	strb	r2, [r3, #0]
 8002f56:	f000 bc58 	b.w	800380a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	333c      	adds	r3, #60	@ 0x3c
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	78fa      	ldrb	r2, [r7, #3]
 8002f6e:	f083 0301 	eor.w	r3, r3, #1
 8002f72:	b2d8      	uxtb	r0, r3
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	333c      	adds	r3, #60	@ 0x3c
 8002f82:	4602      	mov	r2, r0
 8002f84:	701a      	strb	r2, [r3, #0]
 8002f86:	f000 bc40 	b.w	800380a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f004 fab9 	bl	800750a <USB_ReadChInterrupts>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f003 0320 	and.w	r3, r3, #32
 8002f9e:	2b20      	cmp	r3, #32
 8002fa0:	d131      	bne.n	8003006 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002fa2:	78fb      	ldrb	r3, [r7, #3]
 8002fa4:	015a      	lsls	r2, r3, #5
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4413      	add	r3, r2
 8002faa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fae:	461a      	mov	r2, r3
 8002fb0:	2320      	movs	r3, #32
 8002fb2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	4613      	mov	r3, r2
 8002fba:	011b      	lsls	r3, r3, #4
 8002fbc:	1a9b      	subs	r3, r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	331a      	adds	r3, #26
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	f040 841f 	bne.w	800380a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002fcc:	78fa      	ldrb	r2, [r7, #3]
 8002fce:	6879      	ldr	r1, [r7, #4]
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	011b      	lsls	r3, r3, #4
 8002fd4:	1a9b      	subs	r3, r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	331b      	adds	r3, #27
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002fe0:	78fa      	ldrb	r2, [r7, #3]
 8002fe2:	6879      	ldr	r1, [r7, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a9b      	subs	r3, r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	440b      	add	r3, r1
 8002fee:	334d      	adds	r3, #77	@ 0x4d
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	4611      	mov	r1, r2
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f005 f828 	bl	8008052 <USB_HC_Halt>
 8003002:	f000 bc02 	b.w	800380a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f004 fa7b 	bl	800750a <USB_ReadChInterrupts>
 8003014:	4603      	mov	r3, r0
 8003016:	f003 0302 	and.w	r3, r3, #2
 800301a:	2b02      	cmp	r3, #2
 800301c:	f040 8305 	bne.w	800362a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	015a      	lsls	r2, r3, #5
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	4413      	add	r3, r2
 8003028:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302c:	461a      	mov	r2, r3
 800302e:	2302      	movs	r3, #2
 8003030:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	334d      	adds	r3, #77	@ 0x4d
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d114      	bne.n	8003072 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	334d      	adds	r3, #77	@ 0x4d
 8003058:	2202      	movs	r2, #2
 800305a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800305c:	78fa      	ldrb	r2, [r7, #3]
 800305e:	6879      	ldr	r1, [r7, #4]
 8003060:	4613      	mov	r3, r2
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	1a9b      	subs	r3, r3, r2
 8003066:	009b      	lsls	r3, r3, #2
 8003068:	440b      	add	r3, r1
 800306a:	334c      	adds	r3, #76	@ 0x4c
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
 8003070:	e2cc      	b.n	800360c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334d      	adds	r3, #77	@ 0x4d
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d114      	bne.n	80030b2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	334d      	adds	r3, #77	@ 0x4d
 8003098:	2202      	movs	r2, #2
 800309a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	334c      	adds	r3, #76	@ 0x4c
 80030ac:	2205      	movs	r2, #5
 80030ae:	701a      	strb	r2, [r3, #0]
 80030b0:	e2ac      	b.n	800360c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80030b2:	78fa      	ldrb	r2, [r7, #3]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	011b      	lsls	r3, r3, #4
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	334d      	adds	r3, #77	@ 0x4d
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	2b07      	cmp	r3, #7
 80030c6:	d00b      	beq.n	80030e0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	334d      	adds	r3, #77	@ 0x4d
 80030d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80030da:	2b09      	cmp	r3, #9
 80030dc:	f040 80a6 	bne.w	800322c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	334d      	adds	r3, #77	@ 0x4d
 80030f0:	2202      	movs	r2, #2
 80030f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	1a9b      	subs	r3, r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	3344      	adds	r3, #68	@ 0x44
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	1c59      	adds	r1, r3, #1
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4403      	add	r3, r0
 8003114:	3344      	adds	r3, #68	@ 0x44
 8003116:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003118:	78fa      	ldrb	r2, [r7, #3]
 800311a:	6879      	ldr	r1, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3344      	adds	r3, #68	@ 0x44
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d943      	bls.n	80031b6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	3344      	adds	r3, #68	@ 0x44
 800313e:	2200      	movs	r2, #0
 8003140:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003142:	78fa      	ldrb	r2, [r7, #3]
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	4613      	mov	r3, r2
 8003148:	011b      	lsls	r3, r3, #4
 800314a:	1a9b      	subs	r3, r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	440b      	add	r3, r1
 8003150:	331a      	adds	r3, #26
 8003152:	781b      	ldrb	r3, [r3, #0]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d123      	bne.n	80031a0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	331b      	adds	r3, #27
 8003168:	2200      	movs	r2, #0
 800316a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	331c      	adds	r3, #28
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	0151      	lsls	r1, r2, #5
 8003192:	693a      	ldr	r2, [r7, #16]
 8003194:	440a      	add	r2, r1
 8003196:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800319a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800319e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	6879      	ldr	r1, [r7, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	011b      	lsls	r3, r3, #4
 80031a8:	1a9b      	subs	r3, r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	334c      	adds	r3, #76	@ 0x4c
 80031b0:	2204      	movs	r2, #4
 80031b2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031b4:	e229      	b.n	800360a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	4613      	mov	r3, r2
 80031bc:	011b      	lsls	r3, r3, #4
 80031be:	1a9b      	subs	r3, r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	334c      	adds	r3, #76	@ 0x4c
 80031c6:	2202      	movs	r2, #2
 80031c8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031ca:	78fa      	ldrb	r2, [r7, #3]
 80031cc:	6879      	ldr	r1, [r7, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	011b      	lsls	r3, r3, #4
 80031d2:	1a9b      	subs	r3, r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	3326      	adds	r3, #38	@ 0x26
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d00b      	beq.n	80031f8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031e0:	78fa      	ldrb	r2, [r7, #3]
 80031e2:	6879      	ldr	r1, [r7, #4]
 80031e4:	4613      	mov	r3, r2
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	1a9b      	subs	r3, r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3326      	adds	r3, #38	@ 0x26
 80031f0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	f040 8209 	bne.w	800360a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80031f8:	78fb      	ldrb	r3, [r7, #3]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800320e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003216:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003224:	461a      	mov	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800322a:	e1ee      	b.n	800360a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	334d      	adds	r3, #77	@ 0x4d
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b05      	cmp	r3, #5
 8003240:	f040 80c8 	bne.w	80033d4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	334d      	adds	r3, #77	@ 0x4d
 8003254:	2202      	movs	r2, #2
 8003256:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	6879      	ldr	r1, [r7, #4]
 800325c:	4613      	mov	r3, r2
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	1a9b      	subs	r3, r3, r2
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	440b      	add	r3, r1
 8003266:	331b      	adds	r3, #27
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b01      	cmp	r3, #1
 800326c:	f040 81ce 	bne.w	800360c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3326      	adds	r3, #38	@ 0x26
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b03      	cmp	r3, #3
 8003284:	d16b      	bne.n	800335e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	3348      	adds	r3, #72	@ 0x48
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	1c59      	adds	r1, r3, #1
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4403      	add	r3, r0
 80032a6:	3348      	adds	r3, #72	@ 0x48
 80032a8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	6879      	ldr	r1, [r7, #4]
 80032ae:	4613      	mov	r3, r2
 80032b0:	011b      	lsls	r3, r3, #4
 80032b2:	1a9b      	subs	r3, r3, r2
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	440b      	add	r3, r1
 80032b8:	3348      	adds	r3, #72	@ 0x48
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b02      	cmp	r3, #2
 80032be:	d943      	bls.n	8003348 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	3348      	adds	r3, #72	@ 0x48
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	331b      	adds	r3, #27
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80032e8:	78fa      	ldrb	r2, [r7, #3]
 80032ea:	6879      	ldr	r1, [r7, #4]
 80032ec:	4613      	mov	r3, r2
 80032ee:	011b      	lsls	r3, r3, #4
 80032f0:	1a9b      	subs	r3, r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	440b      	add	r3, r1
 80032f6:	3344      	adds	r3, #68	@ 0x44
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d809      	bhi.n	8003312 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80032fe:	78fa      	ldrb	r2, [r7, #3]
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	011b      	lsls	r3, r3, #4
 8003306:	1a9b      	subs	r3, r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	331c      	adds	r3, #28
 800330e:	2201      	movs	r2, #1
 8003310:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	015a      	lsls	r2, r3, #5
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	4413      	add	r3, r2
 800331a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	78fa      	ldrb	r2, [r7, #3]
 8003322:	0151      	lsls	r1, r2, #5
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	440a      	add	r2, r1
 8003328:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800332c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003330:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003332:	78fa      	ldrb	r2, [r7, #3]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	011b      	lsls	r3, r3, #4
 800333a:	1a9b      	subs	r3, r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	440b      	add	r3, r1
 8003340:	334c      	adds	r3, #76	@ 0x4c
 8003342:	2204      	movs	r2, #4
 8003344:	701a      	strb	r2, [r3, #0]
 8003346:	e014      	b.n	8003372 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	334c      	adds	r3, #76	@ 0x4c
 8003358:	2202      	movs	r2, #2
 800335a:	701a      	strb	r2, [r3, #0]
 800335c:	e009      	b.n	8003372 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	334c      	adds	r3, #76	@ 0x4c
 800336e:	2202      	movs	r2, #2
 8003370:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	1a9b      	subs	r3, r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	440b      	add	r3, r1
 8003380:	3326      	adds	r3, #38	@ 0x26
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3326      	adds	r3, #38	@ 0x26
 8003398:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800339a:	2b02      	cmp	r3, #2
 800339c:	f040 8136 	bne.w	800360c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033b6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033be:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033cc:	461a      	mov	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e11b      	b.n	800360c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	6879      	ldr	r1, [r7, #4]
 80033d8:	4613      	mov	r3, r2
 80033da:	011b      	lsls	r3, r3, #4
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	440b      	add	r3, r1
 80033e2:	334d      	adds	r3, #77	@ 0x4d
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	f040 8081 	bne.w	80034ee <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80033ec:	78fa      	ldrb	r2, [r7, #3]
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	4613      	mov	r3, r2
 80033f2:	011b      	lsls	r3, r3, #4
 80033f4:	1a9b      	subs	r3, r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	334d      	adds	r3, #77	@ 0x4d
 80033fc:	2202      	movs	r2, #2
 80033fe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003400:	78fa      	ldrb	r2, [r7, #3]
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	440b      	add	r3, r1
 800340e:	331b      	adds	r3, #27
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	2b01      	cmp	r3, #1
 8003414:	f040 80fa 	bne.w	800360c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003418:	78fa      	ldrb	r2, [r7, #3]
 800341a:	6879      	ldr	r1, [r7, #4]
 800341c:	4613      	mov	r3, r2
 800341e:	011b      	lsls	r3, r3, #4
 8003420:	1a9b      	subs	r3, r3, r2
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	440b      	add	r3, r1
 8003426:	334c      	adds	r3, #76	@ 0x4c
 8003428:	2202      	movs	r2, #2
 800342a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800342c:	78fb      	ldrb	r3, [r7, #3]
 800342e:	015a      	lsls	r2, r3, #5
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	4413      	add	r3, r2
 8003434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	0151      	lsls	r1, r2, #5
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	440a      	add	r2, r1
 8003442:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	440a      	add	r2, r1
 8003462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800346a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	440a      	add	r2, r1
 8003482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003486:	f023 0320 	bic.w	r3, r3, #32
 800348a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3326      	adds	r3, #38	@ 0x26
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00b      	beq.n	80034ba <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3326      	adds	r3, #38	@ 0x26
 80034b2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034b4:	2b02      	cmp	r3, #2
 80034b6:	f040 80a9 	bne.w	800360c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80034ba:	78fb      	ldrb	r3, [r7, #3]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034d0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034d8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e6:	461a      	mov	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6013      	str	r3, [r2, #0]
 80034ec:	e08e      	b.n	800360c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	334d      	adds	r3, #77	@ 0x4d
 80034fe:	781b      	ldrb	r3, [r3, #0]
 8003500:	2b04      	cmp	r3, #4
 8003502:	d143      	bne.n	800358c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	334d      	adds	r3, #77	@ 0x4d
 8003514:	2202      	movs	r2, #2
 8003516:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	334c      	adds	r3, #76	@ 0x4c
 8003528:	2202      	movs	r2, #2
 800352a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3326      	adds	r3, #38	@ 0x26
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00a      	beq.n	8003558 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3326      	adds	r3, #38	@ 0x26
 8003552:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003554:	2b02      	cmp	r3, #2
 8003556:	d159      	bne.n	800360c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4413      	add	r3, r2
 8003560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800356e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003576:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003584:	461a      	mov	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e03f      	b.n	800360c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	334d      	adds	r3, #77	@ 0x4d
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d126      	bne.n	80035f0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	334d      	adds	r3, #77	@ 0x4d
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	6879      	ldr	r1, [r7, #4]
 80035ba:	4613      	mov	r3, r2
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	1a9b      	subs	r3, r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	3344      	adds	r3, #68	@ 0x44
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	1c59      	adds	r1, r3, #1
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	4613      	mov	r3, r2
 80035ce:	011b      	lsls	r3, r3, #4
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4403      	add	r3, r0
 80035d6:	3344      	adds	r3, #68	@ 0x44
 80035d8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	011b      	lsls	r3, r3, #4
 80035e2:	1a9b      	subs	r3, r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	334c      	adds	r3, #76	@ 0x4c
 80035ea:	2204      	movs	r2, #4
 80035ec:	701a      	strb	r2, [r3, #0]
 80035ee:	e00d      	b.n	800360c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	334d      	adds	r3, #77	@ 0x4d
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b02      	cmp	r3, #2
 8003604:	f000 8100 	beq.w	8003808 <HCD_HC_IN_IRQHandler+0xcca>
 8003608:	e000      	b.n	800360c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800360a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	6879      	ldr	r1, [r7, #4]
 8003610:	4613      	mov	r3, r2
 8003612:	011b      	lsls	r3, r3, #4
 8003614:	1a9b      	subs	r3, r3, r2
 8003616:	009b      	lsls	r3, r3, #2
 8003618:	440b      	add	r3, r1
 800361a:	334c      	adds	r3, #76	@ 0x4c
 800361c:	781a      	ldrb	r2, [r3, #0]
 800361e:	78fb      	ldrb	r3, [r7, #3]
 8003620:	4619      	mov	r1, r3
 8003622:	6878      	ldr	r0, [r7, #4]
 8003624:	f009 fd92 	bl	800d14c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003628:	e0ef      	b.n	800380a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	4611      	mov	r1, r2
 8003632:	4618      	mov	r0, r3
 8003634:	f003 ff69 	bl	800750a <USB_ReadChInterrupts>
 8003638:	4603      	mov	r3, r0
 800363a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800363e:	2b40      	cmp	r3, #64	@ 0x40
 8003640:	d12f      	bne.n	80036a2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003642:	78fb      	ldrb	r3, [r7, #3]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	4413      	add	r3, r2
 800364a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800364e:	461a      	mov	r2, r3
 8003650:	2340      	movs	r3, #64	@ 0x40
 8003652:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003654:	78fa      	ldrb	r2, [r7, #3]
 8003656:	6879      	ldr	r1, [r7, #4]
 8003658:	4613      	mov	r3, r2
 800365a:	011b      	lsls	r3, r3, #4
 800365c:	1a9b      	subs	r3, r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	440b      	add	r3, r1
 8003662:	334d      	adds	r3, #77	@ 0x4d
 8003664:	2205      	movs	r2, #5
 8003666:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	331a      	adds	r3, #26
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3344      	adds	r3, #68	@ 0x44
 800368e:	2200      	movs	r2, #0
 8003690:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f004 fcd9 	bl	8008052 <USB_HC_Halt>
 80036a0:	e0b3      	b.n	800380a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 ff2d 	bl	800750a <USB_ReadChInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 0310 	and.w	r3, r3, #16
 80036b6:	2b10      	cmp	r3, #16
 80036b8:	f040 80a7 	bne.w	800380a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	6879      	ldr	r1, [r7, #4]
 80036c0:	4613      	mov	r3, r2
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	1a9b      	subs	r3, r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	440b      	add	r3, r1
 80036ca:	3326      	adds	r3, #38	@ 0x26
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b03      	cmp	r3, #3
 80036d0:	d11b      	bne.n	800370a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3344      	adds	r3, #68	@ 0x44
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	6879      	ldr	r1, [r7, #4]
 80036ea:	4613      	mov	r3, r2
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	1a9b      	subs	r3, r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	334d      	adds	r3, #77	@ 0x4d
 80036f6:	2204      	movs	r2, #4
 80036f8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	78fa      	ldrb	r2, [r7, #3]
 8003700:	4611      	mov	r1, r2
 8003702:	4618      	mov	r0, r3
 8003704:	f004 fca5 	bl	8008052 <USB_HC_Halt>
 8003708:	e03f      	b.n	800378a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3326      	adds	r3, #38	@ 0x26
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00a      	beq.n	8003736 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003720:	78fa      	ldrb	r2, [r7, #3]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	1a9b      	subs	r3, r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	3326      	adds	r3, #38	@ 0x26
 8003730:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003732:	2b02      	cmp	r3, #2
 8003734:	d129      	bne.n	800378a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003736:	78fa      	ldrb	r2, [r7, #3]
 8003738:	6879      	ldr	r1, [r7, #4]
 800373a:	4613      	mov	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
 800373e:	1a9b      	subs	r3, r3, r2
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	440b      	add	r3, r1
 8003744:	3344      	adds	r3, #68	@ 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	799b      	ldrb	r3, [r3, #6]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d00a      	beq.n	8003768 <HCD_HC_IN_IRQHandler+0xc2a>
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	331b      	adds	r3, #27
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b01      	cmp	r3, #1
 8003766:	d110      	bne.n	800378a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	334d      	adds	r3, #77	@ 0x4d
 8003778:	2204      	movs	r2, #4
 800377a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	4611      	mov	r1, r2
 8003784:	4618      	mov	r0, r3
 8003786:	f004 fc64 	bl	8008052 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	331b      	adds	r3, #27
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d129      	bne.n	80037f4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	331b      	adds	r3, #27
 80037b0:	2200      	movs	r2, #0
 80037b2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	0151      	lsls	r1, r2, #5
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	440a      	add	r2, r1
 80037ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037ee:	f043 0320 	orr.w	r3, r3, #32
 80037f2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	461a      	mov	r2, r3
 8003802:	2310      	movs	r3, #16
 8003804:	6093      	str	r3, [r2, #8]
 8003806:	e000      	b.n	800380a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003808:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	460b      	mov	r3, r1
 800381a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003822:	697b      	ldr	r3, [r7, #20]
 8003824:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f003 fe6b 	bl	800750a <USB_ReadChInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b04      	cmp	r3, #4
 800383c:	d11b      	bne.n	8003876 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800383e:	78fb      	ldrb	r3, [r7, #3]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4413      	add	r3, r2
 8003846:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384a:	461a      	mov	r2, r3
 800384c:	2304      	movs	r3, #4
 800384e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003850:	78fa      	ldrb	r2, [r7, #3]
 8003852:	6879      	ldr	r1, [r7, #4]
 8003854:	4613      	mov	r3, r2
 8003856:	011b      	lsls	r3, r3, #4
 8003858:	1a9b      	subs	r3, r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	334d      	adds	r3, #77	@ 0x4d
 8003860:	2207      	movs	r2, #7
 8003862:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f004 fbf0 	bl	8008052 <USB_HC_Halt>
 8003872:	f000 bc89 	b.w	8004188 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	78fa      	ldrb	r2, [r7, #3]
 800387c:	4611      	mov	r1, r2
 800387e:	4618      	mov	r0, r3
 8003880:	f003 fe43 	bl	800750a <USB_ReadChInterrupts>
 8003884:	4603      	mov	r3, r0
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b20      	cmp	r3, #32
 800388c:	f040 8082 	bne.w	8003994 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	015a      	lsls	r2, r3, #5
 8003894:	693b      	ldr	r3, [r7, #16]
 8003896:	4413      	add	r3, r2
 8003898:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800389c:	461a      	mov	r2, r3
 800389e:	2320      	movs	r3, #32
 80038a0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80038a2:	78fa      	ldrb	r2, [r7, #3]
 80038a4:	6879      	ldr	r1, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	1a9b      	subs	r3, r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	440b      	add	r3, r1
 80038b0:	3319      	adds	r3, #25
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d124      	bne.n	8003902 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3319      	adds	r3, #25
 80038c8:	2200      	movs	r2, #0
 80038ca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334c      	adds	r3, #76	@ 0x4c
 80038dc:	2202      	movs	r2, #2
 80038de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	334d      	adds	r3, #77	@ 0x4d
 80038f0:	2203      	movs	r2, #3
 80038f2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	78fa      	ldrb	r2, [r7, #3]
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f004 fba8 	bl	8008052 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	331a      	adds	r3, #26
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b01      	cmp	r3, #1
 8003916:	f040 8437 	bne.w	8004188 <HCD_HC_OUT_IRQHandler+0x978>
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	331b      	adds	r3, #27
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	f040 842b 	bne.w	8004188 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	3326      	adds	r3, #38	@ 0x26
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d009      	beq.n	800395c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	331b      	adds	r3, #27
 8003958:	2201      	movs	r2, #1
 800395a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	334d      	adds	r3, #77	@ 0x4d
 800396c:	2203      	movs	r2, #3
 800396e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	4611      	mov	r1, r2
 8003978:	4618      	mov	r0, r3
 800397a:	f004 fb6a 	bl	8008052 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3344      	adds	r3, #68	@ 0x44
 800398e:	2200      	movs	r2, #0
 8003990:	601a      	str	r2, [r3, #0]
 8003992:	e3f9      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	78fa      	ldrb	r2, [r7, #3]
 800399a:	4611      	mov	r1, r2
 800399c:	4618      	mov	r0, r3
 800399e:	f003 fdb4 	bl	800750a <USB_ReadChInterrupts>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039ac:	d111      	bne.n	80039d2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ba:	461a      	mov	r2, r3
 80039bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039c0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	78fa      	ldrb	r2, [r7, #3]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f004 fb41 	bl	8008052 <USB_HC_Halt>
 80039d0:	e3da      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	78fa      	ldrb	r2, [r7, #3]
 80039d8:	4611      	mov	r1, r2
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fd95 	bl	800750a <USB_ReadChInterrupts>
 80039e0:	4603      	mov	r3, r0
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d168      	bne.n	8003abc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80039ea:	78fa      	ldrb	r2, [r7, #3]
 80039ec:	6879      	ldr	r1, [r7, #4]
 80039ee:	4613      	mov	r3, r2
 80039f0:	011b      	lsls	r3, r3, #4
 80039f2:	1a9b      	subs	r3, r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	440b      	add	r3, r1
 80039f8:	3344      	adds	r3, #68	@ 0x44
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 fd7f 	bl	800750a <USB_ReadChInterrupts>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a12:	2b40      	cmp	r3, #64	@ 0x40
 8003a14:	d112      	bne.n	8003a3c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a16:	78fa      	ldrb	r2, [r7, #3]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	011b      	lsls	r3, r3, #4
 8003a1e:	1a9b      	subs	r3, r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	440b      	add	r3, r1
 8003a24:	3319      	adds	r3, #25
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a2a:	78fb      	ldrb	r3, [r7, #3]
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a36:	461a      	mov	r2, r3
 8003a38:	2340      	movs	r3, #64	@ 0x40
 8003a3a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	331b      	adds	r3, #27
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	331b      	adds	r3, #27
 8003a62:	2200      	movs	r2, #0
 8003a64:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a66:	78fb      	ldrb	r3, [r7, #3]
 8003a68:	015a      	lsls	r2, r3, #5
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	4413      	add	r3, r2
 8003a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	0151      	lsls	r1, r2, #5
 8003a78:	693a      	ldr	r2, [r7, #16]
 8003a7a:	440a      	add	r2, r1
 8003a7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a84:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a92:	461a      	mov	r2, r3
 8003a94:	2301      	movs	r3, #1
 8003a96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	334d      	adds	r3, #77	@ 0x4d
 8003aa8:	2201      	movs	r2, #1
 8003aaa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	4611      	mov	r1, r2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f004 facc 	bl	8008052 <USB_HC_Halt>
 8003aba:	e365      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	4611      	mov	r1, r2
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f003 fd20 	bl	800750a <USB_ReadChInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ad0:	2b40      	cmp	r3, #64	@ 0x40
 8003ad2:	d139      	bne.n	8003b48 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	334d      	adds	r3, #77	@ 0x4d
 8003ae4:	2205      	movs	r2, #5
 8003ae6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	331a      	adds	r3, #26
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3319      	adds	r3, #25
 8003b0e:	2201      	movs	r2, #1
 8003b10:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3344      	adds	r3, #68	@ 0x44
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f004 fa8f 	bl	8008052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	015a      	lsls	r2, r3, #5
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b40:	461a      	mov	r2, r3
 8003b42:	2340      	movs	r3, #64	@ 0x40
 8003b44:	6093      	str	r3, [r2, #8]
 8003b46:	e31f      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	4611      	mov	r1, r2
 8003b50:	4618      	mov	r0, r3
 8003b52:	f003 fcda 	bl	800750a <USB_ReadChInterrupts>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f003 0308 	and.w	r3, r3, #8
 8003b5c:	2b08      	cmp	r3, #8
 8003b5e:	d11a      	bne.n	8003b96 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003b60:	78fb      	ldrb	r3, [r7, #3]
 8003b62:	015a      	lsls	r2, r3, #5
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	4413      	add	r3, r2
 8003b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	2308      	movs	r3, #8
 8003b70:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	334d      	adds	r3, #77	@ 0x4d
 8003b82:	2206      	movs	r2, #6
 8003b84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	78fa      	ldrb	r2, [r7, #3]
 8003b8c:	4611      	mov	r1, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f004 fa5f 	bl	8008052 <USB_HC_Halt>
 8003b94:	e2f8      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 fcb3 	bl	800750a <USB_ReadChInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f003 0310 	and.w	r3, r3, #16
 8003baa:	2b10      	cmp	r3, #16
 8003bac:	d144      	bne.n	8003c38 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	6879      	ldr	r1, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	1a9b      	subs	r3, r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	440b      	add	r3, r1
 8003bbc:	3344      	adds	r3, #68	@ 0x44
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003bc2:	78fa      	ldrb	r2, [r7, #3]
 8003bc4:	6879      	ldr	r1, [r7, #4]
 8003bc6:	4613      	mov	r3, r2
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	1a9b      	subs	r3, r3, r2
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	440b      	add	r3, r1
 8003bd0:	334d      	adds	r3, #77	@ 0x4d
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	3319      	adds	r3, #25
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d114      	bne.n	8003c16 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003bec:	78fa      	ldrb	r2, [r7, #3]
 8003bee:	6879      	ldr	r1, [r7, #4]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	011b      	lsls	r3, r3, #4
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	440b      	add	r3, r1
 8003bfa:	3318      	adds	r3, #24
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003c02:	78fa      	ldrb	r2, [r7, #3]
 8003c04:	6879      	ldr	r1, [r7, #4]
 8003c06:	4613      	mov	r3, r2
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	1a9b      	subs	r3, r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	440b      	add	r3, r1
 8003c10:	3319      	adds	r3, #25
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	4611      	mov	r1, r2
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f004 fa17 	bl	8008052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003c24:	78fb      	ldrb	r3, [r7, #3]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c30:	461a      	mov	r2, r3
 8003c32:	2310      	movs	r3, #16
 8003c34:	6093      	str	r3, [r2, #8]
 8003c36:	e2a7      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	78fa      	ldrb	r2, [r7, #3]
 8003c3e:	4611      	mov	r1, r2
 8003c40:	4618      	mov	r0, r3
 8003c42:	f003 fc62 	bl	800750a <USB_ReadChInterrupts>
 8003c46:	4603      	mov	r3, r0
 8003c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4c:	2b80      	cmp	r3, #128	@ 0x80
 8003c4e:	f040 8083 	bne.w	8003d58 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	799b      	ldrb	r3, [r3, #6]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d111      	bne.n	8003c7e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	334d      	adds	r3, #77	@ 0x4d
 8003c6a:	2207      	movs	r2, #7
 8003c6c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f004 f9eb 	bl	8008052 <USB_HC_Halt>
 8003c7c:	e062      	b.n	8003d44 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3344      	adds	r3, #68	@ 0x44
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	1c59      	adds	r1, r3, #1
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	4403      	add	r3, r0
 8003c9e:	3344      	adds	r3, #68	@ 0x44
 8003ca0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ca2:	78fa      	ldrb	r2, [r7, #3]
 8003ca4:	6879      	ldr	r1, [r7, #4]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	3344      	adds	r3, #68	@ 0x44
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d922      	bls.n	8003cfe <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003cb8:	78fa      	ldrb	r2, [r7, #3]
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	440b      	add	r3, r1
 8003cc6:	3344      	adds	r3, #68	@ 0x44
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ccc:	78fa      	ldrb	r2, [r7, #3]
 8003cce:	6879      	ldr	r1, [r7, #4]
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	011b      	lsls	r3, r3, #4
 8003cd4:	1a9b      	subs	r3, r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	440b      	add	r3, r1
 8003cda:	334c      	adds	r3, #76	@ 0x4c
 8003cdc:	2204      	movs	r2, #4
 8003cde:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	334c      	adds	r3, #76	@ 0x4c
 8003cf0:	781a      	ldrb	r2, [r3, #0]
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f009 fa28 	bl	800d14c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cfc:	e022      	b.n	8003d44 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334c      	adds	r3, #76	@ 0x4c
 8003d0e:	2202      	movs	r2, #2
 8003d10:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d28:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d30:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003d44:	78fb      	ldrb	r3, [r7, #3]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d50:	461a      	mov	r2, r3
 8003d52:	2380      	movs	r3, #128	@ 0x80
 8003d54:	6093      	str	r3, [r2, #8]
 8003d56:	e217      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	78fa      	ldrb	r2, [r7, #3]
 8003d5e:	4611      	mov	r1, r2
 8003d60:	4618      	mov	r0, r3
 8003d62:	f003 fbd2 	bl	800750a <USB_ReadChInterrupts>
 8003d66:	4603      	mov	r3, r0
 8003d68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d70:	d11b      	bne.n	8003daa <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003d72:	78fa      	ldrb	r2, [r7, #3]
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	4613      	mov	r3, r2
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	440b      	add	r3, r1
 8003d80:	334d      	adds	r3, #77	@ 0x4d
 8003d82:	2209      	movs	r2, #9
 8003d84:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	78fa      	ldrb	r2, [r7, #3]
 8003d8c:	4611      	mov	r1, r2
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f004 f95f 	bl	8008052 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003d94:	78fb      	ldrb	r3, [r7, #3]
 8003d96:	015a      	lsls	r2, r3, #5
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003da0:	461a      	mov	r2, r3
 8003da2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003da6:	6093      	str	r3, [r2, #8]
 8003da8:	e1ee      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	4611      	mov	r1, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f003 fba9 	bl	800750a <USB_ReadChInterrupts>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	f040 81df 	bne.w	8004182 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003dc4:	78fb      	ldrb	r3, [r7, #3]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	2302      	movs	r3, #2
 8003dd4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	334d      	adds	r3, #77	@ 0x4d
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	f040 8093 	bne.w	8003f14 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003dee:	78fa      	ldrb	r2, [r7, #3]
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	4613      	mov	r3, r2
 8003df4:	011b      	lsls	r3, r3, #4
 8003df6:	1a9b      	subs	r3, r3, r2
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	440b      	add	r3, r1
 8003dfc:	334d      	adds	r3, #77	@ 0x4d
 8003dfe:	2202      	movs	r2, #2
 8003e00:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	334c      	adds	r3, #76	@ 0x4c
 8003e12:	2201      	movs	r2, #1
 8003e14:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	3326      	adds	r3, #38	@ 0x26
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d00b      	beq.n	8003e44 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3326      	adds	r3, #38	@ 0x26
 8003e3c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	f040 8190 	bne.w	8004164 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	799b      	ldrb	r3, [r3, #6]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d115      	bne.n	8003e78 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	333d      	adds	r3, #61	@ 0x3d
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	f083 0301 	eor.w	r3, r3, #1
 8003e64:	b2d8      	uxtb	r0, r3
 8003e66:	6879      	ldr	r1, [r7, #4]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	011b      	lsls	r3, r3, #4
 8003e6c:	1a9b      	subs	r3, r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	333d      	adds	r3, #61	@ 0x3d
 8003e74:	4602      	mov	r2, r0
 8003e76:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	799b      	ldrb	r3, [r3, #6]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	f040 8171 	bne.w	8004164 <HCD_HC_OUT_IRQHandler+0x954>
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3334      	adds	r3, #52	@ 0x34
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8165 	beq.w	8004164 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3334      	adds	r3, #52	@ 0x34
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4403      	add	r3, r0
 8003eba:	3328      	adds	r3, #40	@ 0x28
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	440b      	add	r3, r1
 8003ec0:	1e59      	subs	r1, r3, #1
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4403      	add	r3, r0
 8003ed0:	3328      	adds	r3, #40	@ 0x28
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	f003 0301 	and.w	r3, r3, #1
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 813f 	beq.w	8004164 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003ee6:	78fa      	ldrb	r2, [r7, #3]
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	4613      	mov	r3, r2
 8003eec:	011b      	lsls	r3, r3, #4
 8003eee:	1a9b      	subs	r3, r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	440b      	add	r3, r1
 8003ef4:	333d      	adds	r3, #61	@ 0x3d
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	78fa      	ldrb	r2, [r7, #3]
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2d8      	uxtb	r0, r3
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	333d      	adds	r3, #61	@ 0x3d
 8003f0e:	4602      	mov	r2, r0
 8003f10:	701a      	strb	r2, [r3, #0]
 8003f12:	e127      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	334d      	adds	r3, #77	@ 0x4d
 8003f24:	781b      	ldrb	r3, [r3, #0]
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d120      	bne.n	8003f6c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f2a:	78fa      	ldrb	r2, [r7, #3]
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	334d      	adds	r3, #77	@ 0x4d
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003f3e:	78fa      	ldrb	r2, [r7, #3]
 8003f40:	6879      	ldr	r1, [r7, #4]
 8003f42:	4613      	mov	r3, r2
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	1a9b      	subs	r3, r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	440b      	add	r3, r1
 8003f4c:	331b      	adds	r3, #27
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	f040 8107 	bne.w	8004164 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f56:	78fa      	ldrb	r2, [r7, #3]
 8003f58:	6879      	ldr	r1, [r7, #4]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	011b      	lsls	r3, r3, #4
 8003f5e:	1a9b      	subs	r3, r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	334c      	adds	r3, #76	@ 0x4c
 8003f66:	2202      	movs	r2, #2
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	e0fb      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	334d      	adds	r3, #77	@ 0x4d
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	d13a      	bne.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f82:	78fa      	ldrb	r2, [r7, #3]
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	4613      	mov	r3, r2
 8003f88:	011b      	lsls	r3, r3, #4
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	440b      	add	r3, r1
 8003f90:	334d      	adds	r3, #77	@ 0x4d
 8003f92:	2202      	movs	r2, #2
 8003f94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f96:	78fa      	ldrb	r2, [r7, #3]
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	1a9b      	subs	r3, r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	440b      	add	r3, r1
 8003fa4:	334c      	adds	r3, #76	@ 0x4c
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003faa:	78fa      	ldrb	r2, [r7, #3]
 8003fac:	6879      	ldr	r1, [r7, #4]
 8003fae:	4613      	mov	r3, r2
 8003fb0:	011b      	lsls	r3, r3, #4
 8003fb2:	1a9b      	subs	r3, r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	440b      	add	r3, r1
 8003fb8:	331b      	adds	r3, #27
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	f040 80d1 	bne.w	8004164 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	331b      	adds	r3, #27
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003fd6:	78fb      	ldrb	r3, [r7, #3]
 8003fd8:	015a      	lsls	r2, r3, #5
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	4413      	add	r3, r2
 8003fde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	78fa      	ldrb	r2, [r7, #3]
 8003fe6:	0151      	lsls	r1, r2, #5
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	440a      	add	r2, r1
 8003fec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ff0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff4:	6053      	str	r3, [r2, #4]
 8003ff6:	e0b5      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003ff8:	78fa      	ldrb	r2, [r7, #3]
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	011b      	lsls	r3, r3, #4
 8004000:	1a9b      	subs	r3, r3, r2
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	440b      	add	r3, r1
 8004006:	334d      	adds	r3, #77	@ 0x4d
 8004008:	781b      	ldrb	r3, [r3, #0]
 800400a:	2b05      	cmp	r3, #5
 800400c:	d114      	bne.n	8004038 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800400e:	78fa      	ldrb	r2, [r7, #3]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	011b      	lsls	r3, r3, #4
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	334d      	adds	r3, #77	@ 0x4d
 800401e:	2202      	movs	r2, #2
 8004020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6879      	ldr	r1, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	440b      	add	r3, r1
 8004030:	334c      	adds	r3, #76	@ 0x4c
 8004032:	2202      	movs	r2, #2
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	e095      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004038:	78fa      	ldrb	r2, [r7, #3]
 800403a:	6879      	ldr	r1, [r7, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	1a9b      	subs	r3, r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	334d      	adds	r3, #77	@ 0x4d
 8004048:	781b      	ldrb	r3, [r3, #0]
 800404a:	2b06      	cmp	r3, #6
 800404c:	d114      	bne.n	8004078 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	4613      	mov	r3, r2
 8004054:	011b      	lsls	r3, r3, #4
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	440b      	add	r3, r1
 800405c:	334d      	adds	r3, #77	@ 0x4d
 800405e:	2202      	movs	r2, #2
 8004060:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004062:	78fa      	ldrb	r2, [r7, #3]
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	4613      	mov	r3, r2
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	1a9b      	subs	r3, r3, r2
 800406c:	009b      	lsls	r3, r3, #2
 800406e:	440b      	add	r3, r1
 8004070:	334c      	adds	r3, #76	@ 0x4c
 8004072:	2205      	movs	r2, #5
 8004074:	701a      	strb	r2, [r3, #0]
 8004076:	e075      	b.n	8004164 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004078:	78fa      	ldrb	r2, [r7, #3]
 800407a:	6879      	ldr	r1, [r7, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	011b      	lsls	r3, r3, #4
 8004080:	1a9b      	subs	r3, r3, r2
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	440b      	add	r3, r1
 8004086:	334d      	adds	r3, #77	@ 0x4d
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b07      	cmp	r3, #7
 800408c:	d00a      	beq.n	80040a4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800408e:	78fa      	ldrb	r2, [r7, #3]
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	4613      	mov	r3, r2
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	1a9b      	subs	r3, r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	440b      	add	r3, r1
 800409c:	334d      	adds	r3, #77	@ 0x4d
 800409e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80040a0:	2b09      	cmp	r3, #9
 80040a2:	d170      	bne.n	8004186 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80040a4:	78fa      	ldrb	r2, [r7, #3]
 80040a6:	6879      	ldr	r1, [r7, #4]
 80040a8:	4613      	mov	r3, r2
 80040aa:	011b      	lsls	r3, r3, #4
 80040ac:	1a9b      	subs	r3, r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	440b      	add	r3, r1
 80040b2:	334d      	adds	r3, #77	@ 0x4d
 80040b4:	2202      	movs	r2, #2
 80040b6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80040b8:	78fa      	ldrb	r2, [r7, #3]
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	4613      	mov	r3, r2
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	1a9b      	subs	r3, r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	440b      	add	r3, r1
 80040c6:	3344      	adds	r3, #68	@ 0x44
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	1c59      	adds	r1, r3, #1
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4613      	mov	r3, r2
 80040d0:	011b      	lsls	r3, r3, #4
 80040d2:	1a9b      	subs	r3, r3, r2
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	4403      	add	r3, r0
 80040d8:	3344      	adds	r3, #68	@ 0x44
 80040da:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	3344      	adds	r3, #68	@ 0x44
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d914      	bls.n	800411c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	3344      	adds	r3, #68	@ 0x44
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	334c      	adds	r3, #76	@ 0x4c
 8004116:	2204      	movs	r2, #4
 8004118:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800411a:	e022      	b.n	8004162 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800411c:	78fa      	ldrb	r2, [r7, #3]
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	334c      	adds	r3, #76	@ 0x4c
 800412c:	2202      	movs	r2, #2
 800412e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	4413      	add	r3, r2
 8004138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004146:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800414e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415c:	461a      	mov	r2, r3
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004162:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004164:	78fa      	ldrb	r2, [r7, #3]
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	4613      	mov	r3, r2
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	1a9b      	subs	r3, r3, r2
 800416e:	009b      	lsls	r3, r3, #2
 8004170:	440b      	add	r3, r1
 8004172:	334c      	adds	r3, #76	@ 0x4c
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	78fb      	ldrb	r3, [r7, #3]
 8004178:	4619      	mov	r1, r3
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f008 ffe6 	bl	800d14c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004180:	e002      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004182:	bf00      	nop
 8004184:	e000      	b.n	8004188 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004186:	bf00      	nop
  }
}
 8004188:	3718      	adds	r7, #24
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}

0800418e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b08a      	sub	sp, #40	@ 0x28
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	0c5b      	lsrs	r3, r3, #17
 80041b4:	f003 030f 	and.w	r3, r3, #15
 80041b8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041c2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	2b02      	cmp	r3, #2
 80041c8:	d004      	beq.n	80041d4 <HCD_RXQLVL_IRQHandler+0x46>
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b05      	cmp	r3, #5
 80041ce:	f000 80b6 	beq.w	800433e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80041d2:	e0b7      	b.n	8004344 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80b3 	beq.w	8004342 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	4613      	mov	r3, r2
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	1a9b      	subs	r3, r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	440b      	add	r3, r1
 80041ea:	332c      	adds	r3, #44	@ 0x2c
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 80a7 	beq.w	8004342 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80041f4:	6879      	ldr	r1, [r7, #4]
 80041f6:	69ba      	ldr	r2, [r7, #24]
 80041f8:	4613      	mov	r3, r2
 80041fa:	011b      	lsls	r3, r3, #4
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	440b      	add	r3, r1
 8004202:	3338      	adds	r3, #56	@ 0x38
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	18d1      	adds	r1, r2, r3
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4613      	mov	r3, r2
 8004210:	011b      	lsls	r3, r3, #4
 8004212:	1a9b      	subs	r3, r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4403      	add	r3, r0
 8004218:	3334      	adds	r3, #52	@ 0x34
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4299      	cmp	r1, r3
 800421e:	f200 8083 	bhi.w	8004328 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	6879      	ldr	r1, [r7, #4]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4613      	mov	r3, r2
 800422c:	011b      	lsls	r3, r3, #4
 800422e:	1a9b      	subs	r3, r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	440b      	add	r3, r1
 8004234:	332c      	adds	r3, #44	@ 0x2c
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	693a      	ldr	r2, [r7, #16]
 800423a:	b292      	uxth	r2, r2
 800423c:	4619      	mov	r1, r3
 800423e:	f003 f8f9 	bl	8007434 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004242:	6879      	ldr	r1, [r7, #4]
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4613      	mov	r3, r2
 8004248:	011b      	lsls	r3, r3, #4
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	440b      	add	r3, r1
 8004250:	332c      	adds	r3, #44	@ 0x2c
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	18d1      	adds	r1, r2, r3
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4403      	add	r3, r0
 8004266:	332c      	adds	r3, #44	@ 0x2c
 8004268:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800426a:	6879      	ldr	r1, [r7, #4]
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	4613      	mov	r3, r2
 8004270:	011b      	lsls	r3, r3, #4
 8004272:	1a9b      	subs	r3, r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	440b      	add	r3, r1
 8004278:	3338      	adds	r3, #56	@ 0x38
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	18d1      	adds	r1, r2, r3
 8004280:	6878      	ldr	r0, [r7, #4]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	4613      	mov	r3, r2
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4403      	add	r3, r0
 800428e:	3338      	adds	r3, #56	@ 0x38
 8004290:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	015a      	lsls	r2, r3, #5
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	4413      	add	r3, r2
 800429a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	0cdb      	lsrs	r3, r3, #19
 80042a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042a6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80042a8:	6879      	ldr	r1, [r7, #4]
 80042aa:	69ba      	ldr	r2, [r7, #24]
 80042ac:	4613      	mov	r3, r2
 80042ae:	011b      	lsls	r3, r3, #4
 80042b0:	1a9b      	subs	r3, r3, r2
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	440b      	add	r3, r1
 80042b6:	3328      	adds	r3, #40	@ 0x28
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	461a      	mov	r2, r3
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	4293      	cmp	r3, r2
 80042c0:	d13f      	bne.n	8004342 <HCD_RXQLVL_IRQHandler+0x1b4>
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d03c      	beq.n	8004342 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	6a3b      	ldr	r3, [r7, #32]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042de:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042e6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f4:	461a      	mov	r2, r3
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	4613      	mov	r3, r2
 8004300:	011b      	lsls	r3, r3, #4
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	440b      	add	r3, r1
 8004308:	333c      	adds	r3, #60	@ 0x3c
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	f083 0301 	eor.w	r3, r3, #1
 8004310:	b2d8      	uxtb	r0, r3
 8004312:	6879      	ldr	r1, [r7, #4]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4613      	mov	r3, r2
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	1a9b      	subs	r3, r3, r2
 800431c:	009b      	lsls	r3, r3, #2
 800431e:	440b      	add	r3, r1
 8004320:	333c      	adds	r3, #60	@ 0x3c
 8004322:	4602      	mov	r2, r0
 8004324:	701a      	strb	r2, [r3, #0]
      break;
 8004326:	e00c      	b.n	8004342 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004328:	6879      	ldr	r1, [r7, #4]
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4613      	mov	r3, r2
 800432e:	011b      	lsls	r3, r3, #4
 8004330:	1a9b      	subs	r3, r3, r2
 8004332:	009b      	lsls	r3, r3, #2
 8004334:	440b      	add	r3, r1
 8004336:	334c      	adds	r3, #76	@ 0x4c
 8004338:	2204      	movs	r2, #4
 800433a:	701a      	strb	r2, [r3, #0]
      break;
 800433c:	e001      	b.n	8004342 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800433e:	bf00      	nop
 8004340:	e000      	b.n	8004344 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004342:	bf00      	nop
  }
}
 8004344:	bf00      	nop
 8004346:	3728      	adds	r7, #40	@ 0x28
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004378:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b02      	cmp	r3, #2
 8004382:	d10b      	bne.n	800439c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b01      	cmp	r3, #1
 800438c:	d102      	bne.n	8004394 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800438e:	6878      	ldr	r0, [r7, #4]
 8004390:	f008 fec0 	bl	800d114 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f043 0302 	orr.w	r3, r3, #2
 800439a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f003 0308 	and.w	r3, r3, #8
 80043a2:	2b08      	cmp	r3, #8
 80043a4:	d132      	bne.n	800440c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	f043 0308 	orr.w	r3, r3, #8
 80043ac:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0304 	and.w	r3, r3, #4
 80043b4:	2b04      	cmp	r3, #4
 80043b6:	d126      	bne.n	8004406 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	7a5b      	ldrb	r3, [r3, #9]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d113      	bne.n	80043e8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80043c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043ca:	d106      	bne.n	80043da <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2102      	movs	r1, #2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f003 f9be 	bl	8007754 <USB_InitFSLSPClkSel>
 80043d8:	e011      	b.n	80043fe <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2101      	movs	r1, #1
 80043e0:	4618      	mov	r0, r3
 80043e2:	f003 f9b7 	bl	8007754 <USB_InitFSLSPClkSel>
 80043e6:	e00a      	b.n	80043fe <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	79db      	ldrb	r3, [r3, #7]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d106      	bne.n	80043fe <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80043f6:	461a      	mov	r2, r3
 80043f8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80043fc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f008 feb6 	bl	800d170 <HAL_HCD_PortEnabled_Callback>
 8004404:	e002      	b.n	800440c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f008 fec0 	bl	800d18c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 0320 	and.w	r3, r3, #32
 8004412:	2b20      	cmp	r3, #32
 8004414:	d103      	bne.n	800441e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f043 0320 	orr.w	r3, r3, #32
 800441c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004424:	461a      	mov	r2, r3
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	6013      	str	r3, [r2, #0]
}
 800442a:	bf00      	nop
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
	...

08004434 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e12b      	b.n	800469e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800444c:	b2db      	uxtb	r3, r3
 800444e:	2b00      	cmp	r3, #0
 8004450:	d106      	bne.n	8004460 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f7fc fb84 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2224      	movs	r2, #36	@ 0x24
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0201 	bic.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004486:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004496:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004498:	f001 f964 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 800449c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	4a81      	ldr	r2, [pc, #516]	@ (80046a8 <HAL_I2C_Init+0x274>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d807      	bhi.n	80044b8 <HAL_I2C_Init+0x84>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	4a80      	ldr	r2, [pc, #512]	@ (80046ac <HAL_I2C_Init+0x278>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	bf94      	ite	ls
 80044b0:	2301      	movls	r3, #1
 80044b2:	2300      	movhi	r3, #0
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	e006      	b.n	80044c6 <HAL_I2C_Init+0x92>
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a7d      	ldr	r2, [pc, #500]	@ (80046b0 <HAL_I2C_Init+0x27c>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	bf94      	ite	ls
 80044c0:	2301      	movls	r3, #1
 80044c2:	2300      	movhi	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0e7      	b.n	800469e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4a78      	ldr	r2, [pc, #480]	@ (80046b4 <HAL_I2C_Init+0x280>)
 80044d2:	fba2 2303 	umull	r2, r3, r2, r3
 80044d6:	0c9b      	lsrs	r3, r3, #18
 80044d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68ba      	ldr	r2, [r7, #8]
 80044ea:	430a      	orrs	r2, r1
 80044ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6a1b      	ldr	r3, [r3, #32]
 80044f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	4a6a      	ldr	r2, [pc, #424]	@ (80046a8 <HAL_I2C_Init+0x274>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d802      	bhi.n	8004508 <HAL_I2C_Init+0xd4>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	3301      	adds	r3, #1
 8004506:	e009      	b.n	800451c <HAL_I2C_Init+0xe8>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800450e:	fb02 f303 	mul.w	r3, r2, r3
 8004512:	4a69      	ldr	r2, [pc, #420]	@ (80046b8 <HAL_I2C_Init+0x284>)
 8004514:	fba2 2303 	umull	r2, r3, r2, r3
 8004518:	099b      	lsrs	r3, r3, #6
 800451a:	3301      	adds	r3, #1
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6812      	ldr	r2, [r2, #0]
 8004520:	430b      	orrs	r3, r1
 8004522:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800452e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	495c      	ldr	r1, [pc, #368]	@ (80046a8 <HAL_I2C_Init+0x274>)
 8004538:	428b      	cmp	r3, r1
 800453a:	d819      	bhi.n	8004570 <HAL_I2C_Init+0x13c>
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	1e59      	subs	r1, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	005b      	lsls	r3, r3, #1
 8004546:	fbb1 f3f3 	udiv	r3, r1, r3
 800454a:	1c59      	adds	r1, r3, #1
 800454c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004550:	400b      	ands	r3, r1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <HAL_I2C_Init+0x138>
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1e59      	subs	r1, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	005b      	lsls	r3, r3, #1
 8004560:	fbb1 f3f3 	udiv	r3, r1, r3
 8004564:	3301      	adds	r3, #1
 8004566:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800456a:	e051      	b.n	8004610 <HAL_I2C_Init+0x1dc>
 800456c:	2304      	movs	r3, #4
 800456e:	e04f      	b.n	8004610 <HAL_I2C_Init+0x1dc>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d111      	bne.n	800459c <HAL_I2C_Init+0x168>
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	1e58      	subs	r0, r3, #1
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6859      	ldr	r1, [r3, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	440b      	add	r3, r1
 8004586:	fbb0 f3f3 	udiv	r3, r0, r3
 800458a:	3301      	adds	r3, #1
 800458c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	e012      	b.n	80045c2 <HAL_I2C_Init+0x18e>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	1e58      	subs	r0, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6859      	ldr	r1, [r3, #4]
 80045a4:	460b      	mov	r3, r1
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	0099      	lsls	r1, r3, #2
 80045ac:	440b      	add	r3, r1
 80045ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80045b2:	3301      	adds	r3, #1
 80045b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	bf0c      	ite	eq
 80045bc:	2301      	moveq	r3, #1
 80045be:	2300      	movne	r3, #0
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d001      	beq.n	80045ca <HAL_I2C_Init+0x196>
 80045c6:	2301      	movs	r3, #1
 80045c8:	e022      	b.n	8004610 <HAL_I2C_Init+0x1dc>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10e      	bne.n	80045f0 <HAL_I2C_Init+0x1bc>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1e58      	subs	r0, r3, #1
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6859      	ldr	r1, [r3, #4]
 80045da:	460b      	mov	r3, r1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	440b      	add	r3, r1
 80045e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80045e4:	3301      	adds	r3, #1
 80045e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80045ee:	e00f      	b.n	8004610 <HAL_I2C_Init+0x1dc>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e58      	subs	r0, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	460b      	mov	r3, r1
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	440b      	add	r3, r1
 80045fe:	0099      	lsls	r1, r3, #2
 8004600:	440b      	add	r3, r1
 8004602:	fbb0 f3f3 	udiv	r3, r0, r3
 8004606:	3301      	adds	r3, #1
 8004608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004610:	6879      	ldr	r1, [r7, #4]
 8004612:	6809      	ldr	r1, [r1, #0]
 8004614:	4313      	orrs	r3, r2
 8004616:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	69da      	ldr	r2, [r3, #28]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a1b      	ldr	r3, [r3, #32]
 800462a:	431a      	orrs	r2, r3
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	430a      	orrs	r2, r1
 8004632:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800463e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	6911      	ldr	r1, [r2, #16]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68d2      	ldr	r2, [r2, #12]
 800464a:	4311      	orrs	r1, r2
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	6812      	ldr	r2, [r2, #0]
 8004650:	430b      	orrs	r3, r1
 8004652:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	431a      	orrs	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	430a      	orrs	r2, r1
 800466e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f042 0201 	orr.w	r2, r2, #1
 800467e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2220      	movs	r2, #32
 800468a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3710      	adds	r7, #16
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	000186a0 	.word	0x000186a0
 80046ac:	001e847f 	.word	0x001e847f
 80046b0:	003d08ff 	.word	0x003d08ff
 80046b4:	431bde83 	.word	0x431bde83
 80046b8:	10624dd3 	.word	0x10624dd3

080046bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b20      	cmp	r3, #32
 80046d0:	d129      	bne.n	8004726 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2224      	movs	r2, #36	@ 0x24
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f022 0201 	bic.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0210 	bic.w	r2, r2, #16
 80046f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	683a      	ldr	r2, [r7, #0]
 8004706:	430a      	orrs	r2, r1
 8004708:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f042 0201 	orr.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	e000      	b.n	8004728 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004726:	2302      	movs	r3, #2
  }
}
 8004728:	4618      	mov	r0, r3
 800472a:	370c      	adds	r7, #12
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b20      	cmp	r3, #32
 800474c:	d12a      	bne.n	80047a4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2224      	movs	r2, #36	@ 0x24
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 0201 	bic.w	r2, r2, #1
 8004764:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800476e:	89fb      	ldrh	r3, [r7, #14]
 8004770:	f023 030f 	bic.w	r3, r3, #15
 8004774:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	b29a      	uxth	r2, r3
 800477a:	89fb      	ldrh	r3, [r7, #14]
 800477c:	4313      	orrs	r3, r2
 800477e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	89fa      	ldrh	r2, [r7, #14]
 8004786:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0201 	orr.w	r2, r2, #1
 8004796:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
	...

080047b4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0bf      	b.n	8004946 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fc fb4e 	bl	8000e7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	699a      	ldr	r2, [r3, #24]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80047f6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	6999      	ldr	r1, [r3, #24]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800480c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	430a      	orrs	r2, r1
 800481a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6899      	ldr	r1, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b4a      	ldr	r3, [pc, #296]	@ (8004950 <HAL_LTDC_Init+0x19c>)
 8004828:	400b      	ands	r3, r1
 800482a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	041b      	lsls	r3, r3, #16
 8004832:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	6899      	ldr	r1, [r3, #8]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	68d9      	ldr	r1, [r3, #12]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	4b3e      	ldr	r3, [pc, #248]	@ (8004950 <HAL_LTDC_Init+0x19c>)
 8004856:	400b      	ands	r3, r1
 8004858:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68d9      	ldr	r1, [r3, #12]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6a1a      	ldr	r2, [r3, #32]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	431a      	orrs	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6919      	ldr	r1, [r3, #16]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4b33      	ldr	r3, [pc, #204]	@ (8004950 <HAL_LTDC_Init+0x19c>)
 8004884:	400b      	ands	r3, r1
 8004886:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	041b      	lsls	r3, r3, #16
 800488e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6919      	ldr	r1, [r3, #16]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	431a      	orrs	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6959      	ldr	r1, [r3, #20]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	4b27      	ldr	r3, [pc, #156]	@ (8004950 <HAL_LTDC_Init+0x19c>)
 80048b2:	400b      	ands	r3, r1
 80048b4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ba:	041b      	lsls	r3, r3, #16
 80048bc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	6959      	ldr	r1, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80048e4:	041b      	lsls	r3, r3, #16
 80048e6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80048f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80048fe:	68ba      	ldr	r2, [r7, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4313      	orrs	r3, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0206 	orr.w	r2, r2, #6
 8004922:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699a      	ldr	r2, [r3, #24]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	f000f800 	.word	0xf000f800

08004954 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004962:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800496a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	2b00      	cmp	r3, #0
 8004974:	d023      	beq.n	80049be <HAL_LTDC_IRQHandler+0x6a>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	f003 0304 	and.w	r3, r3, #4
 800497c:	2b00      	cmp	r3, #0
 800497e:	d01e      	beq.n	80049be <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 0204 	bic.w	r2, r2, #4
 800498e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	2204      	movs	r2, #4
 8004996:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800499e:	f043 0201 	orr.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2204      	movs	r2, #4
 80049ac:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f86f 	bl	8004a9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f003 0302 	and.w	r3, r3, #2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d023      	beq.n	8004a10 <HAL_LTDC_IRQHandler+0xbc>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d01e      	beq.n	8004a10 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 0202 	bic.w	r2, r2, #2
 80049e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2202      	movs	r2, #2
 80049e8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049f0:	f043 0202 	orr.w	r2, r3, #2
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2204      	movs	r2, #4
 80049fe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f846 	bl	8004a9c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f003 0301 	and.w	r3, r3, #1
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01b      	beq.n	8004a52 <HAL_LTDC_IRQHandler+0xfe>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d016      	beq.n	8004a52 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f022 0201 	bic.w	r2, r2, #1
 8004a32:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2201      	movs	r2, #1
 8004a3a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f82f 	bl	8004ab0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f003 0308 	and.w	r3, r3, #8
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d01b      	beq.n	8004a94 <HAL_LTDC_IRQHandler+0x140>
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0308 	and.w	r3, r3, #8
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d016      	beq.n	8004a94 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0208 	bic.w	r2, r2, #8
 8004a74:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2208      	movs	r2, #8
 8004a7c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f818 	bl	8004ac4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004a94:	bf00      	nop
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004ad8:	b5b0      	push	{r4, r5, r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_LTDC_ConfigLayer+0x1a>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e02c      	b.n	8004b4c <HAL_LTDC_ConfigLayer+0x74>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2202      	movs	r2, #2
 8004afe:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2134      	movs	r1, #52	@ 0x34
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	4614      	mov	r4, r2
 8004b16:	461d      	mov	r5, r3
 8004b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b24:	682b      	ldr	r3, [r5, #0]
 8004b26:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004b28:	687a      	ldr	r2, [r7, #4]
 8004b2a:	68b9      	ldr	r1, [r7, #8]
 8004b2c:	68f8      	ldr	r0, [r7, #12]
 8004b2e:	f000 f811 	bl	8004b54 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2201      	movs	r2, #1
 8004b38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bdb0      	pop	{r4, r5, r7, pc}

08004b54 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	@ 0x24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	0c1b      	lsrs	r3, r3, #16
 8004b6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b70:	4413      	add	r3, r2
 8004b72:	041b      	lsls	r3, r3, #16
 8004b74:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	461a      	mov	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	01db      	lsls	r3, r3, #7
 8004b80:	4413      	add	r3, r2
 8004b82:	3384      	adds	r3, #132	@ 0x84
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	4611      	mov	r1, r2
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	01d2      	lsls	r2, r2, #7
 8004b90:	440a      	add	r2, r1
 8004b92:	3284      	adds	r2, #132	@ 0x84
 8004b94:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b98:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68db      	ldr	r3, [r3, #12]
 8004ba4:	0c1b      	lsrs	r3, r3, #16
 8004ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004baa:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bac:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	01db      	lsls	r3, r3, #7
 8004bb8:	440b      	add	r3, r1
 8004bba:	3384      	adds	r3, #132	@ 0x84
 8004bbc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004bc2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	68da      	ldr	r2, [r3, #12]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bd2:	4413      	add	r3, r2
 8004bd4:	041b      	lsls	r3, r3, #16
 8004bd6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	461a      	mov	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	01db      	lsls	r3, r3, #7
 8004be2:	4413      	add	r3, r2
 8004be4:	3384      	adds	r3, #132	@ 0x84
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	68fa      	ldr	r2, [r7, #12]
 8004bea:	6812      	ldr	r2, [r2, #0]
 8004bec:	4611      	mov	r1, r2
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	01d2      	lsls	r2, r2, #7
 8004bf2:	440a      	add	r2, r1
 8004bf4:	3284      	adds	r2, #132	@ 0x84
 8004bf6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004bfa:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c0a:	4413      	add	r3, r2
 8004c0c:	1c5a      	adds	r2, r3, #1
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4619      	mov	r1, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	01db      	lsls	r3, r3, #7
 8004c18:	440b      	add	r3, r1
 8004c1a:	3384      	adds	r3, #132	@ 0x84
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	461a      	mov	r2, r3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	01db      	lsls	r3, r3, #7
 8004c2e:	4413      	add	r3, r2
 8004c30:	3384      	adds	r3, #132	@ 0x84
 8004c32:	691b      	ldr	r3, [r3, #16]
 8004c34:	68fa      	ldr	r2, [r7, #12]
 8004c36:	6812      	ldr	r2, [r2, #0]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	01d2      	lsls	r2, r2, #7
 8004c3e:	440a      	add	r2, r1
 8004c40:	3284      	adds	r2, #132	@ 0x84
 8004c42:	f023 0307 	bic.w	r3, r3, #7
 8004c46:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	01db      	lsls	r3, r3, #7
 8004c52:	4413      	add	r3, r2
 8004c54:	3384      	adds	r3, #132	@ 0x84
 8004c56:	461a      	mov	r2, r3
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004c64:	021b      	lsls	r3, r3, #8
 8004c66:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	061b      	lsls	r3, r3, #24
 8004c78:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	461a      	mov	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	01db      	lsls	r3, r3, #7
 8004c84:	4413      	add	r3, r2
 8004c86:	3384      	adds	r3, #132	@ 0x84
 8004c88:	699b      	ldr	r3, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	461a      	mov	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	01db      	lsls	r3, r3, #7
 8004c94:	4413      	add	r3, r2
 8004c96:	3384      	adds	r3, #132	@ 0x84
 8004c98:	461a      	mov	r2, r3
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	431a      	orrs	r2, r3
 8004caa:	69bb      	ldr	r3, [r7, #24]
 8004cac:	431a      	orrs	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	01db      	lsls	r3, r3, #7
 8004cb8:	440b      	add	r3, r1
 8004cba:	3384      	adds	r3, #132	@ 0x84
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	461a      	mov	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	01db      	lsls	r3, r3, #7
 8004cce:	4413      	add	r3, r2
 8004cd0:	3384      	adds	r3, #132	@ 0x84
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	6812      	ldr	r2, [r2, #0]
 8004cd8:	4611      	mov	r1, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	01d2      	lsls	r2, r2, #7
 8004cde:	440a      	add	r2, r1
 8004ce0:	3284      	adds	r2, #132	@ 0x84
 8004ce2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ce6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	01db      	lsls	r3, r3, #7
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3384      	adds	r3, #132	@ 0x84
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	01db      	lsls	r3, r3, #7
 8004d08:	4413      	add	r3, r2
 8004d0a:	3384      	adds	r3, #132	@ 0x84
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	68fa      	ldr	r2, [r7, #12]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	4611      	mov	r1, r2
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	01d2      	lsls	r2, r2, #7
 8004d18:	440a      	add	r2, r1
 8004d1a:	3284      	adds	r2, #132	@ 0x84
 8004d1c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d20:	f023 0307 	bic.w	r3, r3, #7
 8004d24:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	69da      	ldr	r2, [r3, #28]
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	68f9      	ldr	r1, [r7, #12]
 8004d30:	6809      	ldr	r1, [r1, #0]
 8004d32:	4608      	mov	r0, r1
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	01c9      	lsls	r1, r1, #7
 8004d38:	4401      	add	r1, r0
 8004d3a:	3184      	adds	r1, #132	@ 0x84
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	461a      	mov	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	01db      	lsls	r3, r3, #7
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3384      	adds	r3, #132	@ 0x84
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	01db      	lsls	r3, r3, #7
 8004d5a:	4413      	add	r3, r2
 8004d5c:	3384      	adds	r3, #132	@ 0x84
 8004d5e:	461a      	mov	r2, r3
 8004d60:	2300      	movs	r3, #0
 8004d62:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	01db      	lsls	r3, r3, #7
 8004d6e:	4413      	add	r3, r2
 8004d70:	3384      	adds	r3, #132	@ 0x84
 8004d72:	461a      	mov	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d78:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d102      	bne.n	8004d88 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004d82:	2304      	movs	r3, #4
 8004d84:	61fb      	str	r3, [r7, #28]
 8004d86:	e01b      	b.n	8004dc0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d102      	bne.n	8004d96 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004d90:	2303      	movs	r3, #3
 8004d92:	61fb      	str	r3, [r7, #28]
 8004d94:	e014      	b.n	8004dc0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d00b      	beq.n	8004db6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d007      	beq.n	8004db6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d003      	beq.n	8004db6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004db2:	2b07      	cmp	r3, #7
 8004db4:	d102      	bne.n	8004dbc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004db6:	2302      	movs	r3, #2
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e001      	b.n	8004dc0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	01db      	lsls	r3, r3, #7
 8004dca:	4413      	add	r3, r2
 8004dcc:	3384      	adds	r3, #132	@ 0x84
 8004dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	6812      	ldr	r2, [r2, #0]
 8004dd4:	4611      	mov	r1, r2
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	01d2      	lsls	r2, r2, #7
 8004dda:	440a      	add	r2, r1
 8004ddc:	3284      	adds	r2, #132	@ 0x84
 8004dde:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004de2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	69fa      	ldr	r2, [r7, #28]
 8004dea:	fb02 f303 	mul.w	r3, r2, r3
 8004dee:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	6859      	ldr	r1, [r3, #4]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	1acb      	subs	r3, r1, r3
 8004dfa:	69f9      	ldr	r1, [r7, #28]
 8004dfc:	fb01 f303 	mul.w	r3, r1, r3
 8004e00:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	6809      	ldr	r1, [r1, #0]
 8004e06:	4608      	mov	r0, r1
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	01c9      	lsls	r1, r1, #7
 8004e0c:	4401      	add	r1, r0
 8004e0e:	3184      	adds	r1, #132	@ 0x84
 8004e10:	4313      	orrs	r3, r2
 8004e12:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	461a      	mov	r2, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	01db      	lsls	r3, r3, #7
 8004e1e:	4413      	add	r3, r2
 8004e20:	3384      	adds	r3, #132	@ 0x84
 8004e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e24:	68fa      	ldr	r2, [r7, #12]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	4611      	mov	r1, r2
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	01d2      	lsls	r2, r2, #7
 8004e2e:	440a      	add	r2, r1
 8004e30:	3284      	adds	r2, #132	@ 0x84
 8004e32:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e36:	f023 0307 	bic.w	r3, r3, #7
 8004e3a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	01db      	lsls	r3, r3, #7
 8004e46:	4413      	add	r3, r2
 8004e48:	3384      	adds	r3, #132	@ 0x84
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e50:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	01db      	lsls	r3, r3, #7
 8004e5c:	4413      	add	r3, r2
 8004e5e:	3384      	adds	r3, #132	@ 0x84
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	6812      	ldr	r2, [r2, #0]
 8004e66:	4611      	mov	r1, r2
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	01d2      	lsls	r2, r2, #7
 8004e6c:	440a      	add	r2, r1
 8004e6e:	3284      	adds	r2, #132	@ 0x84
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	6013      	str	r3, [r2, #0]
}
 8004e76:	bf00      	nop
 8004e78:	3724      	adds	r7, #36	@ 0x24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e267      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d075      	beq.n	8004f8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ea2:	4b88      	ldr	r3, [pc, #544]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d00c      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eae:	4b85      	ldr	r3, [pc, #532]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d112      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eba:	4b82      	ldr	r3, [pc, #520]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	685b      	ldr	r3, [r3, #4]
 8004ebe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ec2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d05b      	beq.n	8004f8c <HAL_RCC_OscConfig+0x108>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d157      	bne.n	8004f8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e242      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ee8:	d106      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x74>
 8004eea:	4b76      	ldr	r3, [pc, #472]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a75      	ldr	r2, [pc, #468]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e01d      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f00:	d10c      	bne.n	8004f1c <HAL_RCC_OscConfig+0x98>
 8004f02:	4b70      	ldr	r3, [pc, #448]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6f      	ldr	r2, [pc, #444]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f0c:	6013      	str	r3, [r2, #0]
 8004f0e:	4b6d      	ldr	r3, [pc, #436]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a6c      	ldr	r2, [pc, #432]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e00b      	b.n	8004f34 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	4b69      	ldr	r3, [pc, #420]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a68      	ldr	r2, [pc, #416]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f26:	6013      	str	r3, [r2, #0]
 8004f28:	4b66      	ldr	r3, [pc, #408]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a65      	ldr	r2, [pc, #404]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d013      	beq.n	8004f64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7fc fc66 	bl	800180c <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fc fc62 	bl	800180c <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	@ 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e207      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f56:	4b5b      	ldr	r3, [pc, #364]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0f0      	beq.n	8004f44 <HAL_RCC_OscConfig+0xc0>
 8004f62:	e014      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f64:	f7fc fc52 	bl	800180c <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f6c:	f7fc fc4e 	bl	800180c <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b64      	cmp	r3, #100	@ 0x64
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e1f3      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f7e:	4b51      	ldr	r3, [pc, #324]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0xe8>
 8004f8a:	e000      	b.n	8004f8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d063      	beq.n	8005062 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004f9a:	4b4a      	ldr	r3, [pc, #296]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	f003 030c 	and.w	r3, r3, #12
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa6:	4b47      	ldr	r3, [pc, #284]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fae:	2b08      	cmp	r3, #8
 8004fb0:	d11c      	bne.n	8004fec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fb2:	4b44      	ldr	r3, [pc, #272]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d116      	bne.n	8004fec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fbe:	4b41      	ldr	r3, [pc, #260]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x152>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d001      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e1c7      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd6:	4b3b      	ldr	r3, [pc, #236]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4937      	ldr	r1, [pc, #220]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fea:	e03a      	b.n	8005062 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d020      	beq.n	8005036 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff4:	4b34      	ldr	r3, [pc, #208]	@ (80050c8 <HAL_RCC_OscConfig+0x244>)
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ffa:	f7fc fc07 	bl	800180c <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005000:	e008      	b.n	8005014 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005002:	f7fc fc03 	bl	800180c <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	2b02      	cmp	r3, #2
 800500e:	d901      	bls.n	8005014 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	e1a8      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005014:	4b2b      	ldr	r3, [pc, #172]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d0f0      	beq.n	8005002 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005020:	4b28      	ldr	r3, [pc, #160]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	00db      	lsls	r3, r3, #3
 800502e:	4925      	ldr	r1, [pc, #148]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005030:	4313      	orrs	r3, r2
 8005032:	600b      	str	r3, [r1, #0]
 8005034:	e015      	b.n	8005062 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005036:	4b24      	ldr	r3, [pc, #144]	@ (80050c8 <HAL_RCC_OscConfig+0x244>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800503c:	f7fc fbe6 	bl	800180c <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005042:	e008      	b.n	8005056 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005044:	f7fc fbe2 	bl	800180c <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	2b02      	cmp	r3, #2
 8005050:	d901      	bls.n	8005056 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005052:	2303      	movs	r3, #3
 8005054:	e187      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005056:	4b1b      	ldr	r3, [pc, #108]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0302 	and.w	r3, r3, #2
 800505e:	2b00      	cmp	r3, #0
 8005060:	d1f0      	bne.n	8005044 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d036      	beq.n	80050dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d016      	beq.n	80050a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005076:	4b15      	ldr	r3, [pc, #84]	@ (80050cc <HAL_RCC_OscConfig+0x248>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800507c:	f7fc fbc6 	bl	800180c <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005084:	f7fc fbc2 	bl	800180c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e167      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005096:	4b0b      	ldr	r3, [pc, #44]	@ (80050c4 <HAL_RCC_OscConfig+0x240>)
 8005098:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x200>
 80050a2:	e01b      	b.n	80050dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a4:	4b09      	ldr	r3, [pc, #36]	@ (80050cc <HAL_RCC_OscConfig+0x248>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050aa:	f7fc fbaf 	bl	800180c <HAL_GetTick>
 80050ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050b0:	e00e      	b.n	80050d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050b2:	f7fc fbab 	bl	800180c <HAL_GetTick>
 80050b6:	4602      	mov	r2, r0
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	2b02      	cmp	r3, #2
 80050be:	d907      	bls.n	80050d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e150      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
 80050c4:	40023800 	.word	0x40023800
 80050c8:	42470000 	.word	0x42470000
 80050cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d0:	4b88      	ldr	r3, [pc, #544]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80050d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ea      	bne.n	80050b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0304 	and.w	r3, r3, #4
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8097 	beq.w	8005218 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ee:	4b81      	ldr	r3, [pc, #516]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d10f      	bne.n	800511a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
 80050fe:	4b7d      	ldr	r3, [pc, #500]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005102:	4a7c      	ldr	r2, [pc, #496]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005104:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005108:	6413      	str	r3, [r2, #64]	@ 0x40
 800510a:	4b7a      	ldr	r3, [pc, #488]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800510c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005116:	2301      	movs	r3, #1
 8005118:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800511a:	4b77      	ldr	r3, [pc, #476]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005122:	2b00      	cmp	r3, #0
 8005124:	d118      	bne.n	8005158 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005126:	4b74      	ldr	r3, [pc, #464]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a73      	ldr	r2, [pc, #460]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800512c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005130:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005132:	f7fc fb6b 	bl	800180c <HAL_GetTick>
 8005136:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005138:	e008      	b.n	800514c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800513a:	f7fc fb67 	bl	800180c <HAL_GetTick>
 800513e:	4602      	mov	r2, r0
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	1ad3      	subs	r3, r2, r3
 8005144:	2b02      	cmp	r3, #2
 8005146:	d901      	bls.n	800514c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005148:	2303      	movs	r3, #3
 800514a:	e10c      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800514c:	4b6a      	ldr	r3, [pc, #424]	@ (80052f8 <HAL_RCC_OscConfig+0x474>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d0f0      	beq.n	800513a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d106      	bne.n	800516e <HAL_RCC_OscConfig+0x2ea>
 8005160:	4b64      	ldr	r3, [pc, #400]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005164:	4a63      	ldr	r2, [pc, #396]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005166:	f043 0301 	orr.w	r3, r3, #1
 800516a:	6713      	str	r3, [r2, #112]	@ 0x70
 800516c:	e01c      	b.n	80051a8 <HAL_RCC_OscConfig+0x324>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	689b      	ldr	r3, [r3, #8]
 8005172:	2b05      	cmp	r3, #5
 8005174:	d10c      	bne.n	8005190 <HAL_RCC_OscConfig+0x30c>
 8005176:	4b5f      	ldr	r3, [pc, #380]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800517a:	4a5e      	ldr	r2, [pc, #376]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800517c:	f043 0304 	orr.w	r3, r3, #4
 8005180:	6713      	str	r3, [r2, #112]	@ 0x70
 8005182:	4b5c      	ldr	r3, [pc, #368]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005186:	4a5b      	ldr	r2, [pc, #364]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005188:	f043 0301 	orr.w	r3, r3, #1
 800518c:	6713      	str	r3, [r2, #112]	@ 0x70
 800518e:	e00b      	b.n	80051a8 <HAL_RCC_OscConfig+0x324>
 8005190:	4b58      	ldr	r3, [pc, #352]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005194:	4a57      	ldr	r2, [pc, #348]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005196:	f023 0301 	bic.w	r3, r3, #1
 800519a:	6713      	str	r3, [r2, #112]	@ 0x70
 800519c:	4b55      	ldr	r3, [pc, #340]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800519e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a0:	4a54      	ldr	r2, [pc, #336]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051a2:	f023 0304 	bic.w	r3, r3, #4
 80051a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d015      	beq.n	80051dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051b0:	f7fc fb2c 	bl	800180c <HAL_GetTick>
 80051b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b6:	e00a      	b.n	80051ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b8:	f7fc fb28 	bl	800180c <HAL_GetTick>
 80051bc:	4602      	mov	r2, r0
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	1ad3      	subs	r3, r2, r3
 80051c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d901      	bls.n	80051ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ca:	2303      	movs	r3, #3
 80051cc:	e0cb      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ce:	4b49      	ldr	r3, [pc, #292]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051d2:	f003 0302 	and.w	r3, r3, #2
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d0ee      	beq.n	80051b8 <HAL_RCC_OscConfig+0x334>
 80051da:	e014      	b.n	8005206 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051dc:	f7fc fb16 	bl	800180c <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e4:	f7fc fb12 	bl	800180c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e0b5      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051fa:	4b3e      	ldr	r3, [pc, #248]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80051fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1ee      	bne.n	80051e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005206:	7dfb      	ldrb	r3, [r7, #23]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d105      	bne.n	8005218 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800520c:	4b39      	ldr	r3, [pc, #228]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 800520e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005210:	4a38      	ldr	r2, [pc, #224]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005212:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005216:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 80a1 	beq.w	8005364 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005222:	4b34      	ldr	r3, [pc, #208]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005224:	689b      	ldr	r3, [r3, #8]
 8005226:	f003 030c 	and.w	r3, r3, #12
 800522a:	2b08      	cmp	r3, #8
 800522c:	d05c      	beq.n	80052e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b02      	cmp	r3, #2
 8005234:	d141      	bne.n	80052ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005236:	4b31      	ldr	r3, [pc, #196]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523c:	f7fc fae6 	bl	800180c <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005242:	e008      	b.n	8005256 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005244:	f7fc fae2 	bl	800180c <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	2b02      	cmp	r3, #2
 8005250:	d901      	bls.n	8005256 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e087      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005256:	4b27      	ldr	r3, [pc, #156]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d1f0      	bne.n	8005244 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	69da      	ldr	r2, [r3, #28]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6a1b      	ldr	r3, [r3, #32]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005270:	019b      	lsls	r3, r3, #6
 8005272:	431a      	orrs	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005278:	085b      	lsrs	r3, r3, #1
 800527a:	3b01      	subs	r3, #1
 800527c:	041b      	lsls	r3, r3, #16
 800527e:	431a      	orrs	r2, r3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005284:	061b      	lsls	r3, r3, #24
 8005286:	491b      	ldr	r1, [pc, #108]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 8005288:	4313      	orrs	r3, r2
 800528a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800528c:	4b1b      	ldr	r3, [pc, #108]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005292:	f7fc fabb 	bl	800180c <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800529a:	f7fc fab7 	bl	800180c <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e05c      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ac:	4b11      	ldr	r3, [pc, #68]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x416>
 80052b8:	e054      	b.n	8005364 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ba:	4b10      	ldr	r3, [pc, #64]	@ (80052fc <HAL_RCC_OscConfig+0x478>)
 80052bc:	2200      	movs	r2, #0
 80052be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052c0:	f7fc faa4 	bl	800180c <HAL_GetTick>
 80052c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052c8:	f7fc faa0 	bl	800180c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	d901      	bls.n	80052da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e045      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052da:	4b06      	ldr	r3, [pc, #24]	@ (80052f4 <HAL_RCC_OscConfig+0x470>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d1f0      	bne.n	80052c8 <HAL_RCC_OscConfig+0x444>
 80052e6:	e03d      	b.n	8005364 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d107      	bne.n	8005300 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e038      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
 80052f4:	40023800 	.word	0x40023800
 80052f8:	40007000 	.word	0x40007000
 80052fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005300:	4b1b      	ldr	r3, [pc, #108]	@ (8005370 <HAL_RCC_OscConfig+0x4ec>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	2b01      	cmp	r3, #1
 800530c:	d028      	beq.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d121      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005326:	429a      	cmp	r2, r3
 8005328:	d11a      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005336:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005338:	4293      	cmp	r3, r2
 800533a:	d111      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005346:	085b      	lsrs	r3, r3, #1
 8005348:	3b01      	subs	r3, #1
 800534a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534c:	429a      	cmp	r2, r3
 800534e:	d107      	bne.n	8005360 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800535a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535c:	429a      	cmp	r2, r3
 800535e:	d001      	beq.n	8005364 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e000      	b.n	8005366 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3718      	adds	r7, #24
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	40023800 	.word	0x40023800

08005374 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e0cc      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005388:	4b68      	ldr	r3, [pc, #416]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 030f 	and.w	r3, r3, #15
 8005390:	683a      	ldr	r2, [r7, #0]
 8005392:	429a      	cmp	r2, r3
 8005394:	d90c      	bls.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005396:	4b65      	ldr	r3, [pc, #404]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	b2d2      	uxtb	r2, r2
 800539c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800539e:	4b63      	ldr	r3, [pc, #396]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 030f 	and.w	r3, r3, #15
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d001      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053ac:	2301      	movs	r3, #1
 80053ae:	e0b8      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d020      	beq.n	80053fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0304 	and.w	r3, r3, #4
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c8:	4b59      	ldr	r3, [pc, #356]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	4a58      	ldr	r2, [pc, #352]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d005      	beq.n	80053ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053e0:	4b53      	ldr	r3, [pc, #332]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e2:	689b      	ldr	r3, [r3, #8]
 80053e4:	4a52      	ldr	r2, [pc, #328]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80053ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ec:	4b50      	ldr	r3, [pc, #320]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	494d      	ldr	r1, [pc, #308]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d044      	beq.n	8005494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2b01      	cmp	r3, #1
 8005410:	d107      	bne.n	8005422 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005412:	4b47      	ldr	r3, [pc, #284]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d119      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e07f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d003      	beq.n	8005432 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800542e:	2b03      	cmp	r3, #3
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005432:	4b3f      	ldr	r3, [pc, #252]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e06f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005442:	4b3b      	ldr	r3, [pc, #236]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e067      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4b37      	ldr	r3, [pc, #220]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 0203 	bic.w	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4934      	ldr	r1, [pc, #208]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005464:	f7fc f9d2 	bl	800180c <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fc f9ce 	bl	800180c <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e04f      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	4b2b      	ldr	r3, [pc, #172]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 020c 	and.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	429a      	cmp	r2, r3
 8005492:	d1eb      	bne.n	800546c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005494:	4b25      	ldr	r3, [pc, #148]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d20c      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b22      	ldr	r3, [pc, #136]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054a4:	683a      	ldr	r2, [r7, #0]
 80054a6:	b2d2      	uxtb	r2, r2
 80054a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054aa:	4b20      	ldr	r3, [pc, #128]	@ (800552c <HAL_RCC_ClockConfig+0x1b8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 030f 	and.w	r3, r3, #15
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d001      	beq.n	80054bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e032      	b.n	8005522 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054c8:	4b19      	ldr	r3, [pc, #100]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	4916      	ldr	r1, [pc, #88]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	4313      	orrs	r3, r2
 80054d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 0308 	and.w	r3, r3, #8
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d009      	beq.n	80054fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054e6:	4b12      	ldr	r3, [pc, #72]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	691b      	ldr	r3, [r3, #16]
 80054f2:	00db      	lsls	r3, r3, #3
 80054f4:	490e      	ldr	r1, [pc, #56]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80054fa:	f000 f821 	bl	8005540 <HAL_RCC_GetSysClockFreq>
 80054fe:	4602      	mov	r2, r0
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	091b      	lsrs	r3, r3, #4
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	490a      	ldr	r1, [pc, #40]	@ (8005534 <HAL_RCC_ClockConfig+0x1c0>)
 800550c:	5ccb      	ldrb	r3, [r1, r3]
 800550e:	fa22 f303 	lsr.w	r3, r2, r3
 8005512:	4a09      	ldr	r2, [pc, #36]	@ (8005538 <HAL_RCC_ClockConfig+0x1c4>)
 8005514:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005516:	4b09      	ldr	r3, [pc, #36]	@ (800553c <HAL_RCC_ClockConfig+0x1c8>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4618      	mov	r0, r3
 800551c:	f7fb ff2a 	bl	8001374 <HAL_InitTick>

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	40023c00 	.word	0x40023c00
 8005530:	40023800 	.word	0x40023800
 8005534:	0800d90c 	.word	0x0800d90c
 8005538:	20000000 	.word	0x20000000
 800553c:	20000004 	.word	0x20000004

08005540 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005540:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005544:	b094      	sub	sp, #80	@ 0x50
 8005546:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800554c:	2300      	movs	r3, #0
 800554e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005554:	2300      	movs	r3, #0
 8005556:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005558:	4b79      	ldr	r3, [pc, #484]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	f003 030c 	and.w	r3, r3, #12
 8005560:	2b08      	cmp	r3, #8
 8005562:	d00d      	beq.n	8005580 <HAL_RCC_GetSysClockFreq+0x40>
 8005564:	2b08      	cmp	r3, #8
 8005566:	f200 80e1 	bhi.w	800572c <HAL_RCC_GetSysClockFreq+0x1ec>
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_RCC_GetSysClockFreq+0x34>
 800556e:	2b04      	cmp	r3, #4
 8005570:	d003      	beq.n	800557a <HAL_RCC_GetSysClockFreq+0x3a>
 8005572:	e0db      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005574:	4b73      	ldr	r3, [pc, #460]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x204>)
 8005576:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005578:	e0db      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800557a:	4b73      	ldr	r3, [pc, #460]	@ (8005748 <HAL_RCC_GetSysClockFreq+0x208>)
 800557c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800557e:	e0d8      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005580:	4b6f      	ldr	r3, [pc, #444]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005588:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800558a:	4b6d      	ldr	r3, [pc, #436]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d063      	beq.n	800565e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005596:	4b6a      	ldr	r3, [pc, #424]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	099b      	lsrs	r3, r3, #6
 800559c:	2200      	movs	r2, #0
 800559e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055aa:	2300      	movs	r3, #0
 80055ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055b2:	4622      	mov	r2, r4
 80055b4:	462b      	mov	r3, r5
 80055b6:	f04f 0000 	mov.w	r0, #0
 80055ba:	f04f 0100 	mov.w	r1, #0
 80055be:	0159      	lsls	r1, r3, #5
 80055c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055c4:	0150      	lsls	r0, r2, #5
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	4621      	mov	r1, r4
 80055cc:	1a51      	subs	r1, r2, r1
 80055ce:	6139      	str	r1, [r7, #16]
 80055d0:	4629      	mov	r1, r5
 80055d2:	eb63 0301 	sbc.w	r3, r3, r1
 80055d6:	617b      	str	r3, [r7, #20]
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055e4:	4659      	mov	r1, fp
 80055e6:	018b      	lsls	r3, r1, #6
 80055e8:	4651      	mov	r1, sl
 80055ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80055ee:	4651      	mov	r1, sl
 80055f0:	018a      	lsls	r2, r1, #6
 80055f2:	4651      	mov	r1, sl
 80055f4:	ebb2 0801 	subs.w	r8, r2, r1
 80055f8:	4659      	mov	r1, fp
 80055fa:	eb63 0901 	sbc.w	r9, r3, r1
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800560a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800560e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005612:	4690      	mov	r8, r2
 8005614:	4699      	mov	r9, r3
 8005616:	4623      	mov	r3, r4
 8005618:	eb18 0303 	adds.w	r3, r8, r3
 800561c:	60bb      	str	r3, [r7, #8]
 800561e:	462b      	mov	r3, r5
 8005620:	eb49 0303 	adc.w	r3, r9, r3
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	f04f 0200 	mov.w	r2, #0
 800562a:	f04f 0300 	mov.w	r3, #0
 800562e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005632:	4629      	mov	r1, r5
 8005634:	024b      	lsls	r3, r1, #9
 8005636:	4621      	mov	r1, r4
 8005638:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800563c:	4621      	mov	r1, r4
 800563e:	024a      	lsls	r2, r1, #9
 8005640:	4610      	mov	r0, r2
 8005642:	4619      	mov	r1, r3
 8005644:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005646:	2200      	movs	r2, #0
 8005648:	62bb      	str	r3, [r7, #40]	@ 0x28
 800564a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800564c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005650:	f7fa fdce 	bl	80001f0 <__aeabi_uldivmod>
 8005654:	4602      	mov	r2, r0
 8005656:	460b      	mov	r3, r1
 8005658:	4613      	mov	r3, r2
 800565a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800565c:	e058      	b.n	8005710 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800565e:	4b38      	ldr	r3, [pc, #224]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	099b      	lsrs	r3, r3, #6
 8005664:	2200      	movs	r2, #0
 8005666:	4618      	mov	r0, r3
 8005668:	4611      	mov	r1, r2
 800566a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800566e:	623b      	str	r3, [r7, #32]
 8005670:	2300      	movs	r3, #0
 8005672:	627b      	str	r3, [r7, #36]	@ 0x24
 8005674:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005678:	4642      	mov	r2, r8
 800567a:	464b      	mov	r3, r9
 800567c:	f04f 0000 	mov.w	r0, #0
 8005680:	f04f 0100 	mov.w	r1, #0
 8005684:	0159      	lsls	r1, r3, #5
 8005686:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800568a:	0150      	lsls	r0, r2, #5
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4641      	mov	r1, r8
 8005692:	ebb2 0a01 	subs.w	sl, r2, r1
 8005696:	4649      	mov	r1, r9
 8005698:	eb63 0b01 	sbc.w	fp, r3, r1
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056b0:	ebb2 040a 	subs.w	r4, r2, sl
 80056b4:	eb63 050b 	sbc.w	r5, r3, fp
 80056b8:	f04f 0200 	mov.w	r2, #0
 80056bc:	f04f 0300 	mov.w	r3, #0
 80056c0:	00eb      	lsls	r3, r5, #3
 80056c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056c6:	00e2      	lsls	r2, r4, #3
 80056c8:	4614      	mov	r4, r2
 80056ca:	461d      	mov	r5, r3
 80056cc:	4643      	mov	r3, r8
 80056ce:	18e3      	adds	r3, r4, r3
 80056d0:	603b      	str	r3, [r7, #0]
 80056d2:	464b      	mov	r3, r9
 80056d4:	eb45 0303 	adc.w	r3, r5, r3
 80056d8:	607b      	str	r3, [r7, #4]
 80056da:	f04f 0200 	mov.w	r2, #0
 80056de:	f04f 0300 	mov.w	r3, #0
 80056e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056e6:	4629      	mov	r1, r5
 80056e8:	028b      	lsls	r3, r1, #10
 80056ea:	4621      	mov	r1, r4
 80056ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056f0:	4621      	mov	r1, r4
 80056f2:	028a      	lsls	r2, r1, #10
 80056f4:	4610      	mov	r0, r2
 80056f6:	4619      	mov	r1, r3
 80056f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056fa:	2200      	movs	r2, #0
 80056fc:	61bb      	str	r3, [r7, #24]
 80056fe:	61fa      	str	r2, [r7, #28]
 8005700:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005704:	f7fa fd74 	bl	80001f0 <__aeabi_uldivmod>
 8005708:	4602      	mov	r2, r0
 800570a:	460b      	mov	r3, r1
 800570c:	4613      	mov	r3, r2
 800570e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005710:	4b0b      	ldr	r3, [pc, #44]	@ (8005740 <HAL_RCC_GetSysClockFreq+0x200>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	0c1b      	lsrs	r3, r3, #16
 8005716:	f003 0303 	and.w	r3, r3, #3
 800571a:	3301      	adds	r3, #1
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005720:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005722:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800572a:	e002      	b.n	8005732 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800572c:	4b05      	ldr	r3, [pc, #20]	@ (8005744 <HAL_RCC_GetSysClockFreq+0x204>)
 800572e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005730:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005732:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005734:	4618      	mov	r0, r3
 8005736:	3750      	adds	r7, #80	@ 0x50
 8005738:	46bd      	mov	sp, r7
 800573a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800573e:	bf00      	nop
 8005740:	40023800 	.word	0x40023800
 8005744:	00f42400 	.word	0x00f42400
 8005748:	007a1200 	.word	0x007a1200

0800574c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005750:	4b03      	ldr	r3, [pc, #12]	@ (8005760 <HAL_RCC_GetHCLKFreq+0x14>)
 8005752:	681b      	ldr	r3, [r3, #0]
}
 8005754:	4618      	mov	r0, r3
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
 800575e:	bf00      	nop
 8005760:	20000000 	.word	0x20000000

08005764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005768:	f7ff fff0 	bl	800574c <HAL_RCC_GetHCLKFreq>
 800576c:	4602      	mov	r2, r0
 800576e:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	0a9b      	lsrs	r3, r3, #10
 8005774:	f003 0307 	and.w	r3, r3, #7
 8005778:	4903      	ldr	r1, [pc, #12]	@ (8005788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800577a:	5ccb      	ldrb	r3, [r1, r3]
 800577c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005780:	4618      	mov	r0, r3
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40023800 	.word	0x40023800
 8005788:	0800d91c 	.word	0x0800d91c

0800578c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005790:	f7ff ffdc 	bl	800574c <HAL_RCC_GetHCLKFreq>
 8005794:	4602      	mov	r2, r0
 8005796:	4b05      	ldr	r3, [pc, #20]	@ (80057ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	0b5b      	lsrs	r3, r3, #13
 800579c:	f003 0307 	and.w	r3, r3, #7
 80057a0:	4903      	ldr	r1, [pc, #12]	@ (80057b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057a2:	5ccb      	ldrb	r3, [r1, r3]
 80057a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	40023800 	.word	0x40023800
 80057b0:	0800d91c 	.word	0x0800d91c

080057b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	220f      	movs	r2, #15
 80057c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80057c4:	4b12      	ldr	r3, [pc, #72]	@ (8005810 <HAL_RCC_GetClockConfig+0x5c>)
 80057c6:	689b      	ldr	r3, [r3, #8]
 80057c8:	f003 0203 	and.w	r2, r3, #3
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80057d0:	4b0f      	ldr	r3, [pc, #60]	@ (8005810 <HAL_RCC_GetClockConfig+0x5c>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80057dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005810 <HAL_RCC_GetClockConfig+0x5c>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80057e8:	4b09      	ldr	r3, [pc, #36]	@ (8005810 <HAL_RCC_GetClockConfig+0x5c>)
 80057ea:	689b      	ldr	r3, [r3, #8]
 80057ec:	08db      	lsrs	r3, r3, #3
 80057ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80057f6:	4b07      	ldr	r3, [pc, #28]	@ (8005814 <HAL_RCC_GetClockConfig+0x60>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 020f 	and.w	r2, r3, #15
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	601a      	str	r2, [r3, #0]
}
 8005802:	bf00      	nop
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	40023800 	.word	0x40023800
 8005814:	40023c00 	.word	0x40023c00

08005818 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b086      	sub	sp, #24
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f003 0301 	and.w	r3, r3, #1
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800583c:	2b00      	cmp	r3, #0
 800583e:	d105      	bne.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005848:	2b00      	cmp	r3, #0
 800584a:	d075      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800584c:	4b91      	ldr	r3, [pc, #580]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800584e:	2200      	movs	r2, #0
 8005850:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005852:	f7fb ffdb 	bl	800180c <HAL_GetTick>
 8005856:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005858:	e008      	b.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800585a:	f7fb ffd7 	bl	800180c <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e189      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800586c:	4b8a      	ldr	r3, [pc, #552]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0301 	and.w	r3, r3, #1
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	019a      	lsls	r2, r3, #6
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	071b      	lsls	r3, r3, #28
 8005890:	4981      	ldr	r1, [pc, #516]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d01f      	beq.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80058a4:	4b7c      	ldr	r3, [pc, #496]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058aa:	0f1b      	lsrs	r3, r3, #28
 80058ac:	f003 0307 	and.w	r3, r3, #7
 80058b0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	019a      	lsls	r2, r3, #6
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	061b      	lsls	r3, r3, #24
 80058be:	431a      	orrs	r2, r3
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	071b      	lsls	r3, r3, #28
 80058c4:	4974      	ldr	r1, [pc, #464]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c6:	4313      	orrs	r3, r2
 80058c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80058cc:	4b72      	ldr	r3, [pc, #456]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058d2:	f023 021f 	bic.w	r2, r3, #31
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	69db      	ldr	r3, [r3, #28]
 80058da:	3b01      	subs	r3, #1
 80058dc:	496e      	ldr	r1, [pc, #440]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058de:	4313      	orrs	r3, r2
 80058e0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00d      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	019a      	lsls	r2, r3, #6
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	061b      	lsls	r3, r3, #24
 80058fc:	431a      	orrs	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	071b      	lsls	r3, r3, #28
 8005904:	4964      	ldr	r1, [pc, #400]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005906:	4313      	orrs	r3, r2
 8005908:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800590c:	4b61      	ldr	r3, [pc, #388]	@ (8005a94 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005912:	f7fb ff7b 	bl	800180c <HAL_GetTick>
 8005916:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005918:	e008      	b.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800591a:	f7fb ff77 	bl	800180c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e129      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800592c:	4b5a      	ldr	r3, [pc, #360]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f003 0304 	and.w	r3, r3, #4
 8005940:	2b00      	cmp	r3, #0
 8005942:	d105      	bne.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800594c:	2b00      	cmp	r3, #0
 800594e:	d079      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005950:	4b52      	ldr	r3, [pc, #328]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005956:	f7fb ff59 	bl	800180c <HAL_GetTick>
 800595a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800595c:	e008      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800595e:	f7fb ff55 	bl	800180c <HAL_GetTick>
 8005962:	4602      	mov	r2, r0
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e107      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005970:	4b49      	ldr	r3, [pc, #292]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800597c:	d0ef      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d020      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800598a:	4b43      	ldr	r3, [pc, #268]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800598c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005990:	0f1b      	lsrs	r3, r3, #28
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	019a      	lsls	r2, r3, #6
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	695b      	ldr	r3, [r3, #20]
 80059a2:	061b      	lsls	r3, r3, #24
 80059a4:	431a      	orrs	r2, r3
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	071b      	lsls	r3, r3, #28
 80059aa:	493b      	ldr	r1, [pc, #236]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80059b2:	4b39      	ldr	r3, [pc, #228]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	4934      	ldr	r1, [pc, #208]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c6:	4313      	orrs	r3, r2
 80059c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0308 	and.w	r3, r3, #8
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01e      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059d8:	4b2f      	ldr	r3, [pc, #188]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059de:	0e1b      	lsrs	r3, r3, #24
 80059e0:	f003 030f 	and.w	r3, r3, #15
 80059e4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	019a      	lsls	r2, r3, #6
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	061b      	lsls	r3, r3, #24
 80059f0:	431a      	orrs	r2, r3
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	071b      	lsls	r3, r3, #28
 80059f8:	4927      	ldr	r1, [pc, #156]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a00:	4b25      	ldr	r3, [pc, #148]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a06:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	4922      	ldr	r1, [pc, #136]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a16:	4b21      	ldr	r3, [pc, #132]	@ (8005a9c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a18:	2201      	movs	r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a1c:	f7fb fef6 	bl	800180c <HAL_GetTick>
 8005a20:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a22:	e008      	b.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a24:	f7fb fef2 	bl	800180c <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d901      	bls.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	e0a4      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a36:	4b18      	ldr	r3, [pc, #96]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a3e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a42:	d1ef      	bne.n	8005a24 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0320 	and.w	r3, r3, #32
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 808b 	beq.w	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a52:	2300      	movs	r3, #0
 8005a54:	60fb      	str	r3, [r7, #12]
 8005a56:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a60:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a62:	4b0d      	ldr	r3, [pc, #52]	@ (8005a98 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6a:	60fb      	str	r3, [r7, #12]
 8005a6c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a0b      	ldr	r2, [pc, #44]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a78:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a7a:	f7fb fec7 	bl	800180c <HAL_GetTick>
 8005a7e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005a80:	e010      	b.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a82:	f7fb fec3 	bl	800180c <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d909      	bls.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e075      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005a94:	42470068 	.word	0x42470068
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	42470070 	.word	0x42470070
 8005aa0:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005aa4:	4b38      	ldr	r3, [pc, #224]	@ (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d0e8      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ab0:	4b36      	ldr	r3, [pc, #216]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ab4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ab8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d02f      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ac4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d028      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ace:	4b2f      	ldr	r3, [pc, #188]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005ada:	2201      	movs	r2, #1
 8005adc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ade:	4b2c      	ldr	r3, [pc, #176]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005ae4:	4a29      	ldr	r2, [pc, #164]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005aea:	4b28      	ldr	r3, [pc, #160]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d114      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005af6:	f7fb fe89 	bl	800180c <HAL_GetTick>
 8005afa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fb fe85 	bl	800180c <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e035      	b.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b14:	4b1d      	ldr	r3, [pc, #116]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ee      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b28:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b2c:	d10d      	bne.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005b2e:	4b17      	ldr	r3, [pc, #92]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b3a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b42:	4912      	ldr	r1, [pc, #72]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	608b      	str	r3, [r1, #8]
 8005b48:	e005      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005b4a:	4b10      	ldr	r3, [pc, #64]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	4a0f      	ldr	r2, [pc, #60]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b50:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005b54:	6093      	str	r3, [r2, #8]
 8005b56:	4b0d      	ldr	r3, [pc, #52]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b58:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b62:	490a      	ldr	r1, [pc, #40]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0310 	and.w	r3, r3, #16
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d004      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005b7a:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005b7c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40007000 	.word	0x40007000
 8005b8c:	40023800 	.word	0x40023800
 8005b90:	42470e40 	.word	0x42470e40
 8005b94:	424711e0 	.word	0x424711e0

08005b98 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e025      	b.n	8005bf8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fa fe1d 	bl	8000800 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	3304      	adds	r3, #4
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	4610      	mov	r0, r2
 8005bda:	f001 f9f5 	bl	8006fc8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	461a      	mov	r2, r3
 8005be8:	6839      	ldr	r1, [r7, #0]
 8005bea:	f001 fa4a 	bl	8007082 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005bf6:	2300      	movs	r3, #0
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3708      	adds	r7, #8
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e07b      	b.n	8005d0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d108      	bne.n	8005c2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c22:	d009      	beq.n	8005c38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	61da      	str	r2, [r3, #28]
 8005c2a:	e005      	b.n	8005c38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d106      	bne.n	8005c58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f7fb fb1a 	bl	800128c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c80:	431a      	orrs	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	691b      	ldr	r3, [r3, #16]
 8005c90:	f003 0302 	and.w	r3, r3, #2
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	699b      	ldr	r3, [r3, #24]
 8005ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ca8:	431a      	orrs	r2, r3
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cb2:	431a      	orrs	r2, r3
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a1b      	ldr	r3, [r3, #32]
 8005cb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbc:	ea42 0103 	orr.w	r1, r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	f003 0104 	and.w	r1, r3, #4
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cde:	f003 0210 	and.w	r2, r3, #16
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	69da      	ldr	r2, [r3, #28]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005cf8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005d08:	2300      	movs	r3, #0
}
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	3708      	adds	r7, #8
 8005d0e:	46bd      	mov	sp, r7
 8005d10:	bd80      	pop	{r7, pc}

08005d12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b088      	sub	sp, #32
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	60f8      	str	r0, [r7, #12]
 8005d1a:	60b9      	str	r1, [r7, #8]
 8005d1c:	603b      	str	r3, [r7, #0]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d22:	f7fb fd73 	bl	800180c <HAL_GetTick>
 8005d26:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d001      	beq.n	8005d3c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005d38:	2302      	movs	r3, #2
 8005d3a:	e12a      	b.n	8005f92 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <HAL_SPI_Transmit+0x36>
 8005d42:	88fb      	ldrh	r3, [r7, #6]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d101      	bne.n	8005d4c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	e122      	b.n	8005f92 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d101      	bne.n	8005d5a <HAL_SPI_Transmit+0x48>
 8005d56:	2302      	movs	r3, #2
 8005d58:	e11b      	b.n	8005f92 <HAL_SPI_Transmit+0x280>
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2203      	movs	r2, #3
 8005d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	68ba      	ldr	r2, [r7, #8]
 8005d74:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	88fa      	ldrh	r2, [r7, #6]
 8005d7a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	88fa      	ldrh	r2, [r7, #6]
 8005d80:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2200      	movs	r2, #0
 8005d86:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2200      	movs	r2, #0
 8005d92:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005da8:	d10f      	bne.n	8005dca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005db8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005dc8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd4:	2b40      	cmp	r3, #64	@ 0x40
 8005dd6:	d007      	beq.n	8005de8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005de6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68db      	ldr	r3, [r3, #12]
 8005dec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005df0:	d152      	bne.n	8005e98 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d002      	beq.n	8005e00 <HAL_SPI_Transmit+0xee>
 8005dfa:	8b7b      	ldrh	r3, [r7, #26]
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d145      	bne.n	8005e8c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e04:	881a      	ldrh	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e10:	1c9a      	adds	r2, r3, #2
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e1a:	b29b      	uxth	r3, r3
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e24:	e032      	b.n	8005e8c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d112      	bne.n	8005e5a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e38:	881a      	ldrh	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e44:	1c9a      	adds	r2, r3, #2
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e58:	e018      	b.n	8005e8c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e5a:	f7fb fcd7 	bl	800180c <HAL_GetTick>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	1ad3      	subs	r3, r2, r3
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	429a      	cmp	r2, r3
 8005e68:	d803      	bhi.n	8005e72 <HAL_SPI_Transmit+0x160>
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e70:	d102      	bne.n	8005e78 <HAL_SPI_Transmit+0x166>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d109      	bne.n	8005e8c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005e88:	2303      	movs	r3, #3
 8005e8a:	e082      	b.n	8005f92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d1c7      	bne.n	8005e26 <HAL_SPI_Transmit+0x114>
 8005e96:	e053      	b.n	8005f40 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_SPI_Transmit+0x194>
 8005ea0:	8b7b      	ldrh	r3, [r7, #26]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d147      	bne.n	8005f36 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	330c      	adds	r3, #12
 8005eb0:	7812      	ldrb	r2, [r2, #0]
 8005eb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	3b01      	subs	r3, #1
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005ecc:	e033      	b.n	8005f36 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0302 	and.w	r3, r3, #2
 8005ed8:	2b02      	cmp	r3, #2
 8005eda:	d113      	bne.n	8005f04 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	330c      	adds	r3, #12
 8005ee6:	7812      	ldrb	r2, [r2, #0]
 8005ee8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	3b01      	subs	r3, #1
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f02:	e018      	b.n	8005f36 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f04:	f7fb fc82 	bl	800180c <HAL_GetTick>
 8005f08:	4602      	mov	r2, r0
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	1ad3      	subs	r3, r2, r3
 8005f0e:	683a      	ldr	r2, [r7, #0]
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d803      	bhi.n	8005f1c <HAL_SPI_Transmit+0x20a>
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f1a:	d102      	bne.n	8005f22 <HAL_SPI_Transmit+0x210>
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d109      	bne.n	8005f36 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e02d      	b.n	8005f92 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1c6      	bne.n	8005ece <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f40:	69fa      	ldr	r2, [r7, #28]
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 f8b1 	bl	80060ac <SPI_EndRxTxTransaction>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d002      	beq.n	8005f56 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2220      	movs	r2, #32
 8005f54:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d10a      	bne.n	8005f74 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	617b      	str	r3, [r7, #20]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	e000      	b.n	8005f92 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005f90:	2300      	movs	r3, #0
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3720      	adds	r7, #32
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
	...

08005f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b088      	sub	sp, #32
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	603b      	str	r3, [r7, #0]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fac:	f7fb fc2e 	bl	800180c <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb4:	1a9b      	subs	r3, r3, r2
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	4413      	add	r3, r2
 8005fba:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fbc:	f7fb fc26 	bl	800180c <HAL_GetTick>
 8005fc0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005fc2:	4b39      	ldr	r3, [pc, #228]	@ (80060a8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	015b      	lsls	r3, r3, #5
 8005fc8:	0d1b      	lsrs	r3, r3, #20
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
 8005fd0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd2:	e054      	b.n	800607e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fda:	d050      	beq.n	800607e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fdc:	f7fb fc16 	bl	800180c <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	1ad3      	subs	r3, r2, r3
 8005fe6:	69fa      	ldr	r2, [r7, #28]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d902      	bls.n	8005ff2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d13d      	bne.n	800606e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	685a      	ldr	r2, [r3, #4]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006000:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800600a:	d111      	bne.n	8006030 <SPI_WaitFlagStateUntilTimeout+0x94>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	689b      	ldr	r3, [r3, #8]
 8006010:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006014:	d004      	beq.n	8006020 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800601e:	d107      	bne.n	8006030 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800602e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006034:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006038:	d10f      	bne.n	800605a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006048:	601a      	str	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006058:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800606a:	2303      	movs	r3, #3
 800606c:	e017      	b.n	800609e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d101      	bne.n	8006078 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006074:	2300      	movs	r3, #0
 8006076:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	3b01      	subs	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689a      	ldr	r2, [r3, #8]
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	4013      	ands	r3, r2
 8006088:	68ba      	ldr	r2, [r7, #8]
 800608a:	429a      	cmp	r2, r3
 800608c:	bf0c      	ite	eq
 800608e:	2301      	moveq	r3, #1
 8006090:	2300      	movne	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	461a      	mov	r2, r3
 8006096:	79fb      	ldrb	r3, [r7, #7]
 8006098:	429a      	cmp	r2, r3
 800609a:	d19b      	bne.n	8005fd4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3720      	adds	r7, #32
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	20000000 	.word	0x20000000

080060ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af02      	add	r7, sp, #8
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	9300      	str	r3, [sp, #0]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	2201      	movs	r2, #1
 80060c0:	2102      	movs	r1, #2
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f7ff ff6a 	bl	8005f9c <SPI_WaitFlagStateUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d007      	beq.n	80060de <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060d2:	f043 0220 	orr.w	r2, r3, #32
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e032      	b.n	8006144 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80060de:	4b1b      	ldr	r3, [pc, #108]	@ (800614c <SPI_EndRxTxTransaction+0xa0>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1b      	ldr	r2, [pc, #108]	@ (8006150 <SPI_EndRxTxTransaction+0xa4>)
 80060e4:	fba2 2303 	umull	r2, r3, r2, r3
 80060e8:	0d5b      	lsrs	r3, r3, #21
 80060ea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80060ee:	fb02 f303 	mul.w	r3, r2, r3
 80060f2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060fc:	d112      	bne.n	8006124 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	9300      	str	r3, [sp, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2200      	movs	r2, #0
 8006106:	2180      	movs	r1, #128	@ 0x80
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f7ff ff47 	bl	8005f9c <SPI_WaitFlagStateUntilTimeout>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d016      	beq.n	8006142 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006118:	f043 0220 	orr.w	r2, r3, #32
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e00f      	b.n	8006144 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00a      	beq.n	8006140 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	3b01      	subs	r3, #1
 800612e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800613a:	2b80      	cmp	r3, #128	@ 0x80
 800613c:	d0f2      	beq.n	8006124 <SPI_EndRxTxTransaction+0x78>
 800613e:	e000      	b.n	8006142 <SPI_EndRxTxTransaction+0x96>
        break;
 8006140:	bf00      	nop
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3718      	adds	r7, #24
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}
 800614c:	20000000 	.word	0x20000000
 8006150:	165e9f81 	.word	0x165e9f81

08006154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d101      	bne.n	8006166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	e041      	b.n	80061ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800616c:	b2db      	uxtb	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f7fb fa52 	bl	8001624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2202      	movs	r2, #2
 8006184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	3304      	adds	r3, #4
 8006190:	4619      	mov	r1, r3
 8006192:	4610      	mov	r0, r2
 8006194:	f000 fa7e 	bl	8006694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2201      	movs	r2, #1
 80061cc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3708      	adds	r7, #8
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
	...

080061f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006202:	b2db      	uxtb	r3, r3
 8006204:	2b01      	cmp	r3, #1
 8006206:	d001      	beq.n	800620c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006208:	2301      	movs	r3, #1
 800620a:	e04e      	b.n	80062aa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68da      	ldr	r2, [r3, #12]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a23      	ldr	r2, [pc, #140]	@ (80062b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d022      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x80>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006236:	d01d      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x80>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a1f      	ldr	r2, [pc, #124]	@ (80062bc <HAL_TIM_Base_Start_IT+0xc8>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d018      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x80>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a1e      	ldr	r2, [pc, #120]	@ (80062c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d013      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x80>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a1c      	ldr	r2, [pc, #112]	@ (80062c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d00e      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x80>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a1b      	ldr	r2, [pc, #108]	@ (80062c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d009      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x80>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a19      	ldr	r2, [pc, #100]	@ (80062cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d004      	beq.n	8006274 <HAL_TIM_Base_Start_IT+0x80>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a18      	ldr	r2, [pc, #96]	@ (80062d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d111      	bne.n	8006298 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f003 0307 	and.w	r3, r3, #7
 800627e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2b06      	cmp	r3, #6
 8006284:	d010      	beq.n	80062a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f042 0201 	orr.w	r2, r2, #1
 8006294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006296:	e007      	b.n	80062a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3714      	adds	r7, #20
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000
 80062bc:	40000400 	.word	0x40000400
 80062c0:	40000800 	.word	0x40000800
 80062c4:	40000c00 	.word	0x40000c00
 80062c8:	40010400 	.word	0x40010400
 80062cc:	40014000 	.word	0x40014000
 80062d0:	40001800 	.word	0x40001800

080062d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	691b      	ldr	r3, [r3, #16]
 80062ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d020      	beq.n	8006338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d01b      	beq.n	8006338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f06f 0202 	mvn.w	r2, #2
 8006308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	699b      	ldr	r3, [r3, #24]
 8006316:	f003 0303 	and.w	r3, r3, #3
 800631a:	2b00      	cmp	r3, #0
 800631c:	d003      	beq.n	8006326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f999 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006324:	e005      	b.n	8006332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f98b 	bl	8006642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f000 f99c 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0304 	and.w	r3, r3, #4
 800633e:	2b00      	cmp	r3, #0
 8006340:	d020      	beq.n	8006384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	f003 0304 	and.w	r3, r3, #4
 8006348:	2b00      	cmp	r3, #0
 800634a:	d01b      	beq.n	8006384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f06f 0204 	mvn.w	r2, #4
 8006354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2202      	movs	r2, #2
 800635a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006366:	2b00      	cmp	r3, #0
 8006368:	d003      	beq.n	8006372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f973 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006370:	e005      	b.n	800637e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f965 	bl	8006642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f976 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0308 	and.w	r3, r3, #8
 800638a:	2b00      	cmp	r3, #0
 800638c:	d020      	beq.n	80063d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 0308 	and.w	r3, r3, #8
 8006394:	2b00      	cmp	r3, #0
 8006396:	d01b      	beq.n	80063d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0208 	mvn.w	r2, #8
 80063a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2204      	movs	r2, #4
 80063a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	69db      	ldr	r3, [r3, #28]
 80063ae:	f003 0303 	and.w	r3, r3, #3
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d003      	beq.n	80063be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f94d 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 80063bc:	e005      	b.n	80063ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f93f 	bl	8006642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f000 f950 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	f003 0310 	and.w	r3, r3, #16
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d020      	beq.n	800641c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d01b      	beq.n	800641c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f06f 0210 	mvn.w	r2, #16
 80063ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2208      	movs	r2, #8
 80063f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d003      	beq.n	800640a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f927 	bl	8006656 <HAL_TIM_IC_CaptureCallback>
 8006408:	e005      	b.n	8006416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 f919 	bl	8006642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 f92a 	bl	800666a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	d00c      	beq.n	8006440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f003 0301 	and.w	r3, r3, #1
 800642c:	2b00      	cmp	r3, #0
 800642e:	d007      	beq.n	8006440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0201 	mvn.w	r2, #1
 8006438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	f7fa fed8 	bl	80011f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00c      	beq.n	8006464 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800645c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 fae4 	bl	8006a2c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00c      	beq.n	8006488 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006474:	2b00      	cmp	r3, #0
 8006476:	d007      	beq.n	8006488 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8fb 	bl	800667e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	f003 0320 	and.w	r3, r3, #32
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00c      	beq.n	80064ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f003 0320 	and.w	r3, r3, #32
 8006498:	2b00      	cmp	r3, #0
 800649a:	d007      	beq.n	80064ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f06f 0220 	mvn.w	r2, #32
 80064a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fab6 	bl	8006a18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80064be:	2300      	movs	r3, #0
 80064c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d101      	bne.n	80064d0 <HAL_TIM_ConfigClockSource+0x1c>
 80064cc:	2302      	movs	r3, #2
 80064ce:	e0b4      	b.n	800663a <HAL_TIM_ConfigClockSource+0x186>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	689b      	ldr	r3, [r3, #8]
 80064e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80064ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80064f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006508:	d03e      	beq.n	8006588 <HAL_TIM_ConfigClockSource+0xd4>
 800650a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800650e:	f200 8087 	bhi.w	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006512:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006516:	f000 8086 	beq.w	8006626 <HAL_TIM_ConfigClockSource+0x172>
 800651a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800651e:	d87f      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006520:	2b70      	cmp	r3, #112	@ 0x70
 8006522:	d01a      	beq.n	800655a <HAL_TIM_ConfigClockSource+0xa6>
 8006524:	2b70      	cmp	r3, #112	@ 0x70
 8006526:	d87b      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006528:	2b60      	cmp	r3, #96	@ 0x60
 800652a:	d050      	beq.n	80065ce <HAL_TIM_ConfigClockSource+0x11a>
 800652c:	2b60      	cmp	r3, #96	@ 0x60
 800652e:	d877      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006530:	2b50      	cmp	r3, #80	@ 0x50
 8006532:	d03c      	beq.n	80065ae <HAL_TIM_ConfigClockSource+0xfa>
 8006534:	2b50      	cmp	r3, #80	@ 0x50
 8006536:	d873      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006538:	2b40      	cmp	r3, #64	@ 0x40
 800653a:	d058      	beq.n	80065ee <HAL_TIM_ConfigClockSource+0x13a>
 800653c:	2b40      	cmp	r3, #64	@ 0x40
 800653e:	d86f      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006540:	2b30      	cmp	r3, #48	@ 0x30
 8006542:	d064      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x15a>
 8006544:	2b30      	cmp	r3, #48	@ 0x30
 8006546:	d86b      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006548:	2b20      	cmp	r3, #32
 800654a:	d060      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x15a>
 800654c:	2b20      	cmp	r3, #32
 800654e:	d867      	bhi.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d05c      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x15a>
 8006554:	2b10      	cmp	r3, #16
 8006556:	d05a      	beq.n	800660e <HAL_TIM_ConfigClockSource+0x15a>
 8006558:	e062      	b.n	8006620 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800656a:	f000 f9b9 	bl	80068e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800657c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	609a      	str	r2, [r3, #8]
      break;
 8006586:	e04f      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006598:	f000 f9a2 	bl	80068e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	689a      	ldr	r2, [r3, #8]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80065aa:	609a      	str	r2, [r3, #8]
      break;
 80065ac:	e03c      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ba:	461a      	mov	r2, r3
 80065bc:	f000 f916 	bl	80067ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2150      	movs	r1, #80	@ 0x50
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f96f 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 80065cc:	e02c      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80065da:	461a      	mov	r2, r3
 80065dc:	f000 f935 	bl	800684a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2160      	movs	r1, #96	@ 0x60
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f95f 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 80065ec:	e01c      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80065fa:	461a      	mov	r2, r3
 80065fc:	f000 f8f6 	bl	80067ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	2140      	movs	r1, #64	@ 0x40
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f94f 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800660c:	e00c      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4619      	mov	r1, r3
 8006618:	4610      	mov	r0, r2
 800661a:	f000 f946 	bl	80068aa <TIM_ITRx_SetConfig>
      break;
 800661e:	e003      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	73fb      	strb	r3, [r7, #15]
      break;
 8006624:	e000      	b.n	8006628 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006626:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006638:	7bfb      	ldrb	r3, [r7, #15]
}
 800663a:	4618      	mov	r0, r3
 800663c:	3710      	adds	r7, #16
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr

08006656 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006656:	b480      	push	{r7}
 8006658:	b083      	sub	sp, #12
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006672:	bf00      	nop
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
 800669c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a46      	ldr	r2, [pc, #280]	@ (80067c0 <TIM_Base_SetConfig+0x12c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d013      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066b2:	d00f      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a43      	ldr	r2, [pc, #268]	@ (80067c4 <TIM_Base_SetConfig+0x130>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d00b      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	4a42      	ldr	r2, [pc, #264]	@ (80067c8 <TIM_Base_SetConfig+0x134>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d007      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a41      	ldr	r2, [pc, #260]	@ (80067cc <TIM_Base_SetConfig+0x138>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_Base_SetConfig+0x40>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a40      	ldr	r2, [pc, #256]	@ (80067d0 <TIM_Base_SetConfig+0x13c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d108      	bne.n	80066e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80066da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a35      	ldr	r2, [pc, #212]	@ (80067c0 <TIM_Base_SetConfig+0x12c>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d02b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066f4:	d027      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a32      	ldr	r2, [pc, #200]	@ (80067c4 <TIM_Base_SetConfig+0x130>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d023      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a31      	ldr	r2, [pc, #196]	@ (80067c8 <TIM_Base_SetConfig+0x134>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d01f      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a30      	ldr	r2, [pc, #192]	@ (80067cc <TIM_Base_SetConfig+0x138>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d01b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a2f      	ldr	r2, [pc, #188]	@ (80067d0 <TIM_Base_SetConfig+0x13c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d017      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	4a2e      	ldr	r2, [pc, #184]	@ (80067d4 <TIM_Base_SetConfig+0x140>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4a2d      	ldr	r2, [pc, #180]	@ (80067d8 <TIM_Base_SetConfig+0x144>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d00f      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	4a2c      	ldr	r2, [pc, #176]	@ (80067dc <TIM_Base_SetConfig+0x148>)
 800672a:	4293      	cmp	r3, r2
 800672c:	d00b      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	4a2b      	ldr	r2, [pc, #172]	@ (80067e0 <TIM_Base_SetConfig+0x14c>)
 8006732:	4293      	cmp	r3, r2
 8006734:	d007      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	4a2a      	ldr	r2, [pc, #168]	@ (80067e4 <TIM_Base_SetConfig+0x150>)
 800673a:	4293      	cmp	r3, r2
 800673c:	d003      	beq.n	8006746 <TIM_Base_SetConfig+0xb2>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4a29      	ldr	r2, [pc, #164]	@ (80067e8 <TIM_Base_SetConfig+0x154>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d108      	bne.n	8006758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800674c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	4313      	orrs	r3, r2
 8006764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	68fa      	ldr	r2, [r7, #12]
 800676a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a10      	ldr	r2, [pc, #64]	@ (80067c0 <TIM_Base_SetConfig+0x12c>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_Base_SetConfig+0xf8>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a12      	ldr	r2, [pc, #72]	@ (80067d0 <TIM_Base_SetConfig+0x13c>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d103      	bne.n	8006794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	691a      	ldr	r2, [r3, #16]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	f003 0301 	and.w	r3, r3, #1
 80067a2:	2b01      	cmp	r3, #1
 80067a4:	d105      	bne.n	80067b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f023 0201 	bic.w	r2, r3, #1
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	611a      	str	r2, [r3, #16]
  }
}
 80067b2:	bf00      	nop
 80067b4:	3714      	adds	r7, #20
 80067b6:	46bd      	mov	sp, r7
 80067b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067bc:	4770      	bx	lr
 80067be:	bf00      	nop
 80067c0:	40010000 	.word	0x40010000
 80067c4:	40000400 	.word	0x40000400
 80067c8:	40000800 	.word	0x40000800
 80067cc:	40000c00 	.word	0x40000c00
 80067d0:	40010400 	.word	0x40010400
 80067d4:	40014000 	.word	0x40014000
 80067d8:	40014400 	.word	0x40014400
 80067dc:	40014800 	.word	0x40014800
 80067e0:	40001800 	.word	0x40001800
 80067e4:	40001c00 	.word	0x40001c00
 80067e8:	40002000 	.word	0x40002000

080067ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	6a1b      	ldr	r3, [r3, #32]
 80067fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	6a1b      	ldr	r3, [r3, #32]
 8006802:	f023 0201 	bic.w	r2, r3, #1
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	699b      	ldr	r3, [r3, #24]
 800680e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006816:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	011b      	lsls	r3, r3, #4
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	4313      	orrs	r3, r2
 8006820:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f023 030a 	bic.w	r3, r3, #10
 8006828:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	4313      	orrs	r3, r2
 8006830:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	693a      	ldr	r2, [r7, #16]
 8006836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	621a      	str	r2, [r3, #32]
}
 800683e:	bf00      	nop
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr

0800684a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800684a:	b480      	push	{r7}
 800684c:	b087      	sub	sp, #28
 800684e:	af00      	add	r7, sp, #0
 8006850:	60f8      	str	r0, [r7, #12]
 8006852:	60b9      	str	r1, [r7, #8]
 8006854:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6a1b      	ldr	r3, [r3, #32]
 8006860:	f023 0210 	bic.w	r2, r3, #16
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006874:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	031b      	lsls	r3, r3, #12
 800687a:	693a      	ldr	r2, [r7, #16]
 800687c:	4313      	orrs	r3, r2
 800687e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006886:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	011b      	lsls	r3, r3, #4
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	4313      	orrs	r3, r2
 8006890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	621a      	str	r2, [r3, #32]
}
 800689e:	bf00      	nop
 80068a0:	371c      	adds	r7, #28
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b085      	sub	sp, #20
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
 80068b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068c2:	683a      	ldr	r2, [r7, #0]
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4313      	orrs	r3, r2
 80068c8:	f043 0307 	orr.w	r3, r3, #7
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	609a      	str	r2, [r3, #8]
}
 80068d4:	bf00      	nop
 80068d6:	3714      	adds	r7, #20
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b087      	sub	sp, #28
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80068fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	021a      	lsls	r2, r3, #8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	431a      	orrs	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4313      	orrs	r3, r2
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	609a      	str	r2, [r3, #8]
}
 8006914:	bf00      	nop
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006934:	2302      	movs	r3, #2
 8006936:	e05a      	b.n	80069ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2201      	movs	r2, #1
 800693c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2202      	movs	r2, #2
 8006944:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800695e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68fa      	ldr	r2, [r7, #12]
 8006970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a21      	ldr	r2, [pc, #132]	@ (80069fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d022      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006984:	d01d      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a1d      	ldr	r2, [pc, #116]	@ (8006a00 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d018      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a1b      	ldr	r2, [pc, #108]	@ (8006a04 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a08 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a18      	ldr	r2, [pc, #96]	@ (8006a0c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a17      	ldr	r2, [pc, #92]	@ (8006a10 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a15      	ldr	r2, [pc, #84]	@ (8006a14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d10c      	bne.n	80069dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	68ba      	ldr	r2, [r7, #8]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68ba      	ldr	r2, [r7, #8]
 80069da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40010000 	.word	0x40010000
 8006a00:	40000400 	.word	0x40000400
 8006a04:	40000800 	.word	0x40000800
 8006a08:	40000c00 	.word	0x40000c00
 8006a0c:	40010400 	.word	0x40010400
 8006a10:	40014000 	.word	0x40014000
 8006a14:	40001800 	.word	0x40001800

08006a18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b083      	sub	sp, #12
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006a20:	bf00      	nop
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr

08006a2c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d101      	bne.n	8006a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a4e:	2301      	movs	r3, #1
 8006a50:	e042      	b.n	8006ad8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d106      	bne.n	8006a6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7fa fe28 	bl	80016bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2224      	movs	r2, #36	@ 0x24
 8006a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f82b 	bl	8006ae0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	691a      	ldr	r2, [r3, #16]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006a98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006aa8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68da      	ldr	r2, [r3, #12]
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ab8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3708      	adds	r7, #8
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ae4:	b0c0      	sub	sp, #256	@ 0x100
 8006ae6:	af00      	add	r7, sp, #0
 8006ae8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	691b      	ldr	r3, [r3, #16]
 8006af4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006afc:	68d9      	ldr	r1, [r3, #12]
 8006afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b02:	681a      	ldr	r2, [r3, #0]
 8006b04:	ea40 0301 	orr.w	r3, r0, r1
 8006b08:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b0e:	689a      	ldr	r2, [r3, #8]
 8006b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b14:	691b      	ldr	r3, [r3, #16]
 8006b16:	431a      	orrs	r2, r3
 8006b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b24:	69db      	ldr	r3, [r3, #28]
 8006b26:	4313      	orrs	r3, r2
 8006b28:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b38:	f021 010c 	bic.w	r1, r1, #12
 8006b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b46:	430b      	orrs	r3, r1
 8006b48:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	695b      	ldr	r3, [r3, #20]
 8006b52:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5a:	6999      	ldr	r1, [r3, #24]
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	ea40 0301 	orr.w	r3, r0, r1
 8006b66:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b6c:	681a      	ldr	r2, [r3, #0]
 8006b6e:	4b8f      	ldr	r3, [pc, #572]	@ (8006dac <UART_SetConfig+0x2cc>)
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d005      	beq.n	8006b80 <UART_SetConfig+0xa0>
 8006b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b8d      	ldr	r3, [pc, #564]	@ (8006db0 <UART_SetConfig+0x2d0>)
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d104      	bne.n	8006b8a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006b80:	f7fe fe04 	bl	800578c <HAL_RCC_GetPCLK2Freq>
 8006b84:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006b88:	e003      	b.n	8006b92 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006b8a:	f7fe fdeb 	bl	8005764 <HAL_RCC_GetPCLK1Freq>
 8006b8e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b96:	69db      	ldr	r3, [r3, #28]
 8006b98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b9c:	f040 810c 	bne.w	8006db8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ba0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006baa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006bb2:	4622      	mov	r2, r4
 8006bb4:	462b      	mov	r3, r5
 8006bb6:	1891      	adds	r1, r2, r2
 8006bb8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bba:	415b      	adcs	r3, r3
 8006bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bbe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bc2:	4621      	mov	r1, r4
 8006bc4:	eb12 0801 	adds.w	r8, r2, r1
 8006bc8:	4629      	mov	r1, r5
 8006bca:	eb43 0901 	adc.w	r9, r3, r1
 8006bce:	f04f 0200 	mov.w	r2, #0
 8006bd2:	f04f 0300 	mov.w	r3, #0
 8006bd6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bde:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006be2:	4690      	mov	r8, r2
 8006be4:	4699      	mov	r9, r3
 8006be6:	4623      	mov	r3, r4
 8006be8:	eb18 0303 	adds.w	r3, r8, r3
 8006bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006bf0:	462b      	mov	r3, r5
 8006bf2:	eb49 0303 	adc.w	r3, r9, r3
 8006bf6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c0e:	460b      	mov	r3, r1
 8006c10:	18db      	adds	r3, r3, r3
 8006c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c14:	4613      	mov	r3, r2
 8006c16:	eb42 0303 	adc.w	r3, r2, r3
 8006c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c24:	f7f9 fae4 	bl	80001f0 <__aeabi_uldivmod>
 8006c28:	4602      	mov	r2, r0
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	4b61      	ldr	r3, [pc, #388]	@ (8006db4 <UART_SetConfig+0x2d4>)
 8006c2e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c32:	095b      	lsrs	r3, r3, #5
 8006c34:	011c      	lsls	r4, r3, #4
 8006c36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c48:	4642      	mov	r2, r8
 8006c4a:	464b      	mov	r3, r9
 8006c4c:	1891      	adds	r1, r2, r2
 8006c4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c50:	415b      	adcs	r3, r3
 8006c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c58:	4641      	mov	r1, r8
 8006c5a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c5e:	4649      	mov	r1, r9
 8006c60:	eb43 0b01 	adc.w	fp, r3, r1
 8006c64:	f04f 0200 	mov.w	r2, #0
 8006c68:	f04f 0300 	mov.w	r3, #0
 8006c6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006c70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c78:	4692      	mov	sl, r2
 8006c7a:	469b      	mov	fp, r3
 8006c7c:	4643      	mov	r3, r8
 8006c7e:	eb1a 0303 	adds.w	r3, sl, r3
 8006c82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006c86:	464b      	mov	r3, r9
 8006c88:	eb4b 0303 	adc.w	r3, fp, r3
 8006c8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006c9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006ca0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	18db      	adds	r3, r3, r3
 8006ca8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006caa:	4613      	mov	r3, r2
 8006cac:	eb42 0303 	adc.w	r3, r2, r3
 8006cb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cb2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006cb6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006cba:	f7f9 fa99 	bl	80001f0 <__aeabi_uldivmod>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	4b3b      	ldr	r3, [pc, #236]	@ (8006db4 <UART_SetConfig+0x2d4>)
 8006cc6:	fba3 2301 	umull	r2, r3, r3, r1
 8006cca:	095b      	lsrs	r3, r3, #5
 8006ccc:	2264      	movs	r2, #100	@ 0x64
 8006cce:	fb02 f303 	mul.w	r3, r2, r3
 8006cd2:	1acb      	subs	r3, r1, r3
 8006cd4:	00db      	lsls	r3, r3, #3
 8006cd6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cda:	4b36      	ldr	r3, [pc, #216]	@ (8006db4 <UART_SetConfig+0x2d4>)
 8006cdc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce0:	095b      	lsrs	r3, r3, #5
 8006ce2:	005b      	lsls	r3, r3, #1
 8006ce4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ce8:	441c      	add	r4, r3
 8006cea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006cf4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006cf8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006cfc:	4642      	mov	r2, r8
 8006cfe:	464b      	mov	r3, r9
 8006d00:	1891      	adds	r1, r2, r2
 8006d02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d04:	415b      	adcs	r3, r3
 8006d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d0c:	4641      	mov	r1, r8
 8006d0e:	1851      	adds	r1, r2, r1
 8006d10:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d12:	4649      	mov	r1, r9
 8006d14:	414b      	adcs	r3, r1
 8006d16:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d18:	f04f 0200 	mov.w	r2, #0
 8006d1c:	f04f 0300 	mov.w	r3, #0
 8006d20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d24:	4659      	mov	r1, fp
 8006d26:	00cb      	lsls	r3, r1, #3
 8006d28:	4651      	mov	r1, sl
 8006d2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d2e:	4651      	mov	r1, sl
 8006d30:	00ca      	lsls	r2, r1, #3
 8006d32:	4610      	mov	r0, r2
 8006d34:	4619      	mov	r1, r3
 8006d36:	4603      	mov	r3, r0
 8006d38:	4642      	mov	r2, r8
 8006d3a:	189b      	adds	r3, r3, r2
 8006d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d40:	464b      	mov	r3, r9
 8006d42:	460a      	mov	r2, r1
 8006d44:	eb42 0303 	adc.w	r3, r2, r3
 8006d48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d60:	460b      	mov	r3, r1
 8006d62:	18db      	adds	r3, r3, r3
 8006d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d66:	4613      	mov	r3, r2
 8006d68:	eb42 0303 	adc.w	r3, r2, r3
 8006d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006d76:	f7f9 fa3b 	bl	80001f0 <__aeabi_uldivmod>
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006db4 <UART_SetConfig+0x2d4>)
 8006d80:	fba3 1302 	umull	r1, r3, r3, r2
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	2164      	movs	r1, #100	@ 0x64
 8006d88:	fb01 f303 	mul.w	r3, r1, r3
 8006d8c:	1ad3      	subs	r3, r2, r3
 8006d8e:	00db      	lsls	r3, r3, #3
 8006d90:	3332      	adds	r3, #50	@ 0x32
 8006d92:	4a08      	ldr	r2, [pc, #32]	@ (8006db4 <UART_SetConfig+0x2d4>)
 8006d94:	fba2 2303 	umull	r2, r3, r2, r3
 8006d98:	095b      	lsrs	r3, r3, #5
 8006d9a:	f003 0207 	and.w	r2, r3, #7
 8006d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4422      	add	r2, r4
 8006da6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006da8:	e106      	b.n	8006fb8 <UART_SetConfig+0x4d8>
 8006daa:	bf00      	nop
 8006dac:	40011000 	.word	0x40011000
 8006db0:	40011400 	.word	0x40011400
 8006db4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006dc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006dc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006dca:	4642      	mov	r2, r8
 8006dcc:	464b      	mov	r3, r9
 8006dce:	1891      	adds	r1, r2, r2
 8006dd0:	6239      	str	r1, [r7, #32]
 8006dd2:	415b      	adcs	r3, r3
 8006dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dda:	4641      	mov	r1, r8
 8006ddc:	1854      	adds	r4, r2, r1
 8006dde:	4649      	mov	r1, r9
 8006de0:	eb43 0501 	adc.w	r5, r3, r1
 8006de4:	f04f 0200 	mov.w	r2, #0
 8006de8:	f04f 0300 	mov.w	r3, #0
 8006dec:	00eb      	lsls	r3, r5, #3
 8006dee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006df2:	00e2      	lsls	r2, r4, #3
 8006df4:	4614      	mov	r4, r2
 8006df6:	461d      	mov	r5, r3
 8006df8:	4643      	mov	r3, r8
 8006dfa:	18e3      	adds	r3, r4, r3
 8006dfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e00:	464b      	mov	r3, r9
 8006e02:	eb45 0303 	adc.w	r3, r5, r3
 8006e06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	f04f 0300 	mov.w	r3, #0
 8006e22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e26:	4629      	mov	r1, r5
 8006e28:	008b      	lsls	r3, r1, #2
 8006e2a:	4621      	mov	r1, r4
 8006e2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e30:	4621      	mov	r1, r4
 8006e32:	008a      	lsls	r2, r1, #2
 8006e34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e38:	f7f9 f9da 	bl	80001f0 <__aeabi_uldivmod>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	460b      	mov	r3, r1
 8006e40:	4b60      	ldr	r3, [pc, #384]	@ (8006fc4 <UART_SetConfig+0x4e4>)
 8006e42:	fba3 2302 	umull	r2, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	011c      	lsls	r4, r3, #4
 8006e4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e4e:	2200      	movs	r2, #0
 8006e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	1891      	adds	r1, r2, r2
 8006e62:	61b9      	str	r1, [r7, #24]
 8006e64:	415b      	adcs	r3, r3
 8006e66:	61fb      	str	r3, [r7, #28]
 8006e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e6c:	4641      	mov	r1, r8
 8006e6e:	1851      	adds	r1, r2, r1
 8006e70:	6139      	str	r1, [r7, #16]
 8006e72:	4649      	mov	r1, r9
 8006e74:	414b      	adcs	r3, r1
 8006e76:	617b      	str	r3, [r7, #20]
 8006e78:	f04f 0200 	mov.w	r2, #0
 8006e7c:	f04f 0300 	mov.w	r3, #0
 8006e80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e84:	4659      	mov	r1, fp
 8006e86:	00cb      	lsls	r3, r1, #3
 8006e88:	4651      	mov	r1, sl
 8006e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e8e:	4651      	mov	r1, sl
 8006e90:	00ca      	lsls	r2, r1, #3
 8006e92:	4610      	mov	r0, r2
 8006e94:	4619      	mov	r1, r3
 8006e96:	4603      	mov	r3, r0
 8006e98:	4642      	mov	r2, r8
 8006e9a:	189b      	adds	r3, r3, r2
 8006e9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ea0:	464b      	mov	r3, r9
 8006ea2:	460a      	mov	r2, r1
 8006ea4:	eb42 0303 	adc.w	r3, r2, r3
 8006ea8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006eb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006eb8:	f04f 0200 	mov.w	r2, #0
 8006ebc:	f04f 0300 	mov.w	r3, #0
 8006ec0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ec4:	4649      	mov	r1, r9
 8006ec6:	008b      	lsls	r3, r1, #2
 8006ec8:	4641      	mov	r1, r8
 8006eca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ece:	4641      	mov	r1, r8
 8006ed0:	008a      	lsls	r2, r1, #2
 8006ed2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006ed6:	f7f9 f98b 	bl	80001f0 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4b38      	ldr	r3, [pc, #224]	@ (8006fc4 <UART_SetConfig+0x4e4>)
 8006ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	2264      	movs	r2, #100	@ 0x64
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	1acb      	subs	r3, r1, r3
 8006ef0:	011b      	lsls	r3, r3, #4
 8006ef2:	3332      	adds	r3, #50	@ 0x32
 8006ef4:	4a33      	ldr	r2, [pc, #204]	@ (8006fc4 <UART_SetConfig+0x4e4>)
 8006ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8006efa:	095b      	lsrs	r3, r3, #5
 8006efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f00:	441c      	add	r4, r3
 8006f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f06:	2200      	movs	r2, #0
 8006f08:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f10:	4642      	mov	r2, r8
 8006f12:	464b      	mov	r3, r9
 8006f14:	1891      	adds	r1, r2, r2
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	415b      	adcs	r3, r3
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f20:	4641      	mov	r1, r8
 8006f22:	1851      	adds	r1, r2, r1
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	4649      	mov	r1, r9
 8006f28:	414b      	adcs	r3, r1
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f38:	4659      	mov	r1, fp
 8006f3a:	00cb      	lsls	r3, r1, #3
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f42:	4651      	mov	r1, sl
 8006f44:	00ca      	lsls	r2, r1, #3
 8006f46:	4610      	mov	r0, r2
 8006f48:	4619      	mov	r1, r3
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4642      	mov	r2, r8
 8006f4e:	189b      	adds	r3, r3, r2
 8006f50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f52:	464b      	mov	r3, r9
 8006f54:	460a      	mov	r2, r1
 8006f56:	eb42 0303 	adc.w	r3, r2, r3
 8006f5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f66:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f68:	f04f 0200 	mov.w	r2, #0
 8006f6c:	f04f 0300 	mov.w	r3, #0
 8006f70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006f74:	4649      	mov	r1, r9
 8006f76:	008b      	lsls	r3, r1, #2
 8006f78:	4641      	mov	r1, r8
 8006f7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f7e:	4641      	mov	r1, r8
 8006f80:	008a      	lsls	r2, r1, #2
 8006f82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006f86:	f7f9 f933 	bl	80001f0 <__aeabi_uldivmod>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fc4 <UART_SetConfig+0x4e4>)
 8006f90:	fba3 1302 	umull	r1, r3, r3, r2
 8006f94:	095b      	lsrs	r3, r3, #5
 8006f96:	2164      	movs	r1, #100	@ 0x64
 8006f98:	fb01 f303 	mul.w	r3, r1, r3
 8006f9c:	1ad3      	subs	r3, r2, r3
 8006f9e:	011b      	lsls	r3, r3, #4
 8006fa0:	3332      	adds	r3, #50	@ 0x32
 8006fa2:	4a08      	ldr	r2, [pc, #32]	@ (8006fc4 <UART_SetConfig+0x4e4>)
 8006fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	f003 020f 	and.w	r2, r3, #15
 8006fae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4422      	add	r2, r4
 8006fb6:	609a      	str	r2, [r3, #8]
}
 8006fb8:	bf00      	nop
 8006fba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fc4:	51eb851f 	.word	0x51eb851f

08006fc8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d123      	bne.n	8007022 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006fe2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	6851      	ldr	r1, [r2, #4]
 8006fea:	683a      	ldr	r2, [r7, #0]
 8006fec:	6892      	ldr	r2, [r2, #8]
 8006fee:	4311      	orrs	r1, r2
 8006ff0:	683a      	ldr	r2, [r7, #0]
 8006ff2:	68d2      	ldr	r2, [r2, #12]
 8006ff4:	4311      	orrs	r1, r2
 8006ff6:	683a      	ldr	r2, [r7, #0]
 8006ff8:	6912      	ldr	r2, [r2, #16]
 8006ffa:	4311      	orrs	r1, r2
 8006ffc:	683a      	ldr	r2, [r7, #0]
 8006ffe:	6952      	ldr	r2, [r2, #20]
 8007000:	4311      	orrs	r1, r2
 8007002:	683a      	ldr	r2, [r7, #0]
 8007004:	6992      	ldr	r2, [r2, #24]
 8007006:	4311      	orrs	r1, r2
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	69d2      	ldr	r2, [r2, #28]
 800700c:	4311      	orrs	r1, r2
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	6a12      	ldr	r2, [r2, #32]
 8007012:	4311      	orrs	r1, r2
 8007014:	683a      	ldr	r2, [r7, #0]
 8007016:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007018:	430a      	orrs	r2, r1
 800701a:	431a      	orrs	r2, r3
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]
 8007020:	e028      	b.n	8007074 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	69d9      	ldr	r1, [r3, #28]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	4319      	orrs	r1, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	430b      	orrs	r3, r1
 800703a:	431a      	orrs	r2, r3
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007048:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800704c:	683a      	ldr	r2, [r7, #0]
 800704e:	6851      	ldr	r1, [r2, #4]
 8007050:	683a      	ldr	r2, [r7, #0]
 8007052:	6892      	ldr	r2, [r2, #8]
 8007054:	4311      	orrs	r1, r2
 8007056:	683a      	ldr	r2, [r7, #0]
 8007058:	68d2      	ldr	r2, [r2, #12]
 800705a:	4311      	orrs	r1, r2
 800705c:	683a      	ldr	r2, [r7, #0]
 800705e:	6912      	ldr	r2, [r2, #16]
 8007060:	4311      	orrs	r1, r2
 8007062:	683a      	ldr	r2, [r7, #0]
 8007064:	6952      	ldr	r2, [r2, #20]
 8007066:	4311      	orrs	r1, r2
 8007068:	683a      	ldr	r2, [r7, #0]
 800706a:	6992      	ldr	r2, [r2, #24]
 800706c:	430a      	orrs	r2, r1
 800706e:	431a      	orrs	r2, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007074:	2300      	movs	r3, #0
}
 8007076:	4618      	mov	r0, r3
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr

08007082 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007082:	b480      	push	{r7}
 8007084:	b085      	sub	sp, #20
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d128      	bne.n	80070e6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	1e59      	subs	r1, r3, #1
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	3b01      	subs	r3, #1
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	4319      	orrs	r1, r3
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	3b01      	subs	r3, #1
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	4319      	orrs	r1, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	3b01      	subs	r3, #1
 80070bc:	031b      	lsls	r3, r3, #12
 80070be:	4319      	orrs	r1, r3
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	691b      	ldr	r3, [r3, #16]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	041b      	lsls	r3, r3, #16
 80070c8:	4319      	orrs	r1, r3
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	3b01      	subs	r3, #1
 80070d0:	051b      	lsls	r3, r3, #20
 80070d2:	4319      	orrs	r1, r3
 80070d4:	68bb      	ldr	r3, [r7, #8]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	3b01      	subs	r3, #1
 80070da:	061b      	lsls	r3, r3, #24
 80070dc:	430b      	orrs	r3, r1
 80070de:	431a      	orrs	r2, r3
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	609a      	str	r2, [r3, #8]
 80070e4:	e02f      	b.n	8007146 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80070ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	68d2      	ldr	r2, [r2, #12]
 80070f6:	3a01      	subs	r2, #1
 80070f8:	0311      	lsls	r1, r2, #12
 80070fa:	68ba      	ldr	r2, [r7, #8]
 80070fc:	6952      	ldr	r2, [r2, #20]
 80070fe:	3a01      	subs	r2, #1
 8007100:	0512      	lsls	r2, r2, #20
 8007102:	430a      	orrs	r2, r1
 8007104:	431a      	orrs	r2, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	1e59      	subs	r1, r3, #1
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	3b01      	subs	r3, #1
 800711e:	011b      	lsls	r3, r3, #4
 8007120:	4319      	orrs	r1, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	3b01      	subs	r3, #1
 8007128:	021b      	lsls	r3, r3, #8
 800712a:	4319      	orrs	r1, r3
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	3b01      	subs	r3, #1
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	4319      	orrs	r1, r3
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	3b01      	subs	r3, #1
 800713c:	061b      	lsls	r3, r3, #24
 800713e:	430b      	orrs	r3, r1
 8007140:	431a      	orrs	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007154:	b084      	sub	sp, #16
 8007156:	b580      	push	{r7, lr}
 8007158:	b084      	sub	sp, #16
 800715a:	af00      	add	r7, sp, #0
 800715c:	6078      	str	r0, [r7, #4]
 800715e:	f107 001c 	add.w	r0, r7, #28
 8007162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007166:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800716a:	2b01      	cmp	r3, #1
 800716c:	d123      	bne.n	80071b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007172:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007182:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68db      	ldr	r3, [r3, #12]
 800718e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007196:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800719a:	2b01      	cmp	r3, #1
 800719c:	d105      	bne.n	80071aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f9dc 	bl	8007568 <USB_CoreReset>
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]
 80071b4:	e01b      	b.n	80071ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f9d0 	bl	8007568 <USB_CoreReset>
 80071c8:	4603      	mov	r3, r0
 80071ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80071cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d106      	bne.n	80071e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	639a      	str	r2, [r3, #56]	@ 0x38
 80071e0:	e005      	b.n	80071ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80071ee:	7fbb      	ldrb	r3, [r7, #30]
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d10b      	bne.n	800720c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f043 0206 	orr.w	r2, r3, #6
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	f043 0220 	orr.w	r2, r3, #32
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800720c:	7bfb      	ldrb	r3, [r7, #15]
}
 800720e:	4618      	mov	r0, r3
 8007210:	3710      	adds	r7, #16
 8007212:	46bd      	mov	sp, r7
 8007214:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007218:	b004      	add	sp, #16
 800721a:	4770      	bx	lr

0800721c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	f043 0201 	orr.w	r2, r3, #1
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr

0800723e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800723e:	b480      	push	{r7}
 8007240:	b083      	sub	sp, #12
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f023 0201 	bic.w	r2, r3, #1
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007252:	2300      	movs	r3, #0
}
 8007254:	4618      	mov	r0, r3
 8007256:	370c      	adds	r7, #12
 8007258:	46bd      	mov	sp, r7
 800725a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725e:	4770      	bx	lr

08007260 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	460b      	mov	r3, r1
 800726a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800727c:	78fb      	ldrb	r3, [r7, #3]
 800727e:	2b01      	cmp	r3, #1
 8007280:	d115      	bne.n	80072ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800728e:	200a      	movs	r0, #10
 8007290:	f7fa fac8 	bl	8001824 <HAL_Delay>
      ms += 10U;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	330a      	adds	r3, #10
 8007298:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f956 	bl	800754c <USB_GetMode>
 80072a0:	4603      	mov	r3, r0
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d01e      	beq.n	80072e4 <USB_SetCurrentMode+0x84>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80072aa:	d9f0      	bls.n	800728e <USB_SetCurrentMode+0x2e>
 80072ac:	e01a      	b.n	80072e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d115      	bne.n	80072e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	68db      	ldr	r3, [r3, #12]
 80072b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80072c0:	200a      	movs	r0, #10
 80072c2:	f7fa faaf 	bl	8001824 <HAL_Delay>
      ms += 10U;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	330a      	adds	r3, #10
 80072ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f93d 	bl	800754c <USB_GetMode>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d005      	beq.n	80072e4 <USB_SetCurrentMode+0x84>
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2bc7      	cmp	r3, #199	@ 0xc7
 80072dc:	d9f0      	bls.n	80072c0 <USB_SetCurrentMode+0x60>
 80072de:	e001      	b.n	80072e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80072e0:	2301      	movs	r3, #1
 80072e2:	e005      	b.n	80072f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2bc8      	cmp	r3, #200	@ 0xc8
 80072e8:	d101      	bne.n	80072ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b085      	sub	sp, #20
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3301      	adds	r3, #1
 800730a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007312:	d901      	bls.n	8007318 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e01b      	b.n	8007350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	daf2      	bge.n	8007306 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	019b      	lsls	r3, r3, #6
 8007328:	f043 0220 	orr.w	r2, r3, #32
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	3301      	adds	r3, #1
 8007334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800733c:	d901      	bls.n	8007342 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800733e:	2303      	movs	r3, #3
 8007340:	e006      	b.n	8007350 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0320 	and.w	r3, r3, #32
 800734a:	2b20      	cmp	r3, #32
 800734c:	d0f0      	beq.n	8007330 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800734e:	2300      	movs	r3, #0
}
 8007350:	4618      	mov	r0, r3
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007364:	2300      	movs	r3, #0
 8007366:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007374:	d901      	bls.n	800737a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e018      	b.n	80073ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	2b00      	cmp	r3, #0
 8007380:	daf2      	bge.n	8007368 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007382:	2300      	movs	r3, #0
 8007384:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2210      	movs	r2, #16
 800738a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007398:	d901      	bls.n	800739e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e006      	b.n	80073ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b10      	cmp	r3, #16
 80073a8:	d0f0      	beq.n	800738c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b089      	sub	sp, #36	@ 0x24
 80073bc:	af00      	add	r7, sp, #0
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	4611      	mov	r1, r2
 80073c4:	461a      	mov	r2, r3
 80073c6:	460b      	mov	r3, r1
 80073c8:	71fb      	strb	r3, [r7, #7]
 80073ca:	4613      	mov	r3, r2
 80073cc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80073d6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d123      	bne.n	8007426 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80073de:	88bb      	ldrh	r3, [r7, #4]
 80073e0:	3303      	adds	r3, #3
 80073e2:	089b      	lsrs	r3, r3, #2
 80073e4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80073e6:	2300      	movs	r3, #0
 80073e8:	61bb      	str	r3, [r7, #24]
 80073ea:	e018      	b.n	800741e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	031a      	lsls	r2, r3, #12
 80073f0:	697b      	ldr	r3, [r7, #20]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80073f8:	461a      	mov	r2, r3
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	3301      	adds	r3, #1
 8007404:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	3301      	adds	r3, #1
 800740a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	3301      	adds	r3, #1
 8007410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007412:	69fb      	ldr	r3, [r7, #28]
 8007414:	3301      	adds	r3, #1
 8007416:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007418:	69bb      	ldr	r3, [r7, #24]
 800741a:	3301      	adds	r3, #1
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	69ba      	ldr	r2, [r7, #24]
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	429a      	cmp	r2, r3
 8007424:	d3e2      	bcc.n	80073ec <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3724      	adds	r7, #36	@ 0x24
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007434:	b480      	push	{r7}
 8007436:	b08b      	sub	sp, #44	@ 0x2c
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	4613      	mov	r3, r2
 8007440:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	089b      	lsrs	r3, r3, #2
 800744e:	b29b      	uxth	r3, r3
 8007450:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	f003 0303 	and.w	r3, r3, #3
 8007458:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800745a:	2300      	movs	r3, #0
 800745c:	623b      	str	r3, [r7, #32]
 800745e:	e014      	b.n	800748a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007460:	69bb      	ldr	r3, [r7, #24]
 8007462:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746a:	601a      	str	r2, [r3, #0]
    pDest++;
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	3301      	adds	r3, #1
 8007470:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007472:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007474:	3301      	adds	r3, #1
 8007476:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747a:	3301      	adds	r3, #1
 800747c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800747e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007480:	3301      	adds	r3, #1
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	3301      	adds	r3, #1
 8007488:	623b      	str	r3, [r7, #32]
 800748a:	6a3a      	ldr	r2, [r7, #32]
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	429a      	cmp	r2, r3
 8007490:	d3e6      	bcc.n	8007460 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007492:	8bfb      	ldrh	r3, [r7, #30]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d01e      	beq.n	80074d6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007498:	2300      	movs	r3, #0
 800749a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80074a2:	461a      	mov	r2, r3
 80074a4:	f107 0310 	add.w	r3, r7, #16
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	6a3b      	ldr	r3, [r7, #32]
 80074b0:	b2db      	uxtb	r3, r3
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	fa22 f303 	lsr.w	r3, r2, r3
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074bc:	701a      	strb	r2, [r3, #0]
      i++;
 80074be:	6a3b      	ldr	r3, [r7, #32]
 80074c0:	3301      	adds	r3, #1
 80074c2:	623b      	str	r3, [r7, #32]
      pDest++;
 80074c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c6:	3301      	adds	r3, #1
 80074c8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80074ca:	8bfb      	ldrh	r3, [r7, #30]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80074d0:	8bfb      	ldrh	r3, [r7, #30]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d1ea      	bne.n	80074ac <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80074d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80074d8:	4618      	mov	r0, r3
 80074da:	372c      	adds	r7, #44	@ 0x2c
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	68fa      	ldr	r2, [r7, #12]
 80074f8:	4013      	ands	r3, r2
 80074fa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80074fc:	68fb      	ldr	r3, [r7, #12]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	3714      	adds	r7, #20
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr

0800750a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800750a:	b480      	push	{r7}
 800750c:	b085      	sub	sp, #20
 800750e:	af00      	add	r7, sp, #0
 8007510:	6078      	str	r0, [r7, #4]
 8007512:	460b      	mov	r3, r1
 8007514:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	4413      	add	r3, r2
 8007522:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800752a:	78fb      	ldrb	r3, [r7, #3]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4413      	add	r3, r2
 8007532:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	68ba      	ldr	r2, [r7, #8]
 800753a:	4013      	ands	r3, r2
 800753c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800753e:	68bb      	ldr	r3, [r7, #8]
}
 8007540:	4618      	mov	r0, r3
 8007542:	3714      	adds	r7, #20
 8007544:	46bd      	mov	sp, r7
 8007546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754a:	4770      	bx	lr

0800754c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	695b      	ldr	r3, [r3, #20]
 8007558:	f003 0301 	and.w	r3, r3, #1
}
 800755c:	4618      	mov	r0, r3
 800755e:	370c      	adds	r7, #12
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	3301      	adds	r3, #1
 8007578:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007580:	d901      	bls.n	8007586 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007582:	2303      	movs	r3, #3
 8007584:	e01b      	b.n	80075be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	daf2      	bge.n	8007574 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800758e:	2300      	movs	r3, #0
 8007590:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f043 0201 	orr.w	r2, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	3301      	adds	r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80075aa:	d901      	bls.n	80075b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80075ac:	2303      	movs	r3, #3
 80075ae:	e006      	b.n	80075be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	691b      	ldr	r3, [r3, #16]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d0f0      	beq.n	800759e <USB_CoreReset+0x36>

  return HAL_OK;
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
	...

080075cc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80075cc:	b084      	sub	sp, #16
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b086      	sub	sp, #24
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80075da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80075de:	2300      	movs	r3, #0
 80075e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80075ec:	461a      	mov	r2, r3
 80075ee:	2300      	movs	r3, #0
 80075f0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007602:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800760e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761e:	2b00      	cmp	r3, #0
 8007620:	d119      	bne.n	8007656 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007626:	2b01      	cmp	r3, #1
 8007628:	d10a      	bne.n	8007640 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007638:	f043 0304 	orr.w	r3, r3, #4
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	e014      	b.n	800766a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800764e:	f023 0304 	bic.w	r3, r3, #4
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	e009      	b.n	800766a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007664:	f023 0304 	bic.w	r3, r3, #4
 8007668:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800766a:	2110      	movs	r1, #16
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f7ff fe43 	bl	80072f8 <USB_FlushTxFifo>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d001      	beq.n	800767c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fe6d 	bl	800735c <USB_FlushRxFifo>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d001      	beq.n	800768c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800768c:	2300      	movs	r3, #0
 800768e:	613b      	str	r3, [r7, #16]
 8007690:	e015      	b.n	80076be <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007692:	693b      	ldr	r3, [r7, #16]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800769e:	461a      	mov	r2, r3
 80076a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076a4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076b2:	461a      	mov	r2, r3
 80076b4:	2300      	movs	r3, #0
 80076b6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	3301      	adds	r3, #1
 80076bc:	613b      	str	r3, [r7, #16]
 80076be:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076c2:	461a      	mov	r2, r3
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	4293      	cmp	r3, r2
 80076c8:	d3e3      	bcc.n	8007692 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80076d6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a18      	ldr	r2, [pc, #96]	@ (800773c <USB_HostInit+0x170>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d10b      	bne.n	80076f8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80076e6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a15      	ldr	r2, [pc, #84]	@ (8007740 <USB_HostInit+0x174>)
 80076ec:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	4a14      	ldr	r2, [pc, #80]	@ (8007744 <USB_HostInit+0x178>)
 80076f2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80076f6:	e009      	b.n	800770c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2280      	movs	r2, #128	@ 0x80
 80076fc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a11      	ldr	r2, [pc, #68]	@ (8007748 <USB_HostInit+0x17c>)
 8007702:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a11      	ldr	r2, [pc, #68]	@ (800774c <USB_HostInit+0x180>)
 8007708:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800770c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f043 0210 	orr.w	r2, r3, #16
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	4b0a      	ldr	r3, [pc, #40]	@ (8007750 <USB_HostInit+0x184>)
 8007726:	4313      	orrs	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3718      	adds	r7, #24
 8007732:	46bd      	mov	sp, r7
 8007734:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007738:	b004      	add	sp, #16
 800773a:	4770      	bx	lr
 800773c:	40040000 	.word	0x40040000
 8007740:	01000200 	.word	0x01000200
 8007744:	00e00300 	.word	0x00e00300
 8007748:	00600080 	.word	0x00600080
 800774c:	004000e0 	.word	0x004000e0
 8007750:	a3200008 	.word	0xa3200008

08007754 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007754:	b480      	push	{r7}
 8007756:	b085      	sub	sp, #20
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
 800775c:	460b      	mov	r3, r1
 800775e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007772:	f023 0303 	bic.w	r3, r3, #3
 8007776:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	78fb      	ldrb	r3, [r7, #3]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	68f9      	ldr	r1, [r7, #12]
 8007788:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800778c:	4313      	orrs	r3, r2
 800778e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007790:	78fb      	ldrb	r3, [r7, #3]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d107      	bne.n	80077a6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800779c:	461a      	mov	r2, r3
 800779e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80077a2:	6053      	str	r3, [r2, #4]
 80077a4:	e00c      	b.n	80077c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80077a6:	78fb      	ldrb	r3, [r7, #3]
 80077a8:	2b02      	cmp	r3, #2
 80077aa:	d107      	bne.n	80077bc <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077b2:	461a      	mov	r2, r3
 80077b4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80077b8:	6053      	str	r3, [r2, #4]
 80077ba:	e001      	b.n	80077c0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80077ee:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80077f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077fc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80077fe:	2064      	movs	r0, #100	@ 0x64
 8007800:	f7fa f810 	bl	8001824 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	68fa      	ldr	r2, [r7, #12]
 8007808:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800780c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007810:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007812:	200a      	movs	r0, #10
 8007814:	f7fa f806 	bl	8001824 <HAL_Delay>

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007846:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <USB_DriveVbus+0x44>
 8007852:	78fb      	ldrb	r3, [r7, #3]
 8007854:	2b01      	cmp	r3, #1
 8007856:	d106      	bne.n	8007866 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007860:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007864:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800786c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007870:	d109      	bne.n	8007886 <USB_DriveVbus+0x64>
 8007872:	78fb      	ldrb	r3, [r7, #3]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d106      	bne.n	8007886 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	68fa      	ldr	r2, [r7, #12]
 800787c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007884:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80078a0:	2300      	movs	r3, #0
 80078a2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	0c5b      	lsrs	r3, r3, #17
 80078b2:	f003 0303 	and.w	r3, r3, #3
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3714      	adds	r7, #20
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80078c2:	b480      	push	{r7}
 80078c4:	b085      	sub	sp, #20
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	b29b      	uxth	r3, r3
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b088      	sub	sp, #32
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
 80078ec:	4608      	mov	r0, r1
 80078ee:	4611      	mov	r1, r2
 80078f0:	461a      	mov	r2, r3
 80078f2:	4603      	mov	r3, r0
 80078f4:	70fb      	strb	r3, [r7, #3]
 80078f6:	460b      	mov	r3, r1
 80078f8:	70bb      	strb	r3, [r7, #2]
 80078fa:	4613      	mov	r3, r2
 80078fc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80078fe:	2300      	movs	r3, #0
 8007900:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007906:	78fb      	ldrb	r3, [r7, #3]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	693b      	ldr	r3, [r7, #16]
 800790c:	4413      	add	r3, r2
 800790e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007912:	461a      	mov	r2, r3
 8007914:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007918:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800791a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800791e:	2b03      	cmp	r3, #3
 8007920:	d87c      	bhi.n	8007a1c <USB_HC_Init+0x138>
 8007922:	a201      	add	r2, pc, #4	@ (adr r2, 8007928 <USB_HC_Init+0x44>)
 8007924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007928:	08007939 	.word	0x08007939
 800792c:	080079df 	.word	0x080079df
 8007930:	08007939 	.word	0x08007939
 8007934:	080079a1 	.word	0x080079a1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007938:	78fb      	ldrb	r3, [r7, #3]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	4413      	add	r3, r2
 8007940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007944:	461a      	mov	r2, r3
 8007946:	f240 439d 	movw	r3, #1181	@ 0x49d
 800794a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800794c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007950:	2b00      	cmp	r3, #0
 8007952:	da10      	bge.n	8007976 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	015a      	lsls	r2, r3, #5
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	4413      	add	r3, r2
 800795c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007960:	68db      	ldr	r3, [r3, #12]
 8007962:	78fa      	ldrb	r2, [r7, #3]
 8007964:	0151      	lsls	r1, r2, #5
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	440a      	add	r2, r1
 800796a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800796e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007972:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007974:	e055      	b.n	8007a22 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	4a6f      	ldr	r2, [pc, #444]	@ (8007b38 <USB_HC_Init+0x254>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d151      	bne.n	8007a22 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800797e:	78fb      	ldrb	r3, [r7, #3]
 8007980:	015a      	lsls	r2, r3, #5
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	4413      	add	r3, r2
 8007986:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	78fa      	ldrb	r2, [r7, #3]
 800798e:	0151      	lsls	r1, r2, #5
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	440a      	add	r2, r1
 8007994:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007998:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800799c:	60d3      	str	r3, [r2, #12]
      break;
 800799e:	e040      	b.n	8007a22 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ac:	461a      	mov	r2, r3
 80079ae:	f240 639d 	movw	r3, #1693	@ 0x69d
 80079b2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	da34      	bge.n	8007a26 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80079bc:	78fb      	ldrb	r3, [r7, #3]
 80079be:	015a      	lsls	r2, r3, #5
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	4413      	add	r3, r2
 80079c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	78fa      	ldrb	r2, [r7, #3]
 80079cc:	0151      	lsls	r1, r2, #5
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	440a      	add	r2, r1
 80079d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079da:	60d3      	str	r3, [r2, #12]
      }

      break;
 80079dc:	e023      	b.n	8007a26 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80079de:	78fb      	ldrb	r3, [r7, #3]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	693b      	ldr	r3, [r7, #16]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ea:	461a      	mov	r2, r3
 80079ec:	f240 2325 	movw	r3, #549	@ 0x225
 80079f0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80079f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	da17      	bge.n	8007a2a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80079fa:	78fb      	ldrb	r3, [r7, #3]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	693b      	ldr	r3, [r7, #16]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	78fa      	ldrb	r2, [r7, #3]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	693a      	ldr	r2, [r7, #16]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a14:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007a18:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007a1a:	e006      	b.n	8007a2a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	77fb      	strb	r3, [r7, #31]
      break;
 8007a20:	e004      	b.n	8007a2c <USB_HC_Init+0x148>
      break;
 8007a22:	bf00      	nop
 8007a24:	e002      	b.n	8007a2c <USB_HC_Init+0x148>
      break;
 8007a26:	bf00      	nop
 8007a28:	e000      	b.n	8007a2c <USB_HC_Init+0x148>
      break;
 8007a2a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	015a      	lsls	r2, r3, #5
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a38:	461a      	mov	r2, r3
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007a3e:	78fb      	ldrb	r3, [r7, #3]
 8007a40:	015a      	lsls	r2, r3, #5
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	4413      	add	r3, r2
 8007a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	78fa      	ldrb	r2, [r7, #3]
 8007a4e:	0151      	lsls	r1, r2, #5
 8007a50:	693a      	ldr	r2, [r7, #16]
 8007a52:	440a      	add	r2, r1
 8007a54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a58:	f043 0302 	orr.w	r3, r3, #2
 8007a5c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007a5e:	693b      	ldr	r3, [r7, #16]
 8007a60:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a64:	699a      	ldr	r2, [r3, #24]
 8007a66:	78fb      	ldrb	r3, [r7, #3]
 8007a68:	f003 030f 	and.w	r3, r3, #15
 8007a6c:	2101      	movs	r1, #1
 8007a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8007a72:	6939      	ldr	r1, [r7, #16]
 8007a74:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	699b      	ldr	r3, [r3, #24]
 8007a80:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007a88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	da03      	bge.n	8007a98 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007a90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007a94:	61bb      	str	r3, [r7, #24]
 8007a96:	e001      	b.n	8007a9c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fef9 	bl	8007894 <USB_GetHostSpeed>
 8007aa2:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007aa4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d106      	bne.n	8007aba <USB_HC_Init+0x1d6>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2b02      	cmp	r3, #2
 8007ab0:	d003      	beq.n	8007aba <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007ab2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007ab6:	617b      	str	r3, [r7, #20]
 8007ab8:	e001      	b.n	8007abe <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007abe:	787b      	ldrb	r3, [r7, #1]
 8007ac0:	059b      	lsls	r3, r3, #22
 8007ac2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ac6:	78bb      	ldrb	r3, [r7, #2]
 8007ac8:	02db      	lsls	r3, r3, #11
 8007aca:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007ace:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ad0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007ad4:	049b      	lsls	r3, r3, #18
 8007ad6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007ada:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007adc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007ade:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007ae2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	431a      	orrs	r2, r3
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007aec:	78fa      	ldrb	r2, [r7, #3]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	693a      	ldr	r2, [r7, #16]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007af8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007afc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007afe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d003      	beq.n	8007b0e <USB_HC_Init+0x22a>
 8007b06:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d10f      	bne.n	8007b2e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007b0e:	78fb      	ldrb	r3, [r7, #3]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	78fa      	ldrb	r2, [r7, #3]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	693a      	ldr	r2, [r7, #16]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007b2c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007b2e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3720      	adds	r7, #32
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}
 8007b38:	40040000 	.word	0x40040000

08007b3c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b08c      	sub	sp, #48	@ 0x30
 8007b40:	af02      	add	r7, sp, #8
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	4613      	mov	r3, r2
 8007b48:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	785b      	ldrb	r3, [r3, #1]
 8007b52:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007b54:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b58:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8007cd4 <USB_HC_StartXfer+0x198>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d12f      	bne.n	8007bc2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d11c      	bne.n	8007ba2 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	7c9b      	ldrb	r3, [r3, #18]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d003      	beq.n	8007b78 <USB_HC_StartXfer+0x3c>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	7c9b      	ldrb	r3, [r3, #18]
 8007b74:	2b02      	cmp	r3, #2
 8007b76:	d124      	bne.n	8007bc2 <USB_HC_StartXfer+0x86>
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	799b      	ldrb	r3, [r3, #6]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d120      	bne.n	8007bc2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	6a3a      	ldr	r2, [r7, #32]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b9e:	60d3      	str	r3, [r2, #12]
 8007ba0:	e00f      	b.n	8007bc2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007ba2:	68bb      	ldr	r3, [r7, #8]
 8007ba4:	791b      	ldrb	r3, [r3, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d10b      	bne.n	8007bc2 <USB_HC_StartXfer+0x86>
 8007baa:	68bb      	ldr	r3, [r7, #8]
 8007bac:	795b      	ldrb	r3, [r3, #5]
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d107      	bne.n	8007bc2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	785b      	ldrb	r3, [r3, #1]
 8007bb6:	4619      	mov	r1, r3
 8007bb8:	68f8      	ldr	r0, [r7, #12]
 8007bba:	f000 fb6b 	bl	8008294 <USB_DoPing>
        return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	e232      	b.n	8008028 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	799b      	ldrb	r3, [r3, #6]
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d158      	bne.n	8007c7c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	78db      	ldrb	r3, [r3, #3]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007bd6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	8a92      	ldrh	r2, [r2, #20]
 8007bdc:	fb03 f202 	mul.w	r2, r3, r2
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	61da      	str	r2, [r3, #28]
 8007be4:	e07c      	b.n	8007ce0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	7c9b      	ldrb	r3, [r3, #18]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d130      	bne.n	8007c50 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	6a1b      	ldr	r3, [r3, #32]
 8007bf2:	2bbc      	cmp	r3, #188	@ 0xbc
 8007bf4:	d918      	bls.n	8007c28 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	8a9b      	ldrh	r3, [r3, #20]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	69da      	ldr	r2, [r3, #28]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d003      	beq.n	8007c18 <USB_HC_StartXfer+0xdc>
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	68db      	ldr	r3, [r3, #12]
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d103      	bne.n	8007c20 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	2202      	movs	r2, #2
 8007c1c:	60da      	str	r2, [r3, #12]
 8007c1e:	e05f      	b.n	8007ce0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2201      	movs	r2, #1
 8007c24:	60da      	str	r2, [r3, #12]
 8007c26:	e05b      	b.n	8007ce0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	6a1a      	ldr	r2, [r3, #32]
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d007      	beq.n	8007c48 <USB_HC_StartXfer+0x10c>
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	68db      	ldr	r3, [r3, #12]
 8007c3c:	2b02      	cmp	r3, #2
 8007c3e:	d003      	beq.n	8007c48 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	2204      	movs	r2, #4
 8007c44:	60da      	str	r2, [r3, #12]
 8007c46:	e04b      	b.n	8007ce0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2203      	movs	r2, #3
 8007c4c:	60da      	str	r2, [r3, #12]
 8007c4e:	e047      	b.n	8007ce0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007c50:	79fb      	ldrb	r3, [r7, #7]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d10d      	bne.n	8007c72 <USB_HC_StartXfer+0x136>
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	6a1b      	ldr	r3, [r3, #32]
 8007c5a:	68ba      	ldr	r2, [r7, #8]
 8007c5c:	8a92      	ldrh	r2, [r2, #20]
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d907      	bls.n	8007c72 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007c62:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c64:	68ba      	ldr	r2, [r7, #8]
 8007c66:	8a92      	ldrh	r2, [r2, #20]
 8007c68:	fb03 f202 	mul.w	r2, r3, r2
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	61da      	str	r2, [r3, #28]
 8007c70:	e036      	b.n	8007ce0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007c72:	68bb      	ldr	r3, [r7, #8]
 8007c74:	6a1a      	ldr	r2, [r3, #32]
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	61da      	str	r2, [r3, #28]
 8007c7a:	e031      	b.n	8007ce0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	6a1b      	ldr	r3, [r3, #32]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d018      	beq.n	8007cb6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6a1b      	ldr	r3, [r3, #32]
 8007c88:	68ba      	ldr	r2, [r7, #8]
 8007c8a:	8a92      	ldrh	r2, [r2, #20]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	68ba      	ldr	r2, [r7, #8]
 8007c92:	8a92      	ldrh	r2, [r2, #20]
 8007c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c98:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007c9a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007c9c:	8b7b      	ldrh	r3, [r7, #26]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d90b      	bls.n	8007cba <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007ca2:	8b7b      	ldrh	r3, [r7, #26]
 8007ca4:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ca6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	8a92      	ldrh	r2, [r2, #20]
 8007cac:	fb03 f202 	mul.w	r2, r3, r2
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	61da      	str	r2, [r3, #28]
 8007cb4:	e001      	b.n	8007cba <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	78db      	ldrb	r3, [r3, #3]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00a      	beq.n	8007cd8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007cc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cc4:	68ba      	ldr	r2, [r7, #8]
 8007cc6:	8a92      	ldrh	r2, [r2, #20]
 8007cc8:	fb03 f202 	mul.w	r2, r3, r2
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	61da      	str	r2, [r3, #28]
 8007cd0:	e006      	b.n	8007ce0 <USB_HC_StartXfer+0x1a4>
 8007cd2:	bf00      	nop
 8007cd4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	6a1a      	ldr	r2, [r3, #32]
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	69db      	ldr	r3, [r3, #28]
 8007ce4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ce8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007cea:	04d9      	lsls	r1, r3, #19
 8007cec:	4ba3      	ldr	r3, [pc, #652]	@ (8007f7c <USB_HC_StartXfer+0x440>)
 8007cee:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cf0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	7d9b      	ldrb	r3, [r3, #22]
 8007cf6:	075b      	lsls	r3, r3, #29
 8007cf8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007cfc:	69f9      	ldr	r1, [r7, #28]
 8007cfe:	0148      	lsls	r0, r1, #5
 8007d00:	6a39      	ldr	r1, [r7, #32]
 8007d02:	4401      	add	r1, r0
 8007d04:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d08:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007d0a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007d0c:	79fb      	ldrb	r3, [r7, #7]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d009      	beq.n	8007d26 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007d12:	68bb      	ldr	r3, [r7, #8]
 8007d14:	6999      	ldr	r1, [r3, #24]
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	015a      	lsls	r2, r3, #5
 8007d1a:	6a3b      	ldr	r3, [r7, #32]
 8007d1c:	4413      	add	r3, r2
 8007d1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d22:	460a      	mov	r2, r1
 8007d24:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007d26:	6a3b      	ldr	r3, [r7, #32]
 8007d28:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	bf0c      	ite	eq
 8007d36:	2301      	moveq	r3, #1
 8007d38:	2300      	movne	r3, #0
 8007d3a:	b2db      	uxtb	r3, r3
 8007d3c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007d3e:	69fb      	ldr	r3, [r7, #28]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	6a3b      	ldr	r3, [r7, #32]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	69fa      	ldr	r2, [r7, #28]
 8007d4e:	0151      	lsls	r1, r2, #5
 8007d50:	6a3a      	ldr	r2, [r7, #32]
 8007d52:	440a      	add	r2, r1
 8007d54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d58:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007d5c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007d5e:	69fb      	ldr	r3, [r7, #28]
 8007d60:	015a      	lsls	r2, r3, #5
 8007d62:	6a3b      	ldr	r3, [r7, #32]
 8007d64:	4413      	add	r3, r2
 8007d66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	7e7b      	ldrb	r3, [r7, #25]
 8007d6e:	075b      	lsls	r3, r3, #29
 8007d70:	69f9      	ldr	r1, [r7, #28]
 8007d72:	0148      	lsls	r0, r1, #5
 8007d74:	6a39      	ldr	r1, [r7, #32]
 8007d76:	4401      	add	r1, r0
 8007d78:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007d7c:	4313      	orrs	r3, r2
 8007d7e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	799b      	ldrb	r3, [r3, #6]
 8007d84:	2b01      	cmp	r3, #1
 8007d86:	f040 80c3 	bne.w	8007f10 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	7c5b      	ldrb	r3, [r3, #17]
 8007d8e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007d90:	68ba      	ldr	r2, [r7, #8]
 8007d92:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007d94:	4313      	orrs	r3, r2
 8007d96:	69fa      	ldr	r2, [r7, #28]
 8007d98:	0151      	lsls	r1, r2, #5
 8007d9a:	6a3a      	ldr	r2, [r7, #32]
 8007d9c:	440a      	add	r2, r1
 8007d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007da2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007da6:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007da8:	69fb      	ldr	r3, [r7, #28]
 8007daa:	015a      	lsls	r2, r3, #5
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	4413      	add	r3, r2
 8007db0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	69fa      	ldr	r2, [r7, #28]
 8007db8:	0151      	lsls	r1, r2, #5
 8007dba:	6a3a      	ldr	r2, [r7, #32]
 8007dbc:	440a      	add	r2, r1
 8007dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dc2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007dc6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	79db      	ldrb	r3, [r3, #7]
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d123      	bne.n	8007e18 <USB_HC_StartXfer+0x2dc>
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	78db      	ldrb	r3, [r3, #3]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d11f      	bne.n	8007e18 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	0151      	lsls	r1, r2, #5
 8007dea:	6a3a      	ldr	r2, [r7, #32]
 8007dec:	440a      	add	r2, r1
 8007dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007df2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007df6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	6a3b      	ldr	r3, [r7, #32]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	6a3a      	ldr	r2, [r7, #32]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e16:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	7c9b      	ldrb	r3, [r3, #18]
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d003      	beq.n	8007e28 <USB_HC_StartXfer+0x2ec>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	7c9b      	ldrb	r3, [r3, #18]
 8007e24:	2b03      	cmp	r3, #3
 8007e26:	d117      	bne.n	8007e58 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d113      	bne.n	8007e58 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	78db      	ldrb	r3, [r3, #3]
 8007e34:	2b01      	cmp	r3, #1
 8007e36:	d10f      	bne.n	8007e58 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007e38:	69fb      	ldr	r3, [r7, #28]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	6a3b      	ldr	r3, [r7, #32]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e44:	685b      	ldr	r3, [r3, #4]
 8007e46:	69fa      	ldr	r2, [r7, #28]
 8007e48:	0151      	lsls	r1, r2, #5
 8007e4a:	6a3a      	ldr	r2, [r7, #32]
 8007e4c:	440a      	add	r2, r1
 8007e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e56:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	7c9b      	ldrb	r3, [r3, #18]
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d162      	bne.n	8007f26 <USB_HC_StartXfer+0x3ea>
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	78db      	ldrb	r3, [r3, #3]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d15e      	bne.n	8007f26 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007e68:	68bb      	ldr	r3, [r7, #8]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	3b01      	subs	r3, #1
 8007e6e:	2b03      	cmp	r3, #3
 8007e70:	d858      	bhi.n	8007f24 <USB_HC_StartXfer+0x3e8>
 8007e72:	a201      	add	r2, pc, #4	@ (adr r2, 8007e78 <USB_HC_StartXfer+0x33c>)
 8007e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e78:	08007e89 	.word	0x08007e89
 8007e7c:	08007eab 	.word	0x08007eab
 8007e80:	08007ecd 	.word	0x08007ecd
 8007e84:	08007eef 	.word	0x08007eef
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	015a      	lsls	r2, r3, #5
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	4413      	add	r3, r2
 8007e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e94:	685b      	ldr	r3, [r3, #4]
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	0151      	lsls	r1, r2, #5
 8007e9a:	6a3a      	ldr	r2, [r7, #32]
 8007e9c:	440a      	add	r2, r1
 8007e9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ea2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007ea6:	6053      	str	r3, [r2, #4]
          break;
 8007ea8:	e03d      	b.n	8007f26 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	015a      	lsls	r2, r3, #5
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	69fa      	ldr	r2, [r7, #28]
 8007eba:	0151      	lsls	r1, r2, #5
 8007ebc:	6a3a      	ldr	r2, [r7, #32]
 8007ebe:	440a      	add	r2, r1
 8007ec0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ec4:	f043 030e 	orr.w	r3, r3, #14
 8007ec8:	6053      	str	r3, [r2, #4]
          break;
 8007eca:	e02c      	b.n	8007f26 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007ecc:	69fb      	ldr	r3, [r7, #28]
 8007ece:	015a      	lsls	r2, r3, #5
 8007ed0:	6a3b      	ldr	r3, [r7, #32]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	0151      	lsls	r1, r2, #5
 8007ede:	6a3a      	ldr	r2, [r7, #32]
 8007ee0:	440a      	add	r2, r1
 8007ee2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ee6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007eea:	6053      	str	r3, [r2, #4]
          break;
 8007eec:	e01b      	b.n	8007f26 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	015a      	lsls	r2, r3, #5
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	4413      	add	r3, r2
 8007ef6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	69fa      	ldr	r2, [r7, #28]
 8007efe:	0151      	lsls	r1, r2, #5
 8007f00:	6a3a      	ldr	r2, [r7, #32]
 8007f02:	440a      	add	r2, r1
 8007f04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f08:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007f0c:	6053      	str	r3, [r2, #4]
          break;
 8007f0e:	e00a      	b.n	8007f26 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	015a      	lsls	r2, r3, #5
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	4413      	add	r3, r2
 8007f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	2300      	movs	r3, #0
 8007f20:	6053      	str	r3, [r2, #4]
 8007f22:	e000      	b.n	8007f26 <USB_HC_StartXfer+0x3ea>
          break;
 8007f24:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	015a      	lsls	r2, r3, #5
 8007f2a:	6a3b      	ldr	r3, [r7, #32]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007f3c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	78db      	ldrb	r3, [r3, #3]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d004      	beq.n	8007f50 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007f4c:	613b      	str	r3, [r7, #16]
 8007f4e:	e003      	b.n	8007f58 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007f56:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f5e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007f60:	69fb      	ldr	r3, [r7, #28]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	6a3b      	ldr	r3, [r7, #32]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6c:	461a      	mov	r2, r3
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007f72:	79fb      	ldrb	r3, [r7, #7]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d003      	beq.n	8007f80 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	e055      	b.n	8008028 <USB_HC_StartXfer+0x4ec>
 8007f7c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	78db      	ldrb	r3, [r3, #3]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d14e      	bne.n	8008026 <USB_HC_StartXfer+0x4ea>
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6a1b      	ldr	r3, [r3, #32]
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d04a      	beq.n	8008026 <USB_HC_StartXfer+0x4ea>
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	79db      	ldrb	r3, [r3, #7]
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d146      	bne.n	8008026 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	7c9b      	ldrb	r3, [r3, #18]
 8007f9c:	2b03      	cmp	r3, #3
 8007f9e:	d831      	bhi.n	8008004 <USB_HC_StartXfer+0x4c8>
 8007fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <USB_HC_StartXfer+0x46c>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fb9 	.word	0x08007fb9
 8007fac:	08007fdd 	.word	0x08007fdd
 8007fb0:	08007fb9 	.word	0x08007fb9
 8007fb4:	08007fdd 	.word	0x08007fdd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	6a1b      	ldr	r3, [r3, #32]
 8007fbc:	3303      	adds	r3, #3
 8007fbe:	089b      	lsrs	r3, r3, #2
 8007fc0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007fc2:	8afa      	ldrh	r2, [r7, #22]
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc8:	b29b      	uxth	r3, r3
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d91c      	bls.n	8008008 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	f043 0220 	orr.w	r2, r3, #32
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007fda:	e015      	b.n	8008008 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	6a1b      	ldr	r3, [r3, #32]
 8007fe0:	3303      	adds	r3, #3
 8007fe2:	089b      	lsrs	r3, r3, #2
 8007fe4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007fe6:	8afa      	ldrh	r2, [r7, #22]
 8007fe8:	6a3b      	ldr	r3, [r7, #32]
 8007fea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d90a      	bls.n	800800c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	699b      	ldr	r3, [r3, #24]
 8007ffa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	619a      	str	r2, [r3, #24]
        }
        break;
 8008002:	e003      	b.n	800800c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008004:	bf00      	nop
 8008006:	e002      	b.n	800800e <USB_HC_StartXfer+0x4d2>
        break;
 8008008:	bf00      	nop
 800800a:	e000      	b.n	800800e <USB_HC_StartXfer+0x4d2>
        break;
 800800c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	6999      	ldr	r1, [r3, #24]
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	785a      	ldrb	r2, [r3, #1]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	6a1b      	ldr	r3, [r3, #32]
 800801a:	b29b      	uxth	r3, r3
 800801c:	2000      	movs	r0, #0
 800801e:	9000      	str	r0, [sp, #0]
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f7ff f9c9 	bl	80073b8 <USB_WritePacket>
  }

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3728      	adds	r7, #40	@ 0x28
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	b29b      	uxth	r3, r3
}
 8008046:	4618      	mov	r0, r3
 8008048:	3714      	adds	r7, #20
 800804a:	46bd      	mov	sp, r7
 800804c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008050:	4770      	bx	lr

08008052 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008052:	b480      	push	{r7}
 8008054:	b089      	sub	sp, #36	@ 0x24
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
 800805a:	460b      	mov	r3, r1
 800805c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008062:	78fb      	ldrb	r3, [r7, #3]
 8008064:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008066:	2300      	movs	r3, #0
 8008068:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	015a      	lsls	r2, r3, #5
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	4413      	add	r3, r2
 8008072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	0c9b      	lsrs	r3, r3, #18
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008080:	69bb      	ldr	r3, [r7, #24]
 8008082:	015a      	lsls	r2, r3, #5
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	4413      	add	r3, r2
 8008088:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	0fdb      	lsrs	r3, r3, #31
 8008090:	f003 0301 	and.w	r3, r3, #1
 8008094:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8008096:	69bb      	ldr	r3, [r7, #24]
 8008098:	015a      	lsls	r2, r3, #5
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	4413      	add	r3, r2
 800809e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	0fdb      	lsrs	r3, r3, #31
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	f003 0320 	and.w	r3, r3, #32
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d10d      	bne.n	80080d4 <USB_HC_Halt+0x82>
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d10a      	bne.n	80080d4 <USB_HC_Halt+0x82>
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d005      	beq.n	80080d0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d002      	beq.n	80080d0 <USB_HC_Halt+0x7e>
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d101      	bne.n	80080d4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80080d0:	2300      	movs	r3, #0
 80080d2:	e0d8      	b.n	8008286 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d002      	beq.n	80080e0 <USB_HC_Halt+0x8e>
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	2b02      	cmp	r3, #2
 80080de:	d173      	bne.n	80081c8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80080fe:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	f003 0320 	and.w	r3, r3, #32
 8008108:	2b00      	cmp	r3, #0
 800810a:	d14a      	bne.n	80081a2 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008114:	2b00      	cmp	r3, #0
 8008116:	d133      	bne.n	8008180 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	015a      	lsls	r2, r3, #5
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	4413      	add	r3, r2
 8008120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	69ba      	ldr	r2, [r7, #24]
 8008128:	0151      	lsls	r1, r2, #5
 800812a:	69fa      	ldr	r2, [r7, #28]
 800812c:	440a      	add	r2, r1
 800812e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008132:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008136:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008138:	69bb      	ldr	r3, [r7, #24]
 800813a:	015a      	lsls	r2, r3, #5
 800813c:	69fb      	ldr	r3, [r7, #28]
 800813e:	4413      	add	r3, r2
 8008140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	69ba      	ldr	r2, [r7, #24]
 8008148:	0151      	lsls	r1, r2, #5
 800814a:	69fa      	ldr	r2, [r7, #28]
 800814c:	440a      	add	r2, r1
 800814e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008152:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008156:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	3301      	adds	r3, #1
 800815c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008164:	d82e      	bhi.n	80081c4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008166:	69bb      	ldr	r3, [r7, #24]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008178:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800817c:	d0ec      	beq.n	8008158 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800817e:	e081      	b.n	8008284 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	015a      	lsls	r2, r3, #5
 8008184:	69fb      	ldr	r3, [r7, #28]
 8008186:	4413      	add	r3, r2
 8008188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69ba      	ldr	r2, [r7, #24]
 8008190:	0151      	lsls	r1, r2, #5
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	440a      	add	r2, r1
 8008196:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800819a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800819e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081a0:	e070      	b.n	8008284 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80081a2:	69bb      	ldr	r3, [r7, #24]
 80081a4:	015a      	lsls	r2, r3, #5
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	4413      	add	r3, r2
 80081aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	0151      	lsls	r1, r2, #5
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	440a      	add	r2, r1
 80081b8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80081c0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081c2:	e05f      	b.n	8008284 <USB_HC_Halt+0x232>
            break;
 80081c4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80081c6:	e05d      	b.n	8008284 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80081c8:	69bb      	ldr	r3, [r7, #24]
 80081ca:	015a      	lsls	r2, r3, #5
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	4413      	add	r3, r2
 80081d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	69ba      	ldr	r2, [r7, #24]
 80081d8:	0151      	lsls	r1, r2, #5
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	440a      	add	r2, r1
 80081de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081e2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081e6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80081e8:	69fb      	ldr	r3, [r7, #28]
 80081ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d133      	bne.n	8008260 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80081f8:	69bb      	ldr	r3, [r7, #24]
 80081fa:	015a      	lsls	r2, r3, #5
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	4413      	add	r3, r2
 8008200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	69ba      	ldr	r2, [r7, #24]
 8008208:	0151      	lsls	r1, r2, #5
 800820a:	69fa      	ldr	r2, [r7, #28]
 800820c:	440a      	add	r2, r1
 800820e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008212:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008216:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008218:	69bb      	ldr	r3, [r7, #24]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	4413      	add	r3, r2
 8008220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	69ba      	ldr	r2, [r7, #24]
 8008228:	0151      	lsls	r1, r2, #5
 800822a:	69fa      	ldr	r2, [r7, #28]
 800822c:	440a      	add	r2, r1
 800822e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008232:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008236:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	3301      	adds	r3, #1
 800823c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008244:	d81d      	bhi.n	8008282 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008246:	69bb      	ldr	r3, [r7, #24]
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008258:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800825c:	d0ec      	beq.n	8008238 <USB_HC_Halt+0x1e6>
 800825e:	e011      	b.n	8008284 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008260:	69bb      	ldr	r3, [r7, #24]
 8008262:	015a      	lsls	r2, r3, #5
 8008264:	69fb      	ldr	r3, [r7, #28]
 8008266:	4413      	add	r3, r2
 8008268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	69ba      	ldr	r2, [r7, #24]
 8008270:	0151      	lsls	r1, r2, #5
 8008272:	69fa      	ldr	r2, [r7, #28]
 8008274:	440a      	add	r2, r1
 8008276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800827a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800827e:	6013      	str	r3, [r2, #0]
 8008280:	e000      	b.n	8008284 <USB_HC_Halt+0x232>
          break;
 8008282:	bf00      	nop
    }
  }

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3724      	adds	r7, #36	@ 0x24
 800828a:	46bd      	mov	sp, r7
 800828c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008290:	4770      	bx	lr
	...

08008294 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008294:	b480      	push	{r7}
 8008296:	b087      	sub	sp, #28
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
 800829c:	460b      	mov	r3, r1
 800829e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80082a4:	78fb      	ldrb	r3, [r7, #3]
 80082a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80082a8:	2301      	movs	r3, #1
 80082aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	04da      	lsls	r2, r3, #19
 80082b0:	4b15      	ldr	r3, [pc, #84]	@ (8008308 <USB_DoPing+0x74>)
 80082b2:	4013      	ands	r3, r2
 80082b4:	693a      	ldr	r2, [r7, #16]
 80082b6:	0151      	lsls	r1, r2, #5
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	440a      	add	r2, r1
 80082bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80082dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80082e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f2:	461a      	mov	r2, r3
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
 8008306:	bf00      	nop
 8008308:	1ff80000 	.word	0x1ff80000

0800830c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008314:	2300      	movs	r3, #0
 8008316:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7fe ff8c 	bl	800723e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008326:	2110      	movs	r1, #16
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7fe ffe5 	bl	80072f8 <USB_FlushTxFifo>
 800832e:	4603      	mov	r3, r0
 8008330:	2b00      	cmp	r3, #0
 8008332:	d001      	beq.n	8008338 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff f80f 	bl	800735c <USB_FlushRxFifo>
 800833e:	4603      	mov	r3, r0
 8008340:	2b00      	cmp	r3, #0
 8008342:	d001      	beq.n	8008348 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008344:	2301      	movs	r3, #1
 8008346:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008348:	2300      	movs	r3, #0
 800834a:	61bb      	str	r3, [r7, #24]
 800834c:	e01f      	b.n	800838e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	015a      	lsls	r2, r3, #5
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	4413      	add	r3, r2
 8008356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008364:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800836c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008374:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	015a      	lsls	r2, r3, #5
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	4413      	add	r3, r2
 800837e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008382:	461a      	mov	r2, r3
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	3301      	adds	r3, #1
 800838c:	61bb      	str	r3, [r7, #24]
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b0f      	cmp	r3, #15
 8008392:	d9dc      	bls.n	800834e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008394:	2300      	movs	r3, #0
 8008396:	61bb      	str	r3, [r7, #24]
 8008398:	e034      	b.n	8008404 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	015a      	lsls	r2, r3, #5
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	4413      	add	r3, r2
 80083a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80083b0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80083b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80083c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80083c2:	69bb      	ldr	r3, [r7, #24]
 80083c4:	015a      	lsls	r2, r3, #5
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	4413      	add	r3, r2
 80083ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ce:	461a      	mov	r2, r3
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3301      	adds	r3, #1
 80083d8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80083e0:	d80c      	bhi.n	80083fc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80083e2:	69bb      	ldr	r3, [r7, #24]
 80083e4:	015a      	lsls	r2, r3, #5
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	4413      	add	r3, r2
 80083ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80083f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80083f8:	d0ec      	beq.n	80083d4 <USB_StopHost+0xc8>
 80083fa:	e000      	b.n	80083fe <USB_StopHost+0xf2>
        break;
 80083fc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	3301      	adds	r3, #1
 8008402:	61bb      	str	r3, [r7, #24]
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	2b0f      	cmp	r3, #15
 8008408:	d9c7      	bls.n	800839a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008410:	461a      	mov	r2, r3
 8008412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008416:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800841e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7fe fefb 	bl	800721c <USB_EnableGlobalInt>

  return ret;
 8008426:	7ffb      	ldrb	r3, [r7, #31]
}
 8008428:	4618      	mov	r0, r3
 800842a:	3720      	adds	r7, #32
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008430:	b590      	push	{r4, r7, lr}
 8008432:	b089      	sub	sp, #36	@ 0x24
 8008434:	af04      	add	r7, sp, #16
 8008436:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008438:	2301      	movs	r3, #1
 800843a:	2202      	movs	r2, #2
 800843c:	2102      	movs	r1, #2
 800843e:	6878      	ldr	r0, [r7, #4]
 8008440:	f000 fcd7 	bl	8008df2 <USBH_FindInterface>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	2bff      	cmp	r3, #255	@ 0xff
 800844c:	d002      	beq.n	8008454 <USBH_CDC_InterfaceInit+0x24>
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d901      	bls.n	8008458 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008454:	2302      	movs	r3, #2
 8008456:	e13d      	b.n	80086d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	4619      	mov	r1, r3
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fcac 	bl	8008dba <USBH_SelectInterface>
 8008462:	4603      	mov	r3, r0
 8008464:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008466:	7bbb      	ldrb	r3, [r7, #14]
 8008468:	2b00      	cmp	r3, #0
 800846a:	d001      	beq.n	8008470 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800846c:	2302      	movs	r3, #2
 800846e:	e131      	b.n	80086d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008476:	2050      	movs	r0, #80	@ 0x50
 8008478:	f005 f896 	bl	800d5a8 <malloc>
 800847c:	4603      	mov	r3, r0
 800847e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008486:	69db      	ldr	r3, [r3, #28]
 8008488:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008490:	2302      	movs	r3, #2
 8008492:	e11f      	b.n	80086d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008494:	2250      	movs	r2, #80	@ 0x50
 8008496:	2100      	movs	r1, #0
 8008498:	68b8      	ldr	r0, [r7, #8]
 800849a:	f005 f943 	bl	800d724 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800849e:	7bfb      	ldrb	r3, [r7, #15]
 80084a0:	687a      	ldr	r2, [r7, #4]
 80084a2:	211a      	movs	r1, #26
 80084a4:	fb01 f303 	mul.w	r3, r1, r3
 80084a8:	4413      	add	r3, r2
 80084aa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	b25b      	sxtb	r3, r3
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da15      	bge.n	80084e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80084b6:	7bfb      	ldrb	r3, [r7, #15]
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	211a      	movs	r1, #26
 80084bc:	fb01 f303 	mul.w	r3, r1, r3
 80084c0:	4413      	add	r3, r2
 80084c2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80084c6:	781a      	ldrb	r2, [r3, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80084cc:	7bfb      	ldrb	r3, [r7, #15]
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	211a      	movs	r1, #26
 80084d2:	fb01 f303 	mul.w	r3, r1, r3
 80084d6:	4413      	add	r3, r2
 80084d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80084dc:	881a      	ldrh	r2, [r3, #0]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	785b      	ldrb	r3, [r3, #1]
 80084e6:	4619      	mov	r1, r3
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f002 fa1c 	bl	800a926 <USBH_AllocPipe>
 80084ee:	4603      	mov	r3, r0
 80084f0:	461a      	mov	r2, r3
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	7819      	ldrb	r1, [r3, #0]
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	7858      	ldrb	r0, [r3, #1]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	8952      	ldrh	r2, [r2, #10]
 800850e:	9202      	str	r2, [sp, #8]
 8008510:	2203      	movs	r2, #3
 8008512:	9201      	str	r2, [sp, #4]
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	4623      	mov	r3, r4
 8008518:	4602      	mov	r2, r0
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f002 f9d4 	bl	800a8c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	781b      	ldrb	r3, [r3, #0]
 8008524:	2200      	movs	r2, #0
 8008526:	4619      	mov	r1, r3
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f004 ffb7 	bl	800d49c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800852e:	2300      	movs	r3, #0
 8008530:	2200      	movs	r2, #0
 8008532:	210a      	movs	r1, #10
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fc5c 	bl	8008df2 <USBH_FindInterface>
 800853a:	4603      	mov	r3, r0
 800853c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2bff      	cmp	r3, #255	@ 0xff
 8008542:	d002      	beq.n	800854a <USBH_CDC_InterfaceInit+0x11a>
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	2b01      	cmp	r3, #1
 8008548:	d901      	bls.n	800854e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800854a:	2302      	movs	r3, #2
 800854c:	e0c2      	b.n	80086d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800854e:	7bfb      	ldrb	r3, [r7, #15]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	211a      	movs	r1, #26
 8008554:	fb01 f303 	mul.w	r3, r1, r3
 8008558:	4413      	add	r3, r2
 800855a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	b25b      	sxtb	r3, r3
 8008562:	2b00      	cmp	r3, #0
 8008564:	da16      	bge.n	8008594 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008566:	7bfb      	ldrb	r3, [r7, #15]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	211a      	movs	r1, #26
 800856c:	fb01 f303 	mul.w	r3, r1, r3
 8008570:	4413      	add	r3, r2
 8008572:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008576:	781a      	ldrb	r2, [r3, #0]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800857c:	7bfb      	ldrb	r3, [r7, #15]
 800857e:	687a      	ldr	r2, [r7, #4]
 8008580:	211a      	movs	r1, #26
 8008582:	fb01 f303 	mul.w	r3, r1, r3
 8008586:	4413      	add	r3, r2
 8008588:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800858c:	881a      	ldrh	r2, [r3, #0]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	835a      	strh	r2, [r3, #26]
 8008592:	e015      	b.n	80085c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008594:	7bfb      	ldrb	r3, [r7, #15]
 8008596:	687a      	ldr	r2, [r7, #4]
 8008598:	211a      	movs	r1, #26
 800859a:	fb01 f303 	mul.w	r3, r1, r3
 800859e:	4413      	add	r3, r2
 80085a0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80085a4:	781a      	ldrb	r2, [r3, #0]
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	211a      	movs	r1, #26
 80085b0:	fb01 f303 	mul.w	r3, r1, r3
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80085ba:	881a      	ldrh	r2, [r3, #0]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	211a      	movs	r1, #26
 80085c6:	fb01 f303 	mul.w	r3, r1, r3
 80085ca:	4413      	add	r3, r2
 80085cc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	b25b      	sxtb	r3, r3
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	da16      	bge.n	8008606 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80085d8:	7bfb      	ldrb	r3, [r7, #15]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	211a      	movs	r1, #26
 80085de:	fb01 f303 	mul.w	r3, r1, r3
 80085e2:	4413      	add	r3, r2
 80085e4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80085e8:	781a      	ldrb	r2, [r3, #0]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	211a      	movs	r1, #26
 80085f4:	fb01 f303 	mul.w	r3, r1, r3
 80085f8:	4413      	add	r3, r2
 80085fa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80085fe:	881a      	ldrh	r2, [r3, #0]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	835a      	strh	r2, [r3, #26]
 8008604:	e015      	b.n	8008632 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	687a      	ldr	r2, [r7, #4]
 800860a:	211a      	movs	r1, #26
 800860c:	fb01 f303 	mul.w	r3, r1, r3
 8008610:	4413      	add	r3, r2
 8008612:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008616:	781a      	ldrb	r2, [r3, #0]
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800861c:	7bfb      	ldrb	r3, [r7, #15]
 800861e:	687a      	ldr	r2, [r7, #4]
 8008620:	211a      	movs	r1, #26
 8008622:	fb01 f303 	mul.w	r3, r1, r3
 8008626:	4413      	add	r3, r2
 8008628:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800862c:	881a      	ldrh	r2, [r3, #0]
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	7b9b      	ldrb	r3, [r3, #14]
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f002 f974 	bl	800a926 <USBH_AllocPipe>
 800863e:	4603      	mov	r3, r0
 8008640:	461a      	mov	r2, r3
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	7bdb      	ldrb	r3, [r3, #15]
 800864a:	4619      	mov	r1, r3
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f002 f96a 	bl	800a926 <USBH_AllocPipe>
 8008652:	4603      	mov	r3, r0
 8008654:	461a      	mov	r2, r3
 8008656:	68bb      	ldr	r3, [r7, #8]
 8008658:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	7b59      	ldrb	r1, [r3, #13]
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	7b98      	ldrb	r0, [r3, #14]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800866e:	68ba      	ldr	r2, [r7, #8]
 8008670:	8b12      	ldrh	r2, [r2, #24]
 8008672:	9202      	str	r2, [sp, #8]
 8008674:	2202      	movs	r2, #2
 8008676:	9201      	str	r2, [sp, #4]
 8008678:	9300      	str	r3, [sp, #0]
 800867a:	4623      	mov	r3, r4
 800867c:	4602      	mov	r2, r0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f002 f922 	bl	800a8c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008684:	68bb      	ldr	r3, [r7, #8]
 8008686:	7b19      	ldrb	r1, [r3, #12]
 8008688:	68bb      	ldr	r3, [r7, #8]
 800868a:	7bd8      	ldrb	r0, [r3, #15]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008698:	68ba      	ldr	r2, [r7, #8]
 800869a:	8b52      	ldrh	r2, [r2, #26]
 800869c:	9202      	str	r2, [sp, #8]
 800869e:	2202      	movs	r2, #2
 80086a0:	9201      	str	r2, [sp, #4]
 80086a2:	9300      	str	r3, [sp, #0]
 80086a4:	4623      	mov	r3, r4
 80086a6:	4602      	mov	r2, r0
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f002 f90d 	bl	800a8c8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2200      	movs	r2, #0
 80086b2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	7b5b      	ldrb	r3, [r3, #13]
 80086ba:	2200      	movs	r2, #0
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f004 feec 	bl	800d49c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	7b1b      	ldrb	r3, [r3, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	4619      	mov	r1, r3
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f004 fee5 	bl	800d49c <USBH_LL_SetToggle>

  return USBH_OK;
 80086d2:	2300      	movs	r3, #0
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd90      	pop	{r4, r7, pc}

080086dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80086ea:	69db      	ldr	r3, [r3, #28]
 80086ec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	781b      	ldrb	r3, [r3, #0]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d00e      	beq.n	8008714 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f002 f902 	bl	800a906 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	4619      	mov	r1, r3
 8008708:	6878      	ldr	r0, [r7, #4]
 800870a:	f002 f92d 	bl	800a968 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	7b1b      	ldrb	r3, [r3, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00e      	beq.n	800873a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	7b1b      	ldrb	r3, [r3, #12]
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f002 f8ef 	bl	800a906 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	7b1b      	ldrb	r3, [r3, #12]
 800872c:	4619      	mov	r1, r3
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f002 f91a 	bl	800a968 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2200      	movs	r2, #0
 8008738:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	7b5b      	ldrb	r3, [r3, #13]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00e      	beq.n	8008760 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	7b5b      	ldrb	r3, [r3, #13]
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f002 f8dc 	bl	800a906 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	7b5b      	ldrb	r3, [r3, #13]
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f002 f907 	bl	800a968 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	2200      	movs	r2, #0
 800875e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00b      	beq.n	8008784 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	4618      	mov	r0, r3
 8008776:	f004 ff1f 	bl	800d5b8 <free>
    phost->pActiveClass->pData = 0U;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008780:	2200      	movs	r2, #0
 8008782:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008784:	2300      	movs	r3, #0
}
 8008786:	4618      	mov	r0, r3
 8008788:	3710      	adds	r7, #16
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}

0800878e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b084      	sub	sp, #16
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	3340      	adds	r3, #64	@ 0x40
 80087a4:	4619      	mov	r1, r3
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f8b1 	bl	800890e <GetLineCoding>
 80087ac:	4603      	mov	r3, r0
 80087ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80087b0:	7afb      	ldrb	r3, [r7, #11]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d105      	bne.n	80087c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80087bc:	2102      	movs	r1, #2
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80087c2:	7afb      	ldrb	r3, [r7, #11]
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80087d4:	2301      	movs	r3, #1
 80087d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80087d8:	2300      	movs	r3, #0
 80087da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80087e2:	69db      	ldr	r3, [r3, #28]
 80087e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80087ec:	2b04      	cmp	r3, #4
 80087ee:	d877      	bhi.n	80088e0 <USBH_CDC_Process+0x114>
 80087f0:	a201      	add	r2, pc, #4	@ (adr r2, 80087f8 <USBH_CDC_Process+0x2c>)
 80087f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087f6:	bf00      	nop
 80087f8:	0800880d 	.word	0x0800880d
 80087fc:	08008813 	.word	0x08008813
 8008800:	08008843 	.word	0x08008843
 8008804:	080088b7 	.word	0x080088b7
 8008808:	080088c5 	.word	0x080088c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
      break;
 8008810:	e06d      	b.n	80088ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008816:	4619      	mov	r1, r3
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f897 	bl	800894c <SetLineCoding>
 800881e:	4603      	mov	r3, r0
 8008820:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008822:	7bbb      	ldrb	r3, [r7, #14]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2202      	movs	r2, #2
 800882c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008830:	e058      	b.n	80088e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008832:	7bbb      	ldrb	r3, [r7, #14]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d055      	beq.n	80088e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	2204      	movs	r2, #4
 800883c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008840:	e050      	b.n	80088e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	3340      	adds	r3, #64	@ 0x40
 8008846:	4619      	mov	r1, r3
 8008848:	6878      	ldr	r0, [r7, #4]
 800884a:	f000 f860 	bl	800890e <GetLineCoding>
 800884e:	4603      	mov	r3, r0
 8008850:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008852:	7bbb      	ldrb	r3, [r7, #14]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d126      	bne.n	80088a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800886a:	791b      	ldrb	r3, [r3, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d13b      	bne.n	80088e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800887a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800887c:	429a      	cmp	r2, r3
 800887e:	d133      	bne.n	80088e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800888a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800888c:	429a      	cmp	r2, r3
 800888e:	d12b      	bne.n	80088e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008898:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800889a:	429a      	cmp	r2, r3
 800889c:	d124      	bne.n	80088e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f982 	bl	8008ba8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80088a4:	e020      	b.n	80088e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80088a6:	7bbb      	ldrb	r3, [r7, #14]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d01d      	beq.n	80088e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2204      	movs	r2, #4
 80088b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80088b4:	e018      	b.n	80088e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 f867 	bl	800898a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f8f6 	bl	8008aae <CDC_ProcessReception>
      break;
 80088c2:	e014      	b.n	80088ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80088c4:	2100      	movs	r1, #0
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 f988 	bl	8009bdc <USBH_ClrFeature>
 80088cc:	4603      	mov	r3, r0
 80088ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80088d0:	7bbb      	ldrb	r3, [r7, #14]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d10a      	bne.n	80088ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80088de:	e005      	b.n	80088ec <USBH_CDC_Process+0x120>

    default:
      break;
 80088e0:	bf00      	nop
 80088e2:	e004      	b.n	80088ee <USBH_CDC_Process+0x122>
      break;
 80088e4:	bf00      	nop
 80088e6:	e002      	b.n	80088ee <USBH_CDC_Process+0x122>
      break;
 80088e8:	bf00      	nop
 80088ea:	e000      	b.n	80088ee <USBH_CDC_Process+0x122>
      break;
 80088ec:	bf00      	nop

  }

  return status;
 80088ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3710      	adds	r7, #16
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008900:	2300      	movs	r3, #0
}
 8008902:	4618      	mov	r0, r3
 8008904:	370c      	adds	r7, #12
 8008906:	46bd      	mov	sp, r7
 8008908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890c:	4770      	bx	lr

0800890e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800890e:	b580      	push	{r7, lr}
 8008910:	b082      	sub	sp, #8
 8008912:	af00      	add	r7, sp, #0
 8008914:	6078      	str	r0, [r7, #4]
 8008916:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	22a1      	movs	r2, #161	@ 0xa1
 800891c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2221      	movs	r2, #33	@ 0x21
 8008922:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2207      	movs	r2, #7
 8008934:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	2207      	movs	r2, #7
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f001 fc82 	bl	800a246 <USBH_CtlReq>
 8008942:	4603      	mov	r3, r0
}
 8008944:	4618      	mov	r0, r3
 8008946:	3708      	adds	r7, #8
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b082      	sub	sp, #8
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2221      	movs	r2, #33	@ 0x21
 800895a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2220      	movs	r2, #32
 8008960:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2200      	movs	r2, #0
 8008966:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2207      	movs	r2, #7
 8008972:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	2207      	movs	r2, #7
 8008978:	4619      	mov	r1, r3
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f001 fc63 	bl	800a246 <USBH_CtlReq>
 8008980:	4603      	mov	r3, r0
}
 8008982:	4618      	mov	r0, r3
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af02      	add	r7, sp, #8
 8008990:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800899c:	2300      	movs	r3, #0
 800899e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d002      	beq.n	80089b0 <CDC_ProcessTransmission+0x26>
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d023      	beq.n	80089f6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80089ae:	e07a      	b.n	8008aa6 <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089b4:	68fa      	ldr	r2, [r7, #12]
 80089b6:	8b12      	ldrh	r2, [r2, #24]
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d90b      	bls.n	80089d4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	69d9      	ldr	r1, [r3, #28]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	8b1a      	ldrh	r2, [r3, #24]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	7b5b      	ldrb	r3, [r3, #13]
 80089c8:	2001      	movs	r0, #1
 80089ca:	9000      	str	r0, [sp, #0]
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 ff38 	bl	800a842 <USBH_BulkSendData>
 80089d2:	e00b      	b.n	80089ec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80089dc:	b29a      	uxth	r2, r3
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	7b5b      	ldrb	r3, [r3, #13]
 80089e2:	2001      	movs	r0, #1
 80089e4:	9000      	str	r0, [sp, #0]
 80089e6:	6878      	ldr	r0, [r7, #4]
 80089e8:	f001 ff2b 	bl	800a842 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2202      	movs	r2, #2
 80089f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80089f4:	e057      	b.n	8008aa6 <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	7b5b      	ldrb	r3, [r3, #13]
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f004 fd23 	bl	800d448 <USBH_LL_GetURBState>
 8008a02:	4603      	mov	r3, r0
 8008a04:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008a06:	7afb      	ldrb	r3, [r7, #11]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d136      	bne.n	8008a7a <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a10:	68fa      	ldr	r2, [r7, #12]
 8008a12:	8b12      	ldrh	r2, [r2, #24]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d90e      	bls.n	8008a36 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a1c:	68fa      	ldr	r2, [r7, #12]
 8008a1e:	8b12      	ldrh	r2, [r2, #24]
 8008a20:	1a9a      	subs	r2, r3, r2
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	69db      	ldr	r3, [r3, #28]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	8b12      	ldrh	r2, [r2, #24]
 8008a2e:	441a      	add	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	61da      	str	r2, [r3, #28]
 8008a34:	e002      	b.n	8008a3c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d004      	beq.n	8008a4e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8008a4c:	e006      	b.n	8008a5c <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008a56:	6878      	ldr	r0, [r7, #4]
 8008a58:	f000 f892 	bl	8008b80 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2204      	movs	r2, #4
 8008a60:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a70:	2200      	movs	r2, #0
 8008a72:	4619      	mov	r1, r3
 8008a74:	f002 f874 	bl	800ab60 <osMessagePut>
      break;
 8008a78:	e014      	b.n	8008aa4 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 8008a7a:	7afb      	ldrb	r3, [r7, #11]
 8008a7c:	2b02      	cmp	r3, #2
 8008a7e:	d111      	bne.n	8008aa4 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2204      	movs	r2, #4
 8008a8c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	4619      	mov	r1, r3
 8008aa0:	f002 f85e 	bl	800ab60 <osMessagePut>
      break;
 8008aa4:	bf00      	nop
  }
}
 8008aa6:	bf00      	nop
 8008aa8:	3710      	adds	r7, #16
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}

08008aae <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008aae:	b580      	push	{r7, lr}
 8008ab0:	b086      	sub	sp, #24
 8008ab2:	af00      	add	r7, sp, #0
 8008ab4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d002      	beq.n	8008ad4 <CDC_ProcessReception+0x26>
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d00e      	beq.n	8008af0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008ad2:	e051      	b.n	8008b78 <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	6a19      	ldr	r1, [r3, #32]
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	8b5a      	ldrh	r2, [r3, #26]
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	7b1b      	ldrb	r3, [r3, #12]
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 fed3 	bl	800a88c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	2204      	movs	r2, #4
 8008aea:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008aee:	e043      	b.n	8008b78 <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008af0:	697b      	ldr	r3, [r7, #20]
 8008af2:	7b1b      	ldrb	r3, [r3, #12]
 8008af4:	4619      	mov	r1, r3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f004 fca6 	bl	800d448 <USBH_LL_GetURBState>
 8008afc:	4603      	mov	r3, r0
 8008afe:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008b00:	7cfb      	ldrb	r3, [r7, #19]
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d137      	bne.n	8008b76 <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008b06:	697b      	ldr	r3, [r7, #20]
 8008b08:	7b1b      	ldrb	r3, [r3, #12]
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f004 fc09 	bl	800d324 <USBH_LL_GetLastXferSize>
 8008b12:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b18:	68fa      	ldr	r2, [r7, #12]
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d016      	beq.n	8008b4c <CDC_ProcessReception+0x9e>
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	8b5b      	ldrh	r3, [r3, #26]
 8008b22:	461a      	mov	r2, r3
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d110      	bne.n	8008b4c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	1ad2      	subs	r2, r2, r3
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	6a1a      	ldr	r2, [r3, #32]
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	441a      	add	r2, r3
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	2203      	movs	r2, #3
 8008b46:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 8008b4a:	e006      	b.n	8008b5a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f000 f81d 	bl	8008b94 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008b6e:	2200      	movs	r2, #0
 8008b70:	4619      	mov	r1, r3
 8008b72:	f001 fff5 	bl	800ab60 <osMessagePut>
      break;
 8008b76:	bf00      	nop
  }
}
 8008b78:	bf00      	nop
 8008b7a:	3718      	adds	r7, #24
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}

08008b80 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b083      	sub	sp, #12
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b88:	bf00      	nop
 8008b8a:	370c      	adds	r7, #12
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b92:	4770      	bx	lr

08008b94 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008b94:	b480      	push	{r7}
 8008b96:	b083      	sub	sp, #12
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008b9c:	bf00      	nop
 8008b9e:	370c      	adds	r7, #12
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008bb0:	bf00      	nop
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008bbc:	b5b0      	push	{r4, r5, r7, lr}
 8008bbe:	b090      	sub	sp, #64	@ 0x40
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d101      	bne.n	8008bd4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008bd0:	2302      	movs	r3, #2
 8008bd2:	e04d      	b.n	8008c70 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	79fa      	ldrb	r2, [r7, #7]
 8008bd8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f847 	bl	8008c80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d003      	beq.n	8008c20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	68ba      	ldr	r2, [r7, #8]
 8008c1c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008c20:	4b15      	ldr	r3, [pc, #84]	@ (8008c78 <USBH_Init+0xbc>)
 8008c22:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 8008c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008c2c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008c30:	2100      	movs	r1, #0
 8008c32:	4618      	mov	r0, r3
 8008c34:	f001 ff6b 	bl	800ab0e <osMessageCreate>
 8008c38:	4602      	mov	r2, r0
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008c40:	4b0e      	ldr	r3, [pc, #56]	@ (8008c7c <USBH_Init+0xc0>)
 8008c42:	f107 0414 	add.w	r4, r7, #20
 8008c46:	461d      	mov	r5, r3
 8008c48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008c4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008c4c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008c50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008c54:	f107 0314 	add.w	r3, r7, #20
 8008c58:	68f9      	ldr	r1, [r7, #12]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fef7 	bl	800aa4e <osThreadCreate>
 8008c60:	4602      	mov	r2, r0
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008c68:	68f8      	ldr	r0, [r7, #12]
 8008c6a:	f004 fa9d 	bl	800d1a8 <USBH_LL_Init>

  return USBH_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3740      	adds	r7, #64	@ 0x40
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bdb0      	pop	{r4, r5, r7, pc}
 8008c78:	0800d8a0 	.word	0x0800d8a0
 8008c7c:	0800d8bc 	.word	0x0800d8bc

08008c80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	e009      	b.n	8008ca6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	33e0      	adds	r3, #224	@ 0xe0
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	4413      	add	r3, r2
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	3301      	adds	r3, #1
 8008ca4:	60fb      	str	r3, [r7, #12]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b0f      	cmp	r3, #15
 8008caa:	d9f2      	bls.n	8008c92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]
 8008cb0:	e009      	b.n	8008cc6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008cb2:	687a      	ldr	r2, [r7, #4]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	60fb      	str	r3, [r7, #12]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ccc:	d3f1      	bcc.n	8008cb2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2240      	movs	r2, #64	@ 0x40
 8008cf2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	331c      	adds	r3, #28
 8008d1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008d22:	2100      	movs	r1, #0
 8008d24:	4618      	mov	r0, r3
 8008d26:	f004 fcfd 	bl	800d724 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008d30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008d34:	2100      	movs	r1, #0
 8008d36:	4618      	mov	r0, r3
 8008d38:	f004 fcf4 	bl	800d724 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008d42:	2212      	movs	r2, #18
 8008d44:	2100      	movs	r1, #0
 8008d46:	4618      	mov	r0, r3
 8008d48:	f004 fcec 	bl	800d724 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008d52:	223e      	movs	r2, #62	@ 0x3e
 8008d54:	2100      	movs	r1, #0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f004 fce4 	bl	800d724 <memset>

  return USBH_OK;
 8008d5c:	2300      	movs	r3, #0
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3710      	adds	r7, #16
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}

08008d66 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008d66:	b480      	push	{r7}
 8008d68:	b085      	sub	sp, #20
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d016      	beq.n	8008da8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10e      	bne.n	8008da2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008d8a:	1c59      	adds	r1, r3, #1
 8008d8c:	687a      	ldr	r2, [r7, #4]
 8008d8e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	33de      	adds	r3, #222	@ 0xde
 8008d96:	6839      	ldr	r1, [r7, #0]
 8008d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
 8008da0:	e004      	b.n	8008dac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008da2:	2302      	movs	r3, #2
 8008da4:	73fb      	strb	r3, [r7, #15]
 8008da6:	e001      	b.n	8008dac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008da8:	2302      	movs	r3, #2
 8008daa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3714      	adds	r7, #20
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b085      	sub	sp, #20
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
 8008dc2:	460b      	mov	r3, r1
 8008dc4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008dd0:	78fa      	ldrb	r2, [r7, #3]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d204      	bcs.n	8008de0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	78fa      	ldrb	r2, [r7, #3]
 8008dda:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008dde:	e001      	b.n	8008de4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008de0:	2302      	movs	r3, #2
 8008de2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3714      	adds	r7, #20
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008df2:	b480      	push	{r7}
 8008df4:	b087      	sub	sp, #28
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	4608      	mov	r0, r1
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4603      	mov	r3, r0
 8008e02:	70fb      	strb	r3, [r7, #3]
 8008e04:	460b      	mov	r3, r1
 8008e06:	70bb      	strb	r3, [r7, #2]
 8008e08:	4613      	mov	r3, r2
 8008e0a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008e10:	2300      	movs	r3, #0
 8008e12:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008e1a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e1c:	e025      	b.n	8008e6a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008e1e:	7dfb      	ldrb	r3, [r7, #23]
 8008e20:	221a      	movs	r2, #26
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	3308      	adds	r3, #8
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4413      	add	r3, r2
 8008e2c:	3302      	adds	r3, #2
 8008e2e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	795b      	ldrb	r3, [r3, #5]
 8008e34:	78fa      	ldrb	r2, [r7, #3]
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d002      	beq.n	8008e40 <USBH_FindInterface+0x4e>
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	2bff      	cmp	r3, #255	@ 0xff
 8008e3e:	d111      	bne.n	8008e64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008e44:	78ba      	ldrb	r2, [r7, #2]
 8008e46:	429a      	cmp	r2, r3
 8008e48:	d002      	beq.n	8008e50 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e4a:	78bb      	ldrb	r3, [r7, #2]
 8008e4c:	2bff      	cmp	r3, #255	@ 0xff
 8008e4e:	d109      	bne.n	8008e64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008e54:	787a      	ldrb	r2, [r7, #1]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d002      	beq.n	8008e60 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008e5a:	787b      	ldrb	r3, [r7, #1]
 8008e5c:	2bff      	cmp	r3, #255	@ 0xff
 8008e5e:	d101      	bne.n	8008e64 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	e006      	b.n	8008e72 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	3301      	adds	r3, #1
 8008e68:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008e6a:	7dfb      	ldrb	r3, [r7, #23]
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d9d6      	bls.n	8008e1e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008e70:	23ff      	movs	r3, #255	@ 0xff
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b082      	sub	sp, #8
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f004 f9d4 	bl	800d234 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008e8c:	2101      	movs	r1, #1
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f004 faed 	bl	800d46e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008e94:	2300      	movs	r3, #0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b088      	sub	sp, #32
 8008ea4:	af04      	add	r7, sp, #16
 8008ea6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008eac:	2300      	movs	r3, #0
 8008eae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	2b01      	cmp	r3, #1
 8008eba:	d102      	bne.n	8008ec2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2203      	movs	r2, #3
 8008ec0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	2b0b      	cmp	r3, #11
 8008eca:	f200 8244 	bhi.w	8009356 <USBH_Process+0x4b6>
 8008ece:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed4 <USBH_Process+0x34>)
 8008ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed4:	08008f05 	.word	0x08008f05
 8008ed8:	08008f53 	.word	0x08008f53
 8008edc:	08008fd7 	.word	0x08008fd7
 8008ee0:	080092d5 	.word	0x080092d5
 8008ee4:	08009357 	.word	0x08009357
 8008ee8:	08009093 	.word	0x08009093
 8008eec:	0800925f 	.word	0x0800925f
 8008ef0:	080090e5 	.word	0x080090e5
 8008ef4:	08009121 	.word	0x08009121
 8008ef8:	08009159 	.word	0x08009159
 8008efc:	080091b7 	.word	0x080091b7
 8008f00:	080092bd 	.word	0x080092bd
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008f0a:	b2db      	uxtb	r3, r3
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f000 8224 	beq.w	800935a <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2201      	movs	r2, #1
 8008f16:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008f18:	20c8      	movs	r0, #200	@ 0xc8
 8008f1a:	f004 faf2 	bl	800d502 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f004 f9e5 	bl	800d2ee <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008f48:	2200      	movs	r2, #0
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	f001 fe08 	bl	800ab60 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f50:	e203      	b.n	800935a <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	d107      	bne.n	8008f6c <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	701a      	strb	r2, [r3, #0]
 8008f6a:	e025      	b.n	8008fb8 <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008f72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008f76:	d914      	bls.n	8008fa2 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008f7e:	3301      	adds	r3, #1
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008f8e:	2b03      	cmp	r3, #3
 8008f90:	d903      	bls.n	8008f9a <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	220d      	movs	r2, #13
 8008f96:	701a      	strb	r2, [r3, #0]
 8008f98:	e00e      	b.n	8008fb8 <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	701a      	strb	r2, [r3, #0]
 8008fa0:	e00a      	b.n	8008fb8 <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008fa8:	f103 020a 	add.w	r2, r3, #10
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008fb2:	200a      	movs	r0, #10
 8008fb4:	f004 faa5 	bl	800d502 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008fcc:	2200      	movs	r2, #0
 8008fce:	4619      	mov	r1, r3
 8008fd0:	f001 fdc6 	bl	800ab60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fd4:	e1c8      	b.n	8009368 <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d005      	beq.n	8008fec <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fe6:	2104      	movs	r1, #4
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008fec:	2064      	movs	r0, #100	@ 0x64
 8008fee:	f004 fa88 	bl	800d502 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008ff2:	6878      	ldr	r0, [r7, #4]
 8008ff4:	f004 f954 	bl	800d2a0 <USBH_LL_GetSpeed>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	461a      	mov	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2205      	movs	r2, #5
 8009006:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009008:	2100      	movs	r1, #0
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f001 fc8b 	bl	800a926 <USBH_AllocPipe>
 8009010:	4603      	mov	r3, r0
 8009012:	461a      	mov	r2, r3
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009018:	2180      	movs	r1, #128	@ 0x80
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f001 fc83 	bl	800a926 <USBH_AllocPipe>
 8009020:	4603      	mov	r3, r0
 8009022:	461a      	mov	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	7919      	ldrb	r1, [r3, #4]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009038:	687a      	ldr	r2, [r7, #4]
 800903a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800903c:	9202      	str	r2, [sp, #8]
 800903e:	2200      	movs	r2, #0
 8009040:	9201      	str	r2, [sp, #4]
 8009042:	9300      	str	r3, [sp, #0]
 8009044:	4603      	mov	r3, r0
 8009046:	2280      	movs	r2, #128	@ 0x80
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fc3d 	bl	800a8c8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	7959      	ldrb	r1, [r3, #5]
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009062:	9202      	str	r2, [sp, #8]
 8009064:	2200      	movs	r2, #0
 8009066:	9201      	str	r2, [sp, #4]
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	4603      	mov	r3, r0
 800906c:	2200      	movs	r2, #0
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f001 fc2a 	bl	800a8c8 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2201      	movs	r2, #1
 8009078:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009088:	2200      	movs	r2, #0
 800908a:	4619      	mov	r1, r3
 800908c:	f001 fd68 	bl	800ab60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009090:	e16a      	b.n	8009368 <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f96e 	bl	8009374 <USBH_HandleEnum>
 8009098:	4603      	mov	r3, r0
 800909a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800909c:	7bbb      	ldrb	r3, [r7, #14]
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f040 815c 	bne.w	800935e <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2200      	movs	r2, #0
 80090aa:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d103      	bne.n	80090c0 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2208      	movs	r2, #8
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e002      	b.n	80090c6 <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2207      	movs	r2, #7
 80090c4:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2205      	movs	r2, #5
 80090ca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80090da:	2200      	movs	r2, #0
 80090dc:	4619      	mov	r1, r3
 80090de:	f001 fd3f 	bl	800ab60 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80090e2:	e13c      	b.n	800935e <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	f000 8139 	beq.w	8009362 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090f6:	2101      	movs	r1, #1
 80090f8:	6878      	ldr	r0, [r7, #4]
 80090fa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2208      	movs	r2, #8
 8009100:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2205      	movs	r2, #5
 8009106:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009116:	2200      	movs	r2, #0
 8009118:	4619      	mov	r1, r3
 800911a:	f001 fd21 	bl	800ab60 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800911e:	e120      	b.n	8009362 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009126:	4619      	mov	r1, r3
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f000 fd10 	bl	8009b4e <USBH_SetCfg>
 800912e:	4603      	mov	r3, r0
 8009130:	2b00      	cmp	r3, #0
 8009132:	d102      	bne.n	800913a <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2209      	movs	r2, #9
 8009138:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2201      	movs	r2, #1
 800913e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800914e:	2200      	movs	r2, #0
 8009150:	4619      	mov	r1, r3
 8009152:	f001 fd05 	bl	800ab60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009156:	e107      	b.n	8009368 <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800915e:	f003 0320 	and.w	r3, r3, #32
 8009162:	2b00      	cmp	r3, #0
 8009164:	d015      	beq.n	8009192 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009166:	2101      	movs	r1, #1
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fd13 	bl	8009b94 <USBH_SetFeature>
 800916e:	4603      	mov	r3, r0
 8009170:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009172:	7bbb      	ldrb	r3, [r7, #14]
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b00      	cmp	r3, #0
 8009178:	d103      	bne.n	8009182 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	220a      	movs	r2, #10
 800917e:	701a      	strb	r2, [r3, #0]
 8009180:	e00a      	b.n	8009198 <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8009182:	7bbb      	ldrb	r3, [r7, #14]
 8009184:	b2db      	uxtb	r3, r3
 8009186:	2b03      	cmp	r3, #3
 8009188:	d106      	bne.n	8009198 <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	220a      	movs	r2, #10
 800918e:	701a      	strb	r2, [r3, #0]
 8009190:	e002      	b.n	8009198 <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	220a      	movs	r2, #10
 8009196:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2201      	movs	r2, #1
 800919c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80091ac:	2200      	movs	r2, #0
 80091ae:	4619      	mov	r1, r3
 80091b0:	f001 fcd6 	bl	800ab60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80091b4:	e0d8      	b.n	8009368 <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d03f      	beq.n	8009240 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091c8:	2300      	movs	r3, #0
 80091ca:	73fb      	strb	r3, [r7, #15]
 80091cc:	e016      	b.n	80091fc <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80091ce:	7bfa      	ldrb	r2, [r7, #15]
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	32de      	adds	r2, #222	@ 0xde
 80091d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091d8:	791a      	ldrb	r2, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80091e0:	429a      	cmp	r2, r3
 80091e2:	d108      	bne.n	80091f6 <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 80091e4:	7bfa      	ldrb	r2, [r7, #15]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	32de      	adds	r2, #222	@ 0xde
 80091ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80091f4:	e005      	b.n	8009202 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80091f6:	7bfb      	ldrb	r3, [r7, #15]
 80091f8:	3301      	adds	r3, #1
 80091fa:	73fb      	strb	r3, [r7, #15]
 80091fc:	7bfb      	ldrb	r3, [r7, #15]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0e5      	beq.n	80091ce <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009208:	2b00      	cmp	r3, #0
 800920a:	d016      	beq.n	800923a <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	4798      	blx	r3
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d109      	bne.n	8009232 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2206      	movs	r2, #6
 8009222:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800922a:	2103      	movs	r1, #3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	4798      	blx	r3
 8009230:	e006      	b.n	8009240 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	220d      	movs	r2, #13
 8009236:	701a      	strb	r2, [r3, #0]
 8009238:	e002      	b.n	8009240 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	220d      	movs	r2, #13
 800923e:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	2205      	movs	r2, #5
 8009244:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009254:	2200      	movs	r2, #0
 8009256:	4619      	mov	r1, r3
 8009258:	f001 fc82 	bl	800ab60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800925c:	e084      	b.n	8009368 <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009264:	2b00      	cmp	r3, #0
 8009266:	d017      	beq.n	8009298 <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	4798      	blx	r3
 8009274:	4603      	mov	r3, r0
 8009276:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	b2db      	uxtb	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	d103      	bne.n	8009288 <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	220b      	movs	r2, #11
 8009284:	701a      	strb	r2, [r3, #0]
 8009286:	e00a      	b.n	800929e <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8009288:	7bbb      	ldrb	r3, [r7, #14]
 800928a:	b2db      	uxtb	r3, r3
 800928c:	2b02      	cmp	r3, #2
 800928e:	d106      	bne.n	800929e <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	220d      	movs	r2, #13
 8009294:	701a      	strb	r2, [r3, #0]
 8009296:	e002      	b.n	800929e <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	220d      	movs	r2, #13
 800929c:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2205      	movs	r2, #5
 80092a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80092b2:	2200      	movs	r2, #0
 80092b4:	4619      	mov	r1, r3
 80092b6:	f001 fc53 	bl	800ab60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092ba:	e055      	b.n	8009368 <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d04f      	beq.n	8009366 <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	6878      	ldr	r0, [r7, #4]
 80092d0:	4798      	blx	r3
      }
      break;
 80092d2:	e048      	b.n	8009366 <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2200      	movs	r2, #0
 80092d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff fccf 	bl	8008c80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d009      	beq.n	8009300 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	4798      	blx	r3
        phost->pActiveClass = NULL;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009306:	2b00      	cmp	r3, #0
 8009308:	d005      	beq.n	8009316 <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009310:	2105      	movs	r1, #5
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800931c:	b2db      	uxtb	r3, r3
 800931e:	2b01      	cmp	r3, #1
 8009320:	d107      	bne.n	8009332 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff fda7 	bl	8008e7e <USBH_Start>
 8009330:	e002      	b.n	8009338 <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8009332:	6878      	ldr	r0, [r7, #4]
 8009334:	f003 ff7e 	bl	800d234 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800934c:	2200      	movs	r2, #0
 800934e:	4619      	mov	r1, r3
 8009350:	f001 fc06 	bl	800ab60 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009354:	e008      	b.n	8009368 <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8009356:	bf00      	nop
 8009358:	e006      	b.n	8009368 <USBH_Process+0x4c8>
      break;
 800935a:	bf00      	nop
 800935c:	e004      	b.n	8009368 <USBH_Process+0x4c8>
      break;
 800935e:	bf00      	nop
 8009360:	e002      	b.n	8009368 <USBH_Process+0x4c8>
    break;
 8009362:	bf00      	nop
 8009364:	e000      	b.n	8009368 <USBH_Process+0x4c8>
      break;
 8009366:	bf00      	nop
  }
  return USBH_OK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop

08009374 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b088      	sub	sp, #32
 8009378:	af04      	add	r7, sp, #16
 800937a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800937c:	2301      	movs	r3, #1
 800937e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009380:	2301      	movs	r3, #1
 8009382:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	785b      	ldrb	r3, [r3, #1]
 8009388:	2b07      	cmp	r3, #7
 800938a:	f200 8204 	bhi.w	8009796 <USBH_HandleEnum+0x422>
 800938e:	a201      	add	r2, pc, #4	@ (adr r2, 8009394 <USBH_HandleEnum+0x20>)
 8009390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009394:	080093b5 	.word	0x080093b5
 8009398:	0800946f 	.word	0x0800946f
 800939c:	080094d9 	.word	0x080094d9
 80093a0:	08009563 	.word	0x08009563
 80093a4:	080095cd 	.word	0x080095cd
 80093a8:	0800963d 	.word	0x0800963d
 80093ac:	080096d9 	.word	0x080096d9
 80093b0:	08009757 	.word	0x08009757
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80093b4:	2108      	movs	r1, #8
 80093b6:	6878      	ldr	r0, [r7, #4]
 80093b8:	f000 fae6 	bl	8009988 <USBH_Get_DevDesc>
 80093bc:	4603      	mov	r3, r0
 80093be:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80093c0:	7bbb      	ldrb	r3, [r7, #14]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d12e      	bne.n	8009424 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	7919      	ldrb	r1, [r3, #4]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80093ea:	9202      	str	r2, [sp, #8]
 80093ec:	2200      	movs	r2, #0
 80093ee:	9201      	str	r2, [sp, #4]
 80093f0:	9300      	str	r3, [sp, #0]
 80093f2:	4603      	mov	r3, r0
 80093f4:	2280      	movs	r2, #128	@ 0x80
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f001 fa66 	bl	800a8c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7959      	ldrb	r1, [r3, #5]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009410:	9202      	str	r2, [sp, #8]
 8009412:	2200      	movs	r2, #0
 8009414:	9201      	str	r2, [sp, #4]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4603      	mov	r3, r0
 800941a:	2200      	movs	r2, #0
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f001 fa53 	bl	800a8c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009422:	e1ba      	b.n	800979a <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009424:	7bbb      	ldrb	r3, [r7, #14]
 8009426:	2b03      	cmp	r3, #3
 8009428:	f040 81b7 	bne.w	800979a <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009432:	3301      	adds	r3, #1
 8009434:	b2da      	uxtb	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009442:	2b03      	cmp	r3, #3
 8009444:	d903      	bls.n	800944e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	220d      	movs	r2, #13
 800944a:	701a      	strb	r2, [r3, #0]
      break;
 800944c:	e1a5      	b.n	800979a <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	795b      	ldrb	r3, [r3, #5]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f001 fa87 	bl	800a968 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	791b      	ldrb	r3, [r3, #4]
 800945e:	4619      	mov	r1, r3
 8009460:	6878      	ldr	r0, [r7, #4]
 8009462:	f001 fa81 	bl	800a968 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	701a      	strb	r2, [r3, #0]
      break;
 800946c:	e195      	b.n	800979a <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800946e:	2112      	movs	r1, #18
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa89 	bl	8009988 <USBH_Get_DevDesc>
 8009476:	4603      	mov	r3, r0
 8009478:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800947a:	7bbb      	ldrb	r3, [r7, #14]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d103      	bne.n	8009488 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2202      	movs	r2, #2
 8009484:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009486:	e18a      	b.n	800979e <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009488:	7bbb      	ldrb	r3, [r7, #14]
 800948a:	2b03      	cmp	r3, #3
 800948c:	f040 8187 	bne.w	800979e <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009496:	3301      	adds	r3, #1
 8009498:	b2da      	uxtb	r2, r3
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80094a6:	2b03      	cmp	r3, #3
 80094a8:	d903      	bls.n	80094b2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	220d      	movs	r2, #13
 80094ae:	701a      	strb	r2, [r3, #0]
      break;
 80094b0:	e175      	b.n	800979e <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	795b      	ldrb	r3, [r3, #5]
 80094b6:	4619      	mov	r1, r3
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f001 fa55 	bl	800a968 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	791b      	ldrb	r3, [r3, #4]
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f001 fa4f 	bl	800a968 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	701a      	strb	r2, [r3, #0]
      break;
 80094d6:	e162      	b.n	800979e <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80094d8:	2101      	movs	r1, #1
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fb13 	bl	8009b06 <USBH_SetAddress>
 80094e0:	4603      	mov	r3, r0
 80094e2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d130      	bne.n	800954c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80094ea:	2002      	movs	r0, #2
 80094ec:	f004 f809 	bl	800d502 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2201      	movs	r2, #1
 80094f4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2203      	movs	r2, #3
 80094fc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	7919      	ldrb	r1, [r3, #4]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009512:	9202      	str	r2, [sp, #8]
 8009514:	2200      	movs	r2, #0
 8009516:	9201      	str	r2, [sp, #4]
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	4603      	mov	r3, r0
 800951c:	2280      	movs	r2, #128	@ 0x80
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f001 f9d2 	bl	800a8c8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	7959      	ldrb	r1, [r3, #5]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009538:	9202      	str	r2, [sp, #8]
 800953a:	2200      	movs	r2, #0
 800953c:	9201      	str	r2, [sp, #4]
 800953e:	9300      	str	r3, [sp, #0]
 8009540:	4603      	mov	r3, r0
 8009542:	2200      	movs	r2, #0
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f001 f9bf 	bl	800a8c8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800954a:	e12a      	b.n	80097a2 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b03      	cmp	r3, #3
 8009550:	f040 8127 	bne.w	80097a2 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	220d      	movs	r2, #13
 8009558:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2200      	movs	r2, #0
 800955e:	705a      	strb	r2, [r3, #1]
      break;
 8009560:	e11f      	b.n	80097a2 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009562:	2109      	movs	r1, #9
 8009564:	6878      	ldr	r0, [r7, #4]
 8009566:	f000 fa3b 	bl	80099e0 <USBH_Get_CfgDesc>
 800956a:	4603      	mov	r3, r0
 800956c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b00      	cmp	r3, #0
 8009572:	d103      	bne.n	800957c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2204      	movs	r2, #4
 8009578:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800957a:	e114      	b.n	80097a6 <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	2b03      	cmp	r3, #3
 8009580:	f040 8111 	bne.w	80097a6 <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800958a:	3301      	adds	r3, #1
 800958c:	b2da      	uxtb	r2, r3
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800959a:	2b03      	cmp	r3, #3
 800959c:	d903      	bls.n	80095a6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	220d      	movs	r2, #13
 80095a2:	701a      	strb	r2, [r3, #0]
      break;
 80095a4:	e0ff      	b.n	80097a6 <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	795b      	ldrb	r3, [r3, #5]
 80095aa:	4619      	mov	r1, r3
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f001 f9db 	bl	800a968 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	791b      	ldrb	r3, [r3, #4]
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 f9d5 	bl	800a968 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	701a      	strb	r2, [r3, #0]
      break;
 80095ca:	e0ec      	b.n	80097a6 <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80095d2:	4619      	mov	r1, r3
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f000 fa03 	bl	80099e0 <USBH_Get_CfgDesc>
 80095da:	4603      	mov	r3, r0
 80095dc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80095de:	7bbb      	ldrb	r3, [r7, #14]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d103      	bne.n	80095ec <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2205      	movs	r2, #5
 80095e8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80095ea:	e0de      	b.n	80097aa <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80095ec:	7bbb      	ldrb	r3, [r7, #14]
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	f040 80db 	bne.w	80097aa <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80095fa:	3301      	adds	r3, #1
 80095fc:	b2da      	uxtb	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800960a:	2b03      	cmp	r3, #3
 800960c:	d903      	bls.n	8009616 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	220d      	movs	r2, #13
 8009612:	701a      	strb	r2, [r3, #0]
      break;
 8009614:	e0c9      	b.n	80097aa <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	795b      	ldrb	r3, [r3, #5]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f001 f9a3 	bl	800a968 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	791b      	ldrb	r3, [r3, #4]
 8009626:	4619      	mov	r1, r3
 8009628:	6878      	ldr	r0, [r7, #4]
 800962a:	f001 f99d 	bl	800a968 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	701a      	strb	r2, [r3, #0]
      break;
 800963a:	e0b6      	b.n	80097aa <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009642:	2b00      	cmp	r3, #0
 8009644:	d036      	beq.n	80096b4 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009652:	23ff      	movs	r3, #255	@ 0xff
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 f9ed 	bl	8009a34 <USBH_Get_StringDesc>
 800965a:	4603      	mov	r3, r0
 800965c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d111      	bne.n	8009688 <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2206      	movs	r2, #6
 8009668:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2205      	movs	r2, #5
 800966e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800967e:	2200      	movs	r2, #0
 8009680:	4619      	mov	r1, r3
 8009682:	f001 fa6d 	bl	800ab60 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009686:	e092      	b.n	80097ae <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009688:	7bbb      	ldrb	r3, [r7, #14]
 800968a:	2b03      	cmp	r3, #3
 800968c:	f040 808f 	bne.w	80097ae <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2206      	movs	r2, #6
 8009694:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2205      	movs	r2, #5
 800969a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80096aa:	2200      	movs	r2, #0
 80096ac:	4619      	mov	r1, r3
 80096ae:	f001 fa57 	bl	800ab60 <osMessagePut>
      break;
 80096b2:	e07c      	b.n	80097ae <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2206      	movs	r2, #6
 80096b8:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2205      	movs	r2, #5
 80096be:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80096ce:	2200      	movs	r2, #0
 80096d0:	4619      	mov	r1, r3
 80096d2:	f001 fa45 	bl	800ab60 <osMessagePut>
      break;
 80096d6:	e06a      	b.n	80097ae <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d027      	beq.n	8009732 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80096ee:	23ff      	movs	r3, #255	@ 0xff
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 f99f 	bl	8009a34 <USBH_Get_StringDesc>
 80096f6:	4603      	mov	r3, r0
 80096f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80096fa:	7bbb      	ldrb	r3, [r7, #14]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d103      	bne.n	8009708 <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2207      	movs	r2, #7
 8009704:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009706:	e054      	b.n	80097b2 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009708:	7bbb      	ldrb	r3, [r7, #14]
 800970a:	2b03      	cmp	r3, #3
 800970c:	d151      	bne.n	80097b2 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2207      	movs	r2, #7
 8009712:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2205      	movs	r2, #5
 8009718:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009728:	2200      	movs	r2, #0
 800972a:	4619      	mov	r1, r3
 800972c:	f001 fa18 	bl	800ab60 <osMessagePut>
      break;
 8009730:	e03f      	b.n	80097b2 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2207      	movs	r2, #7
 8009736:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	2205      	movs	r2, #5
 800973c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800974c:	2200      	movs	r2, #0
 800974e:	4619      	mov	r1, r3
 8009750:	f001 fa06 	bl	800ab60 <osMessagePut>
      break;
 8009754:	e02d      	b.n	80097b2 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800975c:	2b00      	cmp	r3, #0
 800975e:	d017      	beq.n	8009790 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800976c:	23ff      	movs	r3, #255	@ 0xff
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f960 	bl	8009a34 <USBH_Get_StringDesc>
 8009774:	4603      	mov	r3, r0
 8009776:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d102      	bne.n	8009784 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800977e:	2300      	movs	r3, #0
 8009780:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009782:	e018      	b.n	80097b6 <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009784:	7bbb      	ldrb	r3, [r7, #14]
 8009786:	2b03      	cmp	r3, #3
 8009788:	d115      	bne.n	80097b6 <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	73fb      	strb	r3, [r7, #15]
      break;
 800978e:	e012      	b.n	80097b6 <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8009790:	2300      	movs	r3, #0
 8009792:	73fb      	strb	r3, [r7, #15]
      break;
 8009794:	e00f      	b.n	80097b6 <USBH_HandleEnum+0x442>

    default:
      break;
 8009796:	bf00      	nop
 8009798:	e00e      	b.n	80097b8 <USBH_HandleEnum+0x444>
      break;
 800979a:	bf00      	nop
 800979c:	e00c      	b.n	80097b8 <USBH_HandleEnum+0x444>
      break;
 800979e:	bf00      	nop
 80097a0:	e00a      	b.n	80097b8 <USBH_HandleEnum+0x444>
      break;
 80097a2:	bf00      	nop
 80097a4:	e008      	b.n	80097b8 <USBH_HandleEnum+0x444>
      break;
 80097a6:	bf00      	nop
 80097a8:	e006      	b.n	80097b8 <USBH_HandleEnum+0x444>
      break;
 80097aa:	bf00      	nop
 80097ac:	e004      	b.n	80097b8 <USBH_HandleEnum+0x444>
      break;
 80097ae:	bf00      	nop
 80097b0:	e002      	b.n	80097b8 <USBH_HandleEnum+0x444>
      break;
 80097b2:	bf00      	nop
 80097b4:	e000      	b.n	80097b8 <USBH_HandleEnum+0x444>
      break;
 80097b6:	bf00      	nop
  }
  return Status;
 80097b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80097ba:	4618      	mov	r0, r3
 80097bc:	3710      	adds	r7, #16
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop

080097c4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	683a      	ldr	r2, [r7, #0]
 80097d2:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80097d6:	bf00      	nop
 80097d8:	370c      	adds	r7, #12
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b082      	sub	sp, #8
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80097f0:	1c5a      	adds	r2, r3, #1
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f804 	bl	8009806 <USBH_HandleSof>
}
 80097fe:	bf00      	nop
 8009800:	3708      	adds	r7, #8
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}

08009806 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009806:	b580      	push	{r7, lr}
 8009808:	b082      	sub	sp, #8
 800980a:	af00      	add	r7, sp, #0
 800980c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	781b      	ldrb	r3, [r3, #0]
 8009812:	b2db      	uxtb	r3, r3
 8009814:	2b0b      	cmp	r3, #11
 8009816:	d10a      	bne.n	800982e <USBH_HandleSof+0x28>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009828:	699b      	ldr	r3, [r3, #24]
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	4798      	blx	r3
  }
}
 800982e:	bf00      	nop
 8009830:	3708      	adds	r7, #8
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}

08009836 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009836:	b580      	push	{r7, lr}
 8009838:	b082      	sub	sp, #8
 800983a:	af00      	add	r7, sp, #0
 800983c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2201      	movs	r2, #1
 800984a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800985a:	2200      	movs	r2, #0
 800985c:	4619      	mov	r1, r3
 800985e:	f001 f97f 	bl	800ab60 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009862:	bf00      	nop
}
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800986a:	b480      	push	{r7}
 800986c:	b083      	sub	sp, #12
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800987a:	bf00      	nop
}
 800987c:	370c      	adds	r7, #12
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr

08009886 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b082      	sub	sp, #8
 800988a:	af00      	add	r7, sp, #0
 800988c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80098ba:	2200      	movs	r2, #0
 80098bc:	4619      	mov	r1, r3
 80098be:	f001 f94f 	bl	800ab60 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80098c2:	2300      	movs	r3, #0
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3708      	adds	r7, #8
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}

080098cc <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b082      	sub	sp, #8
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2201      	movs	r2, #1
 80098d8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f003 fcbc 	bl	800d26a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	791b      	ldrb	r3, [r3, #4]
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f001 f835 	bl	800a968 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	795b      	ldrb	r3, [r3, #5]
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f001 f82f 	bl	800a968 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	2201      	movs	r2, #1
 800990e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800991e:	2200      	movs	r2, #0
 8009920:	4619      	mov	r1, r3
 8009922:	f001 f91d 	bl	800ab60 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b086      	sub	sp, #24
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 800993e:	f107 030c 	add.w	r3, r7, #12
 8009942:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009946:	4618      	mov	r0, r3
 8009948:	f001 f94a 	bl	800abe0 <osMessageGet>
    if (event.status == osEventMessage)
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	2b10      	cmp	r3, #16
 8009950:	d1f2      	bne.n	8009938 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f7ff faa4 	bl	8008ea0 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8009958:	e7ee      	b.n	8009938 <USBH_Process_OS+0x8>

0800995a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b082      	sub	sp, #8
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009976:	2200      	movs	r2, #0
 8009978:	4619      	mov	r1, r3
 800997a:	f001 f8f1 	bl	800ab60 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	3708      	adds	r7, #8
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}

08009988 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b086      	sub	sp, #24
 800998c:	af02      	add	r7, sp, #8
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	460b      	mov	r3, r1
 8009992:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009994:	887b      	ldrh	r3, [r7, #2]
 8009996:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800999a:	d901      	bls.n	80099a0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800999c:	2303      	movs	r3, #3
 800999e:	e01b      	b.n	80099d8 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80099a6:	887b      	ldrh	r3, [r7, #2]
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	4613      	mov	r3, r2
 80099ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80099b0:	2100      	movs	r1, #0
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f872 	bl	8009a9c <USBH_GetDescriptor>
 80099b8:	4603      	mov	r3, r0
 80099ba:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d109      	bne.n	80099d6 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80099c8:	887a      	ldrh	r2, [r7, #2]
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 f929 	bl	8009c24 <USBH_ParseDevDesc>
 80099d2:	4603      	mov	r3, r0
 80099d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3710      	adds	r7, #16
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	460b      	mov	r3, r1
 80099ea:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	331c      	adds	r3, #28
 80099f0:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80099f2:	887b      	ldrh	r3, [r7, #2]
 80099f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099f8:	d901      	bls.n	80099fe <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80099fa:	2303      	movs	r3, #3
 80099fc:	e016      	b.n	8009a2c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80099fe:	887b      	ldrh	r3, [r7, #2]
 8009a00:	9300      	str	r3, [sp, #0]
 8009a02:	68bb      	ldr	r3, [r7, #8]
 8009a04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a08:	2100      	movs	r1, #0
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f000 f846 	bl	8009a9c <USBH_GetDescriptor>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d107      	bne.n	8009a2a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009a1a:	887b      	ldrh	r3, [r7, #2]
 8009a1c:	461a      	mov	r2, r3
 8009a1e:	68b9      	ldr	r1, [r7, #8]
 8009a20:	6878      	ldr	r0, [r7, #4]
 8009a22:	f000 f9af 	bl	8009d84 <USBH_ParseCfgDesc>
 8009a26:	4603      	mov	r3, r0
 8009a28:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af02      	add	r7, sp, #8
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	607a      	str	r2, [r7, #4]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	460b      	mov	r3, r1
 8009a42:	72fb      	strb	r3, [r7, #11]
 8009a44:	4613      	mov	r3, r2
 8009a46:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009a48:	893b      	ldrh	r3, [r7, #8]
 8009a4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009a4e:	d802      	bhi.n	8009a56 <USBH_Get_StringDesc+0x22>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e01c      	b.n	8009a94 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009a5a:	7afb      	ldrb	r3, [r7, #11]
 8009a5c:	b29b      	uxth	r3, r3
 8009a5e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009a62:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009a6a:	893b      	ldrh	r3, [r7, #8]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	2100      	movs	r1, #0
 8009a72:	68f8      	ldr	r0, [r7, #12]
 8009a74:	f000 f812 	bl	8009a9c <USBH_GetDescriptor>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009a7c:	7dfb      	ldrb	r3, [r7, #23]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d107      	bne.n	8009a92 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009a88:	893a      	ldrh	r2, [r7, #8]
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 fb8d 	bl	800a1ac <USBH_ParseStringDesc>
  }

  return status;
 8009a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3718      	adds	r7, #24
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	bd80      	pop	{r7, pc}

08009a9c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	60f8      	str	r0, [r7, #12]
 8009aa4:	607b      	str	r3, [r7, #4]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	72fb      	strb	r3, [r7, #11]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	789b      	ldrb	r3, [r3, #2]
 8009ab2:	2b01      	cmp	r3, #1
 8009ab4:	d11c      	bne.n	8009af0 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ab6:	7afb      	ldrb	r3, [r7, #11]
 8009ab8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009abc:	b2da      	uxtb	r2, r3
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2206      	movs	r2, #6
 8009ac6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	893a      	ldrh	r2, [r7, #8]
 8009acc:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009ace:	893b      	ldrh	r3, [r7, #8]
 8009ad0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009ad4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009ad8:	d104      	bne.n	8009ae4 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	f240 4209 	movw	r2, #1033	@ 0x409
 8009ae0:	829a      	strh	r2, [r3, #20]
 8009ae2:	e002      	b.n	8009aea <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	8b3a      	ldrh	r2, [r7, #24]
 8009aee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009af0:	8b3b      	ldrh	r3, [r7, #24]
 8009af2:	461a      	mov	r2, r3
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	f000 fba5 	bl	800a246 <USBH_CtlReq>
 8009afc:	4603      	mov	r3, r0
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}

08009b06 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009b06:	b580      	push	{r7, lr}
 8009b08:	b082      	sub	sp, #8
 8009b0a:	af00      	add	r7, sp, #0
 8009b0c:	6078      	str	r0, [r7, #4]
 8009b0e:	460b      	mov	r3, r1
 8009b10:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	789b      	ldrb	r3, [r3, #2]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d10f      	bne.n	8009b3a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2205      	movs	r2, #5
 8009b24:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009b26:	78fb      	ldrb	r3, [r7, #3]
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 fb81 	bl	800a246 <USBH_CtlReq>
 8009b44:	4603      	mov	r3, r0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}

08009b4e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009b4e:	b580      	push	{r7, lr}
 8009b50:	b082      	sub	sp, #8
 8009b52:	af00      	add	r7, sp, #0
 8009b54:	6078      	str	r0, [r7, #4]
 8009b56:	460b      	mov	r3, r1
 8009b58:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	789b      	ldrb	r3, [r3, #2]
 8009b5e:	2b01      	cmp	r3, #1
 8009b60:	d10e      	bne.n	8009b80 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2209      	movs	r2, #9
 8009b6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	887a      	ldrh	r2, [r7, #2]
 8009b72:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009b80:	2200      	movs	r2, #0
 8009b82:	2100      	movs	r1, #0
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f000 fb5e 	bl	800a246 <USBH_CtlReq>
 8009b8a:	4603      	mov	r3, r0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3708      	adds	r7, #8
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	789b      	ldrb	r3, [r3, #2]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d10f      	bne.n	8009bc8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2200      	movs	r2, #0
 8009bac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2203      	movs	r2, #3
 8009bb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009bb4:	78fb      	ldrb	r3, [r7, #3]
 8009bb6:	b29a      	uxth	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009bc8:	2200      	movs	r2, #0
 8009bca:	2100      	movs	r1, #0
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 fb3a 	bl	800a246 <USBH_CtlReq>
 8009bd2:	4603      	mov	r3, r0
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	3708      	adds	r7, #8
 8009bd8:	46bd      	mov	sp, r7
 8009bda:	bd80      	pop	{r7, pc}

08009bdc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009bdc:	b580      	push	{r7, lr}
 8009bde:	b082      	sub	sp, #8
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	789b      	ldrb	r3, [r3, #2]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d10f      	bne.n	8009c10 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2202      	movs	r2, #2
 8009bf4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2201      	movs	r2, #1
 8009bfa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009c02:	78fb      	ldrb	r3, [r7, #3]
 8009c04:	b29a      	uxth	r2, r3
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009c10:	2200      	movs	r2, #0
 8009c12:	2100      	movs	r1, #0
 8009c14:	6878      	ldr	r0, [r7, #4]
 8009c16:	f000 fb16 	bl	800a246 <USBH_CtlReq>
 8009c1a:	4603      	mov	r3, r0
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3708      	adds	r7, #8
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b087      	sub	sp, #28
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	60f8      	str	r0, [r7, #12]
 8009c2c:	60b9      	str	r1, [r7, #8]
 8009c2e:	4613      	mov	r3, r2
 8009c30:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009c38:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d101      	bne.n	8009c48 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009c44:	2302      	movs	r3, #2
 8009c46:	e094      	b.n	8009d72 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	781a      	ldrb	r2, [r3, #0]
 8009c4c:	693b      	ldr	r3, [r7, #16]
 8009c4e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	785a      	ldrb	r2, [r3, #1]
 8009c54:	693b      	ldr	r3, [r7, #16]
 8009c56:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009c58:	68bb      	ldr	r3, [r7, #8]
 8009c5a:	3302      	adds	r3, #2
 8009c5c:	781b      	ldrb	r3, [r3, #0]
 8009c5e:	461a      	mov	r2, r3
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	3303      	adds	r3, #3
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	4313      	orrs	r3, r2
 8009c6c:	b29a      	uxth	r2, r3
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	791a      	ldrb	r2, [r3, #4]
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	795a      	ldrb	r2, [r3, #5]
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	799a      	ldrb	r2, [r3, #6]
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	79da      	ldrb	r2, [r3, #7]
 8009c8e:	693b      	ldr	r3, [r7, #16]
 8009c90:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d004      	beq.n	8009ca6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d11b      	bne.n	8009cde <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	79db      	ldrb	r3, [r3, #7]
 8009caa:	2b20      	cmp	r3, #32
 8009cac:	dc0f      	bgt.n	8009cce <USBH_ParseDevDesc+0xaa>
 8009cae:	2b08      	cmp	r3, #8
 8009cb0:	db0f      	blt.n	8009cd2 <USBH_ParseDevDesc+0xae>
 8009cb2:	3b08      	subs	r3, #8
 8009cb4:	4a32      	ldr	r2, [pc, #200]	@ (8009d80 <USBH_ParseDevDesc+0x15c>)
 8009cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009cba:	f003 0301 	and.w	r3, r3, #1
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	bf14      	ite	ne
 8009cc2:	2301      	movne	r3, #1
 8009cc4:	2300      	moveq	r3, #0
 8009cc6:	b2db      	uxtb	r3, r3
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d106      	bne.n	8009cda <USBH_ParseDevDesc+0xb6>
 8009ccc:	e001      	b.n	8009cd2 <USBH_ParseDevDesc+0xae>
 8009cce:	2b40      	cmp	r3, #64	@ 0x40
 8009cd0:	d003      	beq.n	8009cda <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	2208      	movs	r2, #8
 8009cd6:	71da      	strb	r2, [r3, #7]
        break;
 8009cd8:	e000      	b.n	8009cdc <USBH_ParseDevDesc+0xb8>
        break;
 8009cda:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009cdc:	e00e      	b.n	8009cfc <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d107      	bne.n	8009cf8 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009ce8:	693b      	ldr	r3, [r7, #16]
 8009cea:	79db      	ldrb	r3, [r3, #7]
 8009cec:	2b08      	cmp	r3, #8
 8009cee:	d005      	beq.n	8009cfc <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009cf0:	693b      	ldr	r3, [r7, #16]
 8009cf2:	2208      	movs	r2, #8
 8009cf4:	71da      	strb	r2, [r3, #7]
 8009cf6:	e001      	b.n	8009cfc <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009cf8:	2303      	movs	r3, #3
 8009cfa:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009cfc:	88fb      	ldrh	r3, [r7, #6]
 8009cfe:	2b08      	cmp	r3, #8
 8009d00:	d936      	bls.n	8009d70 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009d02:	68bb      	ldr	r3, [r7, #8]
 8009d04:	3308      	adds	r3, #8
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	3309      	adds	r3, #9
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	021b      	lsls	r3, r3, #8
 8009d12:	b29b      	uxth	r3, r3
 8009d14:	4313      	orrs	r3, r2
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	330a      	adds	r3, #10
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	461a      	mov	r2, r3
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	330b      	adds	r3, #11
 8009d28:	781b      	ldrb	r3, [r3, #0]
 8009d2a:	021b      	lsls	r3, r3, #8
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	4313      	orrs	r3, r2
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	330c      	adds	r3, #12
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	330d      	adds	r3, #13
 8009d42:	781b      	ldrb	r3, [r3, #0]
 8009d44:	021b      	lsls	r3, r3, #8
 8009d46:	b29b      	uxth	r3, r3
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	b29a      	uxth	r2, r3
 8009d4c:	693b      	ldr	r3, [r7, #16]
 8009d4e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	7b9a      	ldrb	r2, [r3, #14]
 8009d54:	693b      	ldr	r3, [r7, #16]
 8009d56:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	7bda      	ldrb	r2, [r3, #15]
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	7c1a      	ldrb	r2, [r3, #16]
 8009d64:	693b      	ldr	r3, [r7, #16]
 8009d66:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	7c5a      	ldrb	r2, [r3, #17]
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	01000101 	.word	0x01000101

08009d84 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b08c      	sub	sp, #48	@ 0x30
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d98:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009da0:	2300      	movs	r3, #0
 8009da2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009da6:	2300      	movs	r3, #0
 8009da8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d101      	bne.n	8009db6 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009db2:	2302      	movs	r3, #2
 8009db4:	e0da      	b.n	8009f6c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	2b09      	cmp	r3, #9
 8009dc0:	d002      	beq.n	8009dc8 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dc4:	2209      	movs	r2, #9
 8009dc6:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	781a      	ldrb	r2, [r3, #0]
 8009dcc:	6a3b      	ldr	r3, [r7, #32]
 8009dce:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	785a      	ldrb	r2, [r3, #1]
 8009dd4:	6a3b      	ldr	r3, [r7, #32]
 8009dd6:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	3302      	adds	r3, #2
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	3303      	adds	r3, #3
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	021b      	lsls	r3, r3, #8
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	4313      	orrs	r3, r2
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009df2:	bf28      	it	cs
 8009df4:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	6a3b      	ldr	r3, [r7, #32]
 8009dfc:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	791a      	ldrb	r2, [r3, #4]
 8009e02:	6a3b      	ldr	r3, [r7, #32]
 8009e04:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	795a      	ldrb	r2, [r3, #5]
 8009e0a:	6a3b      	ldr	r3, [r7, #32]
 8009e0c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	799a      	ldrb	r2, [r3, #6]
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	79da      	ldrb	r2, [r3, #7]
 8009e1a:	6a3b      	ldr	r3, [r7, #32]
 8009e1c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009e1e:	68bb      	ldr	r3, [r7, #8]
 8009e20:	7a1a      	ldrb	r2, [r3, #8]
 8009e22:	6a3b      	ldr	r3, [r7, #32]
 8009e24:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009e26:	88fb      	ldrh	r3, [r7, #6]
 8009e28:	2b09      	cmp	r3, #9
 8009e2a:	f240 809d 	bls.w	8009f68 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009e2e:	2309      	movs	r3, #9
 8009e30:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009e32:	2300      	movs	r3, #0
 8009e34:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009e36:	e081      	b.n	8009f3c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e38:	f107 0316 	add.w	r3, r7, #22
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e40:	f000 f9e7 	bl	800a212 <USBH_GetNextDesc>
 8009e44:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e48:	785b      	ldrb	r3, [r3, #1]
 8009e4a:	2b04      	cmp	r3, #4
 8009e4c:	d176      	bne.n	8009f3c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	2b09      	cmp	r3, #9
 8009e54:	d002      	beq.n	8009e5c <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e58:	2209      	movs	r2, #9
 8009e5a:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e60:	221a      	movs	r2, #26
 8009e62:	fb02 f303 	mul.w	r3, r2, r3
 8009e66:	3308      	adds	r3, #8
 8009e68:	6a3a      	ldr	r2, [r7, #32]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	3302      	adds	r3, #2
 8009e6e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009e70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009e72:	69f8      	ldr	r0, [r7, #28]
 8009e74:	f000 f87e 	bl	8009f74 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009e82:	e043      	b.n	8009f0c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009e84:	f107 0316 	add.w	r3, r7, #22
 8009e88:	4619      	mov	r1, r3
 8009e8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e8c:	f000 f9c1 	bl	800a212 <USBH_GetNextDesc>
 8009e90:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e94:	785b      	ldrb	r3, [r3, #1]
 8009e96:	2b05      	cmp	r3, #5
 8009e98:	d138      	bne.n	8009f0c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	795b      	ldrb	r3, [r3, #5]
 8009e9e:	2b01      	cmp	r3, #1
 8009ea0:	d113      	bne.n	8009eca <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009ea2:	69fb      	ldr	r3, [r7, #28]
 8009ea4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	d003      	beq.n	8009eb2 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009eaa:	69fb      	ldr	r3, [r7, #28]
 8009eac:	799b      	ldrb	r3, [r3, #6]
 8009eae:	2b03      	cmp	r3, #3
 8009eb0:	d10b      	bne.n	8009eca <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009eb2:	69fb      	ldr	r3, [r7, #28]
 8009eb4:	79db      	ldrb	r3, [r3, #7]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d10b      	bne.n	8009ed2 <USBH_ParseCfgDesc+0x14e>
 8009eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ebc:	781b      	ldrb	r3, [r3, #0]
 8009ebe:	2b09      	cmp	r3, #9
 8009ec0:	d007      	beq.n	8009ed2 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	2209      	movs	r2, #9
 8009ec6:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ec8:	e003      	b.n	8009ed2 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ecc:	2207      	movs	r2, #7
 8009ece:	701a      	strb	r2, [r3, #0]
 8009ed0:	e000      	b.n	8009ed4 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009ed2:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009ed4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ed8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009edc:	3201      	adds	r2, #1
 8009ede:	00d2      	lsls	r2, r2, #3
 8009ee0:	211a      	movs	r1, #26
 8009ee2:	fb01 f303 	mul.w	r3, r1, r3
 8009ee6:	4413      	add	r3, r2
 8009ee8:	3308      	adds	r3, #8
 8009eea:	6a3a      	ldr	r2, [r7, #32]
 8009eec:	4413      	add	r3, r2
 8009eee:	3304      	adds	r3, #4
 8009ef0:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ef4:	69b9      	ldr	r1, [r7, #24]
 8009ef6:	68f8      	ldr	r0, [r7, #12]
 8009ef8:	f000 f870 	bl	8009fdc <USBH_ParseEPDesc>
 8009efc:	4603      	mov	r3, r0
 8009efe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009f02:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009f06:	3301      	adds	r3, #1
 8009f08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	791b      	ldrb	r3, [r3, #4]
 8009f10:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d204      	bcs.n	8009f22 <USBH_ParseCfgDesc+0x19e>
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	885a      	ldrh	r2, [r3, #2]
 8009f1c:	8afb      	ldrh	r3, [r7, #22]
 8009f1e:	429a      	cmp	r2, r3
 8009f20:	d8b0      	bhi.n	8009e84 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009f22:	69fb      	ldr	r3, [r7, #28]
 8009f24:	791b      	ldrb	r3, [r3, #4]
 8009f26:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d201      	bcs.n	8009f32 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e01c      	b.n	8009f6c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009f32:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f36:	3301      	adds	r3, #1
 8009f38:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d805      	bhi.n	8009f50 <USBH_ParseCfgDesc+0x1cc>
 8009f44:	6a3b      	ldr	r3, [r7, #32]
 8009f46:	885a      	ldrh	r2, [r3, #2]
 8009f48:	8afb      	ldrh	r3, [r7, #22]
 8009f4a:	429a      	cmp	r2, r3
 8009f4c:	f63f af74 	bhi.w	8009e38 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009f50:	6a3b      	ldr	r3, [r7, #32]
 8009f52:	791b      	ldrb	r3, [r3, #4]
 8009f54:	2b02      	cmp	r3, #2
 8009f56:	bf28      	it	cs
 8009f58:	2302      	movcs	r3, #2
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009f60:	429a      	cmp	r2, r3
 8009f62:	d201      	bcs.n	8009f68 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009f64:	2303      	movs	r3, #3
 8009f66:	e001      	b.n	8009f6c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009f68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3730      	adds	r7, #48	@ 0x30
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	781a      	ldrb	r2, [r3, #0]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	785a      	ldrb	r2, [r3, #1]
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	789a      	ldrb	r2, [r3, #2]
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	78da      	ldrb	r2, [r3, #3]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	3304      	adds	r3, #4
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	bf28      	it	cs
 8009fa8:	2302      	movcs	r3, #2
 8009faa:	b2da      	uxtb	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	795a      	ldrb	r2, [r3, #5]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	799a      	ldrb	r2, [r3, #6]
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	79da      	ldrb	r2, [r3, #7]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	7a1a      	ldrb	r2, [r3, #8]
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	721a      	strb	r2, [r3, #8]
}
 8009fd0:	bf00      	nop
 8009fd2:	370c      	adds	r7, #12
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr

08009fdc <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009fdc:	b480      	push	{r7}
 8009fde:	b087      	sub	sp, #28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	60f8      	str	r0, [r7, #12]
 8009fe4:	60b9      	str	r1, [r7, #8]
 8009fe6:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	781a      	ldrb	r2, [r3, #0]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	785a      	ldrb	r2, [r3, #1]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	789a      	ldrb	r2, [r3, #2]
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	78da      	ldrb	r2, [r3, #3]
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	3304      	adds	r3, #4
 800a010:	781b      	ldrb	r3, [r3, #0]
 800a012:	461a      	mov	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	3305      	adds	r3, #5
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	021b      	lsls	r3, r3, #8
 800a01c:	b29b      	uxth	r3, r3
 800a01e:	4313      	orrs	r3, r2
 800a020:	b29a      	uxth	r2, r3
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	799a      	ldrb	r2, [r3, #6]
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	889b      	ldrh	r3, [r3, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d009      	beq.n	800a04a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a03a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a03e:	d804      	bhi.n	800a04a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a048:	d901      	bls.n	800a04e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a04a:	2303      	movs	r3, #3
 800a04c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a054:	2b00      	cmp	r3, #0
 800a056:	d136      	bne.n	800a0c6 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	78db      	ldrb	r3, [r3, #3]
 800a05c:	f003 0303 	and.w	r3, r3, #3
 800a060:	2b02      	cmp	r3, #2
 800a062:	d108      	bne.n	800a076 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	889b      	ldrh	r3, [r3, #4]
 800a068:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a06c:	f240 8097 	bls.w	800a19e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a070:	2303      	movs	r3, #3
 800a072:	75fb      	strb	r3, [r7, #23]
 800a074:	e093      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	78db      	ldrb	r3, [r3, #3]
 800a07a:	f003 0303 	and.w	r3, r3, #3
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d107      	bne.n	800a092 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	889b      	ldrh	r3, [r3, #4]
 800a086:	2b40      	cmp	r3, #64	@ 0x40
 800a088:	f240 8089 	bls.w	800a19e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a08c:	2303      	movs	r3, #3
 800a08e:	75fb      	strb	r3, [r7, #23]
 800a090:	e085      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	78db      	ldrb	r3, [r3, #3]
 800a096:	f003 0303 	and.w	r3, r3, #3
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d005      	beq.n	800a0aa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	78db      	ldrb	r3, [r3, #3]
 800a0a2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a0a6:	2b03      	cmp	r3, #3
 800a0a8:	d10a      	bne.n	800a0c0 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	799b      	ldrb	r3, [r3, #6]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d003      	beq.n	800a0ba <USBH_ParseEPDesc+0xde>
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	799b      	ldrb	r3, [r3, #6]
 800a0b6:	2b10      	cmp	r3, #16
 800a0b8:	d970      	bls.n	800a19c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a0be:	e06d      	b.n	800a19c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a0c0:	2303      	movs	r3, #3
 800a0c2:	75fb      	strb	r3, [r7, #23]
 800a0c4:	e06b      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d13c      	bne.n	800a14a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	78db      	ldrb	r3, [r3, #3]
 800a0d4:	f003 0303 	and.w	r3, r3, #3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d005      	beq.n	800a0e8 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a0dc:	68bb      	ldr	r3, [r7, #8]
 800a0de:	78db      	ldrb	r3, [r3, #3]
 800a0e0:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d106      	bne.n	800a0f6 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	889b      	ldrh	r3, [r3, #4]
 800a0ec:	2b40      	cmp	r3, #64	@ 0x40
 800a0ee:	d956      	bls.n	800a19e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a0f4:	e053      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	78db      	ldrb	r3, [r3, #3]
 800a0fa:	f003 0303 	and.w	r3, r3, #3
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d10e      	bne.n	800a120 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	799b      	ldrb	r3, [r3, #6]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d007      	beq.n	800a11a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a10e:	2b10      	cmp	r3, #16
 800a110:	d803      	bhi.n	800a11a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a112:	68bb      	ldr	r3, [r7, #8]
 800a114:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a116:	2b40      	cmp	r3, #64	@ 0x40
 800a118:	d941      	bls.n	800a19e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a11a:	2303      	movs	r3, #3
 800a11c:	75fb      	strb	r3, [r7, #23]
 800a11e:	e03e      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a120:	68bb      	ldr	r3, [r7, #8]
 800a122:	78db      	ldrb	r3, [r3, #3]
 800a124:	f003 0303 	and.w	r3, r3, #3
 800a128:	2b03      	cmp	r3, #3
 800a12a:	d10b      	bne.n	800a144 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a12c:	68bb      	ldr	r3, [r7, #8]
 800a12e:	799b      	ldrb	r3, [r3, #6]
 800a130:	2b00      	cmp	r3, #0
 800a132:	d004      	beq.n	800a13e <USBH_ParseEPDesc+0x162>
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	889b      	ldrh	r3, [r3, #4]
 800a138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a13c:	d32f      	bcc.n	800a19e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a13e:	2303      	movs	r3, #3
 800a140:	75fb      	strb	r3, [r7, #23]
 800a142:	e02c      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a144:	2303      	movs	r3, #3
 800a146:	75fb      	strb	r3, [r7, #23]
 800a148:	e029      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a150:	2b02      	cmp	r3, #2
 800a152:	d120      	bne.n	800a196 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	78db      	ldrb	r3, [r3, #3]
 800a158:	f003 0303 	and.w	r3, r3, #3
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d106      	bne.n	800a16e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	889b      	ldrh	r3, [r3, #4]
 800a164:	2b08      	cmp	r3, #8
 800a166:	d01a      	beq.n	800a19e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a168:	2303      	movs	r3, #3
 800a16a:	75fb      	strb	r3, [r7, #23]
 800a16c:	e017      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	78db      	ldrb	r3, [r3, #3]
 800a172:	f003 0303 	and.w	r3, r3, #3
 800a176:	2b03      	cmp	r3, #3
 800a178:	d10a      	bne.n	800a190 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	799b      	ldrb	r3, [r3, #6]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <USBH_ParseEPDesc+0x1ae>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	889b      	ldrh	r3, [r3, #4]
 800a186:	2b08      	cmp	r3, #8
 800a188:	d909      	bls.n	800a19e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a18a:	2303      	movs	r3, #3
 800a18c:	75fb      	strb	r3, [r7, #23]
 800a18e:	e006      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a190:	2303      	movs	r3, #3
 800a192:	75fb      	strb	r3, [r7, #23]
 800a194:	e003      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a196:	2303      	movs	r3, #3
 800a198:	75fb      	strb	r3, [r7, #23]
 800a19a:	e000      	b.n	800a19e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a19c:	bf00      	nop
  }

  return status;
 800a19e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	371c      	adds	r7, #28
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b087      	sub	sp, #28
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	60b9      	str	r1, [r7, #8]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	3301      	adds	r3, #1
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d120      	bne.n	800a206 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	1e9a      	subs	r2, r3, #2
 800a1ca:	88fb      	ldrh	r3, [r7, #6]
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	bf28      	it	cs
 800a1d0:	4613      	movcs	r3, r2
 800a1d2:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3302      	adds	r3, #2
 800a1d8:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a1da:	2300      	movs	r3, #0
 800a1dc:	82fb      	strh	r3, [r7, #22]
 800a1de:	e00b      	b.n	800a1f8 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a1e0:	8afb      	ldrh	r3, [r7, #22]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	4413      	add	r3, r2
 800a1e6:	781a      	ldrb	r2, [r3, #0]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	3301      	adds	r3, #1
 800a1f0:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a1f2:	8afb      	ldrh	r3, [r7, #22]
 800a1f4:	3302      	adds	r3, #2
 800a1f6:	82fb      	strh	r3, [r7, #22]
 800a1f8:	8afa      	ldrh	r2, [r7, #22]
 800a1fa:	8abb      	ldrh	r3, [r7, #20]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d3ef      	bcc.n	800a1e0 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	2200      	movs	r2, #0
 800a204:	701a      	strb	r2, [r3, #0]
  }
}
 800a206:	bf00      	nop
 800a208:	371c      	adds	r7, #28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a210:	4770      	bx	lr

0800a212 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a212:	b480      	push	{r7}
 800a214:	b085      	sub	sp, #20
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a21c:	683b      	ldr	r3, [r7, #0]
 800a21e:	881b      	ldrh	r3, [r3, #0]
 800a220:	687a      	ldr	r2, [r7, #4]
 800a222:	7812      	ldrb	r2, [r2, #0]
 800a224:	4413      	add	r3, r2
 800a226:	b29a      	uxth	r2, r3
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	4413      	add	r3, r2
 800a236:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a238:	68fb      	ldr	r3, [r7, #12]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr

0800a246 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a246:	b580      	push	{r7, lr}
 800a248:	b086      	sub	sp, #24
 800a24a:	af00      	add	r7, sp, #0
 800a24c:	60f8      	str	r0, [r7, #12]
 800a24e:	60b9      	str	r1, [r7, #8]
 800a250:	4613      	mov	r3, r2
 800a252:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a254:	2301      	movs	r3, #1
 800a256:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	789b      	ldrb	r3, [r3, #2]
 800a25c:	2b01      	cmp	r3, #1
 800a25e:	d002      	beq.n	800a266 <USBH_CtlReq+0x20>
 800a260:	2b02      	cmp	r3, #2
 800a262:	d01d      	beq.n	800a2a0 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800a264:	e043      	b.n	800a2ee <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	88fa      	ldrh	r2, [r7, #6]
 800a270:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2201      	movs	r2, #1
 800a276:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2202      	movs	r2, #2
 800a27c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a27e:	2301      	movs	r3, #1
 800a280:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2203      	movs	r2, #3
 800a286:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a296:	2200      	movs	r2, #0
 800a298:	4619      	mov	r1, r3
 800a29a:	f000 fc61 	bl	800ab60 <osMessagePut>
      break;
 800a29e:	e026      	b.n	800a2ee <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 f829 	bl	800a2f8 <USBH_HandleControl>
 800a2a6:	4603      	mov	r3, r0
 800a2a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a2aa:	7dfb      	ldrb	r3, [r7, #23]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d002      	beq.n	800a2b6 <USBH_CtlReq+0x70>
 800a2b0:	7dfb      	ldrb	r3, [r7, #23]
 800a2b2:	2b03      	cmp	r3, #3
 800a2b4:	d106      	bne.n	800a2c4 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2201      	movs	r2, #1
 800a2ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	761a      	strb	r2, [r3, #24]
 800a2c2:	e005      	b.n	800a2d0 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800a2c4:	7dfb      	ldrb	r3, [r7, #23]
 800a2c6:	2b02      	cmp	r3, #2
 800a2c8:	d102      	bne.n	800a2d0 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	2201      	movs	r2, #1
 800a2ce:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2203      	movs	r2, #3
 800a2d4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	4619      	mov	r1, r3
 800a2e8:	f000 fc3a 	bl	800ab60 <osMessagePut>
      break;
 800a2ec:	bf00      	nop
  }
  return status;
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a300:	2301      	movs	r3, #1
 800a302:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a304:	2300      	movs	r3, #0
 800a306:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	7e1b      	ldrb	r3, [r3, #24]
 800a30c:	3b01      	subs	r3, #1
 800a30e:	2b0a      	cmp	r3, #10
 800a310:	f200 8229 	bhi.w	800a766 <USBH_HandleControl+0x46e>
 800a314:	a201      	add	r2, pc, #4	@ (adr r2, 800a31c <USBH_HandleControl+0x24>)
 800a316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a31a:	bf00      	nop
 800a31c:	0800a349 	.word	0x0800a349
 800a320:	0800a363 	.word	0x0800a363
 800a324:	0800a405 	.word	0x0800a405
 800a328:	0800a42b 	.word	0x0800a42b
 800a32c:	0800a4b7 	.word	0x0800a4b7
 800a330:	0800a4e1 	.word	0x0800a4e1
 800a334:	0800a5a3 	.word	0x0800a5a3
 800a338:	0800a5c5 	.word	0x0800a5c5
 800a33c:	0800a657 	.word	0x0800a657
 800a340:	0800a67d 	.word	0x0800a67d
 800a344:	0800a70f 	.word	0x0800a70f
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f103 0110 	add.w	r1, r3, #16
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	795b      	ldrb	r3, [r3, #5]
 800a352:	461a      	mov	r2, r3
 800a354:	6878      	ldr	r0, [r7, #4]
 800a356:	f000 fa17 	bl	800a788 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2202      	movs	r2, #2
 800a35e:	761a      	strb	r2, [r3, #24]
      break;
 800a360:	e20c      	b.n	800a77c <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	795b      	ldrb	r3, [r3, #5]
 800a366:	4619      	mov	r1, r3
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f003 f86d 	bl	800d448 <USBH_LL_GetURBState>
 800a36e:	4603      	mov	r3, r0
 800a370:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a372:	7bbb      	ldrb	r3, [r7, #14]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d12c      	bne.n	800a3d2 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	7c1b      	ldrb	r3, [r3, #16]
 800a37c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a380:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	8adb      	ldrh	r3, [r3, #22]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d00a      	beq.n	800a3a0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a38a:	7b7b      	ldrb	r3, [r7, #13]
 800a38c:	2b80      	cmp	r3, #128	@ 0x80
 800a38e:	d103      	bne.n	800a398 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2203      	movs	r2, #3
 800a394:	761a      	strb	r2, [r3, #24]
 800a396:	e00d      	b.n	800a3b4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2205      	movs	r2, #5
 800a39c:	761a      	strb	r2, [r3, #24]
 800a39e:	e009      	b.n	800a3b4 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800a3a0:	7b7b      	ldrb	r3, [r7, #13]
 800a3a2:	2b80      	cmp	r3, #128	@ 0x80
 800a3a4:	d103      	bne.n	800a3ae <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2209      	movs	r2, #9
 800a3aa:	761a      	strb	r2, [r3, #24]
 800a3ac:	e002      	b.n	800a3b4 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2203      	movs	r2, #3
 800a3b8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	4619      	mov	r1, r3
 800a3cc:	f000 fbc8 	bl	800ab60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a3d0:	e1cb      	b.n	800a76a <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a3d2:	7bbb      	ldrb	r3, [r7, #14]
 800a3d4:	2b04      	cmp	r3, #4
 800a3d6:	d003      	beq.n	800a3e0 <USBH_HandleControl+0xe8>
 800a3d8:	7bbb      	ldrb	r3, [r7, #14]
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	f040 81c5 	bne.w	800a76a <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	220b      	movs	r2, #11
 800a3e4:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2203      	movs	r2, #3
 800a3ea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	4619      	mov	r1, r3
 800a3fe:	f000 fbaf 	bl	800ab60 <osMessagePut>
      break;
 800a402:	e1b2      	b.n	800a76a <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a40a:	b29a      	uxth	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6899      	ldr	r1, [r3, #8]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	899a      	ldrh	r2, [r3, #12]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	791b      	ldrb	r3, [r3, #4]
 800a41c:	6878      	ldr	r0, [r7, #4]
 800a41e:	f000 f9f2 	bl	800a806 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2204      	movs	r2, #4
 800a426:	761a      	strb	r2, [r3, #24]
      break;
 800a428:	e1a8      	b.n	800a77c <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	791b      	ldrb	r3, [r3, #4]
 800a42e:	4619      	mov	r1, r3
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f003 f809 	bl	800d448 <USBH_LL_GetURBState>
 800a436:	4603      	mov	r3, r0
 800a438:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a43a:	7bbb      	ldrb	r3, [r7, #14]
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d110      	bne.n	800a462 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	2209      	movs	r2, #9
 800a444:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2203      	movs	r2, #3
 800a44a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a45a:	2200      	movs	r2, #0
 800a45c:	4619      	mov	r1, r3
 800a45e:	f000 fb7f 	bl	800ab60 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	2b05      	cmp	r3, #5
 800a466:	d110      	bne.n	800a48a <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a468:	2303      	movs	r3, #3
 800a46a:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	2203      	movs	r2, #3
 800a470:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a480:	2200      	movs	r2, #0
 800a482:	4619      	mov	r1, r3
 800a484:	f000 fb6c 	bl	800ab60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a488:	e171      	b.n	800a76e <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800a48a:	7bbb      	ldrb	r3, [r7, #14]
 800a48c:	2b04      	cmp	r3, #4
 800a48e:	f040 816e 	bne.w	800a76e <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	220b      	movs	r2, #11
 800a496:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	2203      	movs	r2, #3
 800a49c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	4619      	mov	r1, r3
 800a4b0:	f000 fb56 	bl	800ab60 <osMessagePut>
      break;
 800a4b4:	e15b      	b.n	800a76e <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6899      	ldr	r1, [r3, #8]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	899a      	ldrh	r2, [r3, #12]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	795b      	ldrb	r3, [r3, #5]
 800a4c2:	2001      	movs	r0, #1
 800a4c4:	9000      	str	r0, [sp, #0]
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 f978 	bl	800a7bc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a4d2:	b29a      	uxth	r2, r3
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2206      	movs	r2, #6
 800a4dc:	761a      	strb	r2, [r3, #24]
      break;
 800a4de:	e14d      	b.n	800a77c <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	795b      	ldrb	r3, [r3, #5]
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f002 ffae 	bl	800d448 <USBH_LL_GetURBState>
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a4f0:	7bbb      	ldrb	r3, [r7, #14]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d111      	bne.n	800a51a <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	2207      	movs	r2, #7
 800a4fa:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2203      	movs	r2, #3
 800a500:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a510:	2200      	movs	r2, #0
 800a512:	4619      	mov	r1, r3
 800a514:	f000 fb24 	bl	800ab60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a518:	e12b      	b.n	800a772 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800a51a:	7bbb      	ldrb	r3, [r7, #14]
 800a51c:	2b05      	cmp	r3, #5
 800a51e:	d113      	bne.n	800a548 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	220c      	movs	r2, #12
 800a524:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a526:	2303      	movs	r3, #3
 800a528:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2203      	movs	r2, #3
 800a52e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a53e:	2200      	movs	r2, #0
 800a540:	4619      	mov	r1, r3
 800a542:	f000 fb0d 	bl	800ab60 <osMessagePut>
      break;
 800a546:	e114      	b.n	800a772 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a548:	7bbb      	ldrb	r3, [r7, #14]
 800a54a:	2b02      	cmp	r3, #2
 800a54c:	d111      	bne.n	800a572 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2205      	movs	r2, #5
 800a552:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	2203      	movs	r2, #3
 800a558:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a568:	2200      	movs	r2, #0
 800a56a:	4619      	mov	r1, r3
 800a56c:	f000 faf8 	bl	800ab60 <osMessagePut>
      break;
 800a570:	e0ff      	b.n	800a772 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	2b04      	cmp	r3, #4
 800a576:	f040 80fc 	bne.w	800a772 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	220b      	movs	r2, #11
 800a57e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a580:	2302      	movs	r3, #2
 800a582:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2203      	movs	r2, #3
 800a588:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a598:	2200      	movs	r2, #0
 800a59a:	4619      	mov	r1, r3
 800a59c:	f000 fae0 	bl	800ab60 <osMessagePut>
      break;
 800a5a0:	e0e7      	b.n	800a772 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	791b      	ldrb	r3, [r3, #4]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	2100      	movs	r1, #0
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 f92b 	bl	800a806 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a5b6:	b29a      	uxth	r2, r3
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2208      	movs	r2, #8
 800a5c0:	761a      	strb	r2, [r3, #24]

      break;
 800a5c2:	e0db      	b.n	800a77c <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	791b      	ldrb	r3, [r3, #4]
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f002 ff3c 	bl	800d448 <USBH_LL_GetURBState>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a5d4:	7bbb      	ldrb	r3, [r7, #14]
 800a5d6:	2b01      	cmp	r3, #1
 800a5d8:	d113      	bne.n	800a602 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	220d      	movs	r2, #13
 800a5de:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2203      	movs	r2, #3
 800a5e8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	f000 fab0 	bl	800ab60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a600:	e0b9      	b.n	800a776 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a602:	7bbb      	ldrb	r3, [r7, #14]
 800a604:	2b04      	cmp	r3, #4
 800a606:	d111      	bne.n	800a62c <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	220b      	movs	r2, #11
 800a60c:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2203      	movs	r2, #3
 800a612:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a622:	2200      	movs	r2, #0
 800a624:	4619      	mov	r1, r3
 800a626:	f000 fa9b 	bl	800ab60 <osMessagePut>
      break;
 800a62a:	e0a4      	b.n	800a776 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a62c:	7bbb      	ldrb	r3, [r7, #14]
 800a62e:	2b05      	cmp	r3, #5
 800a630:	f040 80a1 	bne.w	800a776 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a634:	2303      	movs	r3, #3
 800a636:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2203      	movs	r2, #3
 800a63c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a64c:	2200      	movs	r2, #0
 800a64e:	4619      	mov	r1, r3
 800a650:	f000 fa86 	bl	800ab60 <osMessagePut>
      break;
 800a654:	e08f      	b.n	800a776 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	795b      	ldrb	r3, [r3, #5]
 800a65a:	2201      	movs	r2, #1
 800a65c:	9200      	str	r2, [sp, #0]
 800a65e:	2200      	movs	r2, #0
 800a660:	2100      	movs	r1, #0
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f000 f8aa 	bl	800a7bc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a66e:	b29a      	uxth	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	220a      	movs	r2, #10
 800a678:	761a      	strb	r2, [r3, #24]
      break;
 800a67a:	e07f      	b.n	800a77c <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	795b      	ldrb	r3, [r3, #5]
 800a680:	4619      	mov	r1, r3
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f002 fee0 	bl	800d448 <USBH_LL_GetURBState>
 800a688:	4603      	mov	r3, r0
 800a68a:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a68c:	7bbb      	ldrb	r3, [r7, #14]
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d113      	bne.n	800a6ba <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	220d      	movs	r2, #13
 800a69a:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2203      	movs	r2, #3
 800a6a0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	4619      	mov	r1, r3
 800a6b4:	f000 fa54 	bl	800ab60 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a6b8:	e05f      	b.n	800a77a <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d111      	bne.n	800a6e4 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2209      	movs	r2, #9
 800a6c4:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2203      	movs	r2, #3
 800a6ca:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a6da:	2200      	movs	r2, #0
 800a6dc:	4619      	mov	r1, r3
 800a6de:	f000 fa3f 	bl	800ab60 <osMessagePut>
      break;
 800a6e2:	e04a      	b.n	800a77a <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	2b04      	cmp	r3, #4
 800a6e8:	d147      	bne.n	800a77a <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	220b      	movs	r2, #11
 800a6ee:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2203      	movs	r2, #3
 800a6f4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a704:	2200      	movs	r2, #0
 800a706:	4619      	mov	r1, r3
 800a708:	f000 fa2a 	bl	800ab60 <osMessagePut>
      break;
 800a70c:	e035      	b.n	800a77a <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	7e5b      	ldrb	r3, [r3, #25]
 800a712:	3301      	adds	r3, #1
 800a714:	b2da      	uxtb	r2, r3
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	765a      	strb	r2, [r3, #25]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	7e5b      	ldrb	r3, [r3, #25]
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d806      	bhi.n	800a730 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2201      	movs	r2, #1
 800a726:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a72e:	e025      	b.n	800a77c <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a736:	2106      	movs	r1, #6
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2200      	movs	r2, #0
 800a740:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	795b      	ldrb	r3, [r3, #5]
 800a746:	4619      	mov	r1, r3
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f000 f90d 	bl	800a968 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	791b      	ldrb	r3, [r3, #4]
 800a752:	4619      	mov	r1, r3
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f000 f907 	bl	800a968 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a760:	2302      	movs	r3, #2
 800a762:	73fb      	strb	r3, [r7, #15]
      break;
 800a764:	e00a      	b.n	800a77c <USBH_HandleControl+0x484>

    default:
      break;
 800a766:	bf00      	nop
 800a768:	e008      	b.n	800a77c <USBH_HandleControl+0x484>
      break;
 800a76a:	bf00      	nop
 800a76c:	e006      	b.n	800a77c <USBH_HandleControl+0x484>
      break;
 800a76e:	bf00      	nop
 800a770:	e004      	b.n	800a77c <USBH_HandleControl+0x484>
      break;
 800a772:	bf00      	nop
 800a774:	e002      	b.n	800a77c <USBH_HandleControl+0x484>
      break;
 800a776:	bf00      	nop
 800a778:	e000      	b.n	800a77c <USBH_HandleControl+0x484>
      break;
 800a77a:	bf00      	nop
  }

  return status;
 800a77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
 800a786:	bf00      	nop

0800a788 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af04      	add	r7, sp, #16
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	60b9      	str	r1, [r7, #8]
 800a792:	4613      	mov	r3, r2
 800a794:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a796:	79f9      	ldrb	r1, [r7, #7]
 800a798:	2300      	movs	r3, #0
 800a79a:	9303      	str	r3, [sp, #12]
 800a79c:	2308      	movs	r3, #8
 800a79e:	9302      	str	r3, [sp, #8]
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	9301      	str	r3, [sp, #4]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	9300      	str	r3, [sp, #0]
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	2200      	movs	r2, #0
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f002 fe1a 	bl	800d3e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3710      	adds	r7, #16
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b088      	sub	sp, #32
 800a7c0:	af04      	add	r7, sp, #16
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	60b9      	str	r1, [r7, #8]
 800a7c6:	4611      	mov	r1, r2
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	80fb      	strh	r3, [r7, #6]
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d001      	beq.n	800a7e0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a7dc:	2300      	movs	r3, #0
 800a7de:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7e0:	7979      	ldrb	r1, [r7, #5]
 800a7e2:	7e3b      	ldrb	r3, [r7, #24]
 800a7e4:	9303      	str	r3, [sp, #12]
 800a7e6:	88fb      	ldrh	r3, [r7, #6]
 800a7e8:	9302      	str	r3, [sp, #8]
 800a7ea:	68bb      	ldr	r3, [r7, #8]
 800a7ec:	9301      	str	r3, [sp, #4]
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	9300      	str	r3, [sp, #0]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	f002 fdf5 	bl	800d3e6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a7fc:	2300      	movs	r3, #0
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b088      	sub	sp, #32
 800a80a:	af04      	add	r7, sp, #16
 800a80c:	60f8      	str	r0, [r7, #12]
 800a80e:	60b9      	str	r1, [r7, #8]
 800a810:	4611      	mov	r1, r2
 800a812:	461a      	mov	r2, r3
 800a814:	460b      	mov	r3, r1
 800a816:	80fb      	strh	r3, [r7, #6]
 800a818:	4613      	mov	r3, r2
 800a81a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a81c:	7979      	ldrb	r1, [r7, #5]
 800a81e:	2300      	movs	r3, #0
 800a820:	9303      	str	r3, [sp, #12]
 800a822:	88fb      	ldrh	r3, [r7, #6]
 800a824:	9302      	str	r3, [sp, #8]
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	9301      	str	r3, [sp, #4]
 800a82a:	2301      	movs	r3, #1
 800a82c:	9300      	str	r3, [sp, #0]
 800a82e:	2300      	movs	r3, #0
 800a830:	2201      	movs	r2, #1
 800a832:	68f8      	ldr	r0, [r7, #12]
 800a834:	f002 fdd7 	bl	800d3e6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a838:	2300      	movs	r3, #0

}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3710      	adds	r7, #16
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b088      	sub	sp, #32
 800a846:	af04      	add	r7, sp, #16
 800a848:	60f8      	str	r0, [r7, #12]
 800a84a:	60b9      	str	r1, [r7, #8]
 800a84c:	4611      	mov	r1, r2
 800a84e:	461a      	mov	r2, r3
 800a850:	460b      	mov	r3, r1
 800a852:	80fb      	strh	r3, [r7, #6]
 800a854:	4613      	mov	r3, r2
 800a856:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d001      	beq.n	800a866 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a862:	2300      	movs	r3, #0
 800a864:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a866:	7979      	ldrb	r1, [r7, #5]
 800a868:	7e3b      	ldrb	r3, [r7, #24]
 800a86a:	9303      	str	r3, [sp, #12]
 800a86c:	88fb      	ldrh	r3, [r7, #6]
 800a86e:	9302      	str	r3, [sp, #8]
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	9301      	str	r3, [sp, #4]
 800a874:	2301      	movs	r3, #1
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	2302      	movs	r3, #2
 800a87a:	2200      	movs	r2, #0
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f002 fdb2 	bl	800d3e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a882:	2300      	movs	r3, #0
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}

0800a88c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a88c:	b580      	push	{r7, lr}
 800a88e:	b088      	sub	sp, #32
 800a890:	af04      	add	r7, sp, #16
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	4611      	mov	r1, r2
 800a898:	461a      	mov	r2, r3
 800a89a:	460b      	mov	r3, r1
 800a89c:	80fb      	strh	r3, [r7, #6]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a8a2:	7979      	ldrb	r1, [r7, #5]
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	9303      	str	r3, [sp, #12]
 800a8a8:	88fb      	ldrh	r3, [r7, #6]
 800a8aa:	9302      	str	r3, [sp, #8]
 800a8ac:	68bb      	ldr	r3, [r7, #8]
 800a8ae:	9301      	str	r3, [sp, #4]
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	9300      	str	r3, [sp, #0]
 800a8b4:	2302      	movs	r3, #2
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	68f8      	ldr	r0, [r7, #12]
 800a8ba:	f002 fd94 	bl	800d3e6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3710      	adds	r7, #16
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af04      	add	r7, sp, #16
 800a8ce:	6078      	str	r0, [r7, #4]
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	4611      	mov	r1, r2
 800a8d4:	461a      	mov	r2, r3
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	70fb      	strb	r3, [r7, #3]
 800a8da:	460b      	mov	r3, r1
 800a8dc:	70bb      	strb	r3, [r7, #2]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a8e2:	7878      	ldrb	r0, [r7, #1]
 800a8e4:	78ba      	ldrb	r2, [r7, #2]
 800a8e6:	78f9      	ldrb	r1, [r7, #3]
 800a8e8:	8b3b      	ldrh	r3, [r7, #24]
 800a8ea:	9302      	str	r3, [sp, #8]
 800a8ec:	7d3b      	ldrb	r3, [r7, #20]
 800a8ee:	9301      	str	r3, [sp, #4]
 800a8f0:	7c3b      	ldrb	r3, [r7, #16]
 800a8f2:	9300      	str	r3, [sp, #0]
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f002 fd27 	bl	800d34a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a8fc:	2300      	movs	r3, #0
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3708      	adds	r7, #8
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b082      	sub	sp, #8
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	460b      	mov	r3, r1
 800a910:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a912:	78fb      	ldrb	r3, [r7, #3]
 800a914:	4619      	mov	r1, r3
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f002 fd46 	bl	800d3a8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a91c:	2300      	movs	r3, #0
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3708      	adds	r7, #8
 800a922:	46bd      	mov	sp, r7
 800a924:	bd80      	pop	{r7, pc}

0800a926 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a926:	b580      	push	{r7, lr}
 800a928:	b084      	sub	sp, #16
 800a92a:	af00      	add	r7, sp, #0
 800a92c:	6078      	str	r0, [r7, #4]
 800a92e:	460b      	mov	r3, r1
 800a930:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f000 f836 	bl	800a9a4 <USBH_GetFreePipe>
 800a938:	4603      	mov	r3, r0
 800a93a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a93c:	89fb      	ldrh	r3, [r7, #14]
 800a93e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a942:	4293      	cmp	r3, r2
 800a944:	d00a      	beq.n	800a95c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a946:	78fa      	ldrb	r2, [r7, #3]
 800a948:	89fb      	ldrh	r3, [r7, #14]
 800a94a:	f003 030f 	and.w	r3, r3, #15
 800a94e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a952:	6879      	ldr	r1, [r7, #4]
 800a954:	33e0      	adds	r3, #224	@ 0xe0
 800a956:	009b      	lsls	r3, r3, #2
 800a958:	440b      	add	r3, r1
 800a95a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a95c:	89fb      	ldrh	r3, [r7, #14]
 800a95e:	b2db      	uxtb	r3, r3
}
 800a960:	4618      	mov	r0, r3
 800a962:	3710      	adds	r7, #16
 800a964:	46bd      	mov	sp, r7
 800a966:	bd80      	pop	{r7, pc}

0800a968 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
 800a970:	460b      	mov	r3, r1
 800a972:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a974:	78fb      	ldrb	r3, [r7, #3]
 800a976:	2b0f      	cmp	r3, #15
 800a978:	d80d      	bhi.n	800a996 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a97a:	78fb      	ldrb	r3, [r7, #3]
 800a97c:	687a      	ldr	r2, [r7, #4]
 800a97e:	33e0      	adds	r3, #224	@ 0xe0
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	4413      	add	r3, r2
 800a984:	685a      	ldr	r2, [r3, #4]
 800a986:	78fb      	ldrb	r3, [r7, #3]
 800a988:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	33e0      	adds	r3, #224	@ 0xe0
 800a990:	009b      	lsls	r3, r3, #2
 800a992:	440b      	add	r3, r1
 800a994:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a996:	2300      	movs	r3, #0
}
 800a998:	4618      	mov	r0, r3
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]
 800a9b4:	e00f      	b.n	800a9d6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a9b6:	7bfb      	ldrb	r3, [r7, #15]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	33e0      	adds	r3, #224	@ 0xe0
 800a9bc:	009b      	lsls	r3, r3, #2
 800a9be:	4413      	add	r3, r2
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d102      	bne.n	800a9d0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a9ca:	7bfb      	ldrb	r3, [r7, #15]
 800a9cc:	b29b      	uxth	r3, r3
 800a9ce:	e007      	b.n	800a9e0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	73fb      	strb	r3, [r7, #15]
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	2b0f      	cmp	r3, #15
 800a9da:	d9ec      	bls.n	800a9b6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a9dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3714      	adds	r7, #20
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ea:	4770      	bx	lr

0800a9ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b085      	sub	sp, #20
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a9fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a9fe:	2b84      	cmp	r3, #132	@ 0x84
 800aa00:	d005      	beq.n	800aa0e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800aa02:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	3303      	adds	r3, #3
 800aa0c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
}
 800aa10:	4618      	mov	r0, r3
 800aa12:	3714      	adds	r7, #20
 800aa14:	46bd      	mov	sp, r7
 800aa16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1a:	4770      	bx	lr

0800aa1c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa22:	f3ef 8305 	mrs	r3, IPSR
 800aa26:	607b      	str	r3, [r7, #4]
  return(result);
 800aa28:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	bf14      	ite	ne
 800aa2e:	2301      	movne	r3, #1
 800aa30:	2300      	moveq	r3, #0
 800aa32:	b2db      	uxtb	r3, r3
}
 800aa34:	4618      	mov	r0, r3
 800aa36:	370c      	adds	r7, #12
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3e:	4770      	bx	lr

0800aa40 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800aa44:	f001 f922 	bl	800bc8c <vTaskStartScheduler>
  
  return osOK;
 800aa48:	2300      	movs	r3, #0
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	bd80      	pop	{r7, pc}

0800aa4e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800aa4e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa50:	b089      	sub	sp, #36	@ 0x24
 800aa52:	af04      	add	r7, sp, #16
 800aa54:	6078      	str	r0, [r7, #4]
 800aa56:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	695b      	ldr	r3, [r3, #20]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d020      	beq.n	800aaa2 <osThreadCreate+0x54>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	699b      	ldr	r3, [r3, #24]
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d01c      	beq.n	800aaa2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	685c      	ldr	r4, [r3, #4]
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	691e      	ldr	r6, [r3, #16]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	f7ff ffb6 	bl	800a9ec <makeFreeRtosPriority>
 800aa80:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	695b      	ldr	r3, [r3, #20]
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aa8a:	9202      	str	r2, [sp, #8]
 800aa8c:	9301      	str	r3, [sp, #4]
 800aa8e:	9100      	str	r1, [sp, #0]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	4632      	mov	r2, r6
 800aa94:	4629      	mov	r1, r5
 800aa96:	4620      	mov	r0, r4
 800aa98:	f000 ff20 	bl	800b8dc <xTaskCreateStatic>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	60fb      	str	r3, [r7, #12]
 800aaa0:	e01c      	b.n	800aadc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	685c      	ldr	r4, [r3, #4]
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aaae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800aab6:	4618      	mov	r0, r3
 800aab8:	f7ff ff98 	bl	800a9ec <makeFreeRtosPriority>
 800aabc:	4602      	mov	r2, r0
 800aabe:	f107 030c 	add.w	r3, r7, #12
 800aac2:	9301      	str	r3, [sp, #4]
 800aac4:	9200      	str	r2, [sp, #0]
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	4632      	mov	r2, r6
 800aaca:	4629      	mov	r1, r5
 800aacc:	4620      	mov	r0, r4
 800aace:	f000 ff65 	bl	800b99c <xTaskCreate>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b01      	cmp	r3, #1
 800aad6:	d001      	beq.n	800aadc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800aad8:	2300      	movs	r3, #0
 800aada:	e000      	b.n	800aade <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800aadc:	68fb      	ldr	r3, [r7, #12]
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800aae6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800aae6:	b580      	push	{r7, lr}
 800aae8:	b084      	sub	sp, #16
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d001      	beq.n	800aafc <osDelay+0x16>
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	e000      	b.n	800aafe <osDelay+0x18>
 800aafc:	2301      	movs	r3, #1
 800aafe:	4618      	mov	r0, r3
 800ab00:	f001 f88e 	bl	800bc20 <vTaskDelay>
  
  return osOK;
 800ab04:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ab0e:	b590      	push	{r4, r7, lr}
 800ab10:	b085      	sub	sp, #20
 800ab12:	af02      	add	r7, sp, #8
 800ab14:	6078      	str	r0, [r7, #4]
 800ab16:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	689b      	ldr	r3, [r3, #8]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d011      	beq.n	800ab44 <osMessageCreate+0x36>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d00d      	beq.n	800ab44 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6859      	ldr	r1, [r3, #4]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	689a      	ldr	r2, [r3, #8]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	2400      	movs	r4, #0
 800ab3a:	9400      	str	r4, [sp, #0]
 800ab3c:	f000 f9e2 	bl	800af04 <xQueueGenericCreateStatic>
 800ab40:	4603      	mov	r3, r0
 800ab42:	e008      	b.n	800ab56 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6818      	ldr	r0, [r3, #0]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	4619      	mov	r1, r3
 800ab50:	f000 fa55 	bl	800affe <xQueueGenericCreate>
 800ab54:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	370c      	adds	r7, #12
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd90      	pop	{r4, r7, pc}
	...

0800ab60 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	60f8      	str	r0, [r7, #12]
 800ab68:	60b9      	str	r1, [r7, #8]
 800ab6a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <osMessagePut+0x1e>
    ticks = 1;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ab7e:	f7ff ff4d 	bl	800aa1c <inHandlerMode>
 800ab82:	4603      	mov	r3, r0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d018      	beq.n	800abba <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ab88:	f107 0210 	add.w	r2, r7, #16
 800ab8c:	f107 0108 	add.w	r1, r7, #8
 800ab90:	2300      	movs	r3, #0
 800ab92:	68f8      	ldr	r0, [r7, #12]
 800ab94:	f000 fb90 	bl	800b2b8 <xQueueGenericSendFromISR>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d001      	beq.n	800aba2 <osMessagePut+0x42>
      return osErrorOS;
 800ab9e:	23ff      	movs	r3, #255	@ 0xff
 800aba0:	e018      	b.n	800abd4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d014      	beq.n	800abd2 <osMessagePut+0x72>
 800aba8:	4b0c      	ldr	r3, [pc, #48]	@ (800abdc <osMessagePut+0x7c>)
 800abaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abae:	601a      	str	r2, [r3, #0]
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	f3bf 8f6f 	isb	sy
 800abb8:	e00b      	b.n	800abd2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800abba:	f107 0108 	add.w	r1, r7, #8
 800abbe:	2300      	movs	r3, #0
 800abc0:	697a      	ldr	r2, [r7, #20]
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 fa76 	bl	800b0b4 <xQueueGenericSend>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d001      	beq.n	800abd2 <osMessagePut+0x72>
      return osErrorOS;
 800abce:	23ff      	movs	r3, #255	@ 0xff
 800abd0:	e000      	b.n	800abd4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3718      	adds	r7, #24
 800abd8:	46bd      	mov	sp, r7
 800abda:	bd80      	pop	{r7, pc}
 800abdc:	e000ed04 	.word	0xe000ed04

0800abe0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800abe0:	b590      	push	{r4, r7, lr}
 800abe2:	b08b      	sub	sp, #44	@ 0x2c
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	60f8      	str	r0, [r7, #12]
 800abe8:	60b9      	str	r1, [r7, #8]
 800abea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800abf0:	2300      	movs	r3, #0
 800abf2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800abf4:	68bb      	ldr	r3, [r7, #8]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d10a      	bne.n	800ac10 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800abfa:	2380      	movs	r3, #128	@ 0x80
 800abfc:	617b      	str	r3, [r7, #20]
    return event;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	461c      	mov	r4, r3
 800ac02:	f107 0314 	add.w	r3, r7, #20
 800ac06:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ac0e:	e054      	b.n	800acba <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ac10:	2300      	movs	r3, #0
 800ac12:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac1e:	d103      	bne.n	800ac28 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ac20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ac24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac26:	e009      	b.n	800ac3c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d006      	beq.n	800ac3c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800ac32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d101      	bne.n	800ac3c <osMessageGet+0x5c>
      ticks = 1;
 800ac38:	2301      	movs	r3, #1
 800ac3a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ac3c:	f7ff feee 	bl	800aa1c <inHandlerMode>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d01c      	beq.n	800ac80 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ac46:	f107 0220 	add.w	r2, r7, #32
 800ac4a:	f107 0314 	add.w	r3, r7, #20
 800ac4e:	3304      	adds	r3, #4
 800ac50:	4619      	mov	r1, r3
 800ac52:	68b8      	ldr	r0, [r7, #8]
 800ac54:	f000 fcb0 	bl	800b5b8 <xQueueReceiveFromISR>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b01      	cmp	r3, #1
 800ac5c:	d102      	bne.n	800ac64 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ac5e:	2310      	movs	r3, #16
 800ac60:	617b      	str	r3, [r7, #20]
 800ac62:	e001      	b.n	800ac68 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ac64:	2300      	movs	r3, #0
 800ac66:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ac68:	6a3b      	ldr	r3, [r7, #32]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d01d      	beq.n	800acaa <osMessageGet+0xca>
 800ac6e:	4b15      	ldr	r3, [pc, #84]	@ (800acc4 <osMessageGet+0xe4>)
 800ac70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac74:	601a      	str	r2, [r3, #0]
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	f3bf 8f6f 	isb	sy
 800ac7e:	e014      	b.n	800acaa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ac80:	f107 0314 	add.w	r3, r7, #20
 800ac84:	3304      	adds	r3, #4
 800ac86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac88:	4619      	mov	r1, r3
 800ac8a:	68b8      	ldr	r0, [r7, #8]
 800ac8c:	f000 fbb2 	bl	800b3f4 <xQueueReceive>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b01      	cmp	r3, #1
 800ac94:	d102      	bne.n	800ac9c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800ac96:	2310      	movs	r3, #16
 800ac98:	617b      	str	r3, [r7, #20]
 800ac9a:	e006      	b.n	800acaa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800ac9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <osMessageGet+0xc6>
 800aca2:	2300      	movs	r3, #0
 800aca4:	e000      	b.n	800aca8 <osMessageGet+0xc8>
 800aca6:	2340      	movs	r3, #64	@ 0x40
 800aca8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	461c      	mov	r4, r3
 800acae:	f107 0314 	add.w	r3, r7, #20
 800acb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800acb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800acba:	68f8      	ldr	r0, [r7, #12]
 800acbc:	372c      	adds	r7, #44	@ 0x2c
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd90      	pop	{r4, r7, pc}
 800acc2:	bf00      	nop
 800acc4:	e000ed04 	.word	0xe000ed04

0800acc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f103 0208 	add.w	r2, r3, #8
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ace0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f103 0208 	add.w	r2, r3, #8
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f103 0208 	add.w	r2, r3, #8
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2200      	movs	r2, #0
 800acfa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800acfc:	bf00      	nop
 800acfe:	370c      	adds	r7, #12
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2200      	movs	r2, #0
 800ad14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ad16:	bf00      	nop
 800ad18:	370c      	adds	r7, #12
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad20:	4770      	bx	lr

0800ad22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad22:	b480      	push	{r7}
 800ad24:	b085      	sub	sp, #20
 800ad26:	af00      	add	r7, sp, #0
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	68fa      	ldr	r2, [r7, #12]
 800ad36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	689a      	ldr	r2, [r3, #8]
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	683a      	ldr	r2, [r7, #0]
 800ad46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	683a      	ldr	r2, [r7, #0]
 800ad4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	687a      	ldr	r2, [r7, #4]
 800ad52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	601a      	str	r2, [r3, #0]
}
 800ad5e:	bf00      	nop
 800ad60:	3714      	adds	r7, #20
 800ad62:	46bd      	mov	sp, r7
 800ad64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad68:	4770      	bx	lr

0800ad6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ad6a:	b480      	push	{r7}
 800ad6c:	b085      	sub	sp, #20
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad80:	d103      	bne.n	800ad8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	691b      	ldr	r3, [r3, #16]
 800ad86:	60fb      	str	r3, [r7, #12]
 800ad88:	e00c      	b.n	800ada4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3308      	adds	r3, #8
 800ad8e:	60fb      	str	r3, [r7, #12]
 800ad90:	e002      	b.n	800ad98 <vListInsert+0x2e>
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	60fb      	str	r3, [r7, #12]
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	685b      	ldr	r3, [r3, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	68ba      	ldr	r2, [r7, #8]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d2f6      	bcs.n	800ad92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	685a      	ldr	r2, [r3, #4]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	1c5a      	adds	r2, r3, #1
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	601a      	str	r2, [r3, #0]
}
 800add0:	bf00      	nop
 800add2:	3714      	adds	r7, #20
 800add4:	46bd      	mov	sp, r7
 800add6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adda:	4770      	bx	lr

0800addc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800addc:	b480      	push	{r7}
 800adde:	b085      	sub	sp, #20
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	691b      	ldr	r3, [r3, #16]
 800ade8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	685b      	ldr	r3, [r3, #4]
 800adee:	687a      	ldr	r2, [r7, #4]
 800adf0:	6892      	ldr	r2, [r2, #8]
 800adf2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	689b      	ldr	r3, [r3, #8]
 800adf8:	687a      	ldr	r2, [r7, #4]
 800adfa:	6852      	ldr	r2, [r2, #4]
 800adfc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	685b      	ldr	r3, [r3, #4]
 800ae02:	687a      	ldr	r2, [r7, #4]
 800ae04:	429a      	cmp	r2, r3
 800ae06:	d103      	bne.n	800ae10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	689a      	ldr	r2, [r3, #8]
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	1e5a      	subs	r2, r3, #1
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681b      	ldr	r3, [r3, #0]
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d10b      	bne.n	800ae5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ae44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae48:	f383 8811 	msr	BASEPRI, r3
 800ae4c:	f3bf 8f6f 	isb	sy
 800ae50:	f3bf 8f4f 	dsb	sy
 800ae54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ae56:	bf00      	nop
 800ae58:	bf00      	nop
 800ae5a:	e7fd      	b.n	800ae58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800ae5c:	f001 fd84 	bl	800c968 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae68:	68f9      	ldr	r1, [r7, #12]
 800ae6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae6c:	fb01 f303 	mul.w	r3, r1, r3
 800ae70:	441a      	add	r2, r3
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	681a      	ldr	r2, [r3, #0]
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681a      	ldr	r2, [r3, #0]
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae8c:	3b01      	subs	r3, #1
 800ae8e:	68f9      	ldr	r1, [r7, #12]
 800ae90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ae92:	fb01 f303 	mul.w	r3, r1, r3
 800ae96:	441a      	add	r2, r3
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	22ff      	movs	r2, #255	@ 0xff
 800aea0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	22ff      	movs	r2, #255	@ 0xff
 800aea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d114      	bne.n	800aedc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	691b      	ldr	r3, [r3, #16]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d01a      	beq.n	800aef0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	3310      	adds	r3, #16
 800aebe:	4618      	mov	r0, r3
 800aec0:	f001 f954 	bl	800c16c <xTaskRemoveFromEventList>
 800aec4:	4603      	mov	r3, r0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d012      	beq.n	800aef0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800aeca:	4b0d      	ldr	r3, [pc, #52]	@ (800af00 <xQueueGenericReset+0xd0>)
 800aecc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	f3bf 8f4f 	dsb	sy
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	e009      	b.n	800aef0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	3310      	adds	r3, #16
 800aee0:	4618      	mov	r0, r3
 800aee2:	f7ff fef1 	bl	800acc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	3324      	adds	r3, #36	@ 0x24
 800aeea:	4618      	mov	r0, r3
 800aeec:	f7ff feec 	bl	800acc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800aef0:	f001 fd6c 	bl	800c9cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800aef4:	2301      	movs	r3, #1
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	e000ed04 	.word	0xe000ed04

0800af04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800af04:	b580      	push	{r7, lr}
 800af06:	b08e      	sub	sp, #56	@ 0x38
 800af08:	af02      	add	r7, sp, #8
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
 800af10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d10b      	bne.n	800af30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800af18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af1c:	f383 8811 	msr	BASEPRI, r3
 800af20:	f3bf 8f6f 	isb	sy
 800af24:	f3bf 8f4f 	dsb	sy
 800af28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af2a:	bf00      	nop
 800af2c:	bf00      	nop
 800af2e:	e7fd      	b.n	800af2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d10b      	bne.n	800af4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800af36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af3a:	f383 8811 	msr	BASEPRI, r3
 800af3e:	f3bf 8f6f 	isb	sy
 800af42:	f3bf 8f4f 	dsb	sy
 800af46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af48:	bf00      	nop
 800af4a:	bf00      	nop
 800af4c:	e7fd      	b.n	800af4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d002      	beq.n	800af5a <xQueueGenericCreateStatic+0x56>
 800af54:	68bb      	ldr	r3, [r7, #8]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d001      	beq.n	800af5e <xQueueGenericCreateStatic+0x5a>
 800af5a:	2301      	movs	r3, #1
 800af5c:	e000      	b.n	800af60 <xQueueGenericCreateStatic+0x5c>
 800af5e:	2300      	movs	r3, #0
 800af60:	2b00      	cmp	r3, #0
 800af62:	d10b      	bne.n	800af7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800af64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af68:	f383 8811 	msr	BASEPRI, r3
 800af6c:	f3bf 8f6f 	isb	sy
 800af70:	f3bf 8f4f 	dsb	sy
 800af74:	623b      	str	r3, [r7, #32]
}
 800af76:	bf00      	nop
 800af78:	bf00      	nop
 800af7a:	e7fd      	b.n	800af78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d102      	bne.n	800af88 <xQueueGenericCreateStatic+0x84>
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <xQueueGenericCreateStatic+0x88>
 800af88:	2301      	movs	r3, #1
 800af8a:	e000      	b.n	800af8e <xQueueGenericCreateStatic+0x8a>
 800af8c:	2300      	movs	r3, #0
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10b      	bne.n	800afaa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	61fb      	str	r3, [r7, #28]
}
 800afa4:	bf00      	nop
 800afa6:	bf00      	nop
 800afa8:	e7fd      	b.n	800afa6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800afaa:	2348      	movs	r3, #72	@ 0x48
 800afac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	2b48      	cmp	r3, #72	@ 0x48
 800afb2:	d00b      	beq.n	800afcc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800afb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afb8:	f383 8811 	msr	BASEPRI, r3
 800afbc:	f3bf 8f6f 	isb	sy
 800afc0:	f3bf 8f4f 	dsb	sy
 800afc4:	61bb      	str	r3, [r7, #24]
}
 800afc6:	bf00      	nop
 800afc8:	bf00      	nop
 800afca:	e7fd      	b.n	800afc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800afcc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800afd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00d      	beq.n	800aff4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800afd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800afe0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800afe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	4613      	mov	r3, r2
 800afea:	687a      	ldr	r2, [r7, #4]
 800afec:	68b9      	ldr	r1, [r7, #8]
 800afee:	68f8      	ldr	r0, [r7, #12]
 800aff0:	f000 f840 	bl	800b074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3730      	adds	r7, #48	@ 0x30
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}

0800affe <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800affe:	b580      	push	{r7, lr}
 800b000:	b08a      	sub	sp, #40	@ 0x28
 800b002:	af02      	add	r7, sp, #8
 800b004:	60f8      	str	r0, [r7, #12]
 800b006:	60b9      	str	r1, [r7, #8]
 800b008:	4613      	mov	r3, r2
 800b00a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d10b      	bne.n	800b02a <xQueueGenericCreate+0x2c>
	__asm volatile
 800b012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b016:	f383 8811 	msr	BASEPRI, r3
 800b01a:	f3bf 8f6f 	isb	sy
 800b01e:	f3bf 8f4f 	dsb	sy
 800b022:	613b      	str	r3, [r7, #16]
}
 800b024:	bf00      	nop
 800b026:	bf00      	nop
 800b028:	e7fd      	b.n	800b026 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	68ba      	ldr	r2, [r7, #8]
 800b02e:	fb02 f303 	mul.w	r3, r2, r3
 800b032:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	3348      	adds	r3, #72	@ 0x48
 800b038:	4618      	mov	r0, r3
 800b03a:	f001 fdb7 	bl	800cbac <pvPortMalloc>
 800b03e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b040:	69bb      	ldr	r3, [r7, #24]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d011      	beq.n	800b06a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b046:	69bb      	ldr	r3, [r7, #24]
 800b048:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	3348      	adds	r3, #72	@ 0x48
 800b04e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	2200      	movs	r2, #0
 800b054:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b058:	79fa      	ldrb	r2, [r7, #7]
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	4613      	mov	r3, r2
 800b060:	697a      	ldr	r2, [r7, #20]
 800b062:	68b9      	ldr	r1, [r7, #8]
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f000 f805 	bl	800b074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b06a:	69bb      	ldr	r3, [r7, #24]
	}
 800b06c:	4618      	mov	r0, r3
 800b06e:	3720      	adds	r7, #32
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	607a      	str	r2, [r7, #4]
 800b080:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	2b00      	cmp	r3, #0
 800b086:	d103      	bne.n	800b090 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	601a      	str	r2, [r3, #0]
 800b08e:	e002      	b.n	800b096 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	687a      	ldr	r2, [r7, #4]
 800b094:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b096:	69bb      	ldr	r3, [r7, #24]
 800b098:	68fa      	ldr	r2, [r7, #12]
 800b09a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	68ba      	ldr	r2, [r7, #8]
 800b0a0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0a2:	2101      	movs	r1, #1
 800b0a4:	69b8      	ldr	r0, [r7, #24]
 800b0a6:	f7ff fec3 	bl	800ae30 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0aa:	bf00      	nop
 800b0ac:	3710      	adds	r7, #16
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b08e      	sub	sp, #56	@ 0x38
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
 800b0c0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b0ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10b      	bne.n	800b0e8 <xQueueGenericSend+0x34>
	__asm volatile
 800b0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0d4:	f383 8811 	msr	BASEPRI, r3
 800b0d8:	f3bf 8f6f 	isb	sy
 800b0dc:	f3bf 8f4f 	dsb	sy
 800b0e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b0e2:	bf00      	nop
 800b0e4:	bf00      	nop
 800b0e6:	e7fd      	b.n	800b0e4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d103      	bne.n	800b0f6 <xQueueGenericSend+0x42>
 800b0ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d101      	bne.n	800b0fa <xQueueGenericSend+0x46>
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e000      	b.n	800b0fc <xQueueGenericSend+0x48>
 800b0fa:	2300      	movs	r3, #0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d10b      	bne.n	800b118 <xQueueGenericSend+0x64>
	__asm volatile
 800b100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b104:	f383 8811 	msr	BASEPRI, r3
 800b108:	f3bf 8f6f 	isb	sy
 800b10c:	f3bf 8f4f 	dsb	sy
 800b110:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b112:	bf00      	nop
 800b114:	bf00      	nop
 800b116:	e7fd      	b.n	800b114 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	2b02      	cmp	r3, #2
 800b11c:	d103      	bne.n	800b126 <xQueueGenericSend+0x72>
 800b11e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b120:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b122:	2b01      	cmp	r3, #1
 800b124:	d101      	bne.n	800b12a <xQueueGenericSend+0x76>
 800b126:	2301      	movs	r3, #1
 800b128:	e000      	b.n	800b12c <xQueueGenericSend+0x78>
 800b12a:	2300      	movs	r3, #0
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10b      	bne.n	800b148 <xQueueGenericSend+0x94>
	__asm volatile
 800b130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b134:	f383 8811 	msr	BASEPRI, r3
 800b138:	f3bf 8f6f 	isb	sy
 800b13c:	f3bf 8f4f 	dsb	sy
 800b140:	623b      	str	r3, [r7, #32]
}
 800b142:	bf00      	nop
 800b144:	bf00      	nop
 800b146:	e7fd      	b.n	800b144 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b148:	f001 f9d2 	bl	800c4f0 <xTaskGetSchedulerState>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d102      	bne.n	800b158 <xQueueGenericSend+0xa4>
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d101      	bne.n	800b15c <xQueueGenericSend+0xa8>
 800b158:	2301      	movs	r3, #1
 800b15a:	e000      	b.n	800b15e <xQueueGenericSend+0xaa>
 800b15c:	2300      	movs	r3, #0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10b      	bne.n	800b17a <xQueueGenericSend+0xc6>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	61fb      	str	r3, [r7, #28]
}
 800b174:	bf00      	nop
 800b176:	bf00      	nop
 800b178:	e7fd      	b.n	800b176 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b17a:	f001 fbf5 	bl	800c968 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b17e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b180:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b186:	429a      	cmp	r2, r3
 800b188:	d302      	bcc.n	800b190 <xQueueGenericSend+0xdc>
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b02      	cmp	r3, #2
 800b18e:	d129      	bne.n	800b1e4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b190:	683a      	ldr	r2, [r7, #0]
 800b192:	68b9      	ldr	r1, [r7, #8]
 800b194:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b196:	f000 fa91 	bl	800b6bc <prvCopyDataToQueue>
 800b19a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b19c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b19e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d010      	beq.n	800b1c6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b1a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b1a6:	3324      	adds	r3, #36	@ 0x24
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f000 ffdf 	bl	800c16c <xTaskRemoveFromEventList>
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d013      	beq.n	800b1dc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b1b4:	4b3f      	ldr	r3, [pc, #252]	@ (800b2b4 <xQueueGenericSend+0x200>)
 800b1b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1ba:	601a      	str	r2, [r3, #0]
 800b1bc:	f3bf 8f4f 	dsb	sy
 800b1c0:	f3bf 8f6f 	isb	sy
 800b1c4:	e00a      	b.n	800b1dc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b1c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d007      	beq.n	800b1dc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b1cc:	4b39      	ldr	r3, [pc, #228]	@ (800b2b4 <xQueueGenericSend+0x200>)
 800b1ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1d2:	601a      	str	r2, [r3, #0]
 800b1d4:	f3bf 8f4f 	dsb	sy
 800b1d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b1dc:	f001 fbf6 	bl	800c9cc <vPortExitCritical>
				return pdPASS;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e063      	b.n	800b2ac <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d103      	bne.n	800b1f2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b1ea:	f001 fbef 	bl	800c9cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	e05c      	b.n	800b2ac <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b1f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d106      	bne.n	800b206 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b1f8:	f107 0314 	add.w	r3, r7, #20
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f001 f819 	bl	800c234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b202:	2301      	movs	r3, #1
 800b204:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b206:	f001 fbe1 	bl	800c9cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b20a:	f000 fda1 	bl	800bd50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b20e:	f001 fbab 	bl	800c968 <vPortEnterCritical>
 800b212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b214:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b218:	b25b      	sxtb	r3, r3
 800b21a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b21e:	d103      	bne.n	800b228 <xQueueGenericSend+0x174>
 800b220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b22a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b22e:	b25b      	sxtb	r3, r3
 800b230:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b234:	d103      	bne.n	800b23e <xQueueGenericSend+0x18a>
 800b236:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b238:	2200      	movs	r2, #0
 800b23a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b23e:	f001 fbc5 	bl	800c9cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b242:	1d3a      	adds	r2, r7, #4
 800b244:	f107 0314 	add.w	r3, r7, #20
 800b248:	4611      	mov	r1, r2
 800b24a:	4618      	mov	r0, r3
 800b24c:	f001 f808 	bl	800c260 <xTaskCheckForTimeOut>
 800b250:	4603      	mov	r3, r0
 800b252:	2b00      	cmp	r3, #0
 800b254:	d124      	bne.n	800b2a0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b256:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b258:	f000 fb28 	bl	800b8ac <prvIsQueueFull>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d018      	beq.n	800b294 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b264:	3310      	adds	r3, #16
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	4611      	mov	r1, r2
 800b26a:	4618      	mov	r0, r3
 800b26c:	f000 ff58 	bl	800c120 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b270:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b272:	f000 fab3 	bl	800b7dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b276:	f000 fd79 	bl	800bd6c <xTaskResumeAll>
 800b27a:	4603      	mov	r3, r0
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	f47f af7c 	bne.w	800b17a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800b282:	4b0c      	ldr	r3, [pc, #48]	@ (800b2b4 <xQueueGenericSend+0x200>)
 800b284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b288:	601a      	str	r2, [r3, #0]
 800b28a:	f3bf 8f4f 	dsb	sy
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	e772      	b.n	800b17a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b294:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b296:	f000 faa1 	bl	800b7dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b29a:	f000 fd67 	bl	800bd6c <xTaskResumeAll>
 800b29e:	e76c      	b.n	800b17a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b2a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b2a2:	f000 fa9b 	bl	800b7dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2a6:	f000 fd61 	bl	800bd6c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b2aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3738      	adds	r7, #56	@ 0x38
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	e000ed04 	.word	0xe000ed04

0800b2b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b090      	sub	sp, #64	@ 0x40
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	60f8      	str	r0, [r7, #12]
 800b2c0:	60b9      	str	r1, [r7, #8]
 800b2c2:	607a      	str	r2, [r7, #4]
 800b2c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800b2ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d10b      	bne.n	800b2e8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800b2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2d4:	f383 8811 	msr	BASEPRI, r3
 800b2d8:	f3bf 8f6f 	isb	sy
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800b2e2:	bf00      	nop
 800b2e4:	bf00      	nop
 800b2e6:	e7fd      	b.n	800b2e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d103      	bne.n	800b2f6 <xQueueGenericSendFromISR+0x3e>
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <xQueueGenericSendFromISR+0x42>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e000      	b.n	800b2fc <xQueueGenericSendFromISR+0x44>
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d10b      	bne.n	800b318 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800b300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b304:	f383 8811 	msr	BASEPRI, r3
 800b308:	f3bf 8f6f 	isb	sy
 800b30c:	f3bf 8f4f 	dsb	sy
 800b310:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800b312:	bf00      	nop
 800b314:	bf00      	nop
 800b316:	e7fd      	b.n	800b314 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	2b02      	cmp	r3, #2
 800b31c:	d103      	bne.n	800b326 <xQueueGenericSendFromISR+0x6e>
 800b31e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b322:	2b01      	cmp	r3, #1
 800b324:	d101      	bne.n	800b32a <xQueueGenericSendFromISR+0x72>
 800b326:	2301      	movs	r3, #1
 800b328:	e000      	b.n	800b32c <xQueueGenericSendFromISR+0x74>
 800b32a:	2300      	movs	r3, #0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d10b      	bne.n	800b348 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800b330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b334:	f383 8811 	msr	BASEPRI, r3
 800b338:	f3bf 8f6f 	isb	sy
 800b33c:	f3bf 8f4f 	dsb	sy
 800b340:	623b      	str	r3, [r7, #32]
}
 800b342:	bf00      	nop
 800b344:	bf00      	nop
 800b346:	e7fd      	b.n	800b344 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b348:	f001 fbee 	bl	800cb28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800b34c:	f3ef 8211 	mrs	r2, BASEPRI
 800b350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b354:	f383 8811 	msr	BASEPRI, r3
 800b358:	f3bf 8f6f 	isb	sy
 800b35c:	f3bf 8f4f 	dsb	sy
 800b360:	61fa      	str	r2, [r7, #28]
 800b362:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800b364:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b366:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b368:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b36c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b36e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b370:	429a      	cmp	r2, r3
 800b372:	d302      	bcc.n	800b37a <xQueueGenericSendFromISR+0xc2>
 800b374:	683b      	ldr	r3, [r7, #0]
 800b376:	2b02      	cmp	r3, #2
 800b378:	d12f      	bne.n	800b3da <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b37c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b380:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b388:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b38a:	683a      	ldr	r2, [r7, #0]
 800b38c:	68b9      	ldr	r1, [r7, #8]
 800b38e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b390:	f000 f994 	bl	800b6bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b394:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800b398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b39c:	d112      	bne.n	800b3c4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d016      	beq.n	800b3d4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a8:	3324      	adds	r3, #36	@ 0x24
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	f000 fede 	bl	800c16c <xTaskRemoveFromEventList>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d00e      	beq.n	800b3d4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00b      	beq.n	800b3d4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	601a      	str	r2, [r3, #0]
 800b3c2:	e007      	b.n	800b3d4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800b3c8:	3301      	adds	r3, #1
 800b3ca:	b2db      	uxtb	r3, r3
 800b3cc:	b25a      	sxtb	r2, r3
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b3d8:	e001      	b.n	800b3de <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3e0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b3e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3740      	adds	r7, #64	@ 0x40
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08c      	sub	sp, #48	@ 0x30
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b400:	2300      	movs	r3, #0
 800b402:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d10b      	bne.n	800b426 <xQueueReceive+0x32>
	__asm volatile
 800b40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b412:	f383 8811 	msr	BASEPRI, r3
 800b416:	f3bf 8f6f 	isb	sy
 800b41a:	f3bf 8f4f 	dsb	sy
 800b41e:	623b      	str	r3, [r7, #32]
}
 800b420:	bf00      	nop
 800b422:	bf00      	nop
 800b424:	e7fd      	b.n	800b422 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d103      	bne.n	800b434 <xQueueReceive+0x40>
 800b42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b42e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b430:	2b00      	cmp	r3, #0
 800b432:	d101      	bne.n	800b438 <xQueueReceive+0x44>
 800b434:	2301      	movs	r3, #1
 800b436:	e000      	b.n	800b43a <xQueueReceive+0x46>
 800b438:	2300      	movs	r3, #0
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d10b      	bne.n	800b456 <xQueueReceive+0x62>
	__asm volatile
 800b43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b442:	f383 8811 	msr	BASEPRI, r3
 800b446:	f3bf 8f6f 	isb	sy
 800b44a:	f3bf 8f4f 	dsb	sy
 800b44e:	61fb      	str	r3, [r7, #28]
}
 800b450:	bf00      	nop
 800b452:	bf00      	nop
 800b454:	e7fd      	b.n	800b452 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b456:	f001 f84b 	bl	800c4f0 <xTaskGetSchedulerState>
 800b45a:	4603      	mov	r3, r0
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d102      	bne.n	800b466 <xQueueReceive+0x72>
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2b00      	cmp	r3, #0
 800b464:	d101      	bne.n	800b46a <xQueueReceive+0x76>
 800b466:	2301      	movs	r3, #1
 800b468:	e000      	b.n	800b46c <xQueueReceive+0x78>
 800b46a:	2300      	movs	r3, #0
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d10b      	bne.n	800b488 <xQueueReceive+0x94>
	__asm volatile
 800b470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b474:	f383 8811 	msr	BASEPRI, r3
 800b478:	f3bf 8f6f 	isb	sy
 800b47c:	f3bf 8f4f 	dsb	sy
 800b480:	61bb      	str	r3, [r7, #24]
}
 800b482:	bf00      	nop
 800b484:	bf00      	nop
 800b486:	e7fd      	b.n	800b484 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b488:	f001 fa6e 	bl	800c968 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b490:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b494:	2b00      	cmp	r3, #0
 800b496:	d01f      	beq.n	800b4d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b498:	68b9      	ldr	r1, [r7, #8]
 800b49a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b49c:	f000 f978 	bl	800b790 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4a2:	1e5a      	subs	r2, r3, #1
 800b4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00f      	beq.n	800b4d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b4b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4b2:	3310      	adds	r3, #16
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f000 fe59 	bl	800c16c <xTaskRemoveFromEventList>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d007      	beq.n	800b4d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b4c0:	4b3c      	ldr	r3, [pc, #240]	@ (800b5b4 <xQueueReceive+0x1c0>)
 800b4c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b4c6:	601a      	str	r2, [r3, #0]
 800b4c8:	f3bf 8f4f 	dsb	sy
 800b4cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b4d0:	f001 fa7c 	bl	800c9cc <vPortExitCritical>
				return pdPASS;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e069      	b.n	800b5ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d103      	bne.n	800b4e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b4de:	f001 fa75 	bl	800c9cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	e062      	b.n	800b5ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b4e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d106      	bne.n	800b4fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b4ec:	f107 0310 	add.w	r3, r7, #16
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f000 fe9f 	bl	800c234 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b4fa:	f001 fa67 	bl	800c9cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b4fe:	f000 fc27 	bl	800bd50 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b502:	f001 fa31 	bl	800c968 <vPortEnterCritical>
 800b506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b508:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b50c:	b25b      	sxtb	r3, r3
 800b50e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b512:	d103      	bne.n	800b51c <xQueueReceive+0x128>
 800b514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b516:	2200      	movs	r2, #0
 800b518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b51c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b51e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b522:	b25b      	sxtb	r3, r3
 800b524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b528:	d103      	bne.n	800b532 <xQueueReceive+0x13e>
 800b52a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b52c:	2200      	movs	r2, #0
 800b52e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b532:	f001 fa4b 	bl	800c9cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b536:	1d3a      	adds	r2, r7, #4
 800b538:	f107 0310 	add.w	r3, r7, #16
 800b53c:	4611      	mov	r1, r2
 800b53e:	4618      	mov	r0, r3
 800b540:	f000 fe8e 	bl	800c260 <xTaskCheckForTimeOut>
 800b544:	4603      	mov	r3, r0
 800b546:	2b00      	cmp	r3, #0
 800b548:	d123      	bne.n	800b592 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b54a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b54c:	f000 f998 	bl	800b880 <prvIsQueueEmpty>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d017      	beq.n	800b586 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b558:	3324      	adds	r3, #36	@ 0x24
 800b55a:	687a      	ldr	r2, [r7, #4]
 800b55c:	4611      	mov	r1, r2
 800b55e:	4618      	mov	r0, r3
 800b560:	f000 fdde 	bl	800c120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b564:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b566:	f000 f939 	bl	800b7dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b56a:	f000 fbff 	bl	800bd6c <xTaskResumeAll>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d189      	bne.n	800b488 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b574:	4b0f      	ldr	r3, [pc, #60]	@ (800b5b4 <xQueueReceive+0x1c0>)
 800b576:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b57a:	601a      	str	r2, [r3, #0]
 800b57c:	f3bf 8f4f 	dsb	sy
 800b580:	f3bf 8f6f 	isb	sy
 800b584:	e780      	b.n	800b488 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b588:	f000 f928 	bl	800b7dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b58c:	f000 fbee 	bl	800bd6c <xTaskResumeAll>
 800b590:	e77a      	b.n	800b488 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b594:	f000 f922 	bl	800b7dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b598:	f000 fbe8 	bl	800bd6c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b59c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b59e:	f000 f96f 	bl	800b880 <prvIsQueueEmpty>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f43f af6f 	beq.w	800b488 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b5aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3730      	adds	r7, #48	@ 0x30
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	e000ed04 	.word	0xe000ed04

0800b5b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b08e      	sub	sp, #56	@ 0x38
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d10b      	bne.n	800b5e6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b5ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d2:	f383 8811 	msr	BASEPRI, r3
 800b5d6:	f3bf 8f6f 	isb	sy
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	623b      	str	r3, [r7, #32]
}
 800b5e0:	bf00      	nop
 800b5e2:	bf00      	nop
 800b5e4:	e7fd      	b.n	800b5e2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d103      	bne.n	800b5f4 <xQueueReceiveFromISR+0x3c>
 800b5ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d101      	bne.n	800b5f8 <xQueueReceiveFromISR+0x40>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e000      	b.n	800b5fa <xQueueReceiveFromISR+0x42>
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d10b      	bne.n	800b616 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b602:	f383 8811 	msr	BASEPRI, r3
 800b606:	f3bf 8f6f 	isb	sy
 800b60a:	f3bf 8f4f 	dsb	sy
 800b60e:	61fb      	str	r3, [r7, #28]
}
 800b610:	bf00      	nop
 800b612:	bf00      	nop
 800b614:	e7fd      	b.n	800b612 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b616:	f001 fa87 	bl	800cb28 <vPortValidateInterruptPriority>
	__asm volatile
 800b61a:	f3ef 8211 	mrs	r2, BASEPRI
 800b61e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b622:	f383 8811 	msr	BASEPRI, r3
 800b626:	f3bf 8f6f 	isb	sy
 800b62a:	f3bf 8f4f 	dsb	sy
 800b62e:	61ba      	str	r2, [r7, #24]
 800b630:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b632:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b63a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d02f      	beq.n	800b6a2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b644:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b648:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b64c:	68b9      	ldr	r1, [r7, #8]
 800b64e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b650:	f000 f89e 	bl	800b790 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b656:	1e5a      	subs	r2, r3, #1
 800b658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b65c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b660:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b664:	d112      	bne.n	800b68c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b668:	691b      	ldr	r3, [r3, #16]
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d016      	beq.n	800b69c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b670:	3310      	adds	r3, #16
 800b672:	4618      	mov	r0, r3
 800b674:	f000 fd7a 	bl	800c16c <xTaskRemoveFromEventList>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00e      	beq.n	800b69c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d00b      	beq.n	800b69c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	601a      	str	r2, [r3, #0]
 800b68a:	e007      	b.n	800b69c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b68c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b690:	3301      	adds	r3, #1
 800b692:	b2db      	uxtb	r3, r3
 800b694:	b25a      	sxtb	r2, r3
 800b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b69c:	2301      	movs	r3, #1
 800b69e:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a0:	e001      	b.n	800b6a6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	637b      	str	r3, [r7, #52]	@ 0x34
 800b6a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	f383 8811 	msr	BASEPRI, r3
}
 800b6b0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b6b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3738      	adds	r7, #56	@ 0x38
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b086      	sub	sp, #24
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d10d      	bne.n	800b6f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d14d      	bne.n	800b77e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	689b      	ldr	r3, [r3, #8]
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 ff20 	bl	800c52c <xTaskPriorityDisinherit>
 800b6ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	609a      	str	r2, [r3, #8]
 800b6f4:	e043      	b.n	800b77e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d119      	bne.n	800b730 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	6858      	ldr	r0, [r3, #4]
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b704:	461a      	mov	r2, r3
 800b706:	68b9      	ldr	r1, [r7, #8]
 800b708:	f002 f850 	bl	800d7ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	685a      	ldr	r2, [r3, #4]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b714:	441a      	add	r2, r3
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	429a      	cmp	r2, r3
 800b724:	d32b      	bcc.n	800b77e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681a      	ldr	r2, [r3, #0]
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	605a      	str	r2, [r3, #4]
 800b72e:	e026      	b.n	800b77e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	68d8      	ldr	r0, [r3, #12]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b738:	461a      	mov	r2, r3
 800b73a:	68b9      	ldr	r1, [r7, #8]
 800b73c:	f002 f836 	bl	800d7ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	68da      	ldr	r2, [r3, #12]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b748:	425b      	negs	r3, r3
 800b74a:	441a      	add	r2, r3
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	68da      	ldr	r2, [r3, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	429a      	cmp	r2, r3
 800b75a:	d207      	bcs.n	800b76c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	689a      	ldr	r2, [r3, #8]
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b764:	425b      	negs	r3, r3
 800b766:	441a      	add	r2, r3
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2b02      	cmp	r3, #2
 800b770:	d105      	bne.n	800b77e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d002      	beq.n	800b77e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	3b01      	subs	r3, #1
 800b77c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	1c5a      	adds	r2, r3, #1
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b786:	697b      	ldr	r3, [r7, #20]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3718      	adds	r7, #24
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d018      	beq.n	800b7d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	68da      	ldr	r2, [r3, #12]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7aa:	441a      	add	r2, r3
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	68da      	ldr	r2, [r3, #12]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	689b      	ldr	r3, [r3, #8]
 800b7b8:	429a      	cmp	r2, r3
 800b7ba:	d303      	bcc.n	800b7c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	68d9      	ldr	r1, [r3, #12]
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	6838      	ldr	r0, [r7, #0]
 800b7d0:	f001 ffec 	bl	800d7ac <memcpy>
	}
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b084      	sub	sp, #16
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b7e4:	f001 f8c0 	bl	800c968 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b7ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b7f0:	e011      	b.n	800b816 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d012      	beq.n	800b820 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	3324      	adds	r3, #36	@ 0x24
 800b7fe:	4618      	mov	r0, r3
 800b800:	f000 fcb4 	bl	800c16c <xTaskRemoveFromEventList>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b80a:	f000 fd8d 	bl	800c328 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b80e:	7bfb      	ldrb	r3, [r7, #15]
 800b810:	3b01      	subs	r3, #1
 800b812:	b2db      	uxtb	r3, r3
 800b814:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	dce9      	bgt.n	800b7f2 <prvUnlockQueue+0x16>
 800b81e:	e000      	b.n	800b822 <prvUnlockQueue+0x46>
					break;
 800b820:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	22ff      	movs	r2, #255	@ 0xff
 800b826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b82a:	f001 f8cf 	bl	800c9cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b82e:	f001 f89b 	bl	800c968 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b838:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b83a:	e011      	b.n	800b860 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	691b      	ldr	r3, [r3, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d012      	beq.n	800b86a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	3310      	adds	r3, #16
 800b848:	4618      	mov	r0, r3
 800b84a:	f000 fc8f 	bl	800c16c <xTaskRemoveFromEventList>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d001      	beq.n	800b858 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b854:	f000 fd68 	bl	800c328 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b858:	7bbb      	ldrb	r3, [r7, #14]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b860:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b864:	2b00      	cmp	r3, #0
 800b866:	dce9      	bgt.n	800b83c <prvUnlockQueue+0x60>
 800b868:	e000      	b.n	800b86c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b86a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	22ff      	movs	r2, #255	@ 0xff
 800b870:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b874:	f001 f8aa 	bl	800c9cc <vPortExitCritical>
}
 800b878:	bf00      	nop
 800b87a:	3710      	adds	r7, #16
 800b87c:	46bd      	mov	sp, r7
 800b87e:	bd80      	pop	{r7, pc}

0800b880 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b888:	f001 f86e 	bl	800c968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b890:	2b00      	cmp	r3, #0
 800b892:	d102      	bne.n	800b89a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b894:	2301      	movs	r3, #1
 800b896:	60fb      	str	r3, [r7, #12]
 800b898:	e001      	b.n	800b89e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b89a:	2300      	movs	r3, #0
 800b89c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b89e:	f001 f895 	bl	800c9cc <vPortExitCritical>

	return xReturn;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3710      	adds	r7, #16
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8b4:	f001 f858 	bl	800c968 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d102      	bne.n	800b8ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	60fb      	str	r3, [r7, #12]
 800b8c8:	e001      	b.n	800b8ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b8ce:	f001 f87d 	bl	800c9cc <vPortExitCritical>

	return xReturn;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3710      	adds	r7, #16
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b08e      	sub	sp, #56	@ 0x38
 800b8e0:	af04      	add	r7, sp, #16
 800b8e2:	60f8      	str	r0, [r7, #12]
 800b8e4:	60b9      	str	r1, [r7, #8]
 800b8e6:	607a      	str	r2, [r7, #4]
 800b8e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b8ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d10b      	bne.n	800b908 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8f4:	f383 8811 	msr	BASEPRI, r3
 800b8f8:	f3bf 8f6f 	isb	sy
 800b8fc:	f3bf 8f4f 	dsb	sy
 800b900:	623b      	str	r3, [r7, #32]
}
 800b902:	bf00      	nop
 800b904:	bf00      	nop
 800b906:	e7fd      	b.n	800b904 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d10b      	bne.n	800b926 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b912:	f383 8811 	msr	BASEPRI, r3
 800b916:	f3bf 8f6f 	isb	sy
 800b91a:	f3bf 8f4f 	dsb	sy
 800b91e:	61fb      	str	r3, [r7, #28]
}
 800b920:	bf00      	nop
 800b922:	bf00      	nop
 800b924:	e7fd      	b.n	800b922 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b926:	2358      	movs	r3, #88	@ 0x58
 800b928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	2b58      	cmp	r3, #88	@ 0x58
 800b92e:	d00b      	beq.n	800b948 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b934:	f383 8811 	msr	BASEPRI, r3
 800b938:	f3bf 8f6f 	isb	sy
 800b93c:	f3bf 8f4f 	dsb	sy
 800b940:	61bb      	str	r3, [r7, #24]
}
 800b942:	bf00      	nop
 800b944:	bf00      	nop
 800b946:	e7fd      	b.n	800b944 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b948:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b94a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	d01e      	beq.n	800b98e <xTaskCreateStatic+0xb2>
 800b950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b952:	2b00      	cmp	r3, #0
 800b954:	d01b      	beq.n	800b98e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b958:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b95c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b95e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b962:	2202      	movs	r2, #2
 800b964:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b968:	2300      	movs	r3, #0
 800b96a:	9303      	str	r3, [sp, #12]
 800b96c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96e:	9302      	str	r3, [sp, #8]
 800b970:	f107 0314 	add.w	r3, r7, #20
 800b974:	9301      	str	r3, [sp, #4]
 800b976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b978:	9300      	str	r3, [sp, #0]
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	687a      	ldr	r2, [r7, #4]
 800b97e:	68b9      	ldr	r1, [r7, #8]
 800b980:	68f8      	ldr	r0, [r7, #12]
 800b982:	f000 f850 	bl	800ba26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b986:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b988:	f000 f8e0 	bl	800bb4c <prvAddNewTaskToReadyList>
 800b98c:	e001      	b.n	800b992 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b98e:	2300      	movs	r3, #0
 800b990:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b992:	697b      	ldr	r3, [r7, #20]
	}
 800b994:	4618      	mov	r0, r3
 800b996:	3728      	adds	r7, #40	@ 0x28
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b08c      	sub	sp, #48	@ 0x30
 800b9a0:	af04      	add	r7, sp, #16
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	603b      	str	r3, [r7, #0]
 800b9a8:	4613      	mov	r3, r2
 800b9aa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b9ac:	88fb      	ldrh	r3, [r7, #6]
 800b9ae:	009b      	lsls	r3, r3, #2
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	f001 f8fb 	bl	800cbac <pvPortMalloc>
 800b9b6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b9b8:	697b      	ldr	r3, [r7, #20]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00e      	beq.n	800b9dc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b9be:	2058      	movs	r0, #88	@ 0x58
 800b9c0:	f001 f8f4 	bl	800cbac <pvPortMalloc>
 800b9c4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b9c6:	69fb      	ldr	r3, [r7, #28]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d003      	beq.n	800b9d4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	697a      	ldr	r2, [r7, #20]
 800b9d0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b9d2:	e005      	b.n	800b9e0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b9d4:	6978      	ldr	r0, [r7, #20]
 800b9d6:	f001 f9bd 	bl	800cd54 <vPortFree>
 800b9da:	e001      	b.n	800b9e0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b9e0:	69fb      	ldr	r3, [r7, #28]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d017      	beq.n	800ba16 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	2200      	movs	r2, #0
 800b9ea:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b9ee:	88fa      	ldrh	r2, [r7, #6]
 800b9f0:	2300      	movs	r3, #0
 800b9f2:	9303      	str	r3, [sp, #12]
 800b9f4:	69fb      	ldr	r3, [r7, #28]
 800b9f6:	9302      	str	r3, [sp, #8]
 800b9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fa:	9301      	str	r3, [sp, #4]
 800b9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	68b9      	ldr	r1, [r7, #8]
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f000 f80e 	bl	800ba26 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ba0a:	69f8      	ldr	r0, [r7, #28]
 800ba0c:	f000 f89e 	bl	800bb4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ba10:	2301      	movs	r3, #1
 800ba12:	61bb      	str	r3, [r7, #24]
 800ba14:	e002      	b.n	800ba1c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ba16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ba1a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ba1c:	69bb      	ldr	r3, [r7, #24]
	}
 800ba1e:	4618      	mov	r0, r3
 800ba20:	3720      	adds	r7, #32
 800ba22:	46bd      	mov	sp, r7
 800ba24:	bd80      	pop	{r7, pc}

0800ba26 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ba26:	b580      	push	{r7, lr}
 800ba28:	b088      	sub	sp, #32
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	60f8      	str	r0, [r7, #12]
 800ba2e:	60b9      	str	r1, [r7, #8]
 800ba30:	607a      	str	r2, [r7, #4]
 800ba32:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ba34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba36:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	21a5      	movs	r1, #165	@ 0xa5
 800ba40:	f001 fe70 	bl	800d724 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ba44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	009b      	lsls	r3, r3, #2
 800ba52:	4413      	add	r3, r2
 800ba54:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	f023 0307 	bic.w	r3, r3, #7
 800ba5c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ba5e:	69bb      	ldr	r3, [r7, #24]
 800ba60:	f003 0307 	and.w	r3, r3, #7
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d00b      	beq.n	800ba80 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ba68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba6c:	f383 8811 	msr	BASEPRI, r3
 800ba70:	f3bf 8f6f 	isb	sy
 800ba74:	f3bf 8f4f 	dsb	sy
 800ba78:	617b      	str	r3, [r7, #20]
}
 800ba7a:	bf00      	nop
 800ba7c:	bf00      	nop
 800ba7e:	e7fd      	b.n	800ba7c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d01f      	beq.n	800bac6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ba86:	2300      	movs	r3, #0
 800ba88:	61fb      	str	r3, [r7, #28]
 800ba8a:	e012      	b.n	800bab2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	69fb      	ldr	r3, [r7, #28]
 800ba90:	4413      	add	r3, r2
 800ba92:	7819      	ldrb	r1, [r3, #0]
 800ba94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	4413      	add	r3, r2
 800ba9a:	3334      	adds	r3, #52	@ 0x34
 800ba9c:	460a      	mov	r2, r1
 800ba9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	4413      	add	r3, r2
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d006      	beq.n	800baba <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	3301      	adds	r3, #1
 800bab0:	61fb      	str	r3, [r7, #28]
 800bab2:	69fb      	ldr	r3, [r7, #28]
 800bab4:	2b0f      	cmp	r3, #15
 800bab6:	d9e9      	bls.n	800ba8c <prvInitialiseNewTask+0x66>
 800bab8:	e000      	b.n	800babc <prvInitialiseNewTask+0x96>
			{
				break;
 800baba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800babc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800babe:	2200      	movs	r2, #0
 800bac0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bac4:	e003      	b.n	800bace <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bac8:	2200      	movs	r2, #0
 800baca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bad0:	2b06      	cmp	r3, #6
 800bad2:	d901      	bls.n	800bad8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bad4:	2306      	movs	r3, #6
 800bad6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bada:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800badc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bade:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bae2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800bae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bae6:	2200      	movs	r2, #0
 800bae8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800baea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baec:	3304      	adds	r3, #4
 800baee:	4618      	mov	r0, r3
 800baf0:	f7ff f90a 	bl	800ad08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800baf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800baf6:	3318      	adds	r3, #24
 800baf8:	4618      	mov	r0, r3
 800bafa:	f7ff f905 	bl	800ad08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800bafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb06:	f1c3 0207 	rsb	r2, r3, #7
 800bb0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800bb0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb12:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800bb14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb16:	2200      	movs	r2, #0
 800bb18:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800bb1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bb20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb22:	2200      	movs	r2, #0
 800bb24:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800bb28:	683a      	ldr	r2, [r7, #0]
 800bb2a:	68f9      	ldr	r1, [r7, #12]
 800bb2c:	69b8      	ldr	r0, [r7, #24]
 800bb2e:	f000 fdeb 	bl	800c708 <pxPortInitialiseStack>
 800bb32:	4602      	mov	r2, r0
 800bb34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb36:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800bb38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d002      	beq.n	800bb44 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800bb3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bb42:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bb44:	bf00      	nop
 800bb46:	3720      	adds	r7, #32
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b082      	sub	sp, #8
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800bb54:	f000 ff08 	bl	800c968 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bb58:	4b2a      	ldr	r3, [pc, #168]	@ (800bc04 <prvAddNewTaskToReadyList+0xb8>)
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	3301      	adds	r3, #1
 800bb5e:	4a29      	ldr	r2, [pc, #164]	@ (800bc04 <prvAddNewTaskToReadyList+0xb8>)
 800bb60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800bb62:	4b29      	ldr	r3, [pc, #164]	@ (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d109      	bne.n	800bb7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800bb6a:	4a27      	ldr	r2, [pc, #156]	@ (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800bb70:	4b24      	ldr	r3, [pc, #144]	@ (800bc04 <prvAddNewTaskToReadyList+0xb8>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	2b01      	cmp	r3, #1
 800bb76:	d110      	bne.n	800bb9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bb78:	f000 fbfc 	bl	800c374 <prvInitialiseTaskLists>
 800bb7c:	e00d      	b.n	800bb9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bb7e:	4b23      	ldr	r3, [pc, #140]	@ (800bc0c <prvAddNewTaskToReadyList+0xc0>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d109      	bne.n	800bb9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bb86:	4b20      	ldr	r3, [pc, #128]	@ (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d802      	bhi.n	800bb9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bb94:	4a1c      	ldr	r2, [pc, #112]	@ (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bb9a:	4b1d      	ldr	r3, [pc, #116]	@ (800bc10 <prvAddNewTaskToReadyList+0xc4>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	3301      	adds	r3, #1
 800bba0:	4a1b      	ldr	r2, [pc, #108]	@ (800bc10 <prvAddNewTaskToReadyList+0xc4>)
 800bba2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba8:	2201      	movs	r2, #1
 800bbaa:	409a      	lsls	r2, r3
 800bbac:	4b19      	ldr	r3, [pc, #100]	@ (800bc14 <prvAddNewTaskToReadyList+0xc8>)
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	4313      	orrs	r3, r2
 800bbb2:	4a18      	ldr	r2, [pc, #96]	@ (800bc14 <prvAddNewTaskToReadyList+0xc8>)
 800bbb4:	6013      	str	r3, [r2, #0]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbba:	4613      	mov	r3, r2
 800bbbc:	009b      	lsls	r3, r3, #2
 800bbbe:	4413      	add	r3, r2
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	4a15      	ldr	r2, [pc, #84]	@ (800bc18 <prvAddNewTaskToReadyList+0xcc>)
 800bbc4:	441a      	add	r2, r3
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	3304      	adds	r3, #4
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7ff f8a8 	bl	800ad22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bbd2:	f000 fefb 	bl	800c9cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bbd6:	4b0d      	ldr	r3, [pc, #52]	@ (800bc0c <prvAddNewTaskToReadyList+0xc0>)
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d00e      	beq.n	800bbfc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bbde:	4b0a      	ldr	r3, [pc, #40]	@ (800bc08 <prvAddNewTaskToReadyList+0xbc>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d207      	bcs.n	800bbfc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bbec:	4b0b      	ldr	r3, [pc, #44]	@ (800bc1c <prvAddNewTaskToReadyList+0xd0>)
 800bbee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbf2:	601a      	str	r2, [r3, #0]
 800bbf4:	f3bf 8f4f 	dsb	sy
 800bbf8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bbfc:	bf00      	nop
 800bbfe:	3708      	adds	r7, #8
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	200006ac 	.word	0x200006ac
 800bc08:	200005ac 	.word	0x200005ac
 800bc0c:	200006b8 	.word	0x200006b8
 800bc10:	200006c8 	.word	0x200006c8
 800bc14:	200006b4 	.word	0x200006b4
 800bc18:	200005b0 	.word	0x200005b0
 800bc1c:	e000ed04 	.word	0xe000ed04

0800bc20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bc28:	2300      	movs	r3, #0
 800bc2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d018      	beq.n	800bc64 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bc32:	4b14      	ldr	r3, [pc, #80]	@ (800bc84 <vTaskDelay+0x64>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00b      	beq.n	800bc52 <vTaskDelay+0x32>
	__asm volatile
 800bc3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc3e:	f383 8811 	msr	BASEPRI, r3
 800bc42:	f3bf 8f6f 	isb	sy
 800bc46:	f3bf 8f4f 	dsb	sy
 800bc4a:	60bb      	str	r3, [r7, #8]
}
 800bc4c:	bf00      	nop
 800bc4e:	bf00      	nop
 800bc50:	e7fd      	b.n	800bc4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bc52:	f000 f87d 	bl	800bd50 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bc56:	2100      	movs	r1, #0
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fcef 	bl	800c63c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bc5e:	f000 f885 	bl	800bd6c <xTaskResumeAll>
 800bc62:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d107      	bne.n	800bc7a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800bc6a:	4b07      	ldr	r3, [pc, #28]	@ (800bc88 <vTaskDelay+0x68>)
 800bc6c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc70:	601a      	str	r2, [r3, #0]
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bc7a:	bf00      	nop
 800bc7c:	3710      	adds	r7, #16
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bd80      	pop	{r7, pc}
 800bc82:	bf00      	nop
 800bc84:	200006d4 	.word	0x200006d4
 800bc88:	e000ed04 	.word	0xe000ed04

0800bc8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bc8c:	b580      	push	{r7, lr}
 800bc8e:	b08a      	sub	sp, #40	@ 0x28
 800bc90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bc9a:	463a      	mov	r2, r7
 800bc9c:	1d39      	adds	r1, r7, #4
 800bc9e:	f107 0308 	add.w	r3, r7, #8
 800bca2:	4618      	mov	r0, r3
 800bca4:	f7f4 fdd0 	bl	8000848 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bca8:	6839      	ldr	r1, [r7, #0]
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	9202      	str	r2, [sp, #8]
 800bcb0:	9301      	str	r3, [sp, #4]
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	9300      	str	r3, [sp, #0]
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	460a      	mov	r2, r1
 800bcba:	491f      	ldr	r1, [pc, #124]	@ (800bd38 <vTaskStartScheduler+0xac>)
 800bcbc:	481f      	ldr	r0, [pc, #124]	@ (800bd3c <vTaskStartScheduler+0xb0>)
 800bcbe:	f7ff fe0d 	bl	800b8dc <xTaskCreateStatic>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	4a1e      	ldr	r2, [pc, #120]	@ (800bd40 <vTaskStartScheduler+0xb4>)
 800bcc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bcc8:	4b1d      	ldr	r3, [pc, #116]	@ (800bd40 <vTaskStartScheduler+0xb4>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	617b      	str	r3, [r7, #20]
 800bcd4:	e001      	b.n	800bcda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d116      	bne.n	800bd0e <vTaskStartScheduler+0x82>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	613b      	str	r3, [r7, #16]
}
 800bcf2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bcf4:	4b13      	ldr	r3, [pc, #76]	@ (800bd44 <vTaskStartScheduler+0xb8>)
 800bcf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bcfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bcfc:	4b12      	ldr	r3, [pc, #72]	@ (800bd48 <vTaskStartScheduler+0xbc>)
 800bcfe:	2201      	movs	r2, #1
 800bd00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bd02:	4b12      	ldr	r3, [pc, #72]	@ (800bd4c <vTaskStartScheduler+0xc0>)
 800bd04:	2200      	movs	r2, #0
 800bd06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bd08:	f000 fd8a 	bl	800c820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bd0c:	e00f      	b.n	800bd2e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd14:	d10b      	bne.n	800bd2e <vTaskStartScheduler+0xa2>
	__asm volatile
 800bd16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd1a:	f383 8811 	msr	BASEPRI, r3
 800bd1e:	f3bf 8f6f 	isb	sy
 800bd22:	f3bf 8f4f 	dsb	sy
 800bd26:	60fb      	str	r3, [r7, #12]
}
 800bd28:	bf00      	nop
 800bd2a:	bf00      	nop
 800bd2c:	e7fd      	b.n	800bd2a <vTaskStartScheduler+0x9e>
}
 800bd2e:	bf00      	nop
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	0800d8d8 	.word	0x0800d8d8
 800bd3c:	0800c341 	.word	0x0800c341
 800bd40:	200006d0 	.word	0x200006d0
 800bd44:	200006cc 	.word	0x200006cc
 800bd48:	200006b8 	.word	0x200006b8
 800bd4c:	200006b0 	.word	0x200006b0

0800bd50 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bd50:	b480      	push	{r7}
 800bd52:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bd54:	4b04      	ldr	r3, [pc, #16]	@ (800bd68 <vTaskSuspendAll+0x18>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	4a03      	ldr	r2, [pc, #12]	@ (800bd68 <vTaskSuspendAll+0x18>)
 800bd5c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bd5e:	bf00      	nop
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	200006d4 	.word	0x200006d4

0800bd6c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bd72:	2300      	movs	r3, #0
 800bd74:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bd76:	2300      	movs	r3, #0
 800bd78:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bd7a:	4b42      	ldr	r3, [pc, #264]	@ (800be84 <xTaskResumeAll+0x118>)
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d10b      	bne.n	800bd9a <xTaskResumeAll+0x2e>
	__asm volatile
 800bd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd86:	f383 8811 	msr	BASEPRI, r3
 800bd8a:	f3bf 8f6f 	isb	sy
 800bd8e:	f3bf 8f4f 	dsb	sy
 800bd92:	603b      	str	r3, [r7, #0]
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop
 800bd98:	e7fd      	b.n	800bd96 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bd9a:	f000 fde5 	bl	800c968 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bd9e:	4b39      	ldr	r3, [pc, #228]	@ (800be84 <xTaskResumeAll+0x118>)
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	3b01      	subs	r3, #1
 800bda4:	4a37      	ldr	r2, [pc, #220]	@ (800be84 <xTaskResumeAll+0x118>)
 800bda6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bda8:	4b36      	ldr	r3, [pc, #216]	@ (800be84 <xTaskResumeAll+0x118>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d161      	bne.n	800be74 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bdb0:	4b35      	ldr	r3, [pc, #212]	@ (800be88 <xTaskResumeAll+0x11c>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d05d      	beq.n	800be74 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bdb8:	e02e      	b.n	800be18 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdba:	4b34      	ldr	r3, [pc, #208]	@ (800be8c <xTaskResumeAll+0x120>)
 800bdbc:	68db      	ldr	r3, [r3, #12]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	3318      	adds	r3, #24
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7ff f808 	bl	800addc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	3304      	adds	r3, #4
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7ff f803 	bl	800addc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdda:	2201      	movs	r2, #1
 800bddc:	409a      	lsls	r2, r3
 800bdde:	4b2c      	ldr	r3, [pc, #176]	@ (800be90 <xTaskResumeAll+0x124>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	4313      	orrs	r3, r2
 800bde4:	4a2a      	ldr	r2, [pc, #168]	@ (800be90 <xTaskResumeAll+0x124>)
 800bde6:	6013      	str	r3, [r2, #0]
 800bde8:	68fb      	ldr	r3, [r7, #12]
 800bdea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdec:	4613      	mov	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	4413      	add	r3, r2
 800bdf2:	009b      	lsls	r3, r3, #2
 800bdf4:	4a27      	ldr	r2, [pc, #156]	@ (800be94 <xTaskResumeAll+0x128>)
 800bdf6:	441a      	add	r2, r3
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	4619      	mov	r1, r3
 800bdfe:	4610      	mov	r0, r2
 800be00:	f7fe ff8f 	bl	800ad22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be08:	4b23      	ldr	r3, [pc, #140]	@ (800be98 <xTaskResumeAll+0x12c>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be0e:	429a      	cmp	r2, r3
 800be10:	d302      	bcc.n	800be18 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800be12:	4b22      	ldr	r3, [pc, #136]	@ (800be9c <xTaskResumeAll+0x130>)
 800be14:	2201      	movs	r2, #1
 800be16:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800be18:	4b1c      	ldr	r3, [pc, #112]	@ (800be8c <xTaskResumeAll+0x120>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d1cc      	bne.n	800bdba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d001      	beq.n	800be2a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800be26:	f000 fb43 	bl	800c4b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800be2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bea0 <xTaskResumeAll+0x134>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d010      	beq.n	800be58 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800be36:	f000 f837 	bl	800bea8 <xTaskIncrementTick>
 800be3a:	4603      	mov	r3, r0
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d002      	beq.n	800be46 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800be40:	4b16      	ldr	r3, [pc, #88]	@ (800be9c <xTaskResumeAll+0x130>)
 800be42:	2201      	movs	r2, #1
 800be44:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	3b01      	subs	r3, #1
 800be4a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d1f1      	bne.n	800be36 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800be52:	4b13      	ldr	r3, [pc, #76]	@ (800bea0 <xTaskResumeAll+0x134>)
 800be54:	2200      	movs	r2, #0
 800be56:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800be58:	4b10      	ldr	r3, [pc, #64]	@ (800be9c <xTaskResumeAll+0x130>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d009      	beq.n	800be74 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800be60:	2301      	movs	r3, #1
 800be62:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800be64:	4b0f      	ldr	r3, [pc, #60]	@ (800bea4 <xTaskResumeAll+0x138>)
 800be66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be6a:	601a      	str	r2, [r3, #0]
 800be6c:	f3bf 8f4f 	dsb	sy
 800be70:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be74:	f000 fdaa 	bl	800c9cc <vPortExitCritical>

	return xAlreadyYielded;
 800be78:	68bb      	ldr	r3, [r7, #8]
}
 800be7a:	4618      	mov	r0, r3
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	200006d4 	.word	0x200006d4
 800be88:	200006ac 	.word	0x200006ac
 800be8c:	2000066c 	.word	0x2000066c
 800be90:	200006b4 	.word	0x200006b4
 800be94:	200005b0 	.word	0x200005b0
 800be98:	200005ac 	.word	0x200005ac
 800be9c:	200006c0 	.word	0x200006c0
 800bea0:	200006bc 	.word	0x200006bc
 800bea4:	e000ed04 	.word	0xe000ed04

0800bea8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b086      	sub	sp, #24
 800beac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800beae:	2300      	movs	r3, #0
 800beb0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800beb2:	4b4f      	ldr	r3, [pc, #316]	@ (800bff0 <xTaskIncrementTick+0x148>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	f040 808f 	bne.w	800bfda <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bebc:	4b4d      	ldr	r3, [pc, #308]	@ (800bff4 <xTaskIncrementTick+0x14c>)
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	3301      	adds	r3, #1
 800bec2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bec4:	4a4b      	ldr	r2, [pc, #300]	@ (800bff4 <xTaskIncrementTick+0x14c>)
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800beca:	693b      	ldr	r3, [r7, #16]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d121      	bne.n	800bf14 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bed0:	4b49      	ldr	r3, [pc, #292]	@ (800bff8 <xTaskIncrementTick+0x150>)
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d00b      	beq.n	800bef2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800beda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bede:	f383 8811 	msr	BASEPRI, r3
 800bee2:	f3bf 8f6f 	isb	sy
 800bee6:	f3bf 8f4f 	dsb	sy
 800beea:	603b      	str	r3, [r7, #0]
}
 800beec:	bf00      	nop
 800beee:	bf00      	nop
 800bef0:	e7fd      	b.n	800beee <xTaskIncrementTick+0x46>
 800bef2:	4b41      	ldr	r3, [pc, #260]	@ (800bff8 <xTaskIncrementTick+0x150>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	60fb      	str	r3, [r7, #12]
 800bef8:	4b40      	ldr	r3, [pc, #256]	@ (800bffc <xTaskIncrementTick+0x154>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	4a3e      	ldr	r2, [pc, #248]	@ (800bff8 <xTaskIncrementTick+0x150>)
 800befe:	6013      	str	r3, [r2, #0]
 800bf00:	4a3e      	ldr	r2, [pc, #248]	@ (800bffc <xTaskIncrementTick+0x154>)
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	6013      	str	r3, [r2, #0]
 800bf06:	4b3e      	ldr	r3, [pc, #248]	@ (800c000 <xTaskIncrementTick+0x158>)
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	3301      	adds	r3, #1
 800bf0c:	4a3c      	ldr	r2, [pc, #240]	@ (800c000 <xTaskIncrementTick+0x158>)
 800bf0e:	6013      	str	r3, [r2, #0]
 800bf10:	f000 face 	bl	800c4b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bf14:	4b3b      	ldr	r3, [pc, #236]	@ (800c004 <xTaskIncrementTick+0x15c>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	693a      	ldr	r2, [r7, #16]
 800bf1a:	429a      	cmp	r2, r3
 800bf1c:	d348      	bcc.n	800bfb0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf1e:	4b36      	ldr	r3, [pc, #216]	@ (800bff8 <xTaskIncrementTick+0x150>)
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d104      	bne.n	800bf32 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf28:	4b36      	ldr	r3, [pc, #216]	@ (800c004 <xTaskIncrementTick+0x15c>)
 800bf2a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bf2e:	601a      	str	r2, [r3, #0]
					break;
 800bf30:	e03e      	b.n	800bfb0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf32:	4b31      	ldr	r3, [pc, #196]	@ (800bff8 <xTaskIncrementTick+0x150>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	685b      	ldr	r3, [r3, #4]
 800bf40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bf42:	693a      	ldr	r2, [r7, #16]
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	429a      	cmp	r2, r3
 800bf48:	d203      	bcs.n	800bf52 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bf4a:	4a2e      	ldr	r2, [pc, #184]	@ (800c004 <xTaskIncrementTick+0x15c>)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bf50:	e02e      	b.n	800bfb0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	3304      	adds	r3, #4
 800bf56:	4618      	mov	r0, r3
 800bf58:	f7fe ff40 	bl	800addc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d004      	beq.n	800bf6e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	3318      	adds	r3, #24
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f7fe ff37 	bl	800addc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bf6e:	68bb      	ldr	r3, [r7, #8]
 800bf70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf72:	2201      	movs	r2, #1
 800bf74:	409a      	lsls	r2, r3
 800bf76:	4b24      	ldr	r3, [pc, #144]	@ (800c008 <xTaskIncrementTick+0x160>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4313      	orrs	r3, r2
 800bf7c:	4a22      	ldr	r2, [pc, #136]	@ (800c008 <xTaskIncrementTick+0x160>)
 800bf7e:	6013      	str	r3, [r2, #0]
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf84:	4613      	mov	r3, r2
 800bf86:	009b      	lsls	r3, r3, #2
 800bf88:	4413      	add	r3, r2
 800bf8a:	009b      	lsls	r3, r3, #2
 800bf8c:	4a1f      	ldr	r2, [pc, #124]	@ (800c00c <xTaskIncrementTick+0x164>)
 800bf8e:	441a      	add	r2, r3
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	3304      	adds	r3, #4
 800bf94:	4619      	mov	r1, r3
 800bf96:	4610      	mov	r0, r2
 800bf98:	f7fe fec3 	bl	800ad22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfa0:	4b1b      	ldr	r3, [pc, #108]	@ (800c010 <xTaskIncrementTick+0x168>)
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfa6:	429a      	cmp	r2, r3
 800bfa8:	d3b9      	bcc.n	800bf1e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfae:	e7b6      	b.n	800bf1e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bfb0:	4b17      	ldr	r3, [pc, #92]	@ (800c010 <xTaskIncrementTick+0x168>)
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bfb6:	4915      	ldr	r1, [pc, #84]	@ (800c00c <xTaskIncrementTick+0x164>)
 800bfb8:	4613      	mov	r3, r2
 800bfba:	009b      	lsls	r3, r3, #2
 800bfbc:	4413      	add	r3, r2
 800bfbe:	009b      	lsls	r3, r3, #2
 800bfc0:	440b      	add	r3, r1
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	2b01      	cmp	r3, #1
 800bfc6:	d901      	bls.n	800bfcc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bfc8:	2301      	movs	r3, #1
 800bfca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bfcc:	4b11      	ldr	r3, [pc, #68]	@ (800c014 <xTaskIncrementTick+0x16c>)
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d007      	beq.n	800bfe4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bfd4:	2301      	movs	r3, #1
 800bfd6:	617b      	str	r3, [r7, #20]
 800bfd8:	e004      	b.n	800bfe4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bfda:	4b0f      	ldr	r3, [pc, #60]	@ (800c018 <xTaskIncrementTick+0x170>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	3301      	adds	r3, #1
 800bfe0:	4a0d      	ldr	r2, [pc, #52]	@ (800c018 <xTaskIncrementTick+0x170>)
 800bfe2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bfe4:	697b      	ldr	r3, [r7, #20]
}
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	3718      	adds	r7, #24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	200006d4 	.word	0x200006d4
 800bff4:	200006b0 	.word	0x200006b0
 800bff8:	20000664 	.word	0x20000664
 800bffc:	20000668 	.word	0x20000668
 800c000:	200006c4 	.word	0x200006c4
 800c004:	200006cc 	.word	0x200006cc
 800c008:	200006b4 	.word	0x200006b4
 800c00c:	200005b0 	.word	0x200005b0
 800c010:	200005ac 	.word	0x200005ac
 800c014:	200006c0 	.word	0x200006c0
 800c018:	200006bc 	.word	0x200006bc

0800c01c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b088      	sub	sp, #32
 800c020:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c022:	4b3a      	ldr	r3, [pc, #232]	@ (800c10c <vTaskSwitchContext+0xf0>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c02a:	4b39      	ldr	r3, [pc, #228]	@ (800c110 <vTaskSwitchContext+0xf4>)
 800c02c:	2201      	movs	r2, #1
 800c02e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c030:	e067      	b.n	800c102 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800c032:	4b37      	ldr	r3, [pc, #220]	@ (800c110 <vTaskSwitchContext+0xf4>)
 800c034:	2200      	movs	r2, #0
 800c036:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800c038:	4b36      	ldr	r3, [pc, #216]	@ (800c114 <vTaskSwitchContext+0xf8>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c03e:	61fb      	str	r3, [r7, #28]
 800c040:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800c044:	61bb      	str	r3, [r7, #24]
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	69ba      	ldr	r2, [r7, #24]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d111      	bne.n	800c074 <vTaskSwitchContext+0x58>
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	3304      	adds	r3, #4
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	69ba      	ldr	r2, [r7, #24]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d10b      	bne.n	800c074 <vTaskSwitchContext+0x58>
 800c05c:	69fb      	ldr	r3, [r7, #28]
 800c05e:	3308      	adds	r3, #8
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	69ba      	ldr	r2, [r7, #24]
 800c064:	429a      	cmp	r2, r3
 800c066:	d105      	bne.n	800c074 <vTaskSwitchContext+0x58>
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	330c      	adds	r3, #12
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	69ba      	ldr	r2, [r7, #24]
 800c070:	429a      	cmp	r2, r3
 800c072:	d008      	beq.n	800c086 <vTaskSwitchContext+0x6a>
 800c074:	4b27      	ldr	r3, [pc, #156]	@ (800c114 <vTaskSwitchContext+0xf8>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	4b26      	ldr	r3, [pc, #152]	@ (800c114 <vTaskSwitchContext+0xf8>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	3334      	adds	r3, #52	@ 0x34
 800c07e:	4619      	mov	r1, r3
 800c080:	4610      	mov	r0, r2
 800c082:	f7f4 fbce 	bl	8000822 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c086:	4b24      	ldr	r3, [pc, #144]	@ (800c118 <vTaskSwitchContext+0xfc>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	fab3 f383 	clz	r3, r3
 800c092:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800c094:	7afb      	ldrb	r3, [r7, #11]
 800c096:	f1c3 031f 	rsb	r3, r3, #31
 800c09a:	617b      	str	r3, [r7, #20]
 800c09c:	491f      	ldr	r1, [pc, #124]	@ (800c11c <vTaskSwitchContext+0x100>)
 800c09e:	697a      	ldr	r2, [r7, #20]
 800c0a0:	4613      	mov	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	4413      	add	r3, r2
 800c0a6:	009b      	lsls	r3, r3, #2
 800c0a8:	440b      	add	r3, r1
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d10b      	bne.n	800c0c8 <vTaskSwitchContext+0xac>
	__asm volatile
 800c0b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0b4:	f383 8811 	msr	BASEPRI, r3
 800c0b8:	f3bf 8f6f 	isb	sy
 800c0bc:	f3bf 8f4f 	dsb	sy
 800c0c0:	607b      	str	r3, [r7, #4]
}
 800c0c2:	bf00      	nop
 800c0c4:	bf00      	nop
 800c0c6:	e7fd      	b.n	800c0c4 <vTaskSwitchContext+0xa8>
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4a12      	ldr	r2, [pc, #72]	@ (800c11c <vTaskSwitchContext+0x100>)
 800c0d4:	4413      	add	r3, r2
 800c0d6:	613b      	str	r3, [r7, #16]
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	685b      	ldr	r3, [r3, #4]
 800c0dc:	685a      	ldr	r2, [r3, #4]
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	605a      	str	r2, [r3, #4]
 800c0e2:	693b      	ldr	r3, [r7, #16]
 800c0e4:	685a      	ldr	r2, [r3, #4]
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	3308      	adds	r3, #8
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d104      	bne.n	800c0f8 <vTaskSwitchContext+0xdc>
 800c0ee:	693b      	ldr	r3, [r7, #16]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	685a      	ldr	r2, [r3, #4]
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	605a      	str	r2, [r3, #4]
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	685b      	ldr	r3, [r3, #4]
 800c0fc:	68db      	ldr	r3, [r3, #12]
 800c0fe:	4a05      	ldr	r2, [pc, #20]	@ (800c114 <vTaskSwitchContext+0xf8>)
 800c100:	6013      	str	r3, [r2, #0]
}
 800c102:	bf00      	nop
 800c104:	3720      	adds	r7, #32
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}
 800c10a:	bf00      	nop
 800c10c:	200006d4 	.word	0x200006d4
 800c110:	200006c0 	.word	0x200006c0
 800c114:	200005ac 	.word	0x200005ac
 800c118:	200006b4 	.word	0x200006b4
 800c11c:	200005b0 	.word	0x200005b0

0800c120 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d10b      	bne.n	800c148 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800c130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c134:	f383 8811 	msr	BASEPRI, r3
 800c138:	f3bf 8f6f 	isb	sy
 800c13c:	f3bf 8f4f 	dsb	sy
 800c140:	60fb      	str	r3, [r7, #12]
}
 800c142:	bf00      	nop
 800c144:	bf00      	nop
 800c146:	e7fd      	b.n	800c144 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c148:	4b07      	ldr	r3, [pc, #28]	@ (800c168 <vTaskPlaceOnEventList+0x48>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	3318      	adds	r3, #24
 800c14e:	4619      	mov	r1, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7fe fe0a 	bl	800ad6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c156:	2101      	movs	r1, #1
 800c158:	6838      	ldr	r0, [r7, #0]
 800c15a:	f000 fa6f 	bl	800c63c <prvAddCurrentTaskToDelayedList>
}
 800c15e:	bf00      	nop
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	200005ac 	.word	0x200005ac

0800c16c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	68db      	ldr	r3, [r3, #12]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d10b      	bne.n	800c19a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800c182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c186:	f383 8811 	msr	BASEPRI, r3
 800c18a:	f3bf 8f6f 	isb	sy
 800c18e:	f3bf 8f4f 	dsb	sy
 800c192:	60fb      	str	r3, [r7, #12]
}
 800c194:	bf00      	nop
 800c196:	bf00      	nop
 800c198:	e7fd      	b.n	800c196 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	3318      	adds	r3, #24
 800c19e:	4618      	mov	r0, r3
 800c1a0:	f7fe fe1c 	bl	800addc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1a4:	4b1d      	ldr	r3, [pc, #116]	@ (800c21c <xTaskRemoveFromEventList+0xb0>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d11c      	bne.n	800c1e6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	3304      	adds	r3, #4
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	f7fe fe13 	bl	800addc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1ba:	2201      	movs	r2, #1
 800c1bc:	409a      	lsls	r2, r3
 800c1be:	4b18      	ldr	r3, [pc, #96]	@ (800c220 <xTaskRemoveFromEventList+0xb4>)
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	4a16      	ldr	r2, [pc, #88]	@ (800c220 <xTaskRemoveFromEventList+0xb4>)
 800c1c6:	6013      	str	r3, [r2, #0]
 800c1c8:	693b      	ldr	r3, [r7, #16]
 800c1ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	4413      	add	r3, r2
 800c1d2:	009b      	lsls	r3, r3, #2
 800c1d4:	4a13      	ldr	r2, [pc, #76]	@ (800c224 <xTaskRemoveFromEventList+0xb8>)
 800c1d6:	441a      	add	r2, r3
 800c1d8:	693b      	ldr	r3, [r7, #16]
 800c1da:	3304      	adds	r3, #4
 800c1dc:	4619      	mov	r1, r3
 800c1de:	4610      	mov	r0, r2
 800c1e0:	f7fe fd9f 	bl	800ad22 <vListInsertEnd>
 800c1e4:	e005      	b.n	800c1f2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	3318      	adds	r3, #24
 800c1ea:	4619      	mov	r1, r3
 800c1ec:	480e      	ldr	r0, [pc, #56]	@ (800c228 <xTaskRemoveFromEventList+0xbc>)
 800c1ee:	f7fe fd98 	bl	800ad22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c1f2:	693b      	ldr	r3, [r7, #16]
 800c1f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c1f6:	4b0d      	ldr	r3, [pc, #52]	@ (800c22c <xTaskRemoveFromEventList+0xc0>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d905      	bls.n	800c20c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c200:	2301      	movs	r3, #1
 800c202:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c204:	4b0a      	ldr	r3, [pc, #40]	@ (800c230 <xTaskRemoveFromEventList+0xc4>)
 800c206:	2201      	movs	r2, #1
 800c208:	601a      	str	r2, [r3, #0]
 800c20a:	e001      	b.n	800c210 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800c20c:	2300      	movs	r3, #0
 800c20e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c210:	697b      	ldr	r3, [r7, #20]
}
 800c212:	4618      	mov	r0, r3
 800c214:	3718      	adds	r7, #24
 800c216:	46bd      	mov	sp, r7
 800c218:	bd80      	pop	{r7, pc}
 800c21a:	bf00      	nop
 800c21c:	200006d4 	.word	0x200006d4
 800c220:	200006b4 	.word	0x200006b4
 800c224:	200005b0 	.word	0x200005b0
 800c228:	2000066c 	.word	0x2000066c
 800c22c:	200005ac 	.word	0x200005ac
 800c230:	200006c0 	.word	0x200006c0

0800c234 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c234:	b480      	push	{r7}
 800c236:	b083      	sub	sp, #12
 800c238:	af00      	add	r7, sp, #0
 800c23a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c23c:	4b06      	ldr	r3, [pc, #24]	@ (800c258 <vTaskInternalSetTimeOutState+0x24>)
 800c23e:	681a      	ldr	r2, [r3, #0]
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c244:	4b05      	ldr	r3, [pc, #20]	@ (800c25c <vTaskInternalSetTimeOutState+0x28>)
 800c246:	681a      	ldr	r2, [r3, #0]
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	605a      	str	r2, [r3, #4]
}
 800c24c:	bf00      	nop
 800c24e:	370c      	adds	r7, #12
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr
 800c258:	200006c4 	.word	0x200006c4
 800c25c:	200006b0 	.word	0x200006b0

0800c260 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c260:	b580      	push	{r7, lr}
 800c262:	b088      	sub	sp, #32
 800c264:	af00      	add	r7, sp, #0
 800c266:	6078      	str	r0, [r7, #4]
 800c268:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d10b      	bne.n	800c288 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c274:	f383 8811 	msr	BASEPRI, r3
 800c278:	f3bf 8f6f 	isb	sy
 800c27c:	f3bf 8f4f 	dsb	sy
 800c280:	613b      	str	r3, [r7, #16]
}
 800c282:	bf00      	nop
 800c284:	bf00      	nop
 800c286:	e7fd      	b.n	800c284 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d10b      	bne.n	800c2a6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	60fb      	str	r3, [r7, #12]
}
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	e7fd      	b.n	800c2a2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c2a6:	f000 fb5f 	bl	800c968 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c2aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c320 <xTaskCheckForTimeOut+0xc0>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	69ba      	ldr	r2, [r7, #24]
 800c2b6:	1ad3      	subs	r3, r2, r3
 800c2b8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c2c2:	d102      	bne.n	800c2ca <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	61fb      	str	r3, [r7, #28]
 800c2c8:	e023      	b.n	800c312 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681a      	ldr	r2, [r3, #0]
 800c2ce:	4b15      	ldr	r3, [pc, #84]	@ (800c324 <xTaskCheckForTimeOut+0xc4>)
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d007      	beq.n	800c2e6 <xTaskCheckForTimeOut+0x86>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	69ba      	ldr	r2, [r7, #24]
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	d302      	bcc.n	800c2e6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	61fb      	str	r3, [r7, #28]
 800c2e4:	e015      	b.n	800c312 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	697a      	ldr	r2, [r7, #20]
 800c2ec:	429a      	cmp	r2, r3
 800c2ee:	d20b      	bcs.n	800c308 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c2f0:	683b      	ldr	r3, [r7, #0]
 800c2f2:	681a      	ldr	r2, [r3, #0]
 800c2f4:	697b      	ldr	r3, [r7, #20]
 800c2f6:	1ad2      	subs	r2, r2, r3
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f7ff ff99 	bl	800c234 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c302:	2300      	movs	r3, #0
 800c304:	61fb      	str	r3, [r7, #28]
 800c306:	e004      	b.n	800c312 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c308:	683b      	ldr	r3, [r7, #0]
 800c30a:	2200      	movs	r2, #0
 800c30c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c30e:	2301      	movs	r3, #1
 800c310:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c312:	f000 fb5b 	bl	800c9cc <vPortExitCritical>

	return xReturn;
 800c316:	69fb      	ldr	r3, [r7, #28]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	3720      	adds	r7, #32
 800c31c:	46bd      	mov	sp, r7
 800c31e:	bd80      	pop	{r7, pc}
 800c320:	200006b0 	.word	0x200006b0
 800c324:	200006c4 	.word	0x200006c4

0800c328 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c328:	b480      	push	{r7}
 800c32a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c32c:	4b03      	ldr	r3, [pc, #12]	@ (800c33c <vTaskMissedYield+0x14>)
 800c32e:	2201      	movs	r2, #1
 800c330:	601a      	str	r2, [r3, #0]
}
 800c332:	bf00      	nop
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	200006c0 	.word	0x200006c0

0800c340 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b082      	sub	sp, #8
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c348:	f000 f854 	bl	800c3f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c34c:	4b07      	ldr	r3, [pc, #28]	@ (800c36c <prvIdleTask+0x2c>)
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	2b01      	cmp	r3, #1
 800c352:	d907      	bls.n	800c364 <prvIdleTask+0x24>
			{
				taskYIELD();
 800c354:	4b06      	ldr	r3, [pc, #24]	@ (800c370 <prvIdleTask+0x30>)
 800c356:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c35a:	601a      	str	r2, [r3, #0]
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800c364:	f7f4 fa56 	bl	8000814 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c368:	e7ee      	b.n	800c348 <prvIdleTask+0x8>
 800c36a:	bf00      	nop
 800c36c:	200005b0 	.word	0x200005b0
 800c370:	e000ed04 	.word	0xe000ed04

0800c374 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b082      	sub	sp, #8
 800c378:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c37a:	2300      	movs	r3, #0
 800c37c:	607b      	str	r3, [r7, #4]
 800c37e:	e00c      	b.n	800c39a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c380:	687a      	ldr	r2, [r7, #4]
 800c382:	4613      	mov	r3, r2
 800c384:	009b      	lsls	r3, r3, #2
 800c386:	4413      	add	r3, r2
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	4a12      	ldr	r2, [pc, #72]	@ (800c3d4 <prvInitialiseTaskLists+0x60>)
 800c38c:	4413      	add	r3, r2
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fc9a 	bl	800acc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	3301      	adds	r3, #1
 800c398:	607b      	str	r3, [r7, #4]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	2b06      	cmp	r3, #6
 800c39e:	d9ef      	bls.n	800c380 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3a0:	480d      	ldr	r0, [pc, #52]	@ (800c3d8 <prvInitialiseTaskLists+0x64>)
 800c3a2:	f7fe fc91 	bl	800acc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3a6:	480d      	ldr	r0, [pc, #52]	@ (800c3dc <prvInitialiseTaskLists+0x68>)
 800c3a8:	f7fe fc8e 	bl	800acc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3ac:	480c      	ldr	r0, [pc, #48]	@ (800c3e0 <prvInitialiseTaskLists+0x6c>)
 800c3ae:	f7fe fc8b 	bl	800acc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3b2:	480c      	ldr	r0, [pc, #48]	@ (800c3e4 <prvInitialiseTaskLists+0x70>)
 800c3b4:	f7fe fc88 	bl	800acc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3b8:	480b      	ldr	r0, [pc, #44]	@ (800c3e8 <prvInitialiseTaskLists+0x74>)
 800c3ba:	f7fe fc85 	bl	800acc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3be:	4b0b      	ldr	r3, [pc, #44]	@ (800c3ec <prvInitialiseTaskLists+0x78>)
 800c3c0:	4a05      	ldr	r2, [pc, #20]	@ (800c3d8 <prvInitialiseTaskLists+0x64>)
 800c3c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c3f0 <prvInitialiseTaskLists+0x7c>)
 800c3c6:	4a05      	ldr	r2, [pc, #20]	@ (800c3dc <prvInitialiseTaskLists+0x68>)
 800c3c8:	601a      	str	r2, [r3, #0]
}
 800c3ca:	bf00      	nop
 800c3cc:	3708      	adds	r7, #8
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	bd80      	pop	{r7, pc}
 800c3d2:	bf00      	nop
 800c3d4:	200005b0 	.word	0x200005b0
 800c3d8:	2000063c 	.word	0x2000063c
 800c3dc:	20000650 	.word	0x20000650
 800c3e0:	2000066c 	.word	0x2000066c
 800c3e4:	20000680 	.word	0x20000680
 800c3e8:	20000698 	.word	0x20000698
 800c3ec:	20000664 	.word	0x20000664
 800c3f0:	20000668 	.word	0x20000668

0800c3f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b082      	sub	sp, #8
 800c3f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c3fa:	e019      	b.n	800c430 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c3fc:	f000 fab4 	bl	800c968 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c400:	4b10      	ldr	r3, [pc, #64]	@ (800c444 <prvCheckTasksWaitingTermination+0x50>)
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	3304      	adds	r3, #4
 800c40c:	4618      	mov	r0, r3
 800c40e:	f7fe fce5 	bl	800addc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c412:	4b0d      	ldr	r3, [pc, #52]	@ (800c448 <prvCheckTasksWaitingTermination+0x54>)
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	3b01      	subs	r3, #1
 800c418:	4a0b      	ldr	r2, [pc, #44]	@ (800c448 <prvCheckTasksWaitingTermination+0x54>)
 800c41a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c41c:	4b0b      	ldr	r3, [pc, #44]	@ (800c44c <prvCheckTasksWaitingTermination+0x58>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	3b01      	subs	r3, #1
 800c422:	4a0a      	ldr	r2, [pc, #40]	@ (800c44c <prvCheckTasksWaitingTermination+0x58>)
 800c424:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c426:	f000 fad1 	bl	800c9cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c42a:	6878      	ldr	r0, [r7, #4]
 800c42c:	f000 f810 	bl	800c450 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c430:	4b06      	ldr	r3, [pc, #24]	@ (800c44c <prvCheckTasksWaitingTermination+0x58>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1e1      	bne.n	800c3fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c438:	bf00      	nop
 800c43a:	bf00      	nop
 800c43c:	3708      	adds	r7, #8
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	20000680 	.word	0x20000680
 800c448:	200006ac 	.word	0x200006ac
 800c44c:	20000694 	.word	0x20000694

0800c450 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c450:	b580      	push	{r7, lr}
 800c452:	b084      	sub	sp, #16
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d108      	bne.n	800c474 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c466:	4618      	mov	r0, r3
 800c468:	f000 fc74 	bl	800cd54 <vPortFree>
				vPortFree( pxTCB );
 800c46c:	6878      	ldr	r0, [r7, #4]
 800c46e:	f000 fc71 	bl	800cd54 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c472:	e019      	b.n	800c4a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c47a:	2b01      	cmp	r3, #1
 800c47c:	d103      	bne.n	800c486 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800c47e:	6878      	ldr	r0, [r7, #4]
 800c480:	f000 fc68 	bl	800cd54 <vPortFree>
	}
 800c484:	e010      	b.n	800c4a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800c48c:	2b02      	cmp	r3, #2
 800c48e:	d00b      	beq.n	800c4a8 <prvDeleteTCB+0x58>
	__asm volatile
 800c490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c494:	f383 8811 	msr	BASEPRI, r3
 800c498:	f3bf 8f6f 	isb	sy
 800c49c:	f3bf 8f4f 	dsb	sy
 800c4a0:	60fb      	str	r3, [r7, #12]
}
 800c4a2:	bf00      	nop
 800c4a4:	bf00      	nop
 800c4a6:	e7fd      	b.n	800c4a4 <prvDeleteTCB+0x54>
	}
 800c4a8:	bf00      	nop
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b083      	sub	sp, #12
 800c4b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c4e8 <prvResetNextTaskUnblockTime+0x38>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d104      	bne.n	800c4ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c4c0:	4b0a      	ldr	r3, [pc, #40]	@ (800c4ec <prvResetNextTaskUnblockTime+0x3c>)
 800c4c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c4c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c4c8:	e008      	b.n	800c4dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c4ca:	4b07      	ldr	r3, [pc, #28]	@ (800c4e8 <prvResetNextTaskUnblockTime+0x38>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	68db      	ldr	r3, [r3, #12]
 800c4d0:	68db      	ldr	r3, [r3, #12]
 800c4d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	685b      	ldr	r3, [r3, #4]
 800c4d8:	4a04      	ldr	r2, [pc, #16]	@ (800c4ec <prvResetNextTaskUnblockTime+0x3c>)
 800c4da:	6013      	str	r3, [r2, #0]
}
 800c4dc:	bf00      	nop
 800c4de:	370c      	adds	r7, #12
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e6:	4770      	bx	lr
 800c4e8:	20000664 	.word	0x20000664
 800c4ec:	200006cc 	.word	0x200006cc

0800c4f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c4f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c524 <xTaskGetSchedulerState+0x34>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d102      	bne.n	800c504 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c4fe:	2301      	movs	r3, #1
 800c500:	607b      	str	r3, [r7, #4]
 800c502:	e008      	b.n	800c516 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c504:	4b08      	ldr	r3, [pc, #32]	@ (800c528 <xTaskGetSchedulerState+0x38>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c50c:	2302      	movs	r3, #2
 800c50e:	607b      	str	r3, [r7, #4]
 800c510:	e001      	b.n	800c516 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c512:	2300      	movs	r3, #0
 800c514:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c516:	687b      	ldr	r3, [r7, #4]
	}
 800c518:	4618      	mov	r0, r3
 800c51a:	370c      	adds	r7, #12
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	200006b8 	.word	0x200006b8
 800c528:	200006d4 	.word	0x200006d4

0800c52c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c538:	2300      	movs	r3, #0
 800c53a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d070      	beq.n	800c624 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c542:	4b3b      	ldr	r3, [pc, #236]	@ (800c630 <xTaskPriorityDisinherit+0x104>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	693a      	ldr	r2, [r7, #16]
 800c548:	429a      	cmp	r2, r3
 800c54a:	d00b      	beq.n	800c564 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	60fb      	str	r3, [r7, #12]
}
 800c55e:	bf00      	nop
 800c560:	bf00      	nop
 800c562:	e7fd      	b.n	800c560 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c564:	693b      	ldr	r3, [r7, #16]
 800c566:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d10b      	bne.n	800c584 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c570:	f383 8811 	msr	BASEPRI, r3
 800c574:	f3bf 8f6f 	isb	sy
 800c578:	f3bf 8f4f 	dsb	sy
 800c57c:	60bb      	str	r3, [r7, #8]
}
 800c57e:	bf00      	nop
 800c580:	bf00      	nop
 800c582:	e7fd      	b.n	800c580 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c588:	1e5a      	subs	r2, r3, #1
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c596:	429a      	cmp	r2, r3
 800c598:	d044      	beq.n	800c624 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d140      	bne.n	800c624 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	3304      	adds	r3, #4
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f7fe fc18 	bl	800addc <uxListRemove>
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d115      	bne.n	800c5de <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c5b2:	693b      	ldr	r3, [r7, #16]
 800c5b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5b6:	491f      	ldr	r1, [pc, #124]	@ (800c634 <xTaskPriorityDisinherit+0x108>)
 800c5b8:	4613      	mov	r3, r2
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	440b      	add	r3, r1
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d10a      	bne.n	800c5de <xTaskPriorityDisinherit+0xb2>
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5cc:	2201      	movs	r2, #1
 800c5ce:	fa02 f303 	lsl.w	r3, r2, r3
 800c5d2:	43da      	mvns	r2, r3
 800c5d4:	4b18      	ldr	r3, [pc, #96]	@ (800c638 <xTaskPriorityDisinherit+0x10c>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	4013      	ands	r3, r2
 800c5da:	4a17      	ldr	r2, [pc, #92]	@ (800c638 <xTaskPriorityDisinherit+0x10c>)
 800c5dc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c5de:	693b      	ldr	r3, [r7, #16]
 800c5e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ea:	f1c3 0207 	rsb	r2, r3, #7
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5f2:	693b      	ldr	r3, [r7, #16]
 800c5f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5f6:	2201      	movs	r2, #1
 800c5f8:	409a      	lsls	r2, r3
 800c5fa:	4b0f      	ldr	r3, [pc, #60]	@ (800c638 <xTaskPriorityDisinherit+0x10c>)
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	4a0d      	ldr	r2, [pc, #52]	@ (800c638 <xTaskPriorityDisinherit+0x10c>)
 800c602:	6013      	str	r3, [r2, #0]
 800c604:	693b      	ldr	r3, [r7, #16]
 800c606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c608:	4613      	mov	r3, r2
 800c60a:	009b      	lsls	r3, r3, #2
 800c60c:	4413      	add	r3, r2
 800c60e:	009b      	lsls	r3, r3, #2
 800c610:	4a08      	ldr	r2, [pc, #32]	@ (800c634 <xTaskPriorityDisinherit+0x108>)
 800c612:	441a      	add	r2, r3
 800c614:	693b      	ldr	r3, [r7, #16]
 800c616:	3304      	adds	r3, #4
 800c618:	4619      	mov	r1, r3
 800c61a:	4610      	mov	r0, r2
 800c61c:	f7fe fb81 	bl	800ad22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c620:	2301      	movs	r3, #1
 800c622:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c624:	697b      	ldr	r3, [r7, #20]
	}
 800c626:	4618      	mov	r0, r3
 800c628:	3718      	adds	r7, #24
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	200005ac 	.word	0x200005ac
 800c634:	200005b0 	.word	0x200005b0
 800c638:	200006b4 	.word	0x200006b4

0800c63c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b084      	sub	sp, #16
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
 800c644:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c646:	4b29      	ldr	r3, [pc, #164]	@ (800c6ec <prvAddCurrentTaskToDelayedList+0xb0>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c64c:	4b28      	ldr	r3, [pc, #160]	@ (800c6f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	3304      	adds	r3, #4
 800c652:	4618      	mov	r0, r3
 800c654:	f7fe fbc2 	bl	800addc <uxListRemove>
 800c658:	4603      	mov	r3, r0
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d10b      	bne.n	800c676 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c65e:	4b24      	ldr	r3, [pc, #144]	@ (800c6f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c664:	2201      	movs	r2, #1
 800c666:	fa02 f303 	lsl.w	r3, r2, r3
 800c66a:	43da      	mvns	r2, r3
 800c66c:	4b21      	ldr	r3, [pc, #132]	@ (800c6f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	4013      	ands	r3, r2
 800c672:	4a20      	ldr	r2, [pc, #128]	@ (800c6f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c674:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c67c:	d10a      	bne.n	800c694 <prvAddCurrentTaskToDelayedList+0x58>
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d007      	beq.n	800c694 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c684:	4b1a      	ldr	r3, [pc, #104]	@ (800c6f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	3304      	adds	r3, #4
 800c68a:	4619      	mov	r1, r3
 800c68c:	481a      	ldr	r0, [pc, #104]	@ (800c6f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c68e:	f7fe fb48 	bl	800ad22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c692:	e026      	b.n	800c6e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	4413      	add	r3, r2
 800c69a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c69c:	4b14      	ldr	r3, [pc, #80]	@ (800c6f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c6a4:	68ba      	ldr	r2, [r7, #8]
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	429a      	cmp	r2, r3
 800c6aa:	d209      	bcs.n	800c6c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6ac:	4b13      	ldr	r3, [pc, #76]	@ (800c6fc <prvAddCurrentTaskToDelayedList+0xc0>)
 800c6ae:	681a      	ldr	r2, [r3, #0]
 800c6b0:	4b0f      	ldr	r3, [pc, #60]	@ (800c6f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	f7fe fb56 	bl	800ad6a <vListInsert>
}
 800c6be:	e010      	b.n	800c6e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6c0:	4b0f      	ldr	r3, [pc, #60]	@ (800c700 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	4b0a      	ldr	r3, [pc, #40]	@ (800c6f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3304      	adds	r3, #4
 800c6ca:	4619      	mov	r1, r3
 800c6cc:	4610      	mov	r0, r2
 800c6ce:	f7fe fb4c 	bl	800ad6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c6d2:	4b0c      	ldr	r3, [pc, #48]	@ (800c704 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	68ba      	ldr	r2, [r7, #8]
 800c6d8:	429a      	cmp	r2, r3
 800c6da:	d202      	bcs.n	800c6e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c6dc:	4a09      	ldr	r2, [pc, #36]	@ (800c704 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c6de:	68bb      	ldr	r3, [r7, #8]
 800c6e0:	6013      	str	r3, [r2, #0]
}
 800c6e2:	bf00      	nop
 800c6e4:	3710      	adds	r7, #16
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	200006b0 	.word	0x200006b0
 800c6f0:	200005ac 	.word	0x200005ac
 800c6f4:	200006b4 	.word	0x200006b4
 800c6f8:	20000698 	.word	0x20000698
 800c6fc:	20000668 	.word	0x20000668
 800c700:	20000664 	.word	0x20000664
 800c704:	200006cc 	.word	0x200006cc

0800c708 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60f8      	str	r0, [r7, #12]
 800c710:	60b9      	str	r1, [r7, #8]
 800c712:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	3b04      	subs	r3, #4
 800c718:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	3b04      	subs	r3, #4
 800c726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c728:	68bb      	ldr	r3, [r7, #8]
 800c72a:	f023 0201 	bic.w	r2, r3, #1
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3b04      	subs	r3, #4
 800c736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c738:	4a0c      	ldr	r2, [pc, #48]	@ (800c76c <pxPortInitialiseStack+0x64>)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3b14      	subs	r3, #20
 800c742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c744:	687a      	ldr	r2, [r7, #4]
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	3b04      	subs	r3, #4
 800c74e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f06f 0202 	mvn.w	r2, #2
 800c756:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	3b20      	subs	r3, #32
 800c75c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c75e:	68fb      	ldr	r3, [r7, #12]
}
 800c760:	4618      	mov	r0, r3
 800c762:	3714      	adds	r7, #20
 800c764:	46bd      	mov	sp, r7
 800c766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76a:	4770      	bx	lr
 800c76c:	0800c771 	.word	0x0800c771

0800c770 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c776:	2300      	movs	r3, #0
 800c778:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c77a:	4b13      	ldr	r3, [pc, #76]	@ (800c7c8 <prvTaskExitError+0x58>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c782:	d00b      	beq.n	800c79c <prvTaskExitError+0x2c>
	__asm volatile
 800c784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c788:	f383 8811 	msr	BASEPRI, r3
 800c78c:	f3bf 8f6f 	isb	sy
 800c790:	f3bf 8f4f 	dsb	sy
 800c794:	60fb      	str	r3, [r7, #12]
}
 800c796:	bf00      	nop
 800c798:	bf00      	nop
 800c79a:	e7fd      	b.n	800c798 <prvTaskExitError+0x28>
	__asm volatile
 800c79c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a0:	f383 8811 	msr	BASEPRI, r3
 800c7a4:	f3bf 8f6f 	isb	sy
 800c7a8:	f3bf 8f4f 	dsb	sy
 800c7ac:	60bb      	str	r3, [r7, #8]
}
 800c7ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c7b0:	bf00      	nop
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d0fc      	beq.n	800c7b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c7b8:	bf00      	nop
 800c7ba:	bf00      	nop
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr
 800c7c6:	bf00      	nop
 800c7c8:	2000002c 	.word	0x2000002c
 800c7cc:	00000000 	.word	0x00000000

0800c7d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c7d0:	4b07      	ldr	r3, [pc, #28]	@ (800c7f0 <pxCurrentTCBConst2>)
 800c7d2:	6819      	ldr	r1, [r3, #0]
 800c7d4:	6808      	ldr	r0, [r1, #0]
 800c7d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7da:	f380 8809 	msr	PSP, r0
 800c7de:	f3bf 8f6f 	isb	sy
 800c7e2:	f04f 0000 	mov.w	r0, #0
 800c7e6:	f380 8811 	msr	BASEPRI, r0
 800c7ea:	4770      	bx	lr
 800c7ec:	f3af 8000 	nop.w

0800c7f0 <pxCurrentTCBConst2>:
 800c7f0:	200005ac 	.word	0x200005ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop

0800c7f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c7f8:	4808      	ldr	r0, [pc, #32]	@ (800c81c <prvPortStartFirstTask+0x24>)
 800c7fa:	6800      	ldr	r0, [r0, #0]
 800c7fc:	6800      	ldr	r0, [r0, #0]
 800c7fe:	f380 8808 	msr	MSP, r0
 800c802:	f04f 0000 	mov.w	r0, #0
 800c806:	f380 8814 	msr	CONTROL, r0
 800c80a:	b662      	cpsie	i
 800c80c:	b661      	cpsie	f
 800c80e:	f3bf 8f4f 	dsb	sy
 800c812:	f3bf 8f6f 	isb	sy
 800c816:	df00      	svc	0
 800c818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c81a:	bf00      	nop
 800c81c:	e000ed08 	.word	0xe000ed08

0800c820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c820:	b580      	push	{r7, lr}
 800c822:	b086      	sub	sp, #24
 800c824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c826:	4b47      	ldr	r3, [pc, #284]	@ (800c944 <xPortStartScheduler+0x124>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	4a47      	ldr	r2, [pc, #284]	@ (800c948 <xPortStartScheduler+0x128>)
 800c82c:	4293      	cmp	r3, r2
 800c82e:	d10b      	bne.n	800c848 <xPortStartScheduler+0x28>
	__asm volatile
 800c830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c834:	f383 8811 	msr	BASEPRI, r3
 800c838:	f3bf 8f6f 	isb	sy
 800c83c:	f3bf 8f4f 	dsb	sy
 800c840:	60fb      	str	r3, [r7, #12]
}
 800c842:	bf00      	nop
 800c844:	bf00      	nop
 800c846:	e7fd      	b.n	800c844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c848:	4b3e      	ldr	r3, [pc, #248]	@ (800c944 <xPortStartScheduler+0x124>)
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	4a3f      	ldr	r2, [pc, #252]	@ (800c94c <xPortStartScheduler+0x12c>)
 800c84e:	4293      	cmp	r3, r2
 800c850:	d10b      	bne.n	800c86a <xPortStartScheduler+0x4a>
	__asm volatile
 800c852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	613b      	str	r3, [r7, #16]
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop
 800c868:	e7fd      	b.n	800c866 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c86a:	4b39      	ldr	r3, [pc, #228]	@ (800c950 <xPortStartScheduler+0x130>)
 800c86c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c86e:	697b      	ldr	r3, [r7, #20]
 800c870:	781b      	ldrb	r3, [r3, #0]
 800c872:	b2db      	uxtb	r3, r3
 800c874:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	22ff      	movs	r2, #255	@ 0xff
 800c87a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	781b      	ldrb	r3, [r3, #0]
 800c880:	b2db      	uxtb	r3, r3
 800c882:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c884:	78fb      	ldrb	r3, [r7, #3]
 800c886:	b2db      	uxtb	r3, r3
 800c888:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c88c:	b2da      	uxtb	r2, r3
 800c88e:	4b31      	ldr	r3, [pc, #196]	@ (800c954 <xPortStartScheduler+0x134>)
 800c890:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c892:	4b31      	ldr	r3, [pc, #196]	@ (800c958 <xPortStartScheduler+0x138>)
 800c894:	2207      	movs	r2, #7
 800c896:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c898:	e009      	b.n	800c8ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c89a:	4b2f      	ldr	r3, [pc, #188]	@ (800c958 <xPortStartScheduler+0x138>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c958 <xPortStartScheduler+0x138>)
 800c8a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c8a4:	78fb      	ldrb	r3, [r7, #3]
 800c8a6:	b2db      	uxtb	r3, r3
 800c8a8:	005b      	lsls	r3, r3, #1
 800c8aa:	b2db      	uxtb	r3, r3
 800c8ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c8ae:	78fb      	ldrb	r3, [r7, #3]
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c8b6:	2b80      	cmp	r3, #128	@ 0x80
 800c8b8:	d0ef      	beq.n	800c89a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c8ba:	4b27      	ldr	r3, [pc, #156]	@ (800c958 <xPortStartScheduler+0x138>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f1c3 0307 	rsb	r3, r3, #7
 800c8c2:	2b04      	cmp	r3, #4
 800c8c4:	d00b      	beq.n	800c8de <xPortStartScheduler+0xbe>
	__asm volatile
 800c8c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ca:	f383 8811 	msr	BASEPRI, r3
 800c8ce:	f3bf 8f6f 	isb	sy
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	60bb      	str	r3, [r7, #8]
}
 800c8d8:	bf00      	nop
 800c8da:	bf00      	nop
 800c8dc:	e7fd      	b.n	800c8da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c8de:	4b1e      	ldr	r3, [pc, #120]	@ (800c958 <xPortStartScheduler+0x138>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	021b      	lsls	r3, r3, #8
 800c8e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c958 <xPortStartScheduler+0x138>)
 800c8e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c8e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c958 <xPortStartScheduler+0x138>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c8f0:	4a19      	ldr	r2, [pc, #100]	@ (800c958 <xPortStartScheduler+0x138>)
 800c8f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	b2da      	uxtb	r2, r3
 800c8f8:	697b      	ldr	r3, [r7, #20]
 800c8fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c8fc:	4b17      	ldr	r3, [pc, #92]	@ (800c95c <xPortStartScheduler+0x13c>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a16      	ldr	r2, [pc, #88]	@ (800c95c <xPortStartScheduler+0x13c>)
 800c902:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c906:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c908:	4b14      	ldr	r3, [pc, #80]	@ (800c95c <xPortStartScheduler+0x13c>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a13      	ldr	r2, [pc, #76]	@ (800c95c <xPortStartScheduler+0x13c>)
 800c90e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c912:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c914:	f000 f8da 	bl	800cacc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c918:	4b11      	ldr	r3, [pc, #68]	@ (800c960 <xPortStartScheduler+0x140>)
 800c91a:	2200      	movs	r2, #0
 800c91c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c91e:	f000 f8f9 	bl	800cb14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c922:	4b10      	ldr	r3, [pc, #64]	@ (800c964 <xPortStartScheduler+0x144>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	4a0f      	ldr	r2, [pc, #60]	@ (800c964 <xPortStartScheduler+0x144>)
 800c928:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c92c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c92e:	f7ff ff63 	bl	800c7f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c932:	f7ff fb73 	bl	800c01c <vTaskSwitchContext>
	prvTaskExitError();
 800c936:	f7ff ff1b 	bl	800c770 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c93a:	2300      	movs	r3, #0
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3718      	adds	r7, #24
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	e000ed00 	.word	0xe000ed00
 800c948:	410fc271 	.word	0x410fc271
 800c94c:	410fc270 	.word	0x410fc270
 800c950:	e000e400 	.word	0xe000e400
 800c954:	200006d8 	.word	0x200006d8
 800c958:	200006dc 	.word	0x200006dc
 800c95c:	e000ed20 	.word	0xe000ed20
 800c960:	2000002c 	.word	0x2000002c
 800c964:	e000ef34 	.word	0xe000ef34

0800c968 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c968:	b480      	push	{r7}
 800c96a:	b083      	sub	sp, #12
 800c96c:	af00      	add	r7, sp, #0
	__asm volatile
 800c96e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	607b      	str	r3, [r7, #4]
}
 800c980:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c982:	4b10      	ldr	r3, [pc, #64]	@ (800c9c4 <vPortEnterCritical+0x5c>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	3301      	adds	r3, #1
 800c988:	4a0e      	ldr	r2, [pc, #56]	@ (800c9c4 <vPortEnterCritical+0x5c>)
 800c98a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c98c:	4b0d      	ldr	r3, [pc, #52]	@ (800c9c4 <vPortEnterCritical+0x5c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d110      	bne.n	800c9b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c994:	4b0c      	ldr	r3, [pc, #48]	@ (800c9c8 <vPortEnterCritical+0x60>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	b2db      	uxtb	r3, r3
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00b      	beq.n	800c9b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	603b      	str	r3, [r7, #0]
}
 800c9b0:	bf00      	nop
 800c9b2:	bf00      	nop
 800c9b4:	e7fd      	b.n	800c9b2 <vPortEnterCritical+0x4a>
	}
}
 800c9b6:	bf00      	nop
 800c9b8:	370c      	adds	r7, #12
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	2000002c 	.word	0x2000002c
 800c9c8:	e000ed04 	.word	0xe000ed04

0800c9cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c9cc:	b480      	push	{r7}
 800c9ce:	b083      	sub	sp, #12
 800c9d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c9d2:	4b12      	ldr	r3, [pc, #72]	@ (800ca1c <vPortExitCritical+0x50>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d10b      	bne.n	800c9f2 <vPortExitCritical+0x26>
	__asm volatile
 800c9da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9de:	f383 8811 	msr	BASEPRI, r3
 800c9e2:	f3bf 8f6f 	isb	sy
 800c9e6:	f3bf 8f4f 	dsb	sy
 800c9ea:	607b      	str	r3, [r7, #4]
}
 800c9ec:	bf00      	nop
 800c9ee:	bf00      	nop
 800c9f0:	e7fd      	b.n	800c9ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c9f2:	4b0a      	ldr	r3, [pc, #40]	@ (800ca1c <vPortExitCritical+0x50>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	4a08      	ldr	r2, [pc, #32]	@ (800ca1c <vPortExitCritical+0x50>)
 800c9fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ca1c <vPortExitCritical+0x50>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d105      	bne.n	800ca10 <vPortExitCritical+0x44>
 800ca04:	2300      	movs	r3, #0
 800ca06:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ca08:	683b      	ldr	r3, [r7, #0]
 800ca0a:	f383 8811 	msr	BASEPRI, r3
}
 800ca0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr
 800ca1c:	2000002c 	.word	0x2000002c

0800ca20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca20:	f3ef 8009 	mrs	r0, PSP
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	4b15      	ldr	r3, [pc, #84]	@ (800ca80 <pxCurrentTCBConst>)
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	f01e 0f10 	tst.w	lr, #16
 800ca30:	bf08      	it	eq
 800ca32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca3a:	6010      	str	r0, [r2, #0]
 800ca3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca44:	f380 8811 	msr	BASEPRI, r0
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f7ff fae4 	bl	800c01c <vTaskSwitchContext>
 800ca54:	f04f 0000 	mov.w	r0, #0
 800ca58:	f380 8811 	msr	BASEPRI, r0
 800ca5c:	bc09      	pop	{r0, r3}
 800ca5e:	6819      	ldr	r1, [r3, #0]
 800ca60:	6808      	ldr	r0, [r1, #0]
 800ca62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca66:	f01e 0f10 	tst.w	lr, #16
 800ca6a:	bf08      	it	eq
 800ca6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ca70:	f380 8809 	msr	PSP, r0
 800ca74:	f3bf 8f6f 	isb	sy
 800ca78:	4770      	bx	lr
 800ca7a:	bf00      	nop
 800ca7c:	f3af 8000 	nop.w

0800ca80 <pxCurrentTCBConst>:
 800ca80:	200005ac 	.word	0x200005ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ca84:	bf00      	nop
 800ca86:	bf00      	nop

0800ca88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b082      	sub	sp, #8
 800ca8c:	af00      	add	r7, sp, #0
	__asm volatile
 800ca8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca92:	f383 8811 	msr	BASEPRI, r3
 800ca96:	f3bf 8f6f 	isb	sy
 800ca9a:	f3bf 8f4f 	dsb	sy
 800ca9e:	607b      	str	r3, [r7, #4]
}
 800caa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800caa2:	f7ff fa01 	bl	800bea8 <xTaskIncrementTick>
 800caa6:	4603      	mov	r3, r0
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d003      	beq.n	800cab4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800caac:	4b06      	ldr	r3, [pc, #24]	@ (800cac8 <SysTick_Handler+0x40>)
 800caae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cab2:	601a      	str	r2, [r3, #0]
 800cab4:	2300      	movs	r3, #0
 800cab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cab8:	683b      	ldr	r3, [r7, #0]
 800caba:	f383 8811 	msr	BASEPRI, r3
}
 800cabe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cac0:	bf00      	nop
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	e000ed04 	.word	0xe000ed04

0800cacc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cacc:	b480      	push	{r7}
 800cace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cad0:	4b0b      	ldr	r3, [pc, #44]	@ (800cb00 <vPortSetupTimerInterrupt+0x34>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cad6:	4b0b      	ldr	r3, [pc, #44]	@ (800cb04 <vPortSetupTimerInterrupt+0x38>)
 800cad8:	2200      	movs	r2, #0
 800cada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cadc:	4b0a      	ldr	r3, [pc, #40]	@ (800cb08 <vPortSetupTimerInterrupt+0x3c>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	4a0a      	ldr	r2, [pc, #40]	@ (800cb0c <vPortSetupTimerInterrupt+0x40>)
 800cae2:	fba2 2303 	umull	r2, r3, r2, r3
 800cae6:	099b      	lsrs	r3, r3, #6
 800cae8:	4a09      	ldr	r2, [pc, #36]	@ (800cb10 <vPortSetupTimerInterrupt+0x44>)
 800caea:	3b01      	subs	r3, #1
 800caec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800caee:	4b04      	ldr	r3, [pc, #16]	@ (800cb00 <vPortSetupTimerInterrupt+0x34>)
 800caf0:	2207      	movs	r2, #7
 800caf2:	601a      	str	r2, [r3, #0]
}
 800caf4:	bf00      	nop
 800caf6:	46bd      	mov	sp, r7
 800caf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafc:	4770      	bx	lr
 800cafe:	bf00      	nop
 800cb00:	e000e010 	.word	0xe000e010
 800cb04:	e000e018 	.word	0xe000e018
 800cb08:	20000000 	.word	0x20000000
 800cb0c:	10624dd3 	.word	0x10624dd3
 800cb10:	e000e014 	.word	0xe000e014

0800cb14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cb14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cb24 <vPortEnableVFP+0x10>
 800cb18:	6801      	ldr	r1, [r0, #0]
 800cb1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cb1e:	6001      	str	r1, [r0, #0]
 800cb20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cb22:	bf00      	nop
 800cb24:	e000ed88 	.word	0xe000ed88

0800cb28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cb28:	b480      	push	{r7}
 800cb2a:	b085      	sub	sp, #20
 800cb2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cb2e:	f3ef 8305 	mrs	r3, IPSR
 800cb32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b0f      	cmp	r3, #15
 800cb38:	d915      	bls.n	800cb66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cb3a:	4a18      	ldr	r2, [pc, #96]	@ (800cb9c <vPortValidateInterruptPriority+0x74>)
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	4413      	add	r3, r2
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cb44:	4b16      	ldr	r3, [pc, #88]	@ (800cba0 <vPortValidateInterruptPriority+0x78>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	7afa      	ldrb	r2, [r7, #11]
 800cb4a:	429a      	cmp	r2, r3
 800cb4c:	d20b      	bcs.n	800cb66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cb4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb52:	f383 8811 	msr	BASEPRI, r3
 800cb56:	f3bf 8f6f 	isb	sy
 800cb5a:	f3bf 8f4f 	dsb	sy
 800cb5e:	607b      	str	r3, [r7, #4]
}
 800cb60:	bf00      	nop
 800cb62:	bf00      	nop
 800cb64:	e7fd      	b.n	800cb62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb66:	4b0f      	ldr	r3, [pc, #60]	@ (800cba4 <vPortValidateInterruptPriority+0x7c>)
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cb6e:	4b0e      	ldr	r3, [pc, #56]	@ (800cba8 <vPortValidateInterruptPriority+0x80>)
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	429a      	cmp	r2, r3
 800cb74:	d90b      	bls.n	800cb8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cb76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb7a:	f383 8811 	msr	BASEPRI, r3
 800cb7e:	f3bf 8f6f 	isb	sy
 800cb82:	f3bf 8f4f 	dsb	sy
 800cb86:	603b      	str	r3, [r7, #0]
}
 800cb88:	bf00      	nop
 800cb8a:	bf00      	nop
 800cb8c:	e7fd      	b.n	800cb8a <vPortValidateInterruptPriority+0x62>
	}
 800cb8e:	bf00      	nop
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	e000e3f0 	.word	0xe000e3f0
 800cba0:	200006d8 	.word	0x200006d8
 800cba4:	e000ed0c 	.word	0xe000ed0c
 800cba8:	200006dc 	.word	0x200006dc

0800cbac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b08a      	sub	sp, #40	@ 0x28
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cbb8:	f7ff f8ca 	bl	800bd50 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cbbc:	4b5f      	ldr	r3, [pc, #380]	@ (800cd3c <pvPortMalloc+0x190>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d101      	bne.n	800cbc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cbc4:	f000 f92a 	bl	800ce1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cbc8:	4b5d      	ldr	r3, [pc, #372]	@ (800cd40 <pvPortMalloc+0x194>)
 800cbca:	681a      	ldr	r2, [r3, #0]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	4013      	ands	r3, r2
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	f040 8095 	bne.w	800cd00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d01e      	beq.n	800cc1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cbdc:	2208      	movs	r2, #8
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	f003 0307 	and.w	r3, r3, #7
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d015      	beq.n	800cc1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f023 0307 	bic.w	r3, r3, #7
 800cbf4:	3308      	adds	r3, #8
 800cbf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f003 0307 	and.w	r3, r3, #7
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d00b      	beq.n	800cc1a <pvPortMalloc+0x6e>
	__asm volatile
 800cc02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc06:	f383 8811 	msr	BASEPRI, r3
 800cc0a:	f3bf 8f6f 	isb	sy
 800cc0e:	f3bf 8f4f 	dsb	sy
 800cc12:	617b      	str	r3, [r7, #20]
}
 800cc14:	bf00      	nop
 800cc16:	bf00      	nop
 800cc18:	e7fd      	b.n	800cc16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d06f      	beq.n	800cd00 <pvPortMalloc+0x154>
 800cc20:	4b48      	ldr	r3, [pc, #288]	@ (800cd44 <pvPortMalloc+0x198>)
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d86a      	bhi.n	800cd00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cc2a:	4b47      	ldr	r3, [pc, #284]	@ (800cd48 <pvPortMalloc+0x19c>)
 800cc2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cc2e:	4b46      	ldr	r3, [pc, #280]	@ (800cd48 <pvPortMalloc+0x19c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc34:	e004      	b.n	800cc40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800cc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cc3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	429a      	cmp	r2, r3
 800cc48:	d903      	bls.n	800cc52 <pvPortMalloc+0xa6>
 800cc4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d1f1      	bne.n	800cc36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cc52:	4b3a      	ldr	r3, [pc, #232]	@ (800cd3c <pvPortMalloc+0x190>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc58:	429a      	cmp	r2, r3
 800cc5a:	d051      	beq.n	800cd00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cc5c:	6a3b      	ldr	r3, [r7, #32]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2208      	movs	r2, #8
 800cc62:	4413      	add	r3, r2
 800cc64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cc66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc68:	681a      	ldr	r2, [r3, #0]
 800cc6a:	6a3b      	ldr	r3, [r7, #32]
 800cc6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cc6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc70:	685a      	ldr	r2, [r3, #4]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	1ad2      	subs	r2, r2, r3
 800cc76:	2308      	movs	r3, #8
 800cc78:	005b      	lsls	r3, r3, #1
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d920      	bls.n	800ccc0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cc7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	4413      	add	r3, r2
 800cc84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	f003 0307 	and.w	r3, r3, #7
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00b      	beq.n	800cca8 <pvPortMalloc+0xfc>
	__asm volatile
 800cc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc94:	f383 8811 	msr	BASEPRI, r3
 800cc98:	f3bf 8f6f 	isb	sy
 800cc9c:	f3bf 8f4f 	dsb	sy
 800cca0:	613b      	str	r3, [r7, #16]
}
 800cca2:	bf00      	nop
 800cca4:	bf00      	nop
 800cca6:	e7fd      	b.n	800cca4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccaa:	685a      	ldr	r2, [r3, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	1ad2      	subs	r2, r2, r3
 800ccb0:	69bb      	ldr	r3, [r7, #24]
 800ccb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ccb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccb6:	687a      	ldr	r2, [r7, #4]
 800ccb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ccba:	69b8      	ldr	r0, [r7, #24]
 800ccbc:	f000 f910 	bl	800cee0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ccc0:	4b20      	ldr	r3, [pc, #128]	@ (800cd44 <pvPortMalloc+0x198>)
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc6:	685b      	ldr	r3, [r3, #4]
 800ccc8:	1ad3      	subs	r3, r2, r3
 800ccca:	4a1e      	ldr	r2, [pc, #120]	@ (800cd44 <pvPortMalloc+0x198>)
 800cccc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ccce:	4b1d      	ldr	r3, [pc, #116]	@ (800cd44 <pvPortMalloc+0x198>)
 800ccd0:	681a      	ldr	r2, [r3, #0]
 800ccd2:	4b1e      	ldr	r3, [pc, #120]	@ (800cd4c <pvPortMalloc+0x1a0>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	429a      	cmp	r2, r3
 800ccd8:	d203      	bcs.n	800cce2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ccda:	4b1a      	ldr	r3, [pc, #104]	@ (800cd44 <pvPortMalloc+0x198>)
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	4a1b      	ldr	r2, [pc, #108]	@ (800cd4c <pvPortMalloc+0x1a0>)
 800cce0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cce4:	685a      	ldr	r2, [r3, #4]
 800cce6:	4b16      	ldr	r3, [pc, #88]	@ (800cd40 <pvPortMalloc+0x194>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	431a      	orrs	r2, r3
 800ccec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ccf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ccf6:	4b16      	ldr	r3, [pc, #88]	@ (800cd50 <pvPortMalloc+0x1a4>)
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	4a14      	ldr	r2, [pc, #80]	@ (800cd50 <pvPortMalloc+0x1a4>)
 800ccfe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cd00:	f7ff f834 	bl	800bd6c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800cd0a:	f7f3 fd95 	bl	8000838 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd0e:	69fb      	ldr	r3, [r7, #28]
 800cd10:	f003 0307 	and.w	r3, r3, #7
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00b      	beq.n	800cd30 <pvPortMalloc+0x184>
	__asm volatile
 800cd18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1c:	f383 8811 	msr	BASEPRI, r3
 800cd20:	f3bf 8f6f 	isb	sy
 800cd24:	f3bf 8f4f 	dsb	sy
 800cd28:	60fb      	str	r3, [r7, #12]
}
 800cd2a:	bf00      	nop
 800cd2c:	bf00      	nop
 800cd2e:	e7fd      	b.n	800cd2c <pvPortMalloc+0x180>
	return pvReturn;
 800cd30:	69fb      	ldr	r3, [r7, #28]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3728      	adds	r7, #40	@ 0x28
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	bf00      	nop
 800cd3c:	200086e8 	.word	0x200086e8
 800cd40:	200086fc 	.word	0x200086fc
 800cd44:	200086ec 	.word	0x200086ec
 800cd48:	200086e0 	.word	0x200086e0
 800cd4c:	200086f0 	.word	0x200086f0
 800cd50:	200086f4 	.word	0x200086f4

0800cd54 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b086      	sub	sp, #24
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d04f      	beq.n	800ce06 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cd66:	2308      	movs	r3, #8
 800cd68:	425b      	negs	r3, r3
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	685a      	ldr	r2, [r3, #4]
 800cd78:	4b25      	ldr	r3, [pc, #148]	@ (800ce10 <vPortFree+0xbc>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	4013      	ands	r3, r2
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d10b      	bne.n	800cd9a <vPortFree+0x46>
	__asm volatile
 800cd82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd86:	f383 8811 	msr	BASEPRI, r3
 800cd8a:	f3bf 8f6f 	isb	sy
 800cd8e:	f3bf 8f4f 	dsb	sy
 800cd92:	60fb      	str	r3, [r7, #12]
}
 800cd94:	bf00      	nop
 800cd96:	bf00      	nop
 800cd98:	e7fd      	b.n	800cd96 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d00b      	beq.n	800cdba <vPortFree+0x66>
	__asm volatile
 800cda2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda6:	f383 8811 	msr	BASEPRI, r3
 800cdaa:	f3bf 8f6f 	isb	sy
 800cdae:	f3bf 8f4f 	dsb	sy
 800cdb2:	60bb      	str	r3, [r7, #8]
}
 800cdb4:	bf00      	nop
 800cdb6:	bf00      	nop
 800cdb8:	e7fd      	b.n	800cdb6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cdba:	693b      	ldr	r3, [r7, #16]
 800cdbc:	685a      	ldr	r2, [r3, #4]
 800cdbe:	4b14      	ldr	r3, [pc, #80]	@ (800ce10 <vPortFree+0xbc>)
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	4013      	ands	r3, r2
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d01e      	beq.n	800ce06 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cdc8:	693b      	ldr	r3, [r7, #16]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d11a      	bne.n	800ce06 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdd0:	693b      	ldr	r3, [r7, #16]
 800cdd2:	685a      	ldr	r2, [r3, #4]
 800cdd4:	4b0e      	ldr	r3, [pc, #56]	@ (800ce10 <vPortFree+0xbc>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	43db      	mvns	r3, r3
 800cdda:	401a      	ands	r2, r3
 800cddc:	693b      	ldr	r3, [r7, #16]
 800cdde:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cde0:	f7fe ffb6 	bl	800bd50 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	685a      	ldr	r2, [r3, #4]
 800cde8:	4b0a      	ldr	r3, [pc, #40]	@ (800ce14 <vPortFree+0xc0>)
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	4413      	add	r3, r2
 800cdee:	4a09      	ldr	r2, [pc, #36]	@ (800ce14 <vPortFree+0xc0>)
 800cdf0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cdf2:	6938      	ldr	r0, [r7, #16]
 800cdf4:	f000 f874 	bl	800cee0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cdf8:	4b07      	ldr	r3, [pc, #28]	@ (800ce18 <vPortFree+0xc4>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	3301      	adds	r3, #1
 800cdfe:	4a06      	ldr	r2, [pc, #24]	@ (800ce18 <vPortFree+0xc4>)
 800ce00:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ce02:	f7fe ffb3 	bl	800bd6c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ce06:	bf00      	nop
 800ce08:	3718      	adds	r7, #24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	200086fc 	.word	0x200086fc
 800ce14:	200086ec 	.word	0x200086ec
 800ce18:	200086f8 	.word	0x200086f8

0800ce1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ce1c:	b480      	push	{r7}
 800ce1e:	b085      	sub	sp, #20
 800ce20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ce22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ce26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ce28:	4b27      	ldr	r3, [pc, #156]	@ (800cec8 <prvHeapInit+0xac>)
 800ce2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	f003 0307 	and.w	r3, r3, #7
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00c      	beq.n	800ce50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	3307      	adds	r3, #7
 800ce3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f023 0307 	bic.w	r3, r3, #7
 800ce42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ce44:	68ba      	ldr	r2, [r7, #8]
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	1ad3      	subs	r3, r2, r3
 800ce4a:	4a1f      	ldr	r2, [pc, #124]	@ (800cec8 <prvHeapInit+0xac>)
 800ce4c:	4413      	add	r3, r2
 800ce4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ce54:	4a1d      	ldr	r2, [pc, #116]	@ (800cecc <prvHeapInit+0xb0>)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ce5a:	4b1c      	ldr	r3, [pc, #112]	@ (800cecc <prvHeapInit+0xb0>)
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	68ba      	ldr	r2, [r7, #8]
 800ce64:	4413      	add	r3, r2
 800ce66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ce68:	2208      	movs	r2, #8
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	1a9b      	subs	r3, r3, r2
 800ce6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f023 0307 	bic.w	r3, r3, #7
 800ce76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	4a15      	ldr	r2, [pc, #84]	@ (800ced0 <prvHeapInit+0xb4>)
 800ce7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ce7e:	4b14      	ldr	r3, [pc, #80]	@ (800ced0 <prvHeapInit+0xb4>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	2200      	movs	r2, #0
 800ce84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ce86:	4b12      	ldr	r3, [pc, #72]	@ (800ced0 <prvHeapInit+0xb4>)
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	1ad2      	subs	r2, r2, r3
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ce9c:	4b0c      	ldr	r3, [pc, #48]	@ (800ced0 <prvHeapInit+0xb4>)
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	685b      	ldr	r3, [r3, #4]
 800cea8:	4a0a      	ldr	r2, [pc, #40]	@ (800ced4 <prvHeapInit+0xb8>)
 800ceaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	685b      	ldr	r3, [r3, #4]
 800ceb0:	4a09      	ldr	r2, [pc, #36]	@ (800ced8 <prvHeapInit+0xbc>)
 800ceb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ceb4:	4b09      	ldr	r3, [pc, #36]	@ (800cedc <prvHeapInit+0xc0>)
 800ceb6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ceba:	601a      	str	r2, [r3, #0]
}
 800cebc:	bf00      	nop
 800cebe:	3714      	adds	r7, #20
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr
 800cec8:	200006e0 	.word	0x200006e0
 800cecc:	200086e0 	.word	0x200086e0
 800ced0:	200086e8 	.word	0x200086e8
 800ced4:	200086f0 	.word	0x200086f0
 800ced8:	200086ec 	.word	0x200086ec
 800cedc:	200086fc 	.word	0x200086fc

0800cee0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cee0:	b480      	push	{r7}
 800cee2:	b085      	sub	sp, #20
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cee8:	4b28      	ldr	r3, [pc, #160]	@ (800cf8c <prvInsertBlockIntoFreeList+0xac>)
 800ceea:	60fb      	str	r3, [r7, #12]
 800ceec:	e002      	b.n	800cef4 <prvInsertBlockIntoFreeList+0x14>
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	60fb      	str	r3, [r7, #12]
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	429a      	cmp	r2, r3
 800cefc:	d8f7      	bhi.n	800ceee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	685b      	ldr	r3, [r3, #4]
 800cf06:	68ba      	ldr	r2, [r7, #8]
 800cf08:	4413      	add	r3, r2
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d108      	bne.n	800cf22 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	685a      	ldr	r2, [r3, #4]
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	685b      	ldr	r3, [r3, #4]
 800cf18:	441a      	add	r2, r3
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685b      	ldr	r3, [r3, #4]
 800cf2a:	68ba      	ldr	r2, [r7, #8]
 800cf2c:	441a      	add	r2, r3
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d118      	bne.n	800cf68 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	4b15      	ldr	r3, [pc, #84]	@ (800cf90 <prvInsertBlockIntoFreeList+0xb0>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d00d      	beq.n	800cf5e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	685a      	ldr	r2, [r3, #4]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	441a      	add	r2, r3
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	681a      	ldr	r2, [r3, #0]
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	601a      	str	r2, [r3, #0]
 800cf5c:	e008      	b.n	800cf70 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cf5e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf90 <prvInsertBlockIntoFreeList+0xb0>)
 800cf60:	681a      	ldr	r2, [r3, #0]
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	601a      	str	r2, [r3, #0]
 800cf66:	e003      	b.n	800cf70 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cf70:	68fa      	ldr	r2, [r7, #12]
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	429a      	cmp	r2, r3
 800cf76:	d002      	beq.n	800cf7e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	687a      	ldr	r2, [r7, #4]
 800cf7c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cf7e:	bf00      	nop
 800cf80:	3714      	adds	r7, #20
 800cf82:	46bd      	mov	sp, r7
 800cf84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf88:	4770      	bx	lr
 800cf8a:	bf00      	nop
 800cf8c:	200086e0 	.word	0x200086e0
 800cf90:	200086e8 	.word	0x200086e8

0800cf94 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800cf98:	2200      	movs	r2, #0
 800cf9a:	490e      	ldr	r1, [pc, #56]	@ (800cfd4 <MX_USB_HOST_Init+0x40>)
 800cf9c:	480e      	ldr	r0, [pc, #56]	@ (800cfd8 <MX_USB_HOST_Init+0x44>)
 800cf9e:	f7fb fe0d 	bl	8008bbc <USBH_Init>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d001      	beq.n	800cfac <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800cfa8:	f7f4 f934 	bl	8001214 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800cfac:	490b      	ldr	r1, [pc, #44]	@ (800cfdc <MX_USB_HOST_Init+0x48>)
 800cfae:	480a      	ldr	r0, [pc, #40]	@ (800cfd8 <MX_USB_HOST_Init+0x44>)
 800cfb0:	f7fb fed9 	bl	8008d66 <USBH_RegisterClass>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d001      	beq.n	800cfbe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800cfba:	f7f4 f92b 	bl	8001214 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800cfbe:	4806      	ldr	r0, [pc, #24]	@ (800cfd8 <MX_USB_HOST_Init+0x44>)
 800cfc0:	f7fb ff5d 	bl	8008e7e <USBH_Start>
 800cfc4:	4603      	mov	r3, r0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d001      	beq.n	800cfce <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800cfca:	f7f4 f923 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800cfce:	bf00      	nop
 800cfd0:	bd80      	pop	{r7, pc}
 800cfd2:	bf00      	nop
 800cfd4:	0800cfe1 	.word	0x0800cfe1
 800cfd8:	20008700 	.word	0x20008700
 800cfdc:	2000000c 	.word	0x2000000c

0800cfe0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
 800cfe8:	460b      	mov	r3, r1
 800cfea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cfec:	78fb      	ldrb	r3, [r7, #3]
 800cfee:	3b01      	subs	r3, #1
 800cff0:	2b04      	cmp	r3, #4
 800cff2:	d819      	bhi.n	800d028 <USBH_UserProcess+0x48>
 800cff4:	a201      	add	r2, pc, #4	@ (adr r2, 800cffc <USBH_UserProcess+0x1c>)
 800cff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cffa:	bf00      	nop
 800cffc:	0800d029 	.word	0x0800d029
 800d000:	0800d019 	.word	0x0800d019
 800d004:	0800d029 	.word	0x0800d029
 800d008:	0800d021 	.word	0x0800d021
 800d00c:	0800d011 	.word	0x0800d011
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d010:	4b09      	ldr	r3, [pc, #36]	@ (800d038 <USBH_UserProcess+0x58>)
 800d012:	2203      	movs	r2, #3
 800d014:	701a      	strb	r2, [r3, #0]
  break;
 800d016:	e008      	b.n	800d02a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d018:	4b07      	ldr	r3, [pc, #28]	@ (800d038 <USBH_UserProcess+0x58>)
 800d01a:	2202      	movs	r2, #2
 800d01c:	701a      	strb	r2, [r3, #0]
  break;
 800d01e:	e004      	b.n	800d02a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d020:	4b05      	ldr	r3, [pc, #20]	@ (800d038 <USBH_UserProcess+0x58>)
 800d022:	2201      	movs	r2, #1
 800d024:	701a      	strb	r2, [r3, #0]
  break;
 800d026:	e000      	b.n	800d02a <USBH_UserProcess+0x4a>

  default:
  break;
 800d028:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d02a:	bf00      	nop
 800d02c:	370c      	adds	r7, #12
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	20008ae4 	.word	0x20008ae4

0800d03c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b08a      	sub	sp, #40	@ 0x28
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d044:	f107 0314 	add.w	r3, r7, #20
 800d048:	2200      	movs	r2, #0
 800d04a:	601a      	str	r2, [r3, #0]
 800d04c:	605a      	str	r2, [r3, #4]
 800d04e:	609a      	str	r2, [r3, #8]
 800d050:	60da      	str	r2, [r3, #12]
 800d052:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a24      	ldr	r2, [pc, #144]	@ (800d0ec <HAL_HCD_MspInit+0xb0>)
 800d05a:	4293      	cmp	r3, r2
 800d05c:	d141      	bne.n	800d0e2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d05e:	2300      	movs	r3, #0
 800d060:	613b      	str	r3, [r7, #16]
 800d062:	4b23      	ldr	r3, [pc, #140]	@ (800d0f0 <HAL_HCD_MspInit+0xb4>)
 800d064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d066:	4a22      	ldr	r2, [pc, #136]	@ (800d0f0 <HAL_HCD_MspInit+0xb4>)
 800d068:	f043 0302 	orr.w	r3, r3, #2
 800d06c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d06e:	4b20      	ldr	r3, [pc, #128]	@ (800d0f0 <HAL_HCD_MspInit+0xb4>)
 800d070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d072:	f003 0302 	and.w	r3, r3, #2
 800d076:	613b      	str	r3, [r7, #16]
 800d078:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800d07a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800d07e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d080:	2302      	movs	r3, #2
 800d082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d084:	2300      	movs	r3, #0
 800d086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800d088:	2300      	movs	r3, #0
 800d08a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800d08c:	230c      	movs	r3, #12
 800d08e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d090:	f107 0314 	add.w	r3, r7, #20
 800d094:	4619      	mov	r1, r3
 800d096:	4817      	ldr	r0, [pc, #92]	@ (800d0f4 <HAL_HCD_MspInit+0xb8>)
 800d098:	f7f4 fed2 	bl	8001e40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800d09c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d0a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d0a2:	2300      	movs	r3, #0
 800d0a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800d0aa:	f107 0314 	add.w	r3, r7, #20
 800d0ae:	4619      	mov	r1, r3
 800d0b0:	4810      	ldr	r0, [pc, #64]	@ (800d0f4 <HAL_HCD_MspInit+0xb8>)
 800d0b2:	f7f4 fec5 	bl	8001e40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	60fb      	str	r3, [r7, #12]
 800d0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800d0f0 <HAL_HCD_MspInit+0xb4>)
 800d0bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0be:	4a0c      	ldr	r2, [pc, #48]	@ (800d0f0 <HAL_HCD_MspInit+0xb4>)
 800d0c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800d0c4:	6313      	str	r3, [r2, #48]	@ 0x30
 800d0c6:	4b0a      	ldr	r3, [pc, #40]	@ (800d0f0 <HAL_HCD_MspInit+0xb4>)
 800d0c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d0ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800d0ce:	60fb      	str	r3, [r7, #12]
 800d0d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	2105      	movs	r1, #5
 800d0d6:	204d      	movs	r0, #77	@ 0x4d
 800d0d8:	f7f4 fc80 	bl	80019dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800d0dc:	204d      	movs	r0, #77	@ 0x4d
 800d0de:	f7f4 fc99 	bl	8001a14 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800d0e2:	bf00      	nop
 800d0e4:	3728      	adds	r7, #40	@ 0x28
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
 800d0ea:	bf00      	nop
 800d0ec:	40040000 	.word	0x40040000
 800d0f0:	40023800 	.word	0x40023800
 800d0f4:	40020400 	.word	0x40020400

0800d0f8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d0f8:	b580      	push	{r7, lr}
 800d0fa:	b082      	sub	sp, #8
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d106:	4618      	mov	r0, r3
 800d108:	f7fc fb6b 	bl	80097e2 <USBH_LL_IncTimer>
}
 800d10c:	bf00      	nop
 800d10e:	3708      	adds	r7, #8
 800d110:	46bd      	mov	sp, r7
 800d112:	bd80      	pop	{r7, pc}

0800d114 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d114:	b580      	push	{r7, lr}
 800d116:	b082      	sub	sp, #8
 800d118:	af00      	add	r7, sp, #0
 800d11a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d122:	4618      	mov	r0, r3
 800d124:	f7fc fbaf 	bl	8009886 <USBH_LL_Connect>
}
 800d128:	bf00      	nop
 800d12a:	3708      	adds	r7, #8
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}

0800d130 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d130:	b580      	push	{r7, lr}
 800d132:	b082      	sub	sp, #8
 800d134:	af00      	add	r7, sp, #0
 800d136:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d13e:	4618      	mov	r0, r3
 800d140:	f7fc fbc4 	bl	80098cc <USBH_LL_Disconnect>
}
 800d144:	bf00      	nop
 800d146:	3708      	adds	r7, #8
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b082      	sub	sp, #8
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
 800d154:	460b      	mov	r3, r1
 800d156:	70fb      	strb	r3, [r7, #3]
 800d158:	4613      	mov	r3, r2
 800d15a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d162:	4618      	mov	r0, r3
 800d164:	f7fc fbf9 	bl	800995a <USBH_LL_NotifyURBChange>
#endif
}
 800d168:	bf00      	nop
 800d16a:	3708      	adds	r7, #8
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d17e:	4618      	mov	r0, r3
 800d180:	f7fc fb59 	bl	8009836 <USBH_LL_PortEnabled>
}
 800d184:	bf00      	nop
 800d186:	3708      	adds	r7, #8
 800d188:	46bd      	mov	sp, r7
 800d18a:	bd80      	pop	{r7, pc}

0800d18c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
 800d192:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d19a:	4618      	mov	r0, r3
 800d19c:	f7fc fb65 	bl	800986a <USBH_LL_PortDisabled>
}
 800d1a0:	bf00      	nop
 800d1a2:	3708      	adds	r7, #8
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}

0800d1a8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d132      	bne.n	800d220 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800d1ba:	4a1c      	ldr	r2, [pc, #112]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	4a19      	ldr	r2, [pc, #100]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1c6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800d1ca:	4b18      	ldr	r3, [pc, #96]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1cc:	4a18      	ldr	r2, [pc, #96]	@ (800d230 <USBH_LL_Init+0x88>)
 800d1ce:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800d1d0:	4b16      	ldr	r3, [pc, #88]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1d2:	220c      	movs	r2, #12
 800d1d4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800d1d6:	4b15      	ldr	r3, [pc, #84]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1d8:	2201      	movs	r2, #1
 800d1da:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800d1dc:	4b13      	ldr	r3, [pc, #76]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1de:	2200      	movs	r2, #0
 800d1e0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800d1e2:	4b12      	ldr	r3, [pc, #72]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1e4:	2202      	movs	r2, #2
 800d1e6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800d1e8:	4b10      	ldr	r3, [pc, #64]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800d1ee:	4b0f      	ldr	r3, [pc, #60]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800d1f4:	4b0d      	ldr	r3, [pc, #52]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800d1fa:	4b0c      	ldr	r3, [pc, #48]	@ (800d22c <USBH_LL_Init+0x84>)
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800d200:	480a      	ldr	r0, [pc, #40]	@ (800d22c <USBH_LL_Init+0x84>)
 800d202:	f7f4 ffe2 	bl	80021ca <HAL_HCD_Init>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d001      	beq.n	800d210 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800d20c:	f7f4 f802 	bl	8001214 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800d210:	4806      	ldr	r0, [pc, #24]	@ (800d22c <USBH_LL_Init+0x84>)
 800d212:	f7f5 fc43 	bl	8002a9c <HAL_HCD_GetCurrentFrame>
 800d216:	4603      	mov	r3, r0
 800d218:	4619      	mov	r1, r3
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f7fc fad2 	bl	80097c4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d220:	2300      	movs	r3, #0
}
 800d222:	4618      	mov	r0, r3
 800d224:	3708      	adds	r7, #8
 800d226:	46bd      	mov	sp, r7
 800d228:	bd80      	pop	{r7, pc}
 800d22a:	bf00      	nop
 800d22c:	20008ae8 	.word	0x20008ae8
 800d230:	40040000 	.word	0x40040000

0800d234 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d23c:	2300      	movs	r3, #0
 800d23e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d240:	2300      	movs	r3, #0
 800d242:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7f5 fbae 	bl	80029ac <HAL_HCD_Start>
 800d250:	4603      	mov	r3, r0
 800d252:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d254:	7bfb      	ldrb	r3, [r7, #15]
 800d256:	4618      	mov	r0, r3
 800d258:	f000 f95e 	bl	800d518 <USBH_Get_USB_Status>
 800d25c:	4603      	mov	r3, r0
 800d25e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d260:	7bbb      	ldrb	r3, [r7, #14]
}
 800d262:	4618      	mov	r0, r3
 800d264:	3710      	adds	r7, #16
 800d266:	46bd      	mov	sp, r7
 800d268:	bd80      	pop	{r7, pc}

0800d26a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d26a:	b580      	push	{r7, lr}
 800d26c:	b084      	sub	sp, #16
 800d26e:	af00      	add	r7, sp, #0
 800d270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d272:	2300      	movs	r3, #0
 800d274:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d276:	2300      	movs	r3, #0
 800d278:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d280:	4618      	mov	r0, r3
 800d282:	f7f5 fbb6 	bl	80029f2 <HAL_HCD_Stop>
 800d286:	4603      	mov	r3, r0
 800d288:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d28a:	7bfb      	ldrb	r3, [r7, #15]
 800d28c:	4618      	mov	r0, r3
 800d28e:	f000 f943 	bl	800d518 <USBH_Get_USB_Status>
 800d292:	4603      	mov	r3, r0
 800d294:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d296:	7bbb      	ldrb	r3, [r7, #14]
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3710      	adds	r7, #16
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}

0800d2a0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b084      	sub	sp, #16
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d2a8:	2301      	movs	r3, #1
 800d2aa:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7f5 fc00 	bl	8002ab8 <HAL_HCD_GetCurrentSpeed>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d00c      	beq.n	800d2d8 <USBH_LL_GetSpeed+0x38>
 800d2be:	2b02      	cmp	r3, #2
 800d2c0:	d80d      	bhi.n	800d2de <USBH_LL_GetSpeed+0x3e>
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d002      	beq.n	800d2cc <USBH_LL_GetSpeed+0x2c>
 800d2c6:	2b01      	cmp	r3, #1
 800d2c8:	d003      	beq.n	800d2d2 <USBH_LL_GetSpeed+0x32>
 800d2ca:	e008      	b.n	800d2de <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d0:	e008      	b.n	800d2e4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d2d2:	2301      	movs	r3, #1
 800d2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d2d6:	e005      	b.n	800d2e4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d2d8:	2302      	movs	r3, #2
 800d2da:	73fb      	strb	r3, [r7, #15]
    break;
 800d2dc:	e002      	b.n	800d2e4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d2de:	2301      	movs	r3, #1
 800d2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d2e2:	bf00      	nop
  }
  return  speed;
 800d2e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3710      	adds	r7, #16
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}

0800d2ee <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d2ee:	b580      	push	{r7, lr}
 800d2f0:	b084      	sub	sp, #16
 800d2f2:	af00      	add	r7, sp, #0
 800d2f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d304:	4618      	mov	r0, r3
 800d306:	f7f5 fb91 	bl	8002a2c <HAL_HCD_ResetPort>
 800d30a:	4603      	mov	r3, r0
 800d30c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d30e:	7bfb      	ldrb	r3, [r7, #15]
 800d310:	4618      	mov	r0, r3
 800d312:	f000 f901 	bl	800d518 <USBH_Get_USB_Status>
 800d316:	4603      	mov	r3, r0
 800d318:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d31a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d31c:	4618      	mov	r0, r3
 800d31e:	3710      	adds	r7, #16
 800d320:	46bd      	mov	sp, r7
 800d322:	bd80      	pop	{r7, pc}

0800d324 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d336:	78fa      	ldrb	r2, [r7, #3]
 800d338:	4611      	mov	r1, r2
 800d33a:	4618      	mov	r0, r3
 800d33c:	f7f5 fb99 	bl	8002a72 <HAL_HCD_HC_GetXferCount>
 800d340:	4603      	mov	r3, r0
}
 800d342:	4618      	mov	r0, r3
 800d344:	3708      	adds	r7, #8
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}

0800d34a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d34a:	b590      	push	{r4, r7, lr}
 800d34c:	b089      	sub	sp, #36	@ 0x24
 800d34e:	af04      	add	r7, sp, #16
 800d350:	6078      	str	r0, [r7, #4]
 800d352:	4608      	mov	r0, r1
 800d354:	4611      	mov	r1, r2
 800d356:	461a      	mov	r2, r3
 800d358:	4603      	mov	r3, r0
 800d35a:	70fb      	strb	r3, [r7, #3]
 800d35c:	460b      	mov	r3, r1
 800d35e:	70bb      	strb	r3, [r7, #2]
 800d360:	4613      	mov	r3, r2
 800d362:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d364:	2300      	movs	r3, #0
 800d366:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d368:	2300      	movs	r3, #0
 800d36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d372:	787c      	ldrb	r4, [r7, #1]
 800d374:	78ba      	ldrb	r2, [r7, #2]
 800d376:	78f9      	ldrb	r1, [r7, #3]
 800d378:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d37a:	9302      	str	r3, [sp, #8]
 800d37c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d380:	9301      	str	r3, [sp, #4]
 800d382:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	4623      	mov	r3, r4
 800d38a:	f7f4 ff85 	bl	8002298 <HAL_HCD_HC_Init>
 800d38e:	4603      	mov	r3, r0
 800d390:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d392:	7bfb      	ldrb	r3, [r7, #15]
 800d394:	4618      	mov	r0, r3
 800d396:	f000 f8bf 	bl	800d518 <USBH_Get_USB_Status>
 800d39a:	4603      	mov	r3, r0
 800d39c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d39e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3714      	adds	r7, #20
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd90      	pop	{r4, r7, pc}

0800d3a8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	460b      	mov	r3, r1
 800d3b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d3c2:	78fa      	ldrb	r2, [r7, #3]
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7f5 f81e 	bl	8002408 <HAL_HCD_HC_Halt>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f000 f8a0 	bl	800d518 <USBH_Get_USB_Status>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d3e6:	b590      	push	{r4, r7, lr}
 800d3e8:	b089      	sub	sp, #36	@ 0x24
 800d3ea:	af04      	add	r7, sp, #16
 800d3ec:	6078      	str	r0, [r7, #4]
 800d3ee:	4608      	mov	r0, r1
 800d3f0:	4611      	mov	r1, r2
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	70fb      	strb	r3, [r7, #3]
 800d3f8:	460b      	mov	r3, r1
 800d3fa:	70bb      	strb	r3, [r7, #2]
 800d3fc:	4613      	mov	r3, r2
 800d3fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d400:	2300      	movs	r3, #0
 800d402:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d404:	2300      	movs	r3, #0
 800d406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800d40e:	787c      	ldrb	r4, [r7, #1]
 800d410:	78ba      	ldrb	r2, [r7, #2]
 800d412:	78f9      	ldrb	r1, [r7, #3]
 800d414:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d418:	9303      	str	r3, [sp, #12]
 800d41a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d41c:	9302      	str	r3, [sp, #8]
 800d41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d420:	9301      	str	r3, [sp, #4]
 800d422:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d426:	9300      	str	r3, [sp, #0]
 800d428:	4623      	mov	r3, r4
 800d42a:	f7f5 f811 	bl	8002450 <HAL_HCD_HC_SubmitRequest>
 800d42e:	4603      	mov	r3, r0
 800d430:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d432:	7bfb      	ldrb	r3, [r7, #15]
 800d434:	4618      	mov	r0, r3
 800d436:	f000 f86f 	bl	800d518 <USBH_Get_USB_Status>
 800d43a:	4603      	mov	r3, r0
 800d43c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d43e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3714      	adds	r7, #20
 800d444:	46bd      	mov	sp, r7
 800d446:	bd90      	pop	{r4, r7, pc}

0800d448 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b082      	sub	sp, #8
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	460b      	mov	r3, r1
 800d452:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d45a:	78fa      	ldrb	r2, [r7, #3]
 800d45c:	4611      	mov	r1, r2
 800d45e:	4618      	mov	r0, r3
 800d460:	f7f5 faf2 	bl	8002a48 <HAL_HCD_HC_GetURBState>
 800d464:	4603      	mov	r3, r0
}
 800d466:	4618      	mov	r0, r3
 800d468:	3708      	adds	r7, #8
 800d46a:	46bd      	mov	sp, r7
 800d46c:	bd80      	pop	{r7, pc}

0800d46e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d46e:	b580      	push	{r7, lr}
 800d470:	b082      	sub	sp, #8
 800d472:	af00      	add	r7, sp, #0
 800d474:	6078      	str	r0, [r7, #4]
 800d476:	460b      	mov	r3, r1
 800d478:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800d480:	2b00      	cmp	r3, #0
 800d482:	d103      	bne.n	800d48c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800d484:	78fb      	ldrb	r3, [r7, #3]
 800d486:	4618      	mov	r0, r3
 800d488:	f000 f872 	bl	800d570 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d48c:	20c8      	movs	r0, #200	@ 0xc8
 800d48e:	f7f4 f9c9 	bl	8001824 <HAL_Delay>
  return USBH_OK;
 800d492:	2300      	movs	r3, #0
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d49c:	b480      	push	{r7}
 800d49e:	b085      	sub	sp, #20
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	70fb      	strb	r3, [r7, #3]
 800d4a8:	4613      	mov	r3, r2
 800d4aa:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800d4b2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d4b4:	78fa      	ldrb	r2, [r7, #3]
 800d4b6:	68f9      	ldr	r1, [r7, #12]
 800d4b8:	4613      	mov	r3, r2
 800d4ba:	011b      	lsls	r3, r3, #4
 800d4bc:	1a9b      	subs	r3, r3, r2
 800d4be:	009b      	lsls	r3, r3, #2
 800d4c0:	440b      	add	r3, r1
 800d4c2:	3317      	adds	r3, #23
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00a      	beq.n	800d4e0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d4ca:	78fa      	ldrb	r2, [r7, #3]
 800d4cc:	68f9      	ldr	r1, [r7, #12]
 800d4ce:	4613      	mov	r3, r2
 800d4d0:	011b      	lsls	r3, r3, #4
 800d4d2:	1a9b      	subs	r3, r3, r2
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	440b      	add	r3, r1
 800d4d8:	333c      	adds	r3, #60	@ 0x3c
 800d4da:	78ba      	ldrb	r2, [r7, #2]
 800d4dc:	701a      	strb	r2, [r3, #0]
 800d4de:	e009      	b.n	800d4f4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d4e0:	78fa      	ldrb	r2, [r7, #3]
 800d4e2:	68f9      	ldr	r1, [r7, #12]
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	011b      	lsls	r3, r3, #4
 800d4e8:	1a9b      	subs	r3, r3, r2
 800d4ea:	009b      	lsls	r3, r3, #2
 800d4ec:	440b      	add	r3, r1
 800d4ee:	333d      	adds	r3, #61	@ 0x3d
 800d4f0:	78ba      	ldrb	r2, [r7, #2]
 800d4f2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3714      	adds	r7, #20
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d502:	b580      	push	{r7, lr}
 800d504:	b082      	sub	sp, #8
 800d506:	af00      	add	r7, sp, #0
 800d508:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f7f4 f98a 	bl	8001824 <HAL_Delay>
}
 800d510:	bf00      	nop
 800d512:	3708      	adds	r7, #8
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d522:	2300      	movs	r3, #0
 800d524:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d526:	79fb      	ldrb	r3, [r7, #7]
 800d528:	2b03      	cmp	r3, #3
 800d52a:	d817      	bhi.n	800d55c <USBH_Get_USB_Status+0x44>
 800d52c:	a201      	add	r2, pc, #4	@ (adr r2, 800d534 <USBH_Get_USB_Status+0x1c>)
 800d52e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d532:	bf00      	nop
 800d534:	0800d545 	.word	0x0800d545
 800d538:	0800d54b 	.word	0x0800d54b
 800d53c:	0800d551 	.word	0x0800d551
 800d540:	0800d557 	.word	0x0800d557
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d544:	2300      	movs	r3, #0
 800d546:	73fb      	strb	r3, [r7, #15]
    break;
 800d548:	e00b      	b.n	800d562 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d54a:	2302      	movs	r3, #2
 800d54c:	73fb      	strb	r3, [r7, #15]
    break;
 800d54e:	e008      	b.n	800d562 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d550:	2301      	movs	r3, #1
 800d552:	73fb      	strb	r3, [r7, #15]
    break;
 800d554:	e005      	b.n	800d562 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d556:	2302      	movs	r3, #2
 800d558:	73fb      	strb	r3, [r7, #15]
    break;
 800d55a:	e002      	b.n	800d562 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d55c:	2302      	movs	r3, #2
 800d55e:	73fb      	strb	r3, [r7, #15]
    break;
 800d560:	bf00      	nop
  }
  return usb_status;
 800d562:	7bfb      	ldrb	r3, [r7, #15]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3714      	adds	r7, #20
 800d568:	46bd      	mov	sp, r7
 800d56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56e:	4770      	bx	lr

0800d570 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	4603      	mov	r3, r0
 800d578:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d57a:	79fb      	ldrb	r3, [r7, #7]
 800d57c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d57e:	79fb      	ldrb	r3, [r7, #7]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d584:	2301      	movs	r3, #1
 800d586:	73fb      	strb	r3, [r7, #15]
 800d588:	e001      	b.n	800d58e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d58a:	2300      	movs	r3, #0
 800d58c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d58e:	7bfb      	ldrb	r3, [r7, #15]
 800d590:	461a      	mov	r2, r3
 800d592:	2110      	movs	r1, #16
 800d594:	4803      	ldr	r0, [pc, #12]	@ (800d5a4 <MX_DriverVbusHS+0x34>)
 800d596:	f7f4 fdff 	bl	8002198 <HAL_GPIO_WritePin>
}
 800d59a:	bf00      	nop
 800d59c:	3710      	adds	r7, #16
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	40020800 	.word	0x40020800

0800d5a8 <malloc>:
 800d5a8:	4b02      	ldr	r3, [pc, #8]	@ (800d5b4 <malloc+0xc>)
 800d5aa:	4601      	mov	r1, r0
 800d5ac:	6818      	ldr	r0, [r3, #0]
 800d5ae:	f000 b82d 	b.w	800d60c <_malloc_r>
 800d5b2:	bf00      	nop
 800d5b4:	20000030 	.word	0x20000030

0800d5b8 <free>:
 800d5b8:	4b02      	ldr	r3, [pc, #8]	@ (800d5c4 <free+0xc>)
 800d5ba:	4601      	mov	r1, r0
 800d5bc:	6818      	ldr	r0, [r3, #0]
 800d5be:	f000 b903 	b.w	800d7c8 <_free_r>
 800d5c2:	bf00      	nop
 800d5c4:	20000030 	.word	0x20000030

0800d5c8 <sbrk_aligned>:
 800d5c8:	b570      	push	{r4, r5, r6, lr}
 800d5ca:	4e0f      	ldr	r6, [pc, #60]	@ (800d608 <sbrk_aligned+0x40>)
 800d5cc:	460c      	mov	r4, r1
 800d5ce:	6831      	ldr	r1, [r6, #0]
 800d5d0:	4605      	mov	r5, r0
 800d5d2:	b911      	cbnz	r1, 800d5da <sbrk_aligned+0x12>
 800d5d4:	f000 f8ae 	bl	800d734 <_sbrk_r>
 800d5d8:	6030      	str	r0, [r6, #0]
 800d5da:	4621      	mov	r1, r4
 800d5dc:	4628      	mov	r0, r5
 800d5de:	f000 f8a9 	bl	800d734 <_sbrk_r>
 800d5e2:	1c43      	adds	r3, r0, #1
 800d5e4:	d103      	bne.n	800d5ee <sbrk_aligned+0x26>
 800d5e6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d5ea:	4620      	mov	r0, r4
 800d5ec:	bd70      	pop	{r4, r5, r6, pc}
 800d5ee:	1cc4      	adds	r4, r0, #3
 800d5f0:	f024 0403 	bic.w	r4, r4, #3
 800d5f4:	42a0      	cmp	r0, r4
 800d5f6:	d0f8      	beq.n	800d5ea <sbrk_aligned+0x22>
 800d5f8:	1a21      	subs	r1, r4, r0
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	f000 f89a 	bl	800d734 <_sbrk_r>
 800d600:	3001      	adds	r0, #1
 800d602:	d1f2      	bne.n	800d5ea <sbrk_aligned+0x22>
 800d604:	e7ef      	b.n	800d5e6 <sbrk_aligned+0x1e>
 800d606:	bf00      	nop
 800d608:	20008ec8 	.word	0x20008ec8

0800d60c <_malloc_r>:
 800d60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d610:	1ccd      	adds	r5, r1, #3
 800d612:	f025 0503 	bic.w	r5, r5, #3
 800d616:	3508      	adds	r5, #8
 800d618:	2d0c      	cmp	r5, #12
 800d61a:	bf38      	it	cc
 800d61c:	250c      	movcc	r5, #12
 800d61e:	2d00      	cmp	r5, #0
 800d620:	4606      	mov	r6, r0
 800d622:	db01      	blt.n	800d628 <_malloc_r+0x1c>
 800d624:	42a9      	cmp	r1, r5
 800d626:	d904      	bls.n	800d632 <_malloc_r+0x26>
 800d628:	230c      	movs	r3, #12
 800d62a:	6033      	str	r3, [r6, #0]
 800d62c:	2000      	movs	r0, #0
 800d62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d708 <_malloc_r+0xfc>
 800d636:	f000 f869 	bl	800d70c <__malloc_lock>
 800d63a:	f8d8 3000 	ldr.w	r3, [r8]
 800d63e:	461c      	mov	r4, r3
 800d640:	bb44      	cbnz	r4, 800d694 <_malloc_r+0x88>
 800d642:	4629      	mov	r1, r5
 800d644:	4630      	mov	r0, r6
 800d646:	f7ff ffbf 	bl	800d5c8 <sbrk_aligned>
 800d64a:	1c43      	adds	r3, r0, #1
 800d64c:	4604      	mov	r4, r0
 800d64e:	d158      	bne.n	800d702 <_malloc_r+0xf6>
 800d650:	f8d8 4000 	ldr.w	r4, [r8]
 800d654:	4627      	mov	r7, r4
 800d656:	2f00      	cmp	r7, #0
 800d658:	d143      	bne.n	800d6e2 <_malloc_r+0xd6>
 800d65a:	2c00      	cmp	r4, #0
 800d65c:	d04b      	beq.n	800d6f6 <_malloc_r+0xea>
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	4639      	mov	r1, r7
 800d662:	4630      	mov	r0, r6
 800d664:	eb04 0903 	add.w	r9, r4, r3
 800d668:	f000 f864 	bl	800d734 <_sbrk_r>
 800d66c:	4581      	cmp	r9, r0
 800d66e:	d142      	bne.n	800d6f6 <_malloc_r+0xea>
 800d670:	6821      	ldr	r1, [r4, #0]
 800d672:	1a6d      	subs	r5, r5, r1
 800d674:	4629      	mov	r1, r5
 800d676:	4630      	mov	r0, r6
 800d678:	f7ff ffa6 	bl	800d5c8 <sbrk_aligned>
 800d67c:	3001      	adds	r0, #1
 800d67e:	d03a      	beq.n	800d6f6 <_malloc_r+0xea>
 800d680:	6823      	ldr	r3, [r4, #0]
 800d682:	442b      	add	r3, r5
 800d684:	6023      	str	r3, [r4, #0]
 800d686:	f8d8 3000 	ldr.w	r3, [r8]
 800d68a:	685a      	ldr	r2, [r3, #4]
 800d68c:	bb62      	cbnz	r2, 800d6e8 <_malloc_r+0xdc>
 800d68e:	f8c8 7000 	str.w	r7, [r8]
 800d692:	e00f      	b.n	800d6b4 <_malloc_r+0xa8>
 800d694:	6822      	ldr	r2, [r4, #0]
 800d696:	1b52      	subs	r2, r2, r5
 800d698:	d420      	bmi.n	800d6dc <_malloc_r+0xd0>
 800d69a:	2a0b      	cmp	r2, #11
 800d69c:	d917      	bls.n	800d6ce <_malloc_r+0xc2>
 800d69e:	1961      	adds	r1, r4, r5
 800d6a0:	42a3      	cmp	r3, r4
 800d6a2:	6025      	str	r5, [r4, #0]
 800d6a4:	bf18      	it	ne
 800d6a6:	6059      	strne	r1, [r3, #4]
 800d6a8:	6863      	ldr	r3, [r4, #4]
 800d6aa:	bf08      	it	eq
 800d6ac:	f8c8 1000 	streq.w	r1, [r8]
 800d6b0:	5162      	str	r2, [r4, r5]
 800d6b2:	604b      	str	r3, [r1, #4]
 800d6b4:	4630      	mov	r0, r6
 800d6b6:	f000 f82f 	bl	800d718 <__malloc_unlock>
 800d6ba:	f104 000b 	add.w	r0, r4, #11
 800d6be:	1d23      	adds	r3, r4, #4
 800d6c0:	f020 0007 	bic.w	r0, r0, #7
 800d6c4:	1ac2      	subs	r2, r0, r3
 800d6c6:	bf1c      	itt	ne
 800d6c8:	1a1b      	subne	r3, r3, r0
 800d6ca:	50a3      	strne	r3, [r4, r2]
 800d6cc:	e7af      	b.n	800d62e <_malloc_r+0x22>
 800d6ce:	6862      	ldr	r2, [r4, #4]
 800d6d0:	42a3      	cmp	r3, r4
 800d6d2:	bf0c      	ite	eq
 800d6d4:	f8c8 2000 	streq.w	r2, [r8]
 800d6d8:	605a      	strne	r2, [r3, #4]
 800d6da:	e7eb      	b.n	800d6b4 <_malloc_r+0xa8>
 800d6dc:	4623      	mov	r3, r4
 800d6de:	6864      	ldr	r4, [r4, #4]
 800d6e0:	e7ae      	b.n	800d640 <_malloc_r+0x34>
 800d6e2:	463c      	mov	r4, r7
 800d6e4:	687f      	ldr	r7, [r7, #4]
 800d6e6:	e7b6      	b.n	800d656 <_malloc_r+0x4a>
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	685b      	ldr	r3, [r3, #4]
 800d6ec:	42a3      	cmp	r3, r4
 800d6ee:	d1fb      	bne.n	800d6e8 <_malloc_r+0xdc>
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	6053      	str	r3, [r2, #4]
 800d6f4:	e7de      	b.n	800d6b4 <_malloc_r+0xa8>
 800d6f6:	230c      	movs	r3, #12
 800d6f8:	6033      	str	r3, [r6, #0]
 800d6fa:	4630      	mov	r0, r6
 800d6fc:	f000 f80c 	bl	800d718 <__malloc_unlock>
 800d700:	e794      	b.n	800d62c <_malloc_r+0x20>
 800d702:	6005      	str	r5, [r0, #0]
 800d704:	e7d6      	b.n	800d6b4 <_malloc_r+0xa8>
 800d706:	bf00      	nop
 800d708:	20008ecc 	.word	0x20008ecc

0800d70c <__malloc_lock>:
 800d70c:	4801      	ldr	r0, [pc, #4]	@ (800d714 <__malloc_lock+0x8>)
 800d70e:	f000 b84b 	b.w	800d7a8 <__retarget_lock_acquire_recursive>
 800d712:	bf00      	nop
 800d714:	2000900c 	.word	0x2000900c

0800d718 <__malloc_unlock>:
 800d718:	4801      	ldr	r0, [pc, #4]	@ (800d720 <__malloc_unlock+0x8>)
 800d71a:	f000 b846 	b.w	800d7aa <__retarget_lock_release_recursive>
 800d71e:	bf00      	nop
 800d720:	2000900c 	.word	0x2000900c

0800d724 <memset>:
 800d724:	4402      	add	r2, r0
 800d726:	4603      	mov	r3, r0
 800d728:	4293      	cmp	r3, r2
 800d72a:	d100      	bne.n	800d72e <memset+0xa>
 800d72c:	4770      	bx	lr
 800d72e:	f803 1b01 	strb.w	r1, [r3], #1
 800d732:	e7f9      	b.n	800d728 <memset+0x4>

0800d734 <_sbrk_r>:
 800d734:	b538      	push	{r3, r4, r5, lr}
 800d736:	4d06      	ldr	r5, [pc, #24]	@ (800d750 <_sbrk_r+0x1c>)
 800d738:	2300      	movs	r3, #0
 800d73a:	4604      	mov	r4, r0
 800d73c:	4608      	mov	r0, r1
 800d73e:	602b      	str	r3, [r5, #0]
 800d740:	f7f3 fed8 	bl	80014f4 <_sbrk>
 800d744:	1c43      	adds	r3, r0, #1
 800d746:	d102      	bne.n	800d74e <_sbrk_r+0x1a>
 800d748:	682b      	ldr	r3, [r5, #0]
 800d74a:	b103      	cbz	r3, 800d74e <_sbrk_r+0x1a>
 800d74c:	6023      	str	r3, [r4, #0]
 800d74e:	bd38      	pop	{r3, r4, r5, pc}
 800d750:	20009008 	.word	0x20009008

0800d754 <__errno>:
 800d754:	4b01      	ldr	r3, [pc, #4]	@ (800d75c <__errno+0x8>)
 800d756:	6818      	ldr	r0, [r3, #0]
 800d758:	4770      	bx	lr
 800d75a:	bf00      	nop
 800d75c:	20000030 	.word	0x20000030

0800d760 <__libc_init_array>:
 800d760:	b570      	push	{r4, r5, r6, lr}
 800d762:	4d0d      	ldr	r5, [pc, #52]	@ (800d798 <__libc_init_array+0x38>)
 800d764:	4c0d      	ldr	r4, [pc, #52]	@ (800d79c <__libc_init_array+0x3c>)
 800d766:	1b64      	subs	r4, r4, r5
 800d768:	10a4      	asrs	r4, r4, #2
 800d76a:	2600      	movs	r6, #0
 800d76c:	42a6      	cmp	r6, r4
 800d76e:	d109      	bne.n	800d784 <__libc_init_array+0x24>
 800d770:	4d0b      	ldr	r5, [pc, #44]	@ (800d7a0 <__libc_init_array+0x40>)
 800d772:	4c0c      	ldr	r4, [pc, #48]	@ (800d7a4 <__libc_init_array+0x44>)
 800d774:	f000 f872 	bl	800d85c <_init>
 800d778:	1b64      	subs	r4, r4, r5
 800d77a:	10a4      	asrs	r4, r4, #2
 800d77c:	2600      	movs	r6, #0
 800d77e:	42a6      	cmp	r6, r4
 800d780:	d105      	bne.n	800d78e <__libc_init_array+0x2e>
 800d782:	bd70      	pop	{r4, r5, r6, pc}
 800d784:	f855 3b04 	ldr.w	r3, [r5], #4
 800d788:	4798      	blx	r3
 800d78a:	3601      	adds	r6, #1
 800d78c:	e7ee      	b.n	800d76c <__libc_init_array+0xc>
 800d78e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d792:	4798      	blx	r3
 800d794:	3601      	adds	r6, #1
 800d796:	e7f2      	b.n	800d77e <__libc_init_array+0x1e>
 800d798:	0800d92c 	.word	0x0800d92c
 800d79c:	0800d92c 	.word	0x0800d92c
 800d7a0:	0800d92c 	.word	0x0800d92c
 800d7a4:	0800d930 	.word	0x0800d930

0800d7a8 <__retarget_lock_acquire_recursive>:
 800d7a8:	4770      	bx	lr

0800d7aa <__retarget_lock_release_recursive>:
 800d7aa:	4770      	bx	lr

0800d7ac <memcpy>:
 800d7ac:	440a      	add	r2, r1
 800d7ae:	4291      	cmp	r1, r2
 800d7b0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d7b4:	d100      	bne.n	800d7b8 <memcpy+0xc>
 800d7b6:	4770      	bx	lr
 800d7b8:	b510      	push	{r4, lr}
 800d7ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d7c2:	4291      	cmp	r1, r2
 800d7c4:	d1f9      	bne.n	800d7ba <memcpy+0xe>
 800d7c6:	bd10      	pop	{r4, pc}

0800d7c8 <_free_r>:
 800d7c8:	b538      	push	{r3, r4, r5, lr}
 800d7ca:	4605      	mov	r5, r0
 800d7cc:	2900      	cmp	r1, #0
 800d7ce:	d041      	beq.n	800d854 <_free_r+0x8c>
 800d7d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7d4:	1f0c      	subs	r4, r1, #4
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	bfb8      	it	lt
 800d7da:	18e4      	addlt	r4, r4, r3
 800d7dc:	f7ff ff96 	bl	800d70c <__malloc_lock>
 800d7e0:	4a1d      	ldr	r2, [pc, #116]	@ (800d858 <_free_r+0x90>)
 800d7e2:	6813      	ldr	r3, [r2, #0]
 800d7e4:	b933      	cbnz	r3, 800d7f4 <_free_r+0x2c>
 800d7e6:	6063      	str	r3, [r4, #4]
 800d7e8:	6014      	str	r4, [r2, #0]
 800d7ea:	4628      	mov	r0, r5
 800d7ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7f0:	f7ff bf92 	b.w	800d718 <__malloc_unlock>
 800d7f4:	42a3      	cmp	r3, r4
 800d7f6:	d908      	bls.n	800d80a <_free_r+0x42>
 800d7f8:	6820      	ldr	r0, [r4, #0]
 800d7fa:	1821      	adds	r1, r4, r0
 800d7fc:	428b      	cmp	r3, r1
 800d7fe:	bf01      	itttt	eq
 800d800:	6819      	ldreq	r1, [r3, #0]
 800d802:	685b      	ldreq	r3, [r3, #4]
 800d804:	1809      	addeq	r1, r1, r0
 800d806:	6021      	streq	r1, [r4, #0]
 800d808:	e7ed      	b.n	800d7e6 <_free_r+0x1e>
 800d80a:	461a      	mov	r2, r3
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	b10b      	cbz	r3, 800d814 <_free_r+0x4c>
 800d810:	42a3      	cmp	r3, r4
 800d812:	d9fa      	bls.n	800d80a <_free_r+0x42>
 800d814:	6811      	ldr	r1, [r2, #0]
 800d816:	1850      	adds	r0, r2, r1
 800d818:	42a0      	cmp	r0, r4
 800d81a:	d10b      	bne.n	800d834 <_free_r+0x6c>
 800d81c:	6820      	ldr	r0, [r4, #0]
 800d81e:	4401      	add	r1, r0
 800d820:	1850      	adds	r0, r2, r1
 800d822:	4283      	cmp	r3, r0
 800d824:	6011      	str	r1, [r2, #0]
 800d826:	d1e0      	bne.n	800d7ea <_free_r+0x22>
 800d828:	6818      	ldr	r0, [r3, #0]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	6053      	str	r3, [r2, #4]
 800d82e:	4408      	add	r0, r1
 800d830:	6010      	str	r0, [r2, #0]
 800d832:	e7da      	b.n	800d7ea <_free_r+0x22>
 800d834:	d902      	bls.n	800d83c <_free_r+0x74>
 800d836:	230c      	movs	r3, #12
 800d838:	602b      	str	r3, [r5, #0]
 800d83a:	e7d6      	b.n	800d7ea <_free_r+0x22>
 800d83c:	6820      	ldr	r0, [r4, #0]
 800d83e:	1821      	adds	r1, r4, r0
 800d840:	428b      	cmp	r3, r1
 800d842:	bf04      	itt	eq
 800d844:	6819      	ldreq	r1, [r3, #0]
 800d846:	685b      	ldreq	r3, [r3, #4]
 800d848:	6063      	str	r3, [r4, #4]
 800d84a:	bf04      	itt	eq
 800d84c:	1809      	addeq	r1, r1, r0
 800d84e:	6021      	streq	r1, [r4, #0]
 800d850:	6054      	str	r4, [r2, #4]
 800d852:	e7ca      	b.n	800d7ea <_free_r+0x22>
 800d854:	bd38      	pop	{r3, r4, r5, pc}
 800d856:	bf00      	nop
 800d858:	20008ecc 	.word	0x20008ecc

0800d85c <_init>:
 800d85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d85e:	bf00      	nop
 800d860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d862:	bc08      	pop	{r3}
 800d864:	469e      	mov	lr, r3
 800d866:	4770      	bx	lr

0800d868 <_fini>:
 800d868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d86a:	bf00      	nop
 800d86c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d86e:	bc08      	pop	{r3}
 800d870:	469e      	mov	lr, r3
 800d872:	4770      	bx	lr
