
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e34c  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008dc  0800e500  0800e500  0000f500  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800eddc  0800eddc  000101e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800eddc  0800eddc  0000fddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ede4  0800ede4  000101e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ede4  0800ede4  0000fde4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ede8  0800ede8  0000fde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800edec  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000101e0  2**0
                  CONTENTS
 10 .bss          00026514  200001e0  200001e0  000101e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200266f4  200266f4  000101e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002a5d6  00000000  00000000  00010210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000069ab  00000000  00000000  0003a7e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002400  00000000  00000000  00041198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001bc3  00000000  00000000  00043598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d290  00000000  00000000  0004515b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002eea7  00000000  00000000  000723eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f66cf  00000000  00000000  000a1292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00197961  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000a75c  00000000  00000000  001979a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001a2100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800e4e4 	.word	0x0800e4e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800e4e4 	.word	0x0800e4e4

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_ldivmod>:
 8000bc8:	b97b      	cbnz	r3, 8000bea <__aeabi_ldivmod+0x22>
 8000bca:	b972      	cbnz	r2, 8000bea <__aeabi_ldivmod+0x22>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bfbe      	ittt	lt
 8000bd0:	2000      	movlt	r0, #0
 8000bd2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bd6:	e006      	blt.n	8000be6 <__aeabi_ldivmod+0x1e>
 8000bd8:	bf08      	it	eq
 8000bda:	2800      	cmpeq	r0, #0
 8000bdc:	bf1c      	itt	ne
 8000bde:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000be2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000be6:	f000 b9d3 	b.w	8000f90 <__aeabi_idiv0>
 8000bea:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bee:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	db09      	blt.n	8000c0a <__aeabi_ldivmod+0x42>
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db1a      	blt.n	8000c30 <__aeabi_ldivmod+0x68>
 8000bfa:	f000 f84d 	bl	8000c98 <__udivmoddi4>
 8000bfe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c06:	b004      	add	sp, #16
 8000c08:	4770      	bx	lr
 8000c0a:	4240      	negs	r0, r0
 8000c0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db1b      	blt.n	8000c4c <__aeabi_ldivmod+0x84>
 8000c14:	f000 f840 	bl	8000c98 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4240      	negs	r0, r0
 8000c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c28:	4252      	negs	r2, r2
 8000c2a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c2e:	4770      	bx	lr
 8000c30:	4252      	negs	r2, r2
 8000c32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c36:	f000 f82f 	bl	8000c98 <__udivmoddi4>
 8000c3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c42:	b004      	add	sp, #16
 8000c44:	4240      	negs	r0, r0
 8000c46:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c4a:	4770      	bx	lr
 8000c4c:	4252      	negs	r2, r2
 8000c4e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c52:	f000 f821 	bl	8000c98 <__udivmoddi4>
 8000c56:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c5e:	b004      	add	sp, #16
 8000c60:	4252      	negs	r2, r2
 8000c62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c7c:	f000 b988 	b.w	8000f90 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f806 	bl	8000c98 <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__udivmoddi4>:
 8000c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c9c:	9d08      	ldr	r5, [sp, #32]
 8000c9e:	468e      	mov	lr, r1
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	4688      	mov	r8, r1
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d14a      	bne.n	8000d3e <__udivmoddi4+0xa6>
 8000ca8:	428a      	cmp	r2, r1
 8000caa:	4617      	mov	r7, r2
 8000cac:	d962      	bls.n	8000d74 <__udivmoddi4+0xdc>
 8000cae:	fab2 f682 	clz	r6, r2
 8000cb2:	b14e      	cbz	r6, 8000cc8 <__udivmoddi4+0x30>
 8000cb4:	f1c6 0320 	rsb	r3, r6, #32
 8000cb8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000cc0:	40b7      	lsls	r7, r6
 8000cc2:	ea43 0808 	orr.w	r8, r3, r8
 8000cc6:	40b4      	lsls	r4, r6
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	fa1f fc87 	uxth.w	ip, r7
 8000cd0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cd4:	0c23      	lsrs	r3, r4, #16
 8000cd6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cda:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cde:	fb01 f20c 	mul.w	r2, r1, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d909      	bls.n	8000cfa <__udivmoddi4+0x62>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000cec:	f080 80ea 	bcs.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f240 80e7 	bls.w	8000ec4 <__udivmoddi4+0x22c>
 8000cf6:	3902      	subs	r1, #2
 8000cf8:	443b      	add	r3, r7
 8000cfa:	1a9a      	subs	r2, r3, r2
 8000cfc:	b2a3      	uxth	r3, r4
 8000cfe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d02:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d0e:	459c      	cmp	ip, r3
 8000d10:	d909      	bls.n	8000d26 <__udivmoddi4+0x8e>
 8000d12:	18fb      	adds	r3, r7, r3
 8000d14:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d18:	f080 80d6 	bcs.w	8000ec8 <__udivmoddi4+0x230>
 8000d1c:	459c      	cmp	ip, r3
 8000d1e:	f240 80d3 	bls.w	8000ec8 <__udivmoddi4+0x230>
 8000d22:	443b      	add	r3, r7
 8000d24:	3802      	subs	r0, #2
 8000d26:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d2a:	eba3 030c 	sub.w	r3, r3, ip
 8000d2e:	2100      	movs	r1, #0
 8000d30:	b11d      	cbz	r5, 8000d3a <__udivmoddi4+0xa2>
 8000d32:	40f3      	lsrs	r3, r6
 8000d34:	2200      	movs	r2, #0
 8000d36:	e9c5 3200 	strd	r3, r2, [r5]
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	428b      	cmp	r3, r1
 8000d40:	d905      	bls.n	8000d4e <__udivmoddi4+0xb6>
 8000d42:	b10d      	cbz	r5, 8000d48 <__udivmoddi4+0xb0>
 8000d44:	e9c5 0100 	strd	r0, r1, [r5]
 8000d48:	2100      	movs	r1, #0
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e7f5      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d4e:	fab3 f183 	clz	r1, r3
 8000d52:	2900      	cmp	r1, #0
 8000d54:	d146      	bne.n	8000de4 <__udivmoddi4+0x14c>
 8000d56:	4573      	cmp	r3, lr
 8000d58:	d302      	bcc.n	8000d60 <__udivmoddi4+0xc8>
 8000d5a:	4282      	cmp	r2, r0
 8000d5c:	f200 8105 	bhi.w	8000f6a <__udivmoddi4+0x2d2>
 8000d60:	1a84      	subs	r4, r0, r2
 8000d62:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d66:	2001      	movs	r0, #1
 8000d68:	4690      	mov	r8, r2
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d0e5      	beq.n	8000d3a <__udivmoddi4+0xa2>
 8000d6e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d72:	e7e2      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	f000 8090 	beq.w	8000e9a <__udivmoddi4+0x202>
 8000d7a:	fab2 f682 	clz	r6, r2
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	f040 80a4 	bne.w	8000ecc <__udivmoddi4+0x234>
 8000d84:	1a8a      	subs	r2, r1, r2
 8000d86:	0c03      	lsrs	r3, r0, #16
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	b280      	uxth	r0, r0
 8000d8e:	b2bc      	uxth	r4, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d96:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d9e:	fb04 f20c 	mul.w	r2, r4, ip
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x11e>
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dac:	d202      	bcs.n	8000db4 <__udivmoddi4+0x11c>
 8000dae:	429a      	cmp	r2, r3
 8000db0:	f200 80e0 	bhi.w	8000f74 <__udivmoddi4+0x2dc>
 8000db4:	46c4      	mov	ip, r8
 8000db6:	1a9b      	subs	r3, r3, r2
 8000db8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dbc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000dc0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000dc4:	fb02 f404 	mul.w	r4, r2, r4
 8000dc8:	429c      	cmp	r4, r3
 8000dca:	d907      	bls.n	8000ddc <__udivmoddi4+0x144>
 8000dcc:	18fb      	adds	r3, r7, r3
 8000dce:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x142>
 8000dd4:	429c      	cmp	r4, r3
 8000dd6:	f200 80ca 	bhi.w	8000f6e <__udivmoddi4+0x2d6>
 8000dda:	4602      	mov	r2, r0
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000de2:	e7a5      	b.n	8000d30 <__udivmoddi4+0x98>
 8000de4:	f1c1 0620 	rsb	r6, r1, #32
 8000de8:	408b      	lsls	r3, r1
 8000dea:	fa22 f706 	lsr.w	r7, r2, r6
 8000dee:	431f      	orrs	r7, r3
 8000df0:	fa0e f401 	lsl.w	r4, lr, r1
 8000df4:	fa20 f306 	lsr.w	r3, r0, r6
 8000df8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dfc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e00:	4323      	orrs	r3, r4
 8000e02:	fa00 f801 	lsl.w	r8, r0, r1
 8000e06:	fa1f fc87 	uxth.w	ip, r7
 8000e0a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e0e:	0c1c      	lsrs	r4, r3, #16
 8000e10:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e14:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e18:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e1c:	45a6      	cmp	lr, r4
 8000e1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e22:	d909      	bls.n	8000e38 <__udivmoddi4+0x1a0>
 8000e24:	193c      	adds	r4, r7, r4
 8000e26:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e2a:	f080 809c 	bcs.w	8000f66 <__udivmoddi4+0x2ce>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f240 8099 	bls.w	8000f66 <__udivmoddi4+0x2ce>
 8000e34:	3802      	subs	r0, #2
 8000e36:	443c      	add	r4, r7
 8000e38:	eba4 040e 	sub.w	r4, r4, lr
 8000e3c:	fa1f fe83 	uxth.w	lr, r3
 8000e40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e44:	fb09 4413 	mls	r4, r9, r3, r4
 8000e48:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e4c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e50:	45a4      	cmp	ip, r4
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x1ce>
 8000e54:	193c      	adds	r4, r7, r4
 8000e56:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e5a:	f080 8082 	bcs.w	8000f62 <__udivmoddi4+0x2ca>
 8000e5e:	45a4      	cmp	ip, r4
 8000e60:	d97f      	bls.n	8000f62 <__udivmoddi4+0x2ca>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e6a:	eba4 040c 	sub.w	r4, r4, ip
 8000e6e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e72:	4564      	cmp	r4, ip
 8000e74:	4673      	mov	r3, lr
 8000e76:	46e1      	mov	r9, ip
 8000e78:	d362      	bcc.n	8000f40 <__udivmoddi4+0x2a8>
 8000e7a:	d05f      	beq.n	8000f3c <__udivmoddi4+0x2a4>
 8000e7c:	b15d      	cbz	r5, 8000e96 <__udivmoddi4+0x1fe>
 8000e7e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e82:	eb64 0409 	sbc.w	r4, r4, r9
 8000e86:	fa04 f606 	lsl.w	r6, r4, r6
 8000e8a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e8e:	431e      	orrs	r6, r3
 8000e90:	40cc      	lsrs	r4, r1
 8000e92:	e9c5 6400 	strd	r6, r4, [r5]
 8000e96:	2100      	movs	r1, #0
 8000e98:	e74f      	b.n	8000d3a <__udivmoddi4+0xa2>
 8000e9a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e9e:	0c01      	lsrs	r1, r0, #16
 8000ea0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ea4:	b280      	uxth	r0, r0
 8000ea6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eaa:	463b      	mov	r3, r7
 8000eac:	4638      	mov	r0, r7
 8000eae:	463c      	mov	r4, r7
 8000eb0:	46b8      	mov	r8, r7
 8000eb2:	46be      	mov	lr, r7
 8000eb4:	2620      	movs	r6, #32
 8000eb6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eba:	eba2 0208 	sub.w	r2, r2, r8
 8000ebe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ec2:	e766      	b.n	8000d92 <__udivmoddi4+0xfa>
 8000ec4:	4601      	mov	r1, r0
 8000ec6:	e718      	b.n	8000cfa <__udivmoddi4+0x62>
 8000ec8:	4610      	mov	r0, r2
 8000eca:	e72c      	b.n	8000d26 <__udivmoddi4+0x8e>
 8000ecc:	f1c6 0220 	rsb	r2, r6, #32
 8000ed0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ed4:	40b7      	lsls	r7, r6
 8000ed6:	40b1      	lsls	r1, r6
 8000ed8:	fa20 f202 	lsr.w	r2, r0, r2
 8000edc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ee6:	b2bc      	uxth	r4, r7
 8000ee8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef2:	fb08 f904 	mul.w	r9, r8, r4
 8000ef6:	40b0      	lsls	r0, r6
 8000ef8:	4589      	cmp	r9, r1
 8000efa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000efe:	b280      	uxth	r0, r0
 8000f00:	d93e      	bls.n	8000f80 <__udivmoddi4+0x2e8>
 8000f02:	1879      	adds	r1, r7, r1
 8000f04:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f08:	d201      	bcs.n	8000f0e <__udivmoddi4+0x276>
 8000f0a:	4589      	cmp	r9, r1
 8000f0c:	d81f      	bhi.n	8000f4e <__udivmoddi4+0x2b6>
 8000f0e:	eba1 0109 	sub.w	r1, r1, r9
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fb09 f804 	mul.w	r8, r9, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	b292      	uxth	r2, r2
 8000f20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f24:	4542      	cmp	r2, r8
 8000f26:	d229      	bcs.n	8000f7c <__udivmoddi4+0x2e4>
 8000f28:	18ba      	adds	r2, r7, r2
 8000f2a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f2e:	d2c4      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f30:	4542      	cmp	r2, r8
 8000f32:	d2c2      	bcs.n	8000eba <__udivmoddi4+0x222>
 8000f34:	f1a9 0102 	sub.w	r1, r9, #2
 8000f38:	443a      	add	r2, r7
 8000f3a:	e7be      	b.n	8000eba <__udivmoddi4+0x222>
 8000f3c:	45f0      	cmp	r8, lr
 8000f3e:	d29d      	bcs.n	8000e7c <__udivmoddi4+0x1e4>
 8000f40:	ebbe 0302 	subs.w	r3, lr, r2
 8000f44:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f48:	3801      	subs	r0, #1
 8000f4a:	46e1      	mov	r9, ip
 8000f4c:	e796      	b.n	8000e7c <__udivmoddi4+0x1e4>
 8000f4e:	eba7 0909 	sub.w	r9, r7, r9
 8000f52:	4449      	add	r1, r9
 8000f54:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f58:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f5c:	fb09 f804 	mul.w	r8, r9, r4
 8000f60:	e7db      	b.n	8000f1a <__udivmoddi4+0x282>
 8000f62:	4673      	mov	r3, lr
 8000f64:	e77f      	b.n	8000e66 <__udivmoddi4+0x1ce>
 8000f66:	4650      	mov	r0, sl
 8000f68:	e766      	b.n	8000e38 <__udivmoddi4+0x1a0>
 8000f6a:	4608      	mov	r0, r1
 8000f6c:	e6fd      	b.n	8000d6a <__udivmoddi4+0xd2>
 8000f6e:	443b      	add	r3, r7
 8000f70:	3a02      	subs	r2, #2
 8000f72:	e733      	b.n	8000ddc <__udivmoddi4+0x144>
 8000f74:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f78:	443b      	add	r3, r7
 8000f7a:	e71c      	b.n	8000db6 <__udivmoddi4+0x11e>
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	e79c      	b.n	8000eba <__udivmoddi4+0x222>
 8000f80:	eba1 0109 	sub.w	r1, r1, r9
 8000f84:	46c4      	mov	ip, r8
 8000f86:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8a:	fb09 f804 	mul.w	r8, r9, r4
 8000f8e:	e7c4      	b.n	8000f1a <__udivmoddi4+0x282>

08000f90 <__aeabi_idiv0>:
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	0000      	movs	r0, r0
	...

08000f98 <ball_set_speed>:
#include "ball_physics.h"

int16_t max_speed = 10;


void ball_set_speed(int16_t *speed_x,int16_t *speed_y){
 8000f98:	b5b0      	push	{r4, r5, r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
	int dx = (int)(gyro_scaled_data_s.y) ;
 8000fa2:	4b75      	ldr	r3, [pc, #468]	@ (8001178 <ball_set_speed+0x1e0>)
 8000fa4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fa8:	60fb      	str	r3, [r7, #12]
	int dy = (int)(gyro_scaled_data_s.x);
 8000faa:	4b73      	ldr	r3, [pc, #460]	@ (8001178 <ball_set_speed+0x1e0>)
 8000fac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb0:	60bb      	str	r3, [r7, #8]

	if (abs(dx) < 2) dx=0;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fb8:	db04      	blt.n	8000fc4 <ball_set_speed+0x2c>
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	dc01      	bgt.n	8000fc4 <ball_set_speed+0x2c>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
	if (abs(dy) < 2) dy=0;
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000fca:	db04      	blt.n	8000fd6 <ball_set_speed+0x3e>
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	2b01      	cmp	r3, #1
 8000fd0:	dc01      	bgt.n	8000fd6 <ball_set_speed+0x3e>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]

	if(dx==0){
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d115      	bne.n	8001008 <ball_set_speed+0x70>
		*speed_x*=0.99;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff faae 	bl	8000544 <__aeabi_i2d>
 8000fe8:	a35f      	add	r3, pc, #380	@ (adr r3, 8001168 <ball_set_speed+0x1d0>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff fb13 	bl	8000618 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f7ff fdbd 	bl	8000b78 <__aeabi_d2iz>
 8000ffe:	4603      	mov	r3, r0
 8001000:	b21a      	sxth	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	801a      	strh	r2, [r3, #0]
 8001006:	e01f      	b.n	8001048 <ball_set_speed+0xb0>
	}else{
		*speed_x -= 0.1*dx;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa98 	bl	8000544 <__aeabi_i2d>
 8001014:	4604      	mov	r4, r0
 8001016:	460d      	mov	r5, r1
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f7ff fa93 	bl	8000544 <__aeabi_i2d>
 800101e:	a354      	add	r3, pc, #336	@ (adr r3, 8001170 <ball_set_speed+0x1d8>)
 8001020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001024:	f7ff faf8 	bl	8000618 <__aeabi_dmul>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4620      	mov	r0, r4
 800102e:	4629      	mov	r1, r5
 8001030:	f7ff f93a 	bl	80002a8 <__aeabi_dsub>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fd9c 	bl	8000b78 <__aeabi_d2iz>
 8001040:	4603      	mov	r3, r0
 8001042:	b21a      	sxth	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	801a      	strh	r2, [r3, #0]
	}

	if(dy==0){
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d115      	bne.n	800107a <ball_set_speed+0xe2>
			*speed_y*=0.99;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa75 	bl	8000544 <__aeabi_i2d>
 800105a:	a343      	add	r3, pc, #268	@ (adr r3, 8001168 <ball_set_speed+0x1d0>)
 800105c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001060:	f7ff fada 	bl	8000618 <__aeabi_dmul>
 8001064:	4602      	mov	r2, r0
 8001066:	460b      	mov	r3, r1
 8001068:	4610      	mov	r0, r2
 800106a:	4619      	mov	r1, r3
 800106c:	f7ff fd84 	bl	8000b78 <__aeabi_d2iz>
 8001070:	4603      	mov	r3, r0
 8001072:	b21a      	sxth	r2, r3
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	801a      	strh	r2, [r3, #0]
 8001078:	e01f      	b.n	80010ba <ball_set_speed+0x122>
		}
	else{
		*speed_y -=  0.1*dy;
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff fa5f 	bl	8000544 <__aeabi_i2d>
 8001086:	4604      	mov	r4, r0
 8001088:	460d      	mov	r5, r1
 800108a:	68b8      	ldr	r0, [r7, #8]
 800108c:	f7ff fa5a 	bl	8000544 <__aeabi_i2d>
 8001090:	a337      	add	r3, pc, #220	@ (adr r3, 8001170 <ball_set_speed+0x1d8>)
 8001092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001096:	f7ff fabf 	bl	8000618 <__aeabi_dmul>
 800109a:	4602      	mov	r2, r0
 800109c:	460b      	mov	r3, r1
 800109e:	4620      	mov	r0, r4
 80010a0:	4629      	mov	r1, r5
 80010a2:	f7ff f901 	bl	80002a8 <__aeabi_dsub>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff fd63 	bl	8000b78 <__aeabi_d2iz>
 80010b2:	4603      	mov	r3, r0
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	801a      	strh	r2, [r3, #0]
	}


	if (*speed_x > max_speed) *speed_x = max_speed;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010c0:	4b2e      	ldr	r3, [pc, #184]	@ (800117c <ball_set_speed+0x1e4>)
 80010c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010c6:	429a      	cmp	r2, r3
 80010c8:	dd04      	ble.n	80010d4 <ball_set_speed+0x13c>
 80010ca:	4b2c      	ldr	r3, [pc, #176]	@ (800117c <ball_set_speed+0x1e4>)
 80010cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	801a      	strh	r2, [r3, #0]
	if (*speed_x < -max_speed) *speed_x = -max_speed;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b27      	ldr	r3, [pc, #156]	@ (800117c <ball_set_speed+0x1e4>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	425b      	negs	r3, r3
 80010e4:	429a      	cmp	r2, r3
 80010e6:	da08      	bge.n	80010fa <ball_set_speed+0x162>
 80010e8:	4b24      	ldr	r3, [pc, #144]	@ (800117c <ball_set_speed+0x1e4>)
 80010ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	425b      	negs	r3, r3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	b21a      	sxth	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	801a      	strh	r2, [r3, #0]

	if (*speed_y > max_speed) *speed_y = max_speed;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001100:	4b1e      	ldr	r3, [pc, #120]	@ (800117c <ball_set_speed+0x1e4>)
 8001102:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001106:	429a      	cmp	r2, r3
 8001108:	dd04      	ble.n	8001114 <ball_set_speed+0x17c>
 800110a:	4b1c      	ldr	r3, [pc, #112]	@ (800117c <ball_set_speed+0x1e4>)
 800110c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	801a      	strh	r2, [r3, #0]
    if (*speed_y < -max_speed) *speed_y = -max_speed;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f9b3 3000 	ldrsh.w	r3, [r3]
 800111a:	461a      	mov	r2, r3
 800111c:	4b17      	ldr	r3, [pc, #92]	@ (800117c <ball_set_speed+0x1e4>)
 800111e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001122:	425b      	negs	r3, r3
 8001124:	429a      	cmp	r2, r3
 8001126:	da08      	bge.n	800113a <ball_set_speed+0x1a2>
 8001128:	4b14      	ldr	r3, [pc, #80]	@ (800117c <ball_set_speed+0x1e4>)
 800112a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800112e:	b29b      	uxth	r3, r3
 8001130:	425b      	negs	r3, r3
 8001132:	b29b      	uxth	r3, r3
 8001134:	b21a      	sxth	r2, r3
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	801a      	strh	r2, [r3, #0]

    lcd_change_ball_color( (uint16_t)(abs(*speed_x) ), (uint16_t)(abs(*speed_y) ) );
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001140:	2b00      	cmp	r3, #0
 8001142:	bfb8      	it	lt
 8001144:	425b      	neglt	r3, r3
 8001146:	b29a      	uxth	r2, r3
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	bfb8      	it	lt
 8001152:	425b      	neglt	r3, r3
 8001154:	b29b      	uxth	r3, r3
 8001156:	4619      	mov	r1, r3
 8001158:	4610      	mov	r0, r2
 800115a:	f001 fd65 	bl	8002c28 <lcd_change_ball_color>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bdb0      	pop	{r4, r5, r7, pc}
 8001166:	bf00      	nop
 8001168:	7ae147ae 	.word	0x7ae147ae
 800116c:	3fefae14 	.word	0x3fefae14
 8001170:	9999999a 	.word	0x9999999a
 8001174:	3fb99999 	.word	0x3fb99999
 8001178:	20025edc 	.word	0x20025edc
 800117c:	20000000 	.word	0x20000000

08001180 <ball_move>:



void ball_move(int16_t *speed_x,int16_t *speed_y){
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af04      	add	r7, sp, #16
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	 int next_x = player.x + *speed_x;
 800118a:	4b4c      	ldr	r3, [pc, #304]	@ (80012bc <ball_move+0x13c>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001194:	4413      	add	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
	 int next_y = player.y + *speed_y;
 8001198:	4b48      	ldr	r3, [pc, #288]	@ (80012bc <ball_move+0x13c>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	683a      	ldr	r2, [r7, #0]
 800119e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]

	if(!check_inside_screen(next_x,next_y)){
 80011a6:	68f9      	ldr	r1, [r7, #12]
 80011a8:	6938      	ldr	r0, [r7, #16]
 80011aa:	f000 f8bf 	bl	800132c <check_inside_screen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	f083 0301 	eor.w	r3, r3, #1
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d02a      	beq.n	8001210 <ball_move+0x90>
			*speed_x*=-0.75;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9bf 	bl	8000544 <__aeabi_i2d>
 80011c6:	f04f 0200 	mov.w	r2, #0
 80011ca:	4b3d      	ldr	r3, [pc, #244]	@ (80012c0 <ball_move+0x140>)
 80011cc:	f7ff fa24 	bl	8000618 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4610      	mov	r0, r2
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fcce 	bl	8000b78 <__aeabi_d2iz>
 80011dc:	4603      	mov	r3, r0
 80011de:	b21a      	sxth	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	801a      	strh	r2, [r3, #0]
			*speed_y*=-0.75;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff f9aa 	bl	8000544 <__aeabi_i2d>
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <ball_move+0x140>)
 80011f6:	f7ff fa0f 	bl	8000618 <__aeabi_dmul>
 80011fa:	4602      	mov	r2, r0
 80011fc:	460b      	mov	r3, r1
 80011fe:	4610      	mov	r0, r2
 8001200:	4619      	mov	r1, r3
 8001202:	f7ff fcb9 	bl	8000b78 <__aeabi_d2iz>
 8001206:	4603      	mov	r3, r0
 8001208:	b21a      	sxth	r2, r3
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	801a      	strh	r2, [r3, #0]
			return;
 800120e:	e051      	b.n	80012b4 <ball_move+0x134>
	}


	for (int i = 0; i < RECTS_AMOUNT; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
 8001214:	e040      	b.n	8001298 <ball_move+0x118>
		if (check_collision(rects[i],next_x,next_y)) {
 8001216:	492b      	ldr	r1, [pc, #172]	@ (80012c4 <ball_move+0x144>)
 8001218:	697a      	ldr	r2, [r7, #20]
 800121a:	4613      	mov	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	4413      	add	r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	440b      	add	r3, r1
 8001224:	68fa      	ldr	r2, [r7, #12]
 8001226:	9202      	str	r2, [sp, #8]
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	9201      	str	r2, [sp, #4]
 800122c:	691a      	ldr	r2, [r3, #16]
 800122e:	9200      	str	r2, [sp, #0]
 8001230:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001232:	f000 f849 	bl	80012c8 <check_collision>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d02a      	beq.n	8001292 <ball_move+0x112>
			*speed_x *= -0.75;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f97e 	bl	8000544 <__aeabi_i2d>
 8001248:	f04f 0200 	mov.w	r2, #0
 800124c:	4b1c      	ldr	r3, [pc, #112]	@ (80012c0 <ball_move+0x140>)
 800124e:	f7ff f9e3 	bl	8000618 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	f7ff fc8d 	bl	8000b78 <__aeabi_d2iz>
 800125e:	4603      	mov	r3, r0
 8001260:	b21a      	sxth	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	801a      	strh	r2, [r3, #0]
			*speed_y *= -0.75;
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f969 	bl	8000544 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b12      	ldr	r3, [pc, #72]	@ (80012c0 <ball_move+0x140>)
 8001278:	f7ff f9ce 	bl	8000618 <__aeabi_dmul>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc78 	bl	8000b78 <__aeabi_d2iz>
 8001288:	4603      	mov	r3, r0
 800128a:	b21a      	sxth	r2, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	801a      	strh	r2, [r3, #0]
			return;
 8001290:	e010      	b.n	80012b4 <ball_move+0x134>
	for (int i = 0; i < RECTS_AMOUNT; i++) {
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	2b09      	cmp	r3, #9
 800129c:	ddbb      	ble.n	8001216 <ball_move+0x96>
		}
	}

	lcd_update_circle(*speed_x, *speed_y, 0);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012a4:	4618      	mov	r0, r3
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ac:	2200      	movs	r2, #0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f001 fa30 	bl	8002714 <lcd_update_circle>
}
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	20025bc4 	.word	0x20025bc4
 80012c0:	bfe80000 	.word	0xbfe80000
 80012c4:	20025afc 	.word	0x20025afc

080012c8 <check_collision>:



bool check_collision(Rectangle rec, int next_x, int next_y){
 80012c8:	b084      	sub	sp, #16
 80012ca:	b490      	push	{r4, r7}
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	f107 0408 	add.w	r4, r7, #8
 80012d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	 if ((next_x < rec.x + rec.width + player.r) &&
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	441a      	add	r2, r3
 80012dc:	4b12      	ldr	r3, [pc, #72]	@ (8001328 <check_collision+0x60>)
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	4413      	add	r3, r2
 80012e2:	69fa      	ldr	r2, [r7, #28]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	da18      	bge.n	800131a <check_collision+0x52>
		              (next_x > rec.x - player.r) &&
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	4b0f      	ldr	r3, [pc, #60]	@ (8001328 <check_collision+0x60>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	1ad3      	subs	r3, r2, r3
	 if ((next_x < rec.x + rec.width + player.r) &&
 80012f0:	69fa      	ldr	r2, [r7, #28]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	dd11      	ble.n	800131a <check_collision+0x52>
		              (next_y > rec.y - player.r) &&
 80012f6:	68fa      	ldr	r2, [r7, #12]
 80012f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <check_collision+0x60>)
 80012fa:	689b      	ldr	r3, [r3, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
		              (next_x > rec.x - player.r) &&
 80012fe:	6a3a      	ldr	r2, [r7, #32]
 8001300:	429a      	cmp	r2, r3
 8001302:	dd0a      	ble.n	800131a <check_collision+0x52>
		              (next_y < rec.y + rec.height + player.r))return true;
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	441a      	add	r2, r3
 800130a:	4b07      	ldr	r3, [pc, #28]	@ (8001328 <check_collision+0x60>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	4413      	add	r3, r2
		              (next_y > rec.y - player.r) &&
 8001310:	6a3a      	ldr	r2, [r7, #32]
 8001312:	429a      	cmp	r2, r3
 8001314:	da01      	bge.n	800131a <check_collision+0x52>
		              (next_y < rec.y + rec.height + player.r))return true;
 8001316:	2301      	movs	r3, #1
 8001318:	e000      	b.n	800131c <check_collision+0x54>
	return false;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	46bd      	mov	sp, r7
 8001320:	bc90      	pop	{r4, r7}
 8001322:	b004      	add	sp, #16
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	20025bc4 	.word	0x20025bc4

0800132c <check_inside_screen>:


bool check_inside_screen(int next_x, int next_y){
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
 8001334:	6039      	str	r1, [r7, #0]
	  if (next_x - player.r <= 0 || next_x + player.r >= LCD_WIDTH || next_y - player.r <= 0 || next_y + player.r >= LCD_HEIGHT) {
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <check_inside_screen+0x50>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b00      	cmp	r3, #0
 8001340:	dd12      	ble.n	8001368 <check_inside_screen+0x3c>
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <check_inside_screen+0x50>)
 8001344:	689a      	ldr	r2, [r3, #8]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	2bef      	cmp	r3, #239	@ 0xef
 800134c:	dc0c      	bgt.n	8001368 <check_inside_screen+0x3c>
 800134e:	4b0b      	ldr	r3, [pc, #44]	@ (800137c <check_inside_screen+0x50>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	683a      	ldr	r2, [r7, #0]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	dd06      	ble.n	8001368 <check_inside_screen+0x3c>
 800135a:	4b08      	ldr	r3, [pc, #32]	@ (800137c <check_inside_screen+0x50>)
 800135c:	689a      	ldr	r2, [r3, #8]
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	4413      	add	r3, r2
 8001362:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001366:	db01      	blt.n	800136c <check_inside_screen+0x40>
		   return false;
 8001368:	2300      	movs	r3, #0
 800136a:	e000      	b.n	800136e <check_inside_screen+0x42>
		}
	return true;
 800136c:	2301      	movs	r3, #1
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20025bc4 	.word	0x20025bc4

08001380 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_CRC_Init+0x20>)
 8001386:	4a07      	ldr	r2, [pc, #28]	@ (80013a4 <MX_CRC_Init+0x24>)
 8001388:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_CRC_Init+0x20>)
 800138c:	f002 fd6a 	bl	8003e64 <HAL_CRC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8001396:	f002 f82b 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001fc 	.word	0x200001fc
 80013a4:	40023000 	.word	0x40023000

080013a8 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a0b      	ldr	r2, [pc, #44]	@ (80013e4 <HAL_CRC_MspInit+0x3c>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d10d      	bne.n	80013d6 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <HAL_CRC_MspInit+0x40>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <HAL_CRC_MspInit+0x40>)
 80013c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4b07      	ldr	r3, [pc, #28]	@ (80013e8 <HAL_CRC_MspInit+0x40>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80013d6:	bf00      	nop
 80013d8:	3714      	adds	r7, #20
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	40023000 	.word	0x40023000
 80013e8:	40023800 	.word	0x40023800

080013ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001428 <MX_DMA_Init+0x3c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001428 <MX_DMA_Init+0x3c>)
 80013fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b09      	ldr	r3, [pc, #36]	@ (8001428 <MX_DMA_Init+0x3c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800140e:	2200      	movs	r2, #0
 8001410:	2105      	movs	r1, #5
 8001412:	203c      	movs	r0, #60	@ 0x3c
 8001414:	f002 fcfc 	bl	8003e10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8001418:	203c      	movs	r0, #60	@ 0x3c
 800141a:	f002 fd15 	bl	8003e48 <HAL_NVIC_EnableIRQ>

}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001432:	4a16      	ldr	r2, [pc, #88]	@ (800148c <MX_DMA2D_Init+0x60>)
 8001434:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001436:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800143c:	4b12      	ldr	r3, [pc, #72]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8001442:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001444:	2200      	movs	r2, #0
 8001446:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001448:	4b0f      	ldr	r3, [pc, #60]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 800144a:	2200      	movs	r2, #0
 800144c:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800144e:	4b0e      	ldr	r3, [pc, #56]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001450:	2200      	movs	r2, #0
 8001452:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001456:	2200      	movs	r2, #0
 8001458:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800145a:	4b0b      	ldr	r3, [pc, #44]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 800145c:	2200      	movs	r2, #0
 800145e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001460:	4809      	ldr	r0, [pc, #36]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001462:	f003 f88b 	bl	800457c <HAL_DMA2D_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800146c:	f001 ffc0 	bl	80033f0 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001470:	2101      	movs	r1, #1
 8001472:	4805      	ldr	r0, [pc, #20]	@ (8001488 <MX_DMA2D_Init+0x5c>)
 8001474:	f003 f9dc 	bl	8004830 <HAL_DMA2D_ConfigLayer>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800147e:	f001 ffb7 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000204 	.word	0x20000204
 800148c:	4002b000 	.word	0x4002b000

08001490 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a0e      	ldr	r2, [pc, #56]	@ (80014d8 <HAL_DMA2D_MspInit+0x48>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d115      	bne.n	80014ce <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b0d      	ldr	r3, [pc, #52]	@ (80014dc <HAL_DMA2D_MspInit+0x4c>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014aa:	4a0c      	ldr	r2, [pc, #48]	@ (80014dc <HAL_DMA2D_MspInit+0x4c>)
 80014ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80014b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014b2:	4b0a      	ldr	r3, [pc, #40]	@ (80014dc <HAL_DMA2D_MspInit+0x4c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80014be:	2200      	movs	r2, #0
 80014c0:	2105      	movs	r1, #5
 80014c2:	205a      	movs	r0, #90	@ 0x5a
 80014c4:	f002 fca4 	bl	8003e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80014c8:	205a      	movs	r0, #90	@ 0x5a
 80014ca:	f002 fcbd 	bl	8003e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 80014ce:	bf00      	nop
 80014d0:	3710      	adds	r7, #16
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	4002b000 	.word	0x4002b000
 80014dc:	40023800 	.word	0x40023800

080014e0 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
 80014ee:	609a      	str	r2, [r3, #8]
 80014f0:	60da      	str	r2, [r3, #12]
 80014f2:	611a      	str	r2, [r3, #16]
 80014f4:	615a      	str	r2, [r3, #20]
 80014f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80014f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001578 <MX_FMC_Init+0x98>)
 80014fa:	4a20      	ldr	r2, [pc, #128]	@ (800157c <MX_FMC_Init+0x9c>)
 80014fc:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_FMC_Init+0x98>)
 8001500:	2201      	movs	r2, #1
 8001502:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001504:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_FMC_Init+0x98>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800150a:	4b1b      	ldr	r3, [pc, #108]	@ (8001578 <MX_FMC_Init+0x98>)
 800150c:	2204      	movs	r2, #4
 800150e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001510:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MX_FMC_Init+0x98>)
 8001512:	2210      	movs	r2, #16
 8001514:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001516:	4b18      	ldr	r3, [pc, #96]	@ (8001578 <MX_FMC_Init+0x98>)
 8001518:	2240      	movs	r2, #64	@ 0x40
 800151a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800151c:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <MX_FMC_Init+0x98>)
 800151e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8001522:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001524:	4b14      	ldr	r3, [pc, #80]	@ (8001578 <MX_FMC_Init+0x98>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 800152a:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <MX_FMC_Init+0x98>)
 800152c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001530:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001532:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <MX_FMC_Init+0x98>)
 8001534:	2200      	movs	r2, #0
 8001536:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8001538:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <MX_FMC_Init+0x98>)
 800153a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800153e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001540:	2302      	movs	r3, #2
 8001542:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001544:	2307      	movs	r3, #7
 8001546:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001548:	2304      	movs	r3, #4
 800154a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 800154c:	2307      	movs	r3, #7
 800154e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8001550:	2303      	movs	r3, #3
 8001552:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8001558:	2302      	movs	r3, #2
 800155a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4805      	ldr	r0, [pc, #20]	@ (8001578 <MX_FMC_Init+0x98>)
 8001562:	f006 fd47 	bl	8007ff4 <HAL_SDRAM_Init>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 800156c:	f001 ff40 	bl	80033f0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001570:	bf00      	nop
 8001572:	3720      	adds	r7, #32
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	20000244 	.word	0x20000244
 800157c:	a0000140 	.word	0xa0000140

08001580 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001580:	b580      	push	{r7, lr}
 8001582:	b086      	sub	sp, #24
 8001584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001594:	4b3b      	ldr	r3, [pc, #236]	@ (8001684 <HAL_FMC_MspInit+0x104>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d16f      	bne.n	800167c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800159c:	4b39      	ldr	r3, [pc, #228]	@ (8001684 <HAL_FMC_MspInit+0x104>)
 800159e:	2201      	movs	r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	603b      	str	r3, [r7, #0]
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <HAL_FMC_MspInit+0x108>)
 80015a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015aa:	4a37      	ldr	r2, [pc, #220]	@ (8001688 <HAL_FMC_MspInit+0x108>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6393      	str	r3, [r2, #56]	@ 0x38
 80015b2:	4b35      	ldr	r3, [pc, #212]	@ (8001688 <HAL_FMC_MspInit+0x108>)
 80015b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80015be:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80015c2:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d0:	230c      	movs	r3, #12
 80015d2:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	482c      	ldr	r0, [pc, #176]	@ (800168c <HAL_FMC_MspInit+0x10c>)
 80015da:	f003 f9bb 	bl	8004954 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80015de:	2301      	movs	r3, #1
 80015e0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015e2:	2302      	movs	r3, #2
 80015e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ea:	2303      	movs	r3, #3
 80015ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ee:	230c      	movs	r3, #12
 80015f0:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	4619      	mov	r1, r3
 80015f6:	4826      	ldr	r0, [pc, #152]	@ (8001690 <HAL_FMC_MspInit+0x110>)
 80015f8:	f003 f9ac 	bl	8004954 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80015fc:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001600:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001602:	2302      	movs	r3, #2
 8001604:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800160a:	2303      	movs	r3, #3
 800160c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800160e:	230c      	movs	r3, #12
 8001610:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4619      	mov	r1, r3
 8001616:	481f      	ldr	r0, [pc, #124]	@ (8001694 <HAL_FMC_MspInit+0x114>)
 8001618:	f003 f99c 	bl	8004954 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800161c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001620:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162a:	2303      	movs	r3, #3
 800162c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800162e:	230c      	movs	r3, #12
 8001630:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001632:	1d3b      	adds	r3, r7, #4
 8001634:	4619      	mov	r1, r3
 8001636:	4818      	ldr	r0, [pc, #96]	@ (8001698 <HAL_FMC_MspInit+0x118>)
 8001638:	f003 f98c 	bl	8004954 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800163c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001640:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001642:	2302      	movs	r3, #2
 8001644:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800164a:	2303      	movs	r3, #3
 800164c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800164e:	230c      	movs	r3, #12
 8001650:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001652:	1d3b      	adds	r3, r7, #4
 8001654:	4619      	mov	r1, r3
 8001656:	4811      	ldr	r0, [pc, #68]	@ (800169c <HAL_FMC_MspInit+0x11c>)
 8001658:	f003 f97c 	bl	8004954 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800165c:	2360      	movs	r3, #96	@ 0x60
 800165e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800166c:	230c      	movs	r3, #12
 800166e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001670:	1d3b      	adds	r3, r7, #4
 8001672:	4619      	mov	r1, r3
 8001674:	480a      	ldr	r0, [pc, #40]	@ (80016a0 <HAL_FMC_MspInit+0x120>)
 8001676:	f003 f96d 	bl	8004954 <HAL_GPIO_Init>
 800167a:	e000      	b.n	800167e <HAL_FMC_MspInit+0xfe>
    return;
 800167c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800167e:	3718      	adds	r7, #24
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000278 	.word	0x20000278
 8001688:	40023800 	.word	0x40023800
 800168c:	40021400 	.word	0x40021400
 8001690:	40020800 	.word	0x40020800
 8001694:	40021800 	.word	0x40021800
 8001698:	40021000 	.word	0x40021000
 800169c:	40020c00 	.word	0x40020c00
 80016a0:	40020400 	.word	0x40020400

080016a4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016ac:	f7ff ff68 	bl	8001580 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08e      	sub	sp, #56	@ 0x38
 80016bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
 80016d2:	4b88      	ldr	r3, [pc, #544]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016d6:	4a87      	ldr	r2, [pc, #540]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016de:	4b85      	ldr	r3, [pc, #532]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e2:	f003 0304 	and.w	r3, r3, #4
 80016e6:	623b      	str	r3, [r7, #32]
 80016e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
 80016ee:	4b81      	ldr	r3, [pc, #516]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a80      	ldr	r2, [pc, #512]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 80016f4:	f043 0320 	orr.w	r3, r3, #32
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b7e      	ldr	r3, [pc, #504]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0320 	and.w	r3, r3, #32
 8001702:	61fb      	str	r3, [r7, #28]
 8001704:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	4b7a      	ldr	r3, [pc, #488]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170e:	4a79      	ldr	r2, [pc, #484]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001714:	6313      	str	r3, [r2, #48]	@ 0x30
 8001716:	4b77      	ldr	r3, [pc, #476]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	4b73      	ldr	r3, [pc, #460]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172a:	4a72      	ldr	r2, [pc, #456]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	@ 0x30
 8001732:	4b70      	ldr	r3, [pc, #448]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b6c      	ldr	r3, [pc, #432]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001746:	4a6b      	ldr	r2, [pc, #428]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	@ 0x30
 800174e:	4b69      	ldr	r3, [pc, #420]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	4b65      	ldr	r3, [pc, #404]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001762:	4a64      	ldr	r2, [pc, #400]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001764:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001768:	6313      	str	r3, [r2, #48]	@ 0x30
 800176a:	4b62      	ldr	r3, [pc, #392]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b5e      	ldr	r3, [pc, #376]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800177e:	4a5d      	ldr	r2, [pc, #372]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001780:	f043 0310 	orr.w	r3, r3, #16
 8001784:	6313      	str	r3, [r2, #48]	@ 0x30
 8001786:	4b5b      	ldr	r3, [pc, #364]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178a:	f003 0310 	and.w	r3, r3, #16
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b57      	ldr	r3, [pc, #348]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	4a56      	ldr	r2, [pc, #344]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 800179c:	f043 0308 	orr.w	r3, r3, #8
 80017a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017a2:	4b54      	ldr	r3, [pc, #336]	@ (80018f4 <MX_GPIO_Init+0x23c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017a6:	f003 0308 	and.w	r3, r3, #8
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2116      	movs	r1, #22
 80017b2:	4851      	ldr	r0, [pc, #324]	@ (80018f8 <MX_GPIO_Init+0x240>)
 80017b4:	f003 fa92 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80017b8:	2200      	movs	r2, #0
 80017ba:	2180      	movs	r1, #128	@ 0x80
 80017bc:	484f      	ldr	r0, [pc, #316]	@ (80018fc <MX_GPIO_Init+0x244>)
 80017be:	f003 fa8d 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80017c2:	2200      	movs	r2, #0
 80017c4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80017c8:	484d      	ldr	r0, [pc, #308]	@ (8001900 <MX_GPIO_Init+0x248>)
 80017ca:	f003 fa87 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80017d4:	484b      	ldr	r0, [pc, #300]	@ (8001904 <MX_GPIO_Init+0x24c>)
 80017d6:	f003 fa81 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NCS_MEMS_SPI_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin;
 80017da:	2302      	movs	r3, #2
 80017dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017de:	2301      	movs	r3, #1
 80017e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(NCS_MEMS_SPI_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4841      	ldr	r0, [pc, #260]	@ (80018f8 <MX_GPIO_Init+0x240>)
 80017f2:	f003 f8af 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = CSX_Pin|OTG_FS_PSO_Pin;
 80017f6:	2314      	movs	r3, #20
 80017f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800180a:	4619      	mov	r1, r3
 800180c:	483a      	ldr	r0, [pc, #232]	@ (80018f8 <MX_GPIO_Init+0x240>)
 800180e:	f003 f8a1 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : B2_Pin */
  GPIO_InitStruct.Pin = B2_Pin;
 8001812:	2301      	movs	r3, #1
 8001814:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001816:	2300      	movs	r3, #0
 8001818:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 800181e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001822:	4619      	mov	r1, r3
 8001824:	4835      	ldr	r0, [pc, #212]	@ (80018fc <MX_GPIO_Init+0x244>)
 8001826:	f003 f895 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800182a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001830:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800183e:	4619      	mov	r1, r3
 8001840:	482e      	ldr	r0, [pc, #184]	@ (80018fc <MX_GPIO_Init+0x244>)
 8001842:	f003 f887 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8001846:	2380      	movs	r3, #128	@ 0x80
 8001848:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184a:	2301      	movs	r3, #1
 800184c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001852:	2300      	movs	r3, #0
 8001854:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8001856:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800185a:	4619      	mov	r1, r3
 800185c:	4827      	ldr	r0, [pc, #156]	@ (80018fc <MX_GPIO_Init+0x244>)
 800185e:	f003 f879 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8001862:	2320      	movs	r3, #32
 8001864:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001866:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800186a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001874:	4619      	mov	r1, r3
 8001876:	4820      	ldr	r0, [pc, #128]	@ (80018f8 <MX_GPIO_Init+0x240>)
 8001878:	f003 f86c 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800187c:	2304      	movs	r3, #4
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001880:	2300      	movs	r3, #0
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800188c:	4619      	mov	r1, r3
 800188e:	481e      	ldr	r0, [pc, #120]	@ (8001908 <MX_GPIO_Init+0x250>)
 8001890:	f003 f860 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8001894:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80018a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018a6:	4619      	mov	r1, r3
 80018a8:	4815      	ldr	r0, [pc, #84]	@ (8001900 <MX_GPIO_Init+0x248>)
 80018aa:	f003 f853 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80018ae:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018b2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018b4:	2301      	movs	r3, #1
 80018b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018bc:	2300      	movs	r3, #0
 80018be:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018c4:	4619      	mov	r1, r3
 80018c6:	480e      	ldr	r0, [pc, #56]	@ (8001900 <MX_GPIO_Init+0x248>)
 80018c8:	f003 f844 	bl	8004954 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 80018cc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80018d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d2:	2301      	movs	r3, #1
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018da:	2300      	movs	r3, #0
 80018dc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e2:	4619      	mov	r1, r3
 80018e4:	4807      	ldr	r0, [pc, #28]	@ (8001904 <MX_GPIO_Init+0x24c>)
 80018e6:	f003 f835 	bl	8004954 <HAL_GPIO_Init>

}
 80018ea:	bf00      	nop
 80018ec:	3738      	adds	r7, #56	@ 0x38
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	40020800 	.word	0x40020800
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020c00 	.word	0x40020c00
 8001904:	40021800 	.word	0x40021800
 8001908:	40020400 	.word	0x40020400

0800190c <_write>:
static int16_t x_data[MOVING_AVERAGE_WINDOW];
static int16_t y_data[MOVING_AVERAGE_WINDOW];
static int16_t z_data[MOVING_AVERAGE_WINDOW];
static uint8_t data_index = 0;

ssize_t _write(int file, const char *data, size_t len) {
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) data, len, HAL_MAX_DELAY); // Wysyłanie danych przez UART
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	b29a      	uxth	r2, r3
 800191c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	4804      	ldr	r0, [pc, #16]	@ (8001934 <_write+0x28>)
 8001924:	f007 ff7a 	bl	800981c <HAL_UART_Transmit>
	return len;
 8001928:	687b      	ldr	r3, [r7, #4]
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20026090 	.word	0x20026090

08001938 <gyro_init>:

void gyro_init(void) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG1, 0x0F }; // PD=1, Zen=1, Yen=1, Xen=1;
 800193e:	f44f 6372 	mov.w	r3, #3872	@ 0xf20
 8001942:	80bb      	strh	r3, [r7, #4]

	while (!spi5_acquire())
 8001944:	bf00      	nop
 8001946:	f001 fd59 	bl	80033fc <spi5_acquire>
 800194a:	4603      	mov	r3, r0
 800194c:	f083 0301 	eor.w	r3, r3, #1
 8001950:	b2db      	uxtb	r3, r3
 8001952:	2b00      	cmp	r3, #0
 8001954:	d116      	bne.n	8001984 <gyro_init+0x4c>
		return;

	GYRO_CS_LOW();
 8001956:	2200      	movs	r2, #0
 8001958:	2102      	movs	r1, #2
 800195a:	480c      	ldr	r0, [pc, #48]	@ (800198c <gyro_init+0x54>)
 800195c:	f003 f9be 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 8001960:	1d39      	adds	r1, r7, #4
 8001962:	2364      	movs	r3, #100	@ 0x64
 8001964:	2202      	movs	r2, #2
 8001966:	480a      	ldr	r0, [pc, #40]	@ (8001990 <gyro_init+0x58>)
 8001968:	f006 fc01 	bl	800816e <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 800196c:	2201      	movs	r2, #1
 800196e:	2102      	movs	r1, #2
 8001970:	4806      	ldr	r0, [pc, #24]	@ (800198c <gyro_init+0x54>)
 8001972:	f003 f9b3 	bl	8004cdc <HAL_GPIO_WritePin>

	spi5_release();
 8001976:	f001 fd55 	bl	8003424 <spi5_release>

	gyro_set_sensitivity();
 800197a:	f000 f80b 	bl	8001994 <gyro_set_sensitivity>

	// Weryfikacja połączenia
	gyro_ReadWhoAmI();
 800197e:	f000 f8bb 	bl	8001af8 <gyro_ReadWhoAmI>
 8001982:	e000      	b.n	8001986 <gyro_init+0x4e>
		return;
 8001984:	bf00      	nop
}
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	40020800 	.word	0x40020800
 8001990:	20025efc 	.word	0x20025efc

08001994 <gyro_set_sensitivity>:

void gyro_set_sensitivity() {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
	uint8_t configData[2] = { CTRL_REG4, SENSITIVITY };
 800199a:	f243 0323 	movw	r3, #12323	@ 0x3023
 800199e:	80bb      	strh	r3, [r7, #4]

	while (!spi5_acquire())
 80019a0:	bf00      	nop
 80019a2:	f001 fd2b 	bl	80033fc <spi5_acquire>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f083 0301 	eor.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d112      	bne.n	80019d8 <gyro_set_sensitivity+0x44>
		return;

	GYRO_CS_LOW();
 80019b2:	2200      	movs	r2, #0
 80019b4:	2102      	movs	r1, #2
 80019b6:	480a      	ldr	r0, [pc, #40]	@ (80019e0 <gyro_set_sensitivity+0x4c>)
 80019b8:	f003 f990 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, configData, 2, 100);
 80019bc:	1d39      	adds	r1, r7, #4
 80019be:	2364      	movs	r3, #100	@ 0x64
 80019c0:	2202      	movs	r2, #2
 80019c2:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <gyro_set_sensitivity+0x50>)
 80019c4:	f006 fbd3 	bl	800816e <HAL_SPI_Transmit>
	GYRO_CS_HIGH();
 80019c8:	2201      	movs	r2, #1
 80019ca:	2102      	movs	r1, #2
 80019cc:	4804      	ldr	r0, [pc, #16]	@ (80019e0 <gyro_set_sensitivity+0x4c>)
 80019ce:	f003 f985 	bl	8004cdc <HAL_GPIO_WritePin>

	spi5_release();
 80019d2:	f001 fd27 	bl	8003424 <spi5_release>
 80019d6:	e000      	b.n	80019da <gyro_set_sensitivity+0x46>
		return;
 80019d8:	bf00      	nop
}
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40020800 	.word	0x40020800
 80019e4:	20025efc 	.word	0x20025efc

080019e8 <gyro_get_filtered_data>:

void gyro_get_filtered_data(Gyro_Int_Data *gyro_data) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]

	int32_t x_sum = 0, y_sum = 0, z_sum = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	2300      	movs	r3, #0
 80019f6:	61bb      	str	r3, [r7, #24]
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
	Gyro_Int_Data raw_data;
	data_index = 0;
 80019fc:	4b39      	ldr	r3, [pc, #228]	@ (8001ae4 <gyro_get_filtered_data+0xfc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]

	gyro_get_data(&raw_data);
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4618      	mov	r0, r3
 8001a08:	f000 f8bc 	bl	8001b84 <gyro_get_data>

	// Aktualizacja bufora
	x_data[data_index] = raw_data.x;
 8001a0c:	4b35      	ldr	r3, [pc, #212]	@ (8001ae4 <gyro_get_filtered_data+0xfc>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <gyro_get_filtered_data+0x100>)
 8001a18:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	y_data[data_index] = raw_data.y;
 8001a1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ae4 <gyro_get_filtered_data+0xfc>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	461a      	mov	r2, r3
 8001a22:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001a26:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <gyro_get_filtered_data+0x104>)
 8001a28:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	z_data[data_index] = raw_data.z;
 8001a2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae4 <gyro_get_filtered_data+0xfc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8001a36:	4b2e      	ldr	r3, [pc, #184]	@ (8001af0 <gyro_get_filtered_data+0x108>)
 8001a38:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

	//Średnia
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	74fb      	strb	r3, [r7, #19]
 8001a40:	e01a      	b.n	8001a78 <gyro_get_filtered_data+0x90>
		x_sum += x_data[i];
 8001a42:	7cfb      	ldrb	r3, [r7, #19]
 8001a44:	4a28      	ldr	r2, [pc, #160]	@ (8001ae8 <gyro_get_filtered_data+0x100>)
 8001a46:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	4413      	add	r3, r2
 8001a50:	61fb      	str	r3, [r7, #28]
		y_sum += y_data[i];
 8001a52:	7cfb      	ldrb	r3, [r7, #19]
 8001a54:	4a25      	ldr	r2, [pc, #148]	@ (8001aec <gyro_get_filtered_data+0x104>)
 8001a56:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	4413      	add	r3, r2
 8001a60:	61bb      	str	r3, [r7, #24]
		z_sum += z_data[i];
 8001a62:	7cfb      	ldrb	r3, [r7, #19]
 8001a64:	4a22      	ldr	r2, [pc, #136]	@ (8001af0 <gyro_get_filtered_data+0x108>)
 8001a66:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	4413      	add	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MOVING_AVERAGE_WINDOW; i++) {
 8001a72:	7cfb      	ldrb	r3, [r7, #19]
 8001a74:	3301      	adds	r3, #1
 8001a76:	74fb      	strb	r3, [r7, #19]
 8001a78:	7cfb      	ldrb	r3, [r7, #19]
 8001a7a:	2b04      	cmp	r3, #4
 8001a7c:	d9e1      	bls.n	8001a42 <gyro_get_filtered_data+0x5a>
	}

	gyro_data->x = x_sum / MOVING_AVERAGE_WINDOW;
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <gyro_get_filtered_data+0x10c>)
 8001a82:	fb82 1203 	smull	r1, r2, r2, r3
 8001a86:	1052      	asrs	r2, r2, #1
 8001a88:	17db      	asrs	r3, r3, #31
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	b21a      	sxth	r2, r3
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	801a      	strh	r2, [r3, #0]
	gyro_data->y = y_sum / MOVING_AVERAGE_WINDOW;
 8001a92:	69bb      	ldr	r3, [r7, #24]
 8001a94:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <gyro_get_filtered_data+0x10c>)
 8001a96:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9a:	1052      	asrs	r2, r2, #1
 8001a9c:	17db      	asrs	r3, r3, #31
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	b21a      	sxth	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	805a      	strh	r2, [r3, #2]
	gyro_data->z = z_sum / MOVING_AVERAGE_WINDOW;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	4a12      	ldr	r2, [pc, #72]	@ (8001af4 <gyro_get_filtered_data+0x10c>)
 8001aaa:	fb82 1203 	smull	r1, r2, r2, r3
 8001aae:	1052      	asrs	r2, r2, #1
 8001ab0:	17db      	asrs	r3, r3, #31
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	b21a      	sxth	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	809a      	strh	r2, [r3, #4]

	// Aktualizuj indeks
	data_index = (data_index + 1) % MOVING_AVERAGE_WINDOW;
 8001aba:	4b0a      	ldr	r3, [pc, #40]	@ (8001ae4 <gyro_get_filtered_data+0xfc>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	4b0c      	ldr	r3, [pc, #48]	@ (8001af4 <gyro_get_filtered_data+0x10c>)
 8001ac2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ac6:	1059      	asrs	r1, r3, #1
 8001ac8:	17d3      	asrs	r3, r2, #31
 8001aca:	1ac9      	subs	r1, r1, r3
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	1ad1      	subs	r1, r2, r3
 8001ad4:	b2ca      	uxtb	r2, r1
 8001ad6:	4b03      	ldr	r3, [pc, #12]	@ (8001ae4 <gyro_get_filtered_data+0xfc>)
 8001ad8:	701a      	strb	r2, [r3, #0]
}
 8001ada:	bf00      	nop
 8001adc:	3720      	adds	r7, #32
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000029e 	.word	0x2000029e
 8001ae8:	2000027c 	.word	0x2000027c
 8001aec:	20000288 	.word	0x20000288
 8001af0:	20000294 	.word	0x20000294
 8001af4:	66666667 	.word	0x66666667

08001af8 <gyro_ReadWhoAmI>:

void gyro_ReadWhoAmI(void) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	uint8_t tx = WHO_AM_I | 0x80;
 8001afe:	238f      	movs	r3, #143	@ 0x8f
 8001b00:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 8001b06:	f001 fc79 	bl	80033fc <spi5_acquire>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f083 0301 	eor.w	r3, r3, #1
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d129      	bne.n	8001b6a <gyro_ReadWhoAmI+0x72>
		return;

	GYRO_CS_LOW();
 8001b16:	2200      	movs	r2, #0
 8001b18:	2102      	movs	r1, #2
 8001b1a:	4816      	ldr	r0, [pc, #88]	@ (8001b74 <gyro_ReadWhoAmI+0x7c>)
 8001b1c:	f003 f8de 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001b20:	1df9      	adds	r1, r7, #7
 8001b22:	230a      	movs	r3, #10
 8001b24:	2201      	movs	r2, #1
 8001b26:	4814      	ldr	r0, [pc, #80]	@ (8001b78 <gyro_ReadWhoAmI+0x80>)
 8001b28:	f006 fb21 	bl	800816e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 8001b2c:	1db9      	adds	r1, r7, #6
 8001b2e:	230a      	movs	r3, #10
 8001b30:	2201      	movs	r2, #1
 8001b32:	4811      	ldr	r0, [pc, #68]	@ (8001b78 <gyro_ReadWhoAmI+0x80>)
 8001b34:	f006 fc5f 	bl	80083f6 <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001b38:	2201      	movs	r2, #1
 8001b3a:	2102      	movs	r1, #2
 8001b3c:	480d      	ldr	r0, [pc, #52]	@ (8001b74 <gyro_ReadWhoAmI+0x7c>)
 8001b3e:	f003 f8cd 	bl	8004cdc <HAL_GPIO_WritePin>

	spi5_release();
 8001b42:	f001 fc6f 	bl	8003424 <spi5_release>

	if ((rx != 0xD3) && (rx != 0xD4)) {
 8001b46:	79bb      	ldrb	r3, [r7, #6]
 8001b48:	2bd3      	cmp	r3, #211	@ 0xd3
 8001b4a:	d008      	beq.n	8001b5e <gyro_ReadWhoAmI+0x66>
 8001b4c:	79bb      	ldrb	r3, [r7, #6]
 8001b4e:	2bd4      	cmp	r3, #212	@ 0xd4
 8001b50:	d005      	beq.n	8001b5e <gyro_ReadWhoAmI+0x66>
		printf("WHO_AM_I error: 0x%02X (expected 0xD3 or 0xD4)\r\n", rx);
 8001b52:	79bb      	ldrb	r3, [r7, #6]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4809      	ldr	r0, [pc, #36]	@ (8001b7c <gyro_ReadWhoAmI+0x84>)
 8001b58:	f00a fda0 	bl	800c69c <iprintf>
 8001b5c:	e006      	b.n	8001b6c <gyro_ReadWhoAmI+0x74>
	}
	else {
		printf("WHO_AM_I OK: 0x%02X\r\n", rx);
 8001b5e:	79bb      	ldrb	r3, [r7, #6]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4807      	ldr	r0, [pc, #28]	@ (8001b80 <gyro_ReadWhoAmI+0x88>)
 8001b64:	f00a fd9a 	bl	800c69c <iprintf>
 8001b68:	e000      	b.n	8001b6c <gyro_ReadWhoAmI+0x74>
		return;
 8001b6a:	bf00      	nop
	}
}
 8001b6c:	3708      	adds	r7, #8
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40020800 	.word	0x40020800
 8001b78:	20025efc 	.word	0x20025efc
 8001b7c:	0800e500 	.word	0x0800e500
 8001b80:	0800e534 	.word	0x0800e534

08001b84 <gyro_get_data>:

void gyro_get_data(Gyro_Int_Data *gyro_data) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

	uint8_t tx = OUT_X_L | 0x80 | 0x40;
 8001b8c:	23e8      	movs	r3, #232	@ 0xe8
 8001b8e:	73fb      	strb	r3, [r7, #15]
	uint8_t rx[6];
	if (gyro_is_data_ready()==false) {
 8001b90:	f000 f852 	bl	8001c38 <gyro_is_data_ready>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f083 0301 	eor.w	r3, r3, #1
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d140      	bne.n	8001c22 <gyro_get_data+0x9e>
//		printf("Data not ready\r\n");
		return;
	}

	if (!spi5_acquire())
 8001ba0:	f001 fc2c 	bl	80033fc <spi5_acquire>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f083 0301 	eor.w	r3, r3, #1
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d13a      	bne.n	8001c26 <gyro_get_data+0xa2>
		return;

	GYRO_CS_LOW();
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2102      	movs	r1, #2
 8001bb4:	481e      	ldr	r0, [pc, #120]	@ (8001c30 <gyro_get_data+0xac>)
 8001bb6:	f003 f891 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001bba:	f107 010f 	add.w	r1, r7, #15
 8001bbe:	230a      	movs	r3, #10
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	481c      	ldr	r0, [pc, #112]	@ (8001c34 <gyro_get_data+0xb0>)
 8001bc4:	f006 fad3 	bl	800816e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, rx, 6, 10);
 8001bc8:	f107 0108 	add.w	r1, r7, #8
 8001bcc:	230a      	movs	r3, #10
 8001bce:	2206      	movs	r2, #6
 8001bd0:	4818      	ldr	r0, [pc, #96]	@ (8001c34 <gyro_get_data+0xb0>)
 8001bd2:	f006 fc10 	bl	80083f6 <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4815      	ldr	r0, [pc, #84]	@ (8001c30 <gyro_get_data+0xac>)
 8001bdc:	f003 f87e 	bl	8004cdc <HAL_GPIO_WritePin>

	spi5_release();
 8001be0:	f001 fc20 	bl	8003424 <spi5_release>

	gyro_data->x = (int16_t) (rx[1] << 8 | rx[0]);
 8001be4:	7a7b      	ldrb	r3, [r7, #9]
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	021b      	lsls	r3, r3, #8
 8001bea:	b21a      	sxth	r2, r3
 8001bec:	7a3b      	ldrb	r3, [r7, #8]
 8001bee:	b21b      	sxth	r3, r3
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	b21a      	sxth	r2, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	801a      	strh	r2, [r3, #0]
	gyro_data->y = (int16_t) (rx[3] << 8 | rx[2]);
 8001bf8:	7afb      	ldrb	r3, [r7, #11]
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	021b      	lsls	r3, r3, #8
 8001bfe:	b21a      	sxth	r2, r3
 8001c00:	7abb      	ldrb	r3, [r7, #10]
 8001c02:	b21b      	sxth	r3, r3
 8001c04:	4313      	orrs	r3, r2
 8001c06:	b21a      	sxth	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	805a      	strh	r2, [r3, #2]
	gyro_data->z = (int16_t) (rx[5] << 8 | rx[4]);
 8001c0c:	7b7b      	ldrb	r3, [r7, #13]
 8001c0e:	b21b      	sxth	r3, r3
 8001c10:	021b      	lsls	r3, r3, #8
 8001c12:	b21a      	sxth	r2, r3
 8001c14:	7b3b      	ldrb	r3, [r7, #12]
 8001c16:	b21b      	sxth	r3, r3
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	b21a      	sxth	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	809a      	strh	r2, [r3, #4]
 8001c20:	e002      	b.n	8001c28 <gyro_get_data+0xa4>
		return;
 8001c22:	bf00      	nop
 8001c24:	e000      	b.n	8001c28 <gyro_get_data+0xa4>
		return;
 8001c26:	bf00      	nop

}
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	40020800 	.word	0x40020800
 8001c34:	20025efc 	.word	0x20025efc

08001c38 <gyro_is_data_ready>:

bool gyro_is_data_ready(void) {
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
	uint8_t tx = STATUS_REG | 0x80;
 8001c3e:	23a7      	movs	r3, #167	@ 0xa7
 8001c40:	71fb      	strb	r3, [r7, #7]
	uint8_t rx = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	71bb      	strb	r3, [r7, #6]

	if (!spi5_acquire())
 8001c46:	f001 fbd9 	bl	80033fc <spi5_acquire>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f083 0301 	eor.w	r3, r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <gyro_is_data_ready+0x22>
		return false;
 8001c56:	2300      	movs	r3, #0
 8001c58:	e01f      	b.n	8001c9a <gyro_is_data_ready+0x62>

	GYRO_CS_LOW();
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	2102      	movs	r1, #2
 8001c5e:	4811      	ldr	r0, [pc, #68]	@ (8001ca4 <gyro_is_data_ready+0x6c>)
 8001c60:	f003 f83c 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &tx, 1, 10);
 8001c64:	1df9      	adds	r1, r7, #7
 8001c66:	230a      	movs	r3, #10
 8001c68:	2201      	movs	r2, #1
 8001c6a:	480f      	ldr	r0, [pc, #60]	@ (8001ca8 <gyro_is_data_ready+0x70>)
 8001c6c:	f006 fa7f 	bl	800816e <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &rx, 1, 10);
 8001c70:	1db9      	adds	r1, r7, #6
 8001c72:	230a      	movs	r3, #10
 8001c74:	2201      	movs	r2, #1
 8001c76:	480c      	ldr	r0, [pc, #48]	@ (8001ca8 <gyro_is_data_ready+0x70>)
 8001c78:	f006 fbbd 	bl	80083f6 <HAL_SPI_Receive>
	GYRO_CS_HIGH();
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2102      	movs	r1, #2
 8001c80:	4808      	ldr	r0, [pc, #32]	@ (8001ca4 <gyro_is_data_ready+0x6c>)
 8001c82:	f003 f82b 	bl	8004cdc <HAL_GPIO_WritePin>

	spi5_release();
 8001c86:	f001 fbcd 	bl	8003424 <spi5_release>

	return (rx & 0x08);
 8001c8a:	79bb      	ldrb	r3, [r7, #6]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf14      	ite	ne
 8001c94:	2301      	movne	r3, #1
 8001c96:	2300      	moveq	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40020800 	.word	0x40020800
 8001ca8:	20025efc 	.word	0x20025efc

08001cac <gyro_calculate_offset>:

void gyro_calculate_offset(Gyro_Int_Data *offset) {
 8001cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cb0:	b098      	sub	sp, #96	@ 0x60
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6378      	str	r0, [r7, #52]	@ 0x34
	int64_t sum_x = 0, sum_y = 0, sum_z = 0;
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
 8001cc2:	f04f 0200 	mov.w	r2, #0
 8001cc6:	f04f 0300 	mov.w	r3, #0
 8001cca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 8001cce:	f04f 0200 	mov.w	r2, #0
 8001cd2:	f04f 0300 	mov.w	r3, #0
 8001cd6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	const uint16_t samples = 1000;
 8001cda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cde:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
	Gyro_Int_Data raw_data;

	printf("Starting calibration...\r\n");
 8001ce2:	484f      	ldr	r0, [pc, #316]	@ (8001e20 <gyro_calculate_offset+0x174>)
 8001ce4:	f00a fd42 	bl	800c76c <puts>

	for (uint16_t i = 0; i < samples; i++) {
 8001ce8:	2300      	movs	r3, #0
 8001cea:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001cee:	e04e      	b.n	8001d8e <gyro_calculate_offset+0xe2>
		gyro_get_data(&raw_data);
 8001cf0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff ff45 	bl	8001b84 <gyro_get_data>
		sum_x += raw_data.x;
 8001cfa:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8001cfe:	b21b      	sxth	r3, r3
 8001d00:	17da      	asrs	r2, r3, #31
 8001d02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d06:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001d0a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d0c:	1851      	adds	r1, r2, r1
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001d12:	414b      	adcs	r3, r1
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d1a:	e9c7 2316 	strd	r2, r3, [r7, #88]	@ 0x58
		sum_y += raw_data.y;
 8001d1e:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001d22:	b21b      	sxth	r3, r3
 8001d24:	17da      	asrs	r2, r3, #31
 8001d26:	469a      	mov	sl, r3
 8001d28:	4693      	mov	fp, r2
 8001d2a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001d2e:	eb12 010a 	adds.w	r1, r2, sl
 8001d32:	6039      	str	r1, [r7, #0]
 8001d34:	eb43 030b 	adc.w	r3, r3, fp
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d3e:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
		sum_z += raw_data.z;
 8001d42:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001d46:	b21b      	sxth	r3, r3
 8001d48:	17da      	asrs	r2, r3, #31
 8001d4a:	461c      	mov	r4, r3
 8001d4c:	4615      	mov	r5, r2
 8001d4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d52:	eb12 0804 	adds.w	r8, r2, r4
 8001d56:	eb43 0905 	adc.w	r9, r3, r5
 8001d5a:	e9c7 8912 	strd	r8, r9, [r7, #72]	@ 0x48
		HAL_Delay(10);
 8001d5e:	200a      	movs	r0, #10
 8001d60:	f001 ff7a 	bl	8003c58 <HAL_Delay>

		if (i % 100 == 0)
 8001d64:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8001d68:	4b2e      	ldr	r3, [pc, #184]	@ (8001e24 <gyro_calculate_offset+0x178>)
 8001d6a:	fba3 2301 	umull	r2, r3, r3, r1
 8001d6e:	095a      	lsrs	r2, r3, #5
 8001d70:	2364      	movs	r3, #100	@ 0x64
 8001d72:	fb02 f303 	mul.w	r3, r2, r3
 8001d76:	1acb      	subs	r3, r1, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <gyro_calculate_offset+0xd8>
			printf(".\r\n");
 8001d7e:	482a      	ldr	r0, [pc, #168]	@ (8001e28 <gyro_calculate_offset+0x17c>)
 8001d80:	f00a fcf4 	bl	800c76c <puts>
	for (uint16_t i = 0; i < samples; i++) {
 8001d84:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8001d88:	3301      	adds	r3, #1
 8001d8a:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8001d8e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8001d92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d3aa      	bcc.n	8001cf0 <gyro_calculate_offset+0x44>
	}

	offset->x = sum_x / samples;
 8001d9a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001d9e:	2200      	movs	r2, #0
 8001da0:	623b      	str	r3, [r7, #32]
 8001da2:	627a      	str	r2, [r7, #36]	@ 0x24
 8001da4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001da8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	@ 0x58
 8001dac:	f7fe ff0c 	bl	8000bc8 <__aeabi_ldivmod>
 8001db0:	4602      	mov	r2, r0
 8001db2:	460b      	mov	r3, r1
 8001db4:	b212      	sxth	r2, r2
 8001db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001db8:	801a      	strh	r2, [r3, #0]
	offset->y = sum_y / samples;
 8001dba:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	61fa      	str	r2, [r7, #28]
 8001dc4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001dc8:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8001dcc:	f7fe fefc 	bl	8000bc8 <__aeabi_ldivmod>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	b212      	sxth	r2, r2
 8001dd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dd8:	805a      	strh	r2, [r3, #2]
	offset->z = sum_z / samples;
 8001dda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8001dde:	2200      	movs	r2, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	617a      	str	r2, [r7, #20]
 8001de4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001de8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8001dec:	f7fe feec 	bl	8000bc8 <__aeabi_ldivmod>
 8001df0:	4602      	mov	r2, r0
 8001df2:	460b      	mov	r3, r1
 8001df4:	b212      	sxth	r2, r2
 8001df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001df8:	809a      	strh	r2, [r3, #4]

	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 8001dfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dfc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e00:	4619      	mov	r1, r3
			offset->y, offset->z);
 8001e02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e04:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 8001e08:	461a      	mov	r2, r3
			offset->y, offset->z);
 8001e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
	printf("\nCalibration complete. Offsets: X=%d, Y=%d, Z=%d\r\n", offset->x,
 8001e10:	4806      	ldr	r0, [pc, #24]	@ (8001e2c <gyro_calculate_offset+0x180>)
 8001e12:	f00a fc43 	bl	800c69c <iprintf>
}
 8001e16:	bf00      	nop
 8001e18:	3760      	adds	r7, #96	@ 0x60
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e20:	0800e54c 	.word	0x0800e54c
 8001e24:	51eb851f 	.word	0x51eb851f
 8001e28:	0800e568 	.word	0x0800e568
 8001e2c:	0800e56c 	.word	0x0800e56c

08001e30 <gyro_compensate_and_scale>:

void gyro_compensate_and_scale(Gyro_Int_Data *gyro_data, Gyro_Int_Data *offset, Gyro_Int_Data *gyro_calibrated_dat) {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]

	// uwzględenienie kalibracji
	gyro_data->x -= offset->x;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	1ad3      	subs	r3, r2, r3
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	b21a      	sxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	801a      	strh	r2, [r3, #0]
	gyro_data->y -= offset->y;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	805a      	strh	r2, [r3, #2]
	gyro_data->z -= offset->z;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001e7e:	b29b      	uxth	r3, r3
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b21a      	sxth	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	809a      	strh	r2, [r3, #4]

	float scale = 1.0f;
 8001e8a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e8e:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x30)
		scale = 2000.0f / 32768.0f;
 8001e90:	4b24      	ldr	r3, [pc, #144]	@ (8001f24 <gyro_compensate_and_scale+0xf4>)
 8001e92:	617b      	str	r3, [r7, #20]

	if (SENSITIVITY == 0x00)
		scale = 250.0f / 32768.0f;

	// Konwersja do dps (dla skali 2000dps)
	gyro_calibrated_dat->x = gyro_data->x * scale;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ea2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eae:	ee17 3a90 	vmov	r3, s15
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	801a      	strh	r2, [r3, #0]
	gyro_calibrated_dat->y = gyro_data->y * scale;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001ebe:	ee07 3a90 	vmov	s15, r3
 8001ec2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ec6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed2:	ee17 3a90 	vmov	r3, s15
 8001ed6:	b21a      	sxth	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	805a      	strh	r2, [r3, #2]
	gyro_calibrated_dat->z = gyro_data->z * scale;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001eea:	edd7 7a05 	vldr	s15, [r7, #20]
 8001eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ef2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ef6:	ee17 3a90 	vmov	r3, s15
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	809a      	strh	r2, [r3, #4]

	printf("X: %d dps, Y: %d dps, Z: %d dps\r\n", gyro_calibrated_dat->x, gyro_calibrated_dat->y, gyro_calibrated_dat->z);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f06:	4619      	mov	r1, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f0e:	461a      	mov	r2, r3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f16:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <gyro_compensate_and_scale+0xf8>)
 8001f18:	f00a fbc0 	bl	800c69c <iprintf>
}
 8001f1c:	bf00      	nop
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	3d7a0000 	.word	0x3d7a0000
 8001f28:	0800e5a0 	.word	0x0800e5a0

08001f2c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001f30:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f32:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <MX_I2C3_Init+0x78>)
 8001f34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f38:	4a1b      	ldr	r2, [pc, #108]	@ (8001fa8 <MX_I2C3_Init+0x7c>)
 8001f3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f3c:	4b18      	ldr	r3, [pc, #96]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001f42:	4b17      	ldr	r3, [pc, #92]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f48:	4b15      	ldr	r3, [pc, #84]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f50:	4b13      	ldr	r3, [pc, #76]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f5c:	4b10      	ldr	r3, [pc, #64]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f62:	4b0f      	ldr	r3, [pc, #60]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001f68:	480d      	ldr	r0, [pc, #52]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f6a:	f004 fc91 	bl	8006890 <HAL_I2C_Init>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001f74:	f001 fa3c 	bl	80033f0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001f78:	2100      	movs	r1, #0
 8001f7a:	4809      	ldr	r0, [pc, #36]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f7c:	f004 fdcc 	bl	8006b18 <HAL_I2CEx_ConfigAnalogFilter>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001f86:	f001 fa33 	bl	80033f0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	4804      	ldr	r0, [pc, #16]	@ (8001fa0 <MX_I2C3_Init+0x74>)
 8001f8e:	f004 fdff 	bl	8006b90 <HAL_I2CEx_ConfigDigitalFilter>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d001      	beq.n	8001f9c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001f98:	f001 fa2a 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001f9c:	bf00      	nop
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	200002a0 	.word	0x200002a0
 8001fa4:	40005c00 	.word	0x40005c00
 8001fa8:	000186a0 	.word	0x000186a0

08001fac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	@ 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
 8001fbc:	605a      	str	r2, [r3, #4]
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	60da      	str	r2, [r3, #12]
 8001fc2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a29      	ldr	r2, [pc, #164]	@ (8002070 <HAL_I2C_MspInit+0xc4>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d14b      	bne.n	8002066 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	4b28      	ldr	r3, [pc, #160]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd6:	4a27      	ldr	r2, [pc, #156]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fde:	4b25      	ldr	r3, [pc, #148]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff2:	4a20      	ldr	r2, [pc, #128]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800200a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800200c:	2312      	movs	r3, #18
 800200e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002010:	2301      	movs	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002014:	2300      	movs	r3, #0
 8002016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002018:	2304      	movs	r3, #4
 800201a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	4619      	mov	r1, r3
 8002022:	4815      	ldr	r0, [pc, #84]	@ (8002078 <HAL_I2C_MspInit+0xcc>)
 8002024:	f002 fc96 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800202c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	2312      	movs	r3, #18
 8002030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002032:	2301      	movs	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800203a:	2304      	movs	r3, #4
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800203e:	f107 0314 	add.w	r3, r7, #20
 8002042:	4619      	mov	r1, r3
 8002044:	480d      	ldr	r0, [pc, #52]	@ (800207c <HAL_I2C_MspInit+0xd0>)
 8002046:	f002 fc85 	bl	8004954 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a08      	ldr	r2, [pc, #32]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 8002054:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <HAL_I2C_MspInit+0xc8>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002066:	bf00      	nop
 8002068:	3728      	adds	r7, #40	@ 0x28
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40005c00 	.word	0x40005c00
 8002074:	40023800 	.word	0x40023800
 8002078:	40020800 	.word	0x40020800
 800207c:	40020000 	.word	0x40020000

08002080 <lcd_cmd>:
		CMD(COLMOD), 0x05, // chosen 16-bit, R5, G6, B5
		CMD(MAC), 0x48, //in documentation this means BGR but it turned out to be RGB, also it set (0,0) to up left corner
		CMD(POS_GAMMA_COR), 0x1F, 0x1A, 0x18, 0x0A, 0x0F, 0x06, 0x45, 0x87, 0x32, 0x0A, 0x07, 0x02, 0x07, 0x05, 0x00,
		CMD(NEG_GAMMA_COR), 0x00, 0x25, 0x27, 0x05, 0x10, 0x09, 0x3A, 0x56, 0x4C, 0x05, 0x0D, 0x0C, 0x2E, 0x2F, 0x0F,
};
static void lcd_cmd(uint8_t cmd){
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	4603      	mov	r3, r0
 8002088:	71fb      	strb	r3, [r7, #7]

	if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 800208a:	f001 f9b7 	bl	80033fc <spi5_acquire>
 800208e:	4603      	mov	r3, r0
 8002090:	f083 0301 	eor.w	r3, r3, #1
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b00      	cmp	r3, #0
 8002098:	d119      	bne.n	80020ce <lcd_cmd+0x4e>

	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_RESET); //teraz komendy
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020a0:	480d      	ldr	r0, [pc, #52]	@ (80020d8 <lcd_cmd+0x58>)
 80020a2:	f002 fe1b 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	2104      	movs	r1, #4
 80020aa:	480c      	ldr	r0, [pc, #48]	@ (80020dc <lcd_cmd+0x5c>)
 80020ac:	f002 fe16 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &cmd, 1, HAL_MAX_DELAY);
 80020b0:	1df9      	adds	r1, r7, #7
 80020b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020b6:	2201      	movs	r2, #1
 80020b8:	4809      	ldr	r0, [pc, #36]	@ (80020e0 <lcd_cmd+0x60>)
 80020ba:	f006 f858 	bl	800816e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 80020be:	2201      	movs	r2, #1
 80020c0:	2104      	movs	r1, #4
 80020c2:	4806      	ldr	r0, [pc, #24]	@ (80020dc <lcd_cmd+0x5c>)
 80020c4:	f002 fe0a 	bl	8004cdc <HAL_GPIO_WritePin>

	spi5_release();
 80020c8:	f001 f9ac 	bl	8003424 <spi5_release>
 80020cc:	e000      	b.n	80020d0 <lcd_cmd+0x50>
	if (!spi5_acquire()) return;  // SPI jest zajęte, zwróć
 80020ce:	bf00      	nop

}
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40020c00 	.word	0x40020c00
 80020dc:	40020800 	.word	0x40020800
 80020e0:	20025efc 	.word	0x20025efc

080020e4 <lcd_data>:
static void lcd_data(uint8_t data){
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET); //teraz dane
 80020ee:	2201      	movs	r2, #1
 80020f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80020f4:	480b      	ldr	r0, [pc, #44]	@ (8002124 <lcd_data+0x40>)
 80020f6:	f002 fdf1 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 80020fa:	2200      	movs	r2, #0
 80020fc:	2104      	movs	r1, #4
 80020fe:	480a      	ldr	r0, [pc, #40]	@ (8002128 <lcd_data+0x44>)
 8002100:	f002 fdec 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, HAL_MAX_DELAY);
 8002104:	1df9      	adds	r1, r7, #7
 8002106:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800210a:	2201      	movs	r2, #1
 800210c:	4807      	ldr	r0, [pc, #28]	@ (800212c <lcd_data+0x48>)
 800210e:	f006 f82e 	bl	800816e <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8002112:	2201      	movs	r2, #1
 8002114:	2104      	movs	r1, #4
 8002116:	4804      	ldr	r0, [pc, #16]	@ (8002128 <lcd_data+0x44>)
 8002118:	f002 fde0 	bl	8004cdc <HAL_GPIO_WritePin>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	40020c00 	.word	0x40020c00
 8002128:	40020800 	.word	0x40020800
 800212c:	20025efc 	.word	0x20025efc

08002130 <lcd_data16>:
static void lcd_data16(uint16_t value){
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
	lcd_data(value >> 8);
 800213a:	88fb      	ldrh	r3, [r7, #6]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	b29b      	uxth	r3, r3
 8002140:	b2db      	uxtb	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff ffce 	bl	80020e4 <lcd_data>
	lcd_data(value);
 8002148:	88fb      	ldrh	r3, [r7, #6]
 800214a:	b2db      	uxtb	r3, r3
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ffc9 	bl	80020e4 <lcd_data>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <lcd_send>:
static void lcd_send(uint16_t value){
 800215a:	b580      	push	{r7, lr}
 800215c:	b082      	sub	sp, #8
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	80fb      	strh	r3, [r7, #6]
	if (value & 0x100) {
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800216a:	2b00      	cmp	r3, #0
 800216c:	d005      	beq.n	800217a <lcd_send+0x20>
		lcd_cmd(value);
 800216e:	88fb      	ldrh	r3, [r7, #6]
 8002170:	b2db      	uxtb	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff ff84 	bl	8002080 <lcd_cmd>
	} else {
		lcd_data(value);
	}
}
 8002178:	e004      	b.n	8002184 <lcd_send+0x2a>
		lcd_data(value);
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	4618      	mov	r0, r3
 8002180:	f7ff ffb0 	bl	80020e4 <lcd_data>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <lcd_init>:
void lcd_init(void){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
  chunk_size = (LCD_HEIGHT * LCD_WIDTH) / how_many_chunks;
 8002192:	4b23      	ldr	r3, [pc, #140]	@ (8002220 <lcd_init+0x94>)
 8002194:	881b      	ldrh	r3, [r3, #0]
 8002196:	461a      	mov	r2, r3
 8002198:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800219c:	fb93 f3f2 	sdiv	r3, r3, r2
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	4b20      	ldr	r3, [pc, #128]	@ (8002224 <lcd_init+0x98>)
 80021a4:	801a      	strh	r2, [r3, #0]
  y_per_chunk = LCD_HEIGHT / how_many_chunks;
 80021a6:	4b1e      	ldr	r3, [pc, #120]	@ (8002220 <lcd_init+0x94>)
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80021b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002228 <lcd_init+0x9c>)
 80021b8:	801a      	strh	r2, [r3, #0]

  int i;
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021c0:	481a      	ldr	r0, [pc, #104]	@ (800222c <lcd_init+0xa0>)
 80021c2:	f002 fd8b 	bl	8004cdc <HAL_GPIO_WritePin>
  HAL_Delay(100); // w nocie 10 mikro sec
 80021c6:	2064      	movs	r0, #100	@ 0x64
 80021c8:	f001 fd46 	bl	8003c58 <HAL_Delay>
  HAL_GPIO_WritePin(RDX_GPIO_Port, RDX_Pin, GPIO_PIN_SET);
 80021cc:	2201      	movs	r2, #1
 80021ce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80021d2:	4816      	ldr	r0, [pc, #88]	@ (800222c <lcd_init+0xa0>)
 80021d4:	f002 fd82 	bl	8004cdc <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80021d8:	2064      	movs	r0, #100	@ 0x64
 80021da:	f001 fd3d 	bl	8003c58 <HAL_Delay>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80021de:	2300      	movs	r3, #0
 80021e0:	607b      	str	r3, [r7, #4]
 80021e2:	e009      	b.n	80021f8 <lcd_init+0x6c>
    lcd_send(init_table[i]);
 80021e4:	4a12      	ldr	r2, [pc, #72]	@ (8002230 <lcd_init+0xa4>)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff ffb4 	bl	800215a <lcd_send>
  for (i = 0; i < sizeof(init_table) / sizeof(uint16_t); i++) {
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3301      	adds	r3, #1
 80021f6:	607b      	str	r3, [r7, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b35      	cmp	r3, #53	@ 0x35
 80021fc:	d9f2      	bls.n	80021e4 <lcd_init+0x58>
  }
  HAL_Delay(200);
 80021fe:	20c8      	movs	r0, #200	@ 0xc8
 8002200:	f001 fd2a 	bl	8003c58 <HAL_Delay>
  lcd_cmd(SLEEP_OUT);
 8002204:	2011      	movs	r0, #17
 8002206:	f7ff ff3b 	bl	8002080 <lcd_cmd>
  HAL_Delay(120);
 800220a:	2078      	movs	r0, #120	@ 0x78
 800220c:	f001 fd24 	bl	8003c58 <HAL_Delay>
  lcd_cmd(DISPLAY_ON);
 8002210:	2029      	movs	r0, #41	@ 0x29
 8002212:	f7ff ff35 	bl	8002080 <lcd_cmd>
}
 8002216:	bf00      	nop
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000002 	.word	0x20000002
 8002224:	20025af6 	.word	0x20025af6
 8002228:	20025af8 	.word	0x20025af8
 800222c:	40020c00 	.word	0x40020c00
 8002230:	0800e9dc 	.word	0x0800e9dc

08002234 <lcd_set_window>:

static void lcd_set_window(int x, int y, int width, int height){
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
 8002240:	603b      	str	r3, [r7, #0]
	lcd_cmd(COL_ADR_SET);
 8002242:	202a      	movs	r0, #42	@ 0x2a
 8002244:	f7ff ff1c 	bl	8002080 <lcd_cmd>
	lcd_data16(x);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	b29b      	uxth	r3, r3
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff6f 	bl	8002130 <lcd_data16>
	lcd_data16(x+width-1);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	b29a      	uxth	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4413      	add	r3, r2
 800225c:	b29b      	uxth	r3, r3
 800225e:	3b01      	subs	r3, #1
 8002260:	b29b      	uxth	r3, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff ff64 	bl	8002130 <lcd_data16>
	lcd_cmd(PAGE_ADR_SET);
 8002268:	202b      	movs	r0, #43	@ 0x2b
 800226a:	f7ff ff09 	bl	8002080 <lcd_cmd>
	lcd_data16(y);
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	b29b      	uxth	r3, r3
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff ff5c 	bl	8002130 <lcd_data16>
	lcd_data16(y+height-1);
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	b29a      	uxth	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	b29b      	uxth	r3, r3
 8002280:	4413      	add	r3, r2
 8002282:	b29b      	uxth	r3, r3
 8002284:	3b01      	subs	r3, #1
 8002286:	b29b      	uxth	r3, r3
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff ff51 	bl	8002130 <lcd_data16>
}
 800228e:	bf00      	nop
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <lcd_set_rectangle>:
void lcd_set_rectangle(uint16_t idx,int x,int y,int width,int height,uint16_t color){
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	60b9      	str	r1, [r7, #8]
 80022a0:	607a      	str	r2, [r7, #4]
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	4603      	mov	r3, r0
 80022a6:	81fb      	strh	r3, [r7, #14]
	rects[idx].x = x;
 80022a8:	89fa      	ldrh	r2, [r7, #14]
 80022aa:	491b      	ldr	r1, [pc, #108]	@ (8002318 <lcd_set_rectangle+0x80>)
 80022ac:	4613      	mov	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	601a      	str	r2, [r3, #0]
	rects[idx].y = y;
 80022ba:	89fa      	ldrh	r2, [r7, #14]
 80022bc:	4916      	ldr	r1, [pc, #88]	@ (8002318 <lcd_set_rectangle+0x80>)
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	440b      	add	r3, r1
 80022c8:	3304      	adds	r3, #4
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	601a      	str	r2, [r3, #0]
	rects[idx].width = width;
 80022ce:	89fa      	ldrh	r2, [r7, #14]
 80022d0:	4911      	ldr	r1, [pc, #68]	@ (8002318 <lcd_set_rectangle+0x80>)
 80022d2:	4613      	mov	r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	440b      	add	r3, r1
 80022dc:	3308      	adds	r3, #8
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	601a      	str	r2, [r3, #0]
	rects[idx].height = height;
 80022e2:	89fa      	ldrh	r2, [r7, #14]
 80022e4:	490c      	ldr	r1, [pc, #48]	@ (8002318 <lcd_set_rectangle+0x80>)
 80022e6:	4613      	mov	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	4413      	add	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	330c      	adds	r3, #12
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	601a      	str	r2, [r3, #0]
	rects[idx].color = color;
 80022f6:	89fa      	ldrh	r2, [r7, #14]
 80022f8:	4907      	ldr	r1, [pc, #28]	@ (8002318 <lcd_set_rectangle+0x80>)
 80022fa:	4613      	mov	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	440b      	add	r3, r1
 8002304:	3310      	adds	r3, #16
 8002306:	8bba      	ldrh	r2, [r7, #28]
 8002308:	801a      	strh	r2, [r3, #0]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	20025afc 	.word	0x20025afc

0800231c <lcd_set_char>:
void lcd_set_char(uint16_t idx, int x, int y, char znak, uint16_t color){
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	60b9      	str	r1, [r7, #8]
 8002324:	607a      	str	r2, [r7, #4]
 8002326:	461a      	mov	r2, r3
 8002328:	4603      	mov	r3, r0
 800232a:	81fb      	strh	r3, [r7, #14]
 800232c:	4613      	mov	r3, r2
 800232e:	737b      	strb	r3, [r7, #13]
	text[idx].x = x;
 8002330:	89fa      	ldrh	r2, [r7, #14]
 8002332:	4916      	ldr	r1, [pc, #88]	@ (800238c <lcd_set_char+0x70>)
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	440b      	add	r3, r1
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	601a      	str	r2, [r3, #0]
	text[idx].y = y;
 8002342:	89fa      	ldrh	r2, [r7, #14]
 8002344:	4911      	ldr	r1, [pc, #68]	@ (800238c <lcd_set_char+0x70>)
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	440b      	add	r3, r1
 8002350:	3304      	adds	r3, #4
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	601a      	str	r2, [r3, #0]
	text[idx].c = znak;
 8002356:	89fa      	ldrh	r2, [r7, #14]
 8002358:	490c      	ldr	r1, [pc, #48]	@ (800238c <lcd_set_char+0x70>)
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	440b      	add	r3, r1
 8002364:	3308      	adds	r3, #8
 8002366:	7b7a      	ldrb	r2, [r7, #13]
 8002368:	701a      	strb	r2, [r3, #0]
	text[idx].color = color;
 800236a:	89fa      	ldrh	r2, [r7, #14]
 800236c:	4907      	ldr	r1, [pc, #28]	@ (800238c <lcd_set_char+0x70>)
 800236e:	4613      	mov	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	4413      	add	r3, r2
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	440b      	add	r3, r1
 8002378:	330a      	adds	r3, #10
 800237a:	8b3a      	ldrh	r2, [r7, #24]
 800237c:	801a      	strh	r2, [r3, #0]
}
 800237e:	bf00      	nop
 8002380:	3714      	adds	r7, #20
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20025bd4 	.word	0x20025bd4

08002390 <lcd_set_circle>:

void lcd_set_circle(int x,int y,int radius,uint16_t color){
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	807b      	strh	r3, [r7, #2]
	player.x = x;
 800239e:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <lcd_set_circle+0x34>)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6013      	str	r3, [r2, #0]
	player.y = y;
 80023a4:	4a07      	ldr	r2, [pc, #28]	@ (80023c4 <lcd_set_circle+0x34>)
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	6053      	str	r3, [r2, #4]
	player.r = radius;
 80023aa:	4a06      	ldr	r2, [pc, #24]	@ (80023c4 <lcd_set_circle+0x34>)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6093      	str	r3, [r2, #8]
	player.color = color;
 80023b0:	4a04      	ldr	r2, [pc, #16]	@ (80023c4 <lcd_set_circle+0x34>)
 80023b2:	887b      	ldrh	r3, [r7, #2]
 80023b4:	8193      	strh	r3, [r2, #12]
}
 80023b6:	bf00      	nop
 80023b8:	3714      	adds	r7, #20
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	20025bc4 	.word	0x20025bc4

080023c8 <send_circle>:
static void send_circle(uint16_t circle_color){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	4603      	mov	r3, r0
 80023d0:	80fb      	strh	r3, [r7, #6]
	lcd_set_window(player.x - player.r, player.y-player.r, 2*player.r,2*player.r);
 80023d2:	4b36      	ldr	r3, [pc, #216]	@ (80024ac <send_circle+0xe4>)
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	4b35      	ldr	r3, [pc, #212]	@ (80024ac <send_circle+0xe4>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	1ad0      	subs	r0, r2, r3
 80023dc:	4b33      	ldr	r3, [pc, #204]	@ (80024ac <send_circle+0xe4>)
 80023de:	685a      	ldr	r2, [r3, #4]
 80023e0:	4b32      	ldr	r3, [pc, #200]	@ (80024ac <send_circle+0xe4>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	1ad1      	subs	r1, r2, r3
 80023e6:	4b31      	ldr	r3, [pc, #196]	@ (80024ac <send_circle+0xe4>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	005a      	lsls	r2, r3, #1
 80023ec:	4b2f      	ldr	r3, [pc, #188]	@ (80024ac <send_circle+0xe4>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	f7ff ff1f 	bl	8002234 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80023f6:	202c      	movs	r0, #44	@ 0x2c
 80023f8:	f7ff fe42 	bl	8002080 <lcd_cmd>
	if(!spi5_acquire())return;
 80023fc:	f000 fffe 	bl	80033fc <spi5_acquire>
 8002400:	4603      	mov	r3, r0
 8002402:	f083 0301 	eor.w	r3, r3, #1
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d14b      	bne.n	80024a4 <send_circle+0xdc>
	for(int y=player.y-player.r;y<player.y+player.r;y++){
 800240c:	4b27      	ldr	r3, [pc, #156]	@ (80024ac <send_circle+0xe4>)
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4b26      	ldr	r3, [pc, #152]	@ (80024ac <send_circle+0xe4>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	60fb      	str	r3, [r7, #12]
 8002418:	e039      	b.n	800248e <send_circle+0xc6>
		for(int x=player.x-player.r;x<player.x+player.r;x++){
 800241a:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <send_circle+0xe4>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b23      	ldr	r3, [pc, #140]	@ (80024ac <send_circle+0xe4>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	60bb      	str	r3, [r7, #8]
 8002426:	e027      	b.n	8002478 <send_circle+0xb0>
			if( ( (x-player.x)*(x-player.x)+(y-player.y)*(y-player.y)) <= (player.r*player.r)){
 8002428:	4b20      	ldr	r3, [pc, #128]	@ (80024ac <send_circle+0xe4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	4a1e      	ldr	r2, [pc, #120]	@ (80024ac <send_circle+0xe4>)
 8002432:	6812      	ldr	r2, [r2, #0]
 8002434:	68b9      	ldr	r1, [r7, #8]
 8002436:	1a8a      	subs	r2, r1, r2
 8002438:	fb03 f202 	mul.w	r2, r3, r2
 800243c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ac <send_circle+0xe4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	68f9      	ldr	r1, [r7, #12]
 8002442:	1acb      	subs	r3, r1, r3
 8002444:	4919      	ldr	r1, [pc, #100]	@ (80024ac <send_circle+0xe4>)
 8002446:	6849      	ldr	r1, [r1, #4]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	1a41      	subs	r1, r0, r1
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	441a      	add	r2, r3
 8002452:	4b16      	ldr	r3, [pc, #88]	@ (80024ac <send_circle+0xe4>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	4915      	ldr	r1, [pc, #84]	@ (80024ac <send_circle+0xe4>)
 8002458:	6889      	ldr	r1, [r1, #8]
 800245a:	fb01 f303 	mul.w	r3, r1, r3
 800245e:	429a      	cmp	r2, r3
 8002460:	dc04      	bgt.n	800246c <send_circle+0xa4>
				lcd_data16(circle_color);
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fe63 	bl	8002130 <lcd_data16>
 800246a:	e002      	b.n	8002472 <send_circle+0xaa>
			} else{
				lcd_data16(BACKGROUND); // zle
 800246c:	201f      	movs	r0, #31
 800246e:	f7ff fe5f 	bl	8002130 <lcd_data16>
		for(int x=player.x-player.r;x<player.x+player.r;x++){
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	3301      	adds	r3, #1
 8002476:	60bb      	str	r3, [r7, #8]
 8002478:	4b0c      	ldr	r3, [pc, #48]	@ (80024ac <send_circle+0xe4>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <send_circle+0xe4>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4413      	add	r3, r2
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	429a      	cmp	r2, r3
 8002486:	dbcf      	blt.n	8002428 <send_circle+0x60>
	for(int y=player.y-player.r;y<player.y+player.r;y++){
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3301      	adds	r3, #1
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <send_circle+0xe4>)
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <send_circle+0xe4>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	4413      	add	r3, r2
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	429a      	cmp	r2, r3
 800249c:	dbbd      	blt.n	800241a <send_circle+0x52>
			}
		}
	}
	spi5_release();
 800249e:	f000 ffc1 	bl	8003424 <spi5_release>
 80024a2:	e000      	b.n	80024a6 <send_circle+0xde>
	if(!spi5_acquire())return;
 80024a4:	bf00      	nop
}
 80024a6:	3710      	adds	r7, #16
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20025bc4 	.word	0x20025bc4

080024b0 <clear_former_horizontal>:
//
//	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)circle_buffer, 2*4*player.r*player.r);
//
//	spi5_release();
//}
static void clear_former_horizontal(Circle former){
 80024b0:	b590      	push	{r4, r7, lr}
 80024b2:	b08b      	sub	sp, #44	@ 0x2c
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	463c      	mov	r4, r7
 80024b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int min_y,max_y;

	if(former.y-former.r < player.y - player.r){
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	1ad2      	subs	r2, r2, r3
 80024c2:	4b29      	ldr	r3, [pc, #164]	@ (8002568 <clear_former_horizontal+0xb8>)
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	4b28      	ldr	r3, [pc, #160]	@ (8002568 <clear_former_horizontal+0xb8>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	1acb      	subs	r3, r1, r3
 80024cc:	429a      	cmp	r2, r3
 80024ce:	da0a      	bge.n	80024e6 <clear_former_horizontal+0x36>
		min_y = former.y-former.r;
 80024d0:	687a      	ldr	r2, [r7, #4]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	627b      	str	r3, [r7, #36]	@ 0x24
		max_y = player.y-player.r;
 80024d8:	4b23      	ldr	r3, [pc, #140]	@ (8002568 <clear_former_horizontal+0xb8>)
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <clear_former_horizontal+0xb8>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	623b      	str	r3, [r7, #32]
 80024e4:	e009      	b.n	80024fa <clear_former_horizontal+0x4a>
	} else{
		min_y = player.y+player.r;
 80024e6:	4b20      	ldr	r3, [pc, #128]	@ (8002568 <clear_former_horizontal+0xb8>)
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <clear_former_horizontal+0xb8>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	4413      	add	r3, r2
 80024f0:	627b      	str	r3, [r7, #36]	@ 0x24
		max_y = former.y+former.r;
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	4413      	add	r3, r2
 80024f8:	623b      	str	r3, [r7, #32]
	}

	int height = max_y-min_y;
 80024fa:	6a3a      	ldr	r2, [r7, #32]
 80024fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	61fb      	str	r3, [r7, #28]
	int d_wh = 2*former.r;
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	617b      	str	r3, [r7, #20]
	if(height>d_wh)height=d_wh;
 8002508:	69fa      	ldr	r2, [r7, #28]
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	429a      	cmp	r2, r3
 800250e:	dd01      	ble.n	8002514 <clear_former_horizontal+0x64>
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	61fb      	str	r3, [r7, #28]

	lcd_set_window(former.x-former.r, min_y, d_wh, height);
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad0      	subs	r0, r2, r3
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002520:	f7ff fe88 	bl	8002234 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8002524:	202c      	movs	r0, #44	@ 0x2c
 8002526:	f7ff fdab 	bl	8002080 <lcd_cmd>
	if(!spi5_acquire()){return;}
 800252a:	f000 ff67 	bl	80033fc <spi5_acquire>
 800252e:	4603      	mov	r3, r0
 8002530:	f083 0301 	eor.w	r3, r3, #1
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d112      	bne.n	8002560 <clear_former_horizontal+0xb0>
	for(int i=0;i<d_wh*height;i++){
 800253a:	2300      	movs	r3, #0
 800253c:	61bb      	str	r3, [r7, #24]
 800253e:	e005      	b.n	800254c <clear_former_horizontal+0x9c>
		lcd_data16(BACKGROUND);
 8002540:	201f      	movs	r0, #31
 8002542:	f7ff fdf5 	bl	8002130 <lcd_data16>
	for(int i=0;i<d_wh*height;i++){
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	3301      	adds	r3, #1
 800254a:	61bb      	str	r3, [r7, #24]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	69fa      	ldr	r2, [r7, #28]
 8002550:	fb02 f303 	mul.w	r3, r2, r3
 8002554:	69ba      	ldr	r2, [r7, #24]
 8002556:	429a      	cmp	r2, r3
 8002558:	dbf2      	blt.n	8002540 <clear_former_horizontal+0x90>
	}
	spi5_release();
 800255a:	f000 ff63 	bl	8003424 <spi5_release>
 800255e:	e000      	b.n	8002562 <clear_former_horizontal+0xb2>
	if(!spi5_acquire()){return;}
 8002560:	bf00      	nop
}
 8002562:	372c      	adds	r7, #44	@ 0x2c
 8002564:	46bd      	mov	sp, r7
 8002566:	bd90      	pop	{r4, r7, pc}
 8002568:	20025bc4 	.word	0x20025bc4

0800256c <clear_former_vertical>:
static void clear_former_vertical(Circle former){
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b08b      	sub	sp, #44	@ 0x2c
 8002570:	af00      	add	r7, sp, #0
 8002572:	463c      	mov	r4, r7
 8002574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int min_x,max_x;

	if(former.x-former.r < player.x - player.r){
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	1ad2      	subs	r2, r2, r3
 800257e:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <clear_former_vertical+0xbc>)
 8002580:	6819      	ldr	r1, [r3, #0]
 8002582:	4b29      	ldr	r3, [pc, #164]	@ (8002628 <clear_former_vertical+0xbc>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	1acb      	subs	r3, r1, r3
 8002588:	429a      	cmp	r2, r3
 800258a:	da0a      	bge.n	80025a2 <clear_former_vertical+0x36>
		min_x = former.x-former.r;
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	627b      	str	r3, [r7, #36]	@ 0x24
		max_x = player.x-player.r;
 8002594:	4b24      	ldr	r3, [pc, #144]	@ (8002628 <clear_former_vertical+0xbc>)
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	4b23      	ldr	r3, [pc, #140]	@ (8002628 <clear_former_vertical+0xbc>)
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	623b      	str	r3, [r7, #32]
 80025a0:	e009      	b.n	80025b6 <clear_former_vertical+0x4a>
	} else{
		min_x = player.x+player.r;
 80025a2:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <clear_former_vertical+0xbc>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4b20      	ldr	r3, [pc, #128]	@ (8002628 <clear_former_vertical+0xbc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	4413      	add	r3, r2
 80025ac:	627b      	str	r3, [r7, #36]	@ 0x24
		max_x = former.x+former.r;
 80025ae:	683a      	ldr	r2, [r7, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	4413      	add	r3, r2
 80025b4:	623b      	str	r3, [r7, #32]
	}

	int width = max_x-min_x;
 80025b6:	6a3a      	ldr	r2, [r7, #32]
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	61fb      	str	r3, [r7, #28]
	int d_wh = 2*former.r;
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
	if(width>d_wh)width=2*d_wh;
 80025c4:	69fa      	ldr	r2, [r7, #28]
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dd02      	ble.n	80025d2 <clear_former_vertical+0x66>
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]

	lcd_set_window(min_x, former.y-former.r, width, d_wh);
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	1ad1      	subs	r1, r2, r3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	69fa      	ldr	r2, [r7, #28]
 80025dc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80025de:	f7ff fe29 	bl	8002234 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 80025e2:	202c      	movs	r0, #44	@ 0x2c
 80025e4:	f7ff fd4c 	bl	8002080 <lcd_cmd>
	if(!spi5_acquire()){return;}
 80025e8:	f000 ff08 	bl	80033fc <spi5_acquire>
 80025ec:	4603      	mov	r3, r0
 80025ee:	f083 0301 	eor.w	r3, r3, #1
 80025f2:	b2db      	uxtb	r3, r3
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d112      	bne.n	800261e <clear_former_vertical+0xb2>
	for(int i=0;i<d_wh*width;i++){
 80025f8:	2300      	movs	r3, #0
 80025fa:	61bb      	str	r3, [r7, #24]
 80025fc:	e005      	b.n	800260a <clear_former_vertical+0x9e>
		lcd_data16(BACKGROUND);
 80025fe:	201f      	movs	r0, #31
 8002600:	f7ff fd96 	bl	8002130 <lcd_data16>
	for(int i=0;i<d_wh*width;i++){
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	3301      	adds	r3, #1
 8002608:	61bb      	str	r3, [r7, #24]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	69fa      	ldr	r2, [r7, #28]
 800260e:	fb02 f303 	mul.w	r3, r2, r3
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	429a      	cmp	r2, r3
 8002616:	dbf2      	blt.n	80025fe <clear_former_vertical+0x92>
	}
	spi5_release();
 8002618:	f000 ff04 	bl	8003424 <spi5_release>
 800261c:	e000      	b.n	8002620 <clear_former_vertical+0xb4>
	if(!spi5_acquire()){return;}
 800261e:	bf00      	nop
}
 8002620:	372c      	adds	r7, #44	@ 0x2c
 8002622:	46bd      	mov	sp, r7
 8002624:	bd90      	pop	{r4, r7, pc}
 8002626:	bf00      	nop
 8002628:	20025bc4 	.word	0x20025bc4

0800262c <clear_former_circle>:
static void clear_former_circle(Circle former){
 800262c:	b590      	push	{r4, r7, lr}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	463c      	mov	r4, r7
 8002634:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	clear_former_horizontal(former);
 8002638:	463b      	mov	r3, r7
 800263a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800263c:	f7ff ff38 	bl	80024b0 <clear_former_horizontal>
	clear_former_vertical(former);
 8002640:	463b      	mov	r3, r7
 8002642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002644:	f7ff ff92 	bl	800256c <clear_former_vertical>
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	bd90      	pop	{r4, r7, pc}

08002650 <lcd_delta_circle>:
void lcd_delta_circle(int dx,int dy,int dradius){
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
	player.x += dx;
 800265c:	4b2c      	ldr	r3, [pc, #176]	@ (8002710 <lcd_delta_circle+0xc0>)
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4413      	add	r3, r2
 8002664:	4a2a      	ldr	r2, [pc, #168]	@ (8002710 <lcd_delta_circle+0xc0>)
 8002666:	6013      	str	r3, [r2, #0]
	player.y += dy;
 8002668:	4b29      	ldr	r3, [pc, #164]	@ (8002710 <lcd_delta_circle+0xc0>)
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	4413      	add	r3, r2
 8002670:	4a27      	ldr	r2, [pc, #156]	@ (8002710 <lcd_delta_circle+0xc0>)
 8002672:	6053      	str	r3, [r2, #4]
	player.r += dradius;
 8002674:	4b26      	ldr	r3, [pc, #152]	@ (8002710 <lcd_delta_circle+0xc0>)
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	4a24      	ldr	r2, [pc, #144]	@ (8002710 <lcd_delta_circle+0xc0>)
 800267e:	6093      	str	r3, [r2, #8]



	if(player.r<0 || player.r > LCD_WIDTH/6 || player.r>LCD_HEIGHT/6)player.r = 5;
 8002680:	4b23      	ldr	r3, [pc, #140]	@ (8002710 <lcd_delta_circle+0xc0>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	db07      	blt.n	8002698 <lcd_delta_circle+0x48>
 8002688:	4b21      	ldr	r3, [pc, #132]	@ (8002710 <lcd_delta_circle+0xc0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b28      	cmp	r3, #40	@ 0x28
 800268e:	dc03      	bgt.n	8002698 <lcd_delta_circle+0x48>
 8002690:	4b1f      	ldr	r3, [pc, #124]	@ (8002710 <lcd_delta_circle+0xc0>)
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b35      	cmp	r3, #53	@ 0x35
 8002696:	dd02      	ble.n	800269e <lcd_delta_circle+0x4e>
 8002698:	4b1d      	ldr	r3, [pc, #116]	@ (8002710 <lcd_delta_circle+0xc0>)
 800269a:	2205      	movs	r2, #5
 800269c:	609a      	str	r2, [r3, #8]

	if (player.x-player.r < 0) player.x = player.r;
 800269e:	4b1c      	ldr	r3, [pc, #112]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da04      	bge.n	80026b6 <lcd_delta_circle+0x66>
 80026ac:	4b18      	ldr	r3, [pc, #96]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	4a17      	ldr	r2, [pc, #92]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026b2:	6013      	str	r3, [r2, #0]
 80026b4:	e00c      	b.n	80026d0 <lcd_delta_circle+0x80>
	else if (player.x+player.r > LCD_WIDTH) player.x = LCD_WIDTH-player.r;
 80026b6:	4b16      	ldr	r3, [pc, #88]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4b15      	ldr	r3, [pc, #84]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4413      	add	r3, r2
 80026c0:	2bf0      	cmp	r3, #240	@ 0xf0
 80026c2:	dd05      	ble.n	80026d0 <lcd_delta_circle+0x80>
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80026cc:	4a10      	ldr	r2, [pc, #64]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026ce:	6013      	str	r3, [r2, #0]
	if (player.y-player.r < 0) player.y = player.r;
 80026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026d6:	689b      	ldr	r3, [r3, #8]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	da04      	bge.n	80026e8 <lcd_delta_circle+0x98>
 80026de:	4b0c      	ldr	r3, [pc, #48]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4a0b      	ldr	r2, [pc, #44]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026e4:	6053      	str	r3, [r2, #4]
	else if (player.y+player.r > LCD_HEIGHT) player.y = LCD_HEIGHT-player.r;
}
 80026e6:	e00d      	b.n	8002704 <lcd_delta_circle+0xb4>
	else if (player.y+player.r > LCD_HEIGHT) player.y = LCD_HEIGHT-player.r;
 80026e8:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	4b08      	ldr	r3, [pc, #32]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	4413      	add	r3, r2
 80026f2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80026f6:	dd05      	ble.n	8002704 <lcd_delta_circle+0xb4>
 80026f8:	4b05      	ldr	r3, [pc, #20]	@ (8002710 <lcd_delta_circle+0xc0>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8002700:	4a03      	ldr	r2, [pc, #12]	@ (8002710 <lcd_delta_circle+0xc0>)
 8002702:	6053      	str	r3, [r2, #4]
}
 8002704:	bf00      	nop
 8002706:	3714      	adds	r7, #20
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	20025bc4 	.word	0x20025bc4

08002714 <lcd_update_circle>:
void lcd_update_circle(int dx,int dy,int dradius){
 8002714:	b590      	push	{r4, r7, lr}
 8002716:	b089      	sub	sp, #36	@ 0x24
 8002718:	af00      	add	r7, sp, #0
 800271a:	60f8      	str	r0, [r7, #12]
 800271c:	60b9      	str	r1, [r7, #8]
 800271e:	607a      	str	r2, [r7, #4]
	Circle former = player;
 8002720:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <lcd_update_circle+0x4c>)
 8002722:	f107 0410 	add.w	r4, r7, #16
 8002726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	lcd_delta_circle(dx, dy, dradius);
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	68b9      	ldr	r1, [r7, #8]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ff8d 	bl	8002650 <lcd_delta_circle>
	if(dx!=0 ||  dy!=0)clear_former_circle(former);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d102      	bne.n	8002742 <lcd_update_circle+0x2e>
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d004      	beq.n	800274c <lcd_update_circle+0x38>
 8002742:	f107 0310 	add.w	r3, r7, #16
 8002746:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002748:	f7ff ff70 	bl	800262c <clear_former_circle>
	send_circle(player.color);
 800274c:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <lcd_update_circle+0x4c>)
 800274e:	899b      	ldrh	r3, [r3, #12]
 8002750:	b29b      	uxth	r3, r3
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fe38 	bl	80023c8 <send_circle>
	//	send_circle_buffer();
}
 8002758:	bf00      	nop
 800275a:	3724      	adds	r7, #36	@ 0x24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd90      	pop	{r4, r7, pc}
 8002760:	20025bc4 	.word	0x20025bc4

08002764 <lcd_put_pixel>:
void lcd_put_pixel(int x, int y, uint16_t color){
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	4613      	mov	r3, r2
 8002770:	80fb      	strh	r3, [r7, #6]
	screen_buffer[ (LCD_WIDTH*y) + x] = __REV16(color); //to make send most significant bit first
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
{
  uint32_t result;

  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	ba5b      	rev16	r3, r3
 800277a:	613b      	str	r3, [r7, #16]
  return result;
 800277c:	6939      	ldr	r1, [r7, #16]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	4613      	mov	r3, r2
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	011b      	lsls	r3, r3, #4
 8002788:	461a      	mov	r2, r3
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	4413      	add	r3, r2
 800278e:	b289      	uxth	r1, r1
 8002790:	4a04      	ldr	r2, [pc, #16]	@ (80027a4 <lcd_put_pixel+0x40>)
 8002792:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8002796:	bf00      	nop
 8002798:	371c      	adds	r7, #28
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	200002f4 	.word	0x200002f4

080027a8 <lcd_put_rect_to_buffer>:
static void lcd_put_rect_to_buffer(Rectangle rect){
 80027a8:	b084      	sub	sp, #16
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b082      	sub	sp, #8
 80027ae:	af00      	add	r7, sp, #0
 80027b0:	f107 0c10 	add.w	ip, r7, #16
 80027b4:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	for(int y=rect.y;y<rect.y+rect.height;y++){
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	607b      	str	r3, [r7, #4]
 80027bc:	e021      	b.n	8002802 <lcd_put_rect_to_buffer+0x5a>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	603b      	str	r3, [r7, #0]
 80027c2:	e015      	b.n	80027f0 <lcd_put_rect_to_buffer+0x48>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	db0f      	blt.n	80027ea <lcd_put_rect_to_buffer+0x42>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2bef      	cmp	r3, #239	@ 0xef
 80027ce:	dc0c      	bgt.n	80027ea <lcd_put_rect_to_buffer+0x42>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db09      	blt.n	80027ea <lcd_put_rect_to_buffer+0x42>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80027dc:	da05      	bge.n	80027ea <lcd_put_rect_to_buffer+0x42>
				lcd_put_pixel(x, y, rect.color);
 80027de:	8c3b      	ldrh	r3, [r7, #32]
 80027e0:	461a      	mov	r2, r3
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	6838      	ldr	r0, [r7, #0]
 80027e6:	f7ff ffbd 	bl	8002764 <lcd_put_pixel>
		for(int x=rect.x;x<rect.x+rect.width;x++){
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	3301      	adds	r3, #1
 80027ee:	603b      	str	r3, [r7, #0]
 80027f0:	693a      	ldr	r2, [r7, #16]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	4413      	add	r3, r2
 80027f6:	683a      	ldr	r2, [r7, #0]
 80027f8:	429a      	cmp	r2, r3
 80027fa:	dbe3      	blt.n	80027c4 <lcd_put_rect_to_buffer+0x1c>
	for(int y=rect.y;y<rect.y+rect.height;y++){
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3301      	adds	r3, #1
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	4413      	add	r3, r2
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	429a      	cmp	r2, r3
 800280c:	dbd7      	blt.n	80027be <lcd_put_rect_to_buffer+0x16>
			}
		}
	}
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800281a:	b004      	add	sp, #16
 800281c:	4770      	bx	lr

0800281e <lcd_put_circ_to_buffer>:
static void lcd_put_circ_to_buffer(Circle circle){
 800281e:	b590      	push	{r4, r7, lr}
 8002820:	b087      	sub	sp, #28
 8002822:	af00      	add	r7, sp, #0
 8002824:	463c      	mov	r4, r7
 8002826:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	for(int y=circle.y-circle.r;y<circle.y+circle.r;y++){
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	617b      	str	r3, [r7, #20]
 8002832:	e03a      	b.n	80028aa <lcd_put_circ_to_buffer+0x8c>
		for(int x=circle.x-circle.r;x<circle.x+circle.r;x++){
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e02c      	b.n	8002898 <lcd_put_circ_to_buffer+0x7a>
			if(x>=0 && x<LCD_WIDTH && y>=0 && y<LCD_HEIGHT){
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	2b00      	cmp	r3, #0
 8002842:	db26      	blt.n	8002892 <lcd_put_circ_to_buffer+0x74>
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2bef      	cmp	r3, #239	@ 0xef
 8002848:	dc23      	bgt.n	8002892 <lcd_put_circ_to_buffer+0x74>
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b00      	cmp	r3, #0
 800284e:	db20      	blt.n	8002892 <lcd_put_circ_to_buffer+0x74>
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002856:	da1c      	bge.n	8002892 <lcd_put_circ_to_buffer+0x74>
				if( ( (x-circle.x)*(x-circle.x)+(y-circle.y)*(y-circle.y)) <= (circle.r*circle.r)){
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	693a      	ldr	r2, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	6939      	ldr	r1, [r7, #16]
 8002862:	1a8a      	subs	r2, r1, r2
 8002864:	fb03 f202 	mul.w	r2, r3, r2
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6979      	ldr	r1, [r7, #20]
 800286c:	1acb      	subs	r3, r1, r3
 800286e:	6879      	ldr	r1, [r7, #4]
 8002870:	6978      	ldr	r0, [r7, #20]
 8002872:	1a41      	subs	r1, r0, r1
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	441a      	add	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	68b9      	ldr	r1, [r7, #8]
 800287e:	fb01 f303 	mul.w	r3, r1, r3
 8002882:	429a      	cmp	r2, r3
 8002884:	dc05      	bgt.n	8002892 <lcd_put_circ_to_buffer+0x74>
					lcd_put_pixel(x, y, circle.color);
 8002886:	89bb      	ldrh	r3, [r7, #12]
 8002888:	461a      	mov	r2, r3
 800288a:	6979      	ldr	r1, [r7, #20]
 800288c:	6938      	ldr	r0, [r7, #16]
 800288e:	f7ff ff69 	bl	8002764 <lcd_put_pixel>
		for(int x=circle.x-circle.r;x<circle.x+circle.r;x++){
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	3301      	adds	r3, #1
 8002896:	613b      	str	r3, [r7, #16]
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	4413      	add	r3, r2
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	dbcc      	blt.n	800283e <lcd_put_circ_to_buffer+0x20>
	for(int y=circle.y-circle.r;y<circle.y+circle.r;y++){
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	3301      	adds	r3, #1
 80028a8:	617b      	str	r3, [r7, #20]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	4413      	add	r3, r2
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	dbbe      	blt.n	8002834 <lcd_put_circ_to_buffer+0x16>
				}
			}
		}
	}
}
 80028b6:	bf00      	nop
 80028b8:	bf00      	nop
 80028ba:	371c      	adds	r7, #28
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd90      	pop	{r4, r7, pc}

080028c0 <get_char_bitmap>:
const uint16_t* get_char_bitmap(char c) {
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	4603      	mov	r3, r0
 80028c8:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') {
 80028ca:	79fb      	ldrb	r3, [r7, #7]
 80028cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80028ce:	d90c      	bls.n	80028ea <get_char_bitmap+0x2a>
 80028d0:	79fb      	ldrb	r3, [r7, #7]
 80028d2:	2b39      	cmp	r3, #57	@ 0x39
 80028d4:	d809      	bhi.n	80028ea <get_char_bitmap+0x2a>
        return font_10x14[c - '0'];  // indeksy 0-9
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80028dc:	4613      	mov	r3, r2
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	1a9b      	subs	r3, r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002918 <get_char_bitmap+0x58>)
 80028e6:	4413      	add	r3, r2
 80028e8:	e010      	b.n	800290c <get_char_bitmap+0x4c>
    }
    else if (c >= 'A' && c <= 'Z') {
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	2b40      	cmp	r3, #64	@ 0x40
 80028ee:	d90c      	bls.n	800290a <get_char_bitmap+0x4a>
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	2b5a      	cmp	r3, #90	@ 0x5a
 80028f4:	d809      	bhi.n	800290a <get_char_bitmap+0x4a>
        return font_10x14[10 + (c - 'A')];  // indeksy 10-35 (po cyfrach)
 80028f6:	79fb      	ldrb	r3, [r7, #7]
 80028f8:	f1a3 0237 	sub.w	r2, r3, #55	@ 0x37
 80028fc:	4613      	mov	r3, r2
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4a04      	ldr	r2, [pc, #16]	@ (8002918 <get_char_bitmap+0x58>)
 8002906:	4413      	add	r3, r2
 8002908:	e000      	b.n	800290c <get_char_bitmap+0x4c>
    }
    return NULL;  // znak nieobsługiwany
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	0800e5ec 	.word	0x0800e5ec

0800291c <lcd_put_char_to_buffer>:
void lcd_put_char_to_buffer(Buf_Char ch) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b08c      	sub	sp, #48	@ 0x30
 8002920:	af00      	add	r7, sp, #0
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const uint16_t* bitmap = get_char_bitmap(ch.c);
 8002928:	7b3b      	ldrb	r3, [r7, #12]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ffc8 	bl	80028c0 <get_char_bitmap>
 8002930:	6278      	str	r0, [r7, #36]	@ 0x24
    if (!bitmap) return;
 8002932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002934:	2b00      	cmp	r3, #0
 8002936:	d048      	beq.n	80029ca <lcd_put_char_to_buffer+0xae>

    for (int row = 0; row < 14; row++) {
 8002938:	2300      	movs	r3, #0
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800293c:	e041      	b.n	80029c2 <lcd_put_char_to_buffer+0xa6>
        for (int col = 0; col < 10; col++) {
 800293e:	2300      	movs	r3, #0
 8002940:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002942:	e038      	b.n	80029b6 <lcd_put_char_to_buffer+0x9a>
            if (bitmap[row] & (1 << (9 - col))) {
 8002944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294a:	4413      	add	r3, r2
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	f1c3 0309 	rsb	r3, r3, #9
 8002956:	fa42 f303 	asr.w	r3, r2, r3
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d026      	beq.n	80029b0 <lcd_put_char_to_buffer+0x94>
                int px = ch.x + col;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002966:	4413      	add	r3, r2
 8002968:	623b      	str	r3, [r7, #32]
                int py = ch.y + row;
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800296e:	4413      	add	r3, r2
 8002970:	61fb      	str	r3, [r7, #28]
                if (px >= 0 && px < LCD_WIDTH && py >= 0 && py < LCD_HEIGHT) {
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	2b00      	cmp	r3, #0
 8002976:	db1b      	blt.n	80029b0 <lcd_put_char_to_buffer+0x94>
 8002978:	6a3b      	ldr	r3, [r7, #32]
 800297a:	2bef      	cmp	r3, #239	@ 0xef
 800297c:	dc18      	bgt.n	80029b0 <lcd_put_char_to_buffer+0x94>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db15      	blt.n	80029b0 <lcd_put_char_to_buffer+0x94>
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800298a:	da11      	bge.n	80029b0 <lcd_put_char_to_buffer+0x94>
                    screen_buffer[py * LCD_WIDTH + px] = __REV16(ch.color);
 800298c:	89fb      	ldrh	r3, [r7, #14]
 800298e:	61bb      	str	r3, [r7, #24]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	ba5b      	rev16	r3, r3
 8002994:	617b      	str	r3, [r7, #20]
  return result;
 8002996:	6979      	ldr	r1, [r7, #20]
 8002998:	69fa      	ldr	r2, [r7, #28]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	011b      	lsls	r3, r3, #4
 80029a2:	461a      	mov	r2, r3
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	4413      	add	r3, r2
 80029a8:	b289      	uxth	r1, r1
 80029aa:	4a0a      	ldr	r2, [pc, #40]	@ (80029d4 <lcd_put_char_to_buffer+0xb8>)
 80029ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (int col = 0; col < 10; col++) {
 80029b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b2:	3301      	adds	r3, #1
 80029b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	2b09      	cmp	r3, #9
 80029ba:	ddc3      	ble.n	8002944 <lcd_put_char_to_buffer+0x28>
    for (int row = 0; row < 14; row++) {
 80029bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029be:	3301      	adds	r3, #1
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80029c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c4:	2b0d      	cmp	r3, #13
 80029c6:	ddba      	ble.n	800293e <lcd_put_char_to_buffer+0x22>
 80029c8:	e000      	b.n	80029cc <lcd_put_char_to_buffer+0xb0>
    if (!bitmap) return;
 80029ca:	bf00      	nop
                }
            }
        }
    }
}
 80029cc:	3730      	adds	r7, #48	@ 0x30
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	200002f4 	.word	0x200002f4

080029d8 <put_figures_to_buffer>:
static void put_figures_to_buffer(void){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af02      	add	r7, sp, #8
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT;i++) {
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
 80029e2:	e00d      	b.n	8002a00 <put_figures_to_buffer+0x28>
 80029e4:	231f      	movs	r3, #31
 80029e6:	60bb      	str	r3, [r7, #8]
  __ASM ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	ba5b      	rev16	r3, r3
 80029ec:	607b      	str	r3, [r7, #4]
  return result;
 80029ee:	687b      	ldr	r3, [r7, #4]
		screen_buffer[i] = __REV16(BLUE);
 80029f0:	b299      	uxth	r1, r3
 80029f2:	4a1e      	ldr	r2, [pc, #120]	@ (8002a6c <put_figures_to_buffer+0x94>)
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i=0; i<LCD_WIDTH*LCD_HEIGHT;i++) {
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 8002a06:	dbed      	blt.n	80029e4 <put_figures_to_buffer+0xc>
	}

	for(int i=0;i<RECTS_AMOUNT;i++){
 8002a08:	2300      	movs	r3, #0
 8002a0a:	613b      	str	r3, [r7, #16]
 8002a0c:	e00e      	b.n	8002a2c <put_figures_to_buffer+0x54>
		lcd_put_rect_to_buffer(rects[i]);
 8002a0e:	4918      	ldr	r1, [pc, #96]	@ (8002a70 <put_figures_to_buffer+0x98>)
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	4613      	mov	r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	4413      	add	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	691a      	ldr	r2, [r3, #16]
 8002a1e:	9200      	str	r2, [sp, #0]
 8002a20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a22:	f7ff fec1 	bl	80027a8 <lcd_put_rect_to_buffer>
	for(int i=0;i<RECTS_AMOUNT;i++){
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	613b      	str	r3, [r7, #16]
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	2b09      	cmp	r3, #9
 8002a30:	dded      	ble.n	8002a0e <put_figures_to_buffer+0x36>
	}
	for(int i=0;i<MAX_CHARS_ON_SCREEN;i++){
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	e00d      	b.n	8002a54 <put_figures_to_buffer+0x7c>
		lcd_put_char_to_buffer(text[i]);
 8002a38:	490e      	ldr	r1, [pc, #56]	@ (8002a74 <put_figures_to_buffer+0x9c>)
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002a4a:	f7ff ff67 	bl	800291c <lcd_put_char_to_buffer>
	for(int i=0;i<MAX_CHARS_ON_SCREEN;i++){
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	3301      	adds	r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b31      	cmp	r3, #49	@ 0x31
 8002a58:	ddee      	ble.n	8002a38 <put_figures_to_buffer+0x60>
	}
	lcd_put_circ_to_buffer(player);
 8002a5a:	4b07      	ldr	r3, [pc, #28]	@ (8002a78 <put_figures_to_buffer+0xa0>)
 8002a5c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a5e:	f7ff fede 	bl	800281e <lcd_put_circ_to_buffer>
}
 8002a62:	bf00      	nop
 8002a64:	3718      	adds	r7, #24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200002f4 	.word	0x200002f4
 8002a70:	20025afc 	.word	0x20025afc
 8002a74:	20025bd4 	.word	0x20025bd4
 8002a78:	20025bc4 	.word	0x20025bc4

08002a7c <lcd_update>:

void lcd_update(void){
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	put_figures_to_buffer();
 8002a80:	f7ff ffaa 	bl	80029d8 <put_figures_to_buffer>

	current_chunk = 0;
 8002a84:	4b20      	ldr	r3, [pc, #128]	@ (8002b08 <lcd_update+0x8c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	801a      	strh	r2, [r3, #0]
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8002a8a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b08 <lcd_update+0x8c>)
 8002a8c:	881b      	ldrh	r3, [r3, #0]
 8002a8e:	461a      	mov	r2, r3
 8002a90:	4b1e      	ldr	r3, [pc, #120]	@ (8002b0c <lcd_update+0x90>)
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	fb03 f102 	mul.w	r1, r3, r2
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <lcd_update+0x94>)
 8002a9a:	881b      	ldrh	r3, [r3, #0]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002aa2:	fb93 f3f2 	sdiv	r3, r3, r2
 8002aa6:	22f0      	movs	r2, #240	@ 0xf0
 8002aa8:	2000      	movs	r0, #0
 8002aaa:	f7ff fbc3 	bl	8002234 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8002aae:	202c      	movs	r0, #44	@ 0x2c
 8002ab0:	f7ff fae6 	bl	8002080 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002aba:	4816      	ldr	r0, [pc, #88]	@ (8002b14 <lcd_update+0x98>)
 8002abc:	f002 f90e 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	2104      	movs	r1, #4
 8002ac4:	4814      	ldr	r0, [pc, #80]	@ (8002b18 <lcd_update+0x9c>)
 8002ac6:	f002 f909 	bl	8004cdc <HAL_GPIO_WritePin>

	if (!spi5_acquire()) return;
 8002aca:	f000 fc97 	bl	80033fc <spi5_acquire>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	f083 0301 	eor.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d114      	bne.n	8002b04 <lcd_update+0x88>

	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8002ada:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <lcd_update+0x8c>)
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b0e      	ldr	r3, [pc, #56]	@ (8002b1c <lcd_update+0xa0>)
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	fb02 f303 	mul.w	r3, r2, r3
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	4a0d      	ldr	r2, [pc, #52]	@ (8002b20 <lcd_update+0xa4>)
 8002aec:	1899      	adds	r1, r3, r2
 8002aee:	4b0b      	ldr	r3, [pc, #44]	@ (8002b1c <lcd_update+0xa0>)
 8002af0:	881b      	ldrh	r3, [r3, #0]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	461a      	mov	r2, r3
 8002af8:	480a      	ldr	r0, [pc, #40]	@ (8002b24 <lcd_update+0xa8>)
 8002afa:	f005 ff3f 	bl	800897c <HAL_SPI_Transmit_DMA>

	spi5_release();
 8002afe:	f000 fc91 	bl	8003424 <spi5_release>
 8002b02:	e000      	b.n	8002b06 <lcd_update+0x8a>
	if (!spi5_acquire()) return;
 8002b04:	bf00      	nop
}
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20025af4 	.word	0x20025af4
 8002b0c:	20025af8 	.word	0x20025af8
 8002b10:	20000002 	.word	0x20000002
 8002b14:	40020c00 	.word	0x40020c00
 8002b18:	40020800 	.word	0x40020800
 8002b1c:	20025af6 	.word	0x20025af6
 8002b20:	200002f4 	.word	0x200002f4
 8002b24:	20025efc 	.word	0x20025efc

08002b28 <lcd_transfer_done>:
void lcd_transfer_done(void){
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_SET);
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	2104      	movs	r1, #4
 8002b30:	4802      	ldr	r0, [pc, #8]	@ (8002b3c <lcd_transfer_done+0x14>)
 8002b32:	f002 f8d3 	bl	8004cdc <HAL_GPIO_WritePin>
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	40020800 	.word	0x40020800

08002b40 <send_next_chunk>:
bool lcd_is_busy(void){
	if (HAL_SPI_GetState(&hspi5) == HAL_SPI_STATE_BUSY) return true;
	else return false;
}
static void send_next_chunk(void){
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
	lcd_set_window(0, current_chunk*y_per_chunk, LCD_WIDTH, LCD_HEIGHT/how_many_chunks);
 8002b44:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <send_next_chunk+0x88>)
 8002b46:	881b      	ldrh	r3, [r3, #0]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	4b20      	ldr	r3, [pc, #128]	@ (8002bcc <send_next_chunk+0x8c>)
 8002b4c:	881b      	ldrh	r3, [r3, #0]
 8002b4e:	fb03 f102 	mul.w	r1, r3, r2
 8002b52:	4b1f      	ldr	r3, [pc, #124]	@ (8002bd0 <send_next_chunk+0x90>)
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002b5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8002b60:	22f0      	movs	r2, #240	@ 0xf0
 8002b62:	2000      	movs	r0, #0
 8002b64:	f7ff fb66 	bl	8002234 <lcd_set_window>
	lcd_cmd(MEM_WRITE);
 8002b68:	202c      	movs	r0, #44	@ 0x2c
 8002b6a:	f7ff fa89 	bl	8002080 <lcd_cmd>
	HAL_GPIO_WritePin(WRX_DCX_GPIO_Port, WRX_DCX_Pin, GPIO_PIN_SET);
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b74:	4817      	ldr	r0, [pc, #92]	@ (8002bd4 <send_next_chunk+0x94>)
 8002b76:	f002 f8b1 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	2104      	movs	r1, #4
 8002b7e:	4816      	ldr	r0, [pc, #88]	@ (8002bd8 <send_next_chunk+0x98>)
 8002b80:	f002 f8ac 	bl	8004cdc <HAL_GPIO_WritePin>
	lcd_ready = false;
 8002b84:	4b15      	ldr	r3, [pc, #84]	@ (8002bdc <send_next_chunk+0x9c>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	701a      	strb	r2, [r3, #0]
	if (!spi5_acquire()) return;
 8002b8a:	f000 fc37 	bl	80033fc <spi5_acquire>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	f083 0301 	eor.w	r3, r3, #1
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d114      	bne.n	8002bc4 <send_next_chunk+0x84>
	HAL_SPI_Transmit_DMA(&hspi5, (uint8_t*)(screen_buffer + (current_chunk * chunk_size)), 2*chunk_size);
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <send_next_chunk+0x88>)
 8002b9c:	881b      	ldrh	r3, [r3, #0]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8002be0 <send_next_chunk+0xa0>)
 8002ba2:	881b      	ldrh	r3, [r3, #0]
 8002ba4:	fb02 f303 	mul.w	r3, r2, r3
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	4a0e      	ldr	r2, [pc, #56]	@ (8002be4 <send_next_chunk+0xa4>)
 8002bac:	1899      	adds	r1, r3, r2
 8002bae:	4b0c      	ldr	r3, [pc, #48]	@ (8002be0 <send_next_chunk+0xa0>)
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	480b      	ldr	r0, [pc, #44]	@ (8002be8 <send_next_chunk+0xa8>)
 8002bba:	f005 fedf 	bl	800897c <HAL_SPI_Transmit_DMA>

	spi5_release();
 8002bbe:	f000 fc31 	bl	8003424 <spi5_release>
 8002bc2:	e000      	b.n	8002bc6 <send_next_chunk+0x86>
	if (!spi5_acquire()) return;
 8002bc4:	bf00      	nop
}
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20025af4 	.word	0x20025af4
 8002bcc:	20025af8 	.word	0x20025af8
 8002bd0:	20000002 	.word	0x20000002
 8002bd4:	40020c00 	.word	0x40020c00
 8002bd8:	40020800 	.word	0x40020800
 8002bdc:	20000004 	.word	0x20000004
 8002be0:	20025af6 	.word	0x20025af6
 8002be4:	200002f4 	.word	0x200002f4
 8002be8:	20025efc 	.word	0x20025efc

08002bec <go_for_next_chunk>:
void go_for_next_chunk(void){
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
	current_chunk++;
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c1c <go_for_next_chunk+0x30>)
 8002bf2:	881b      	ldrh	r3, [r3, #0]
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	4b08      	ldr	r3, [pc, #32]	@ (8002c1c <go_for_next_chunk+0x30>)
 8002bfa:	801a      	strh	r2, [r3, #0]
	if (current_chunk < how_many_chunks) {
 8002bfc:	4b07      	ldr	r3, [pc, #28]	@ (8002c1c <go_for_next_chunk+0x30>)
 8002bfe:	881a      	ldrh	r2, [r3, #0]
 8002c00:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <go_for_next_chunk+0x34>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d202      	bcs.n	8002c0e <go_for_next_chunk+0x22>
		send_next_chunk();
 8002c08:	f7ff ff9a 	bl	8002b40 <send_next_chunk>
	}
	else {
		lcd_ready=true;
		lcd_transfer_done();
	}
}
 8002c0c:	e004      	b.n	8002c18 <go_for_next_chunk+0x2c>
		lcd_ready=true;
 8002c0e:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <go_for_next_chunk+0x38>)
 8002c10:	2201      	movs	r2, #1
 8002c12:	701a      	strb	r2, [r3, #0]
		lcd_transfer_done();
 8002c14:	f7ff ff88 	bl	8002b28 <lcd_transfer_done>
}
 8002c18:	bf00      	nop
 8002c1a:	bd80      	pop	{r7, pc}
 8002c1c:	20025af4 	.word	0x20025af4
 8002c20:	20000002 	.word	0x20000002
 8002c24:	20000004 	.word	0x20000004

08002c28 <lcd_change_ball_color>:
void lcd_change_ball_color(uint16_t speed_x, uint16_t speed_y){
 8002c28:	b480      	push	{r7}
 8002c2a:	b089      	sub	sp, #36	@ 0x24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	460a      	mov	r2, r1
 8002c32:	80fb      	strh	r3, [r7, #6]
 8002c34:	4613      	mov	r3, r2
 8002c36:	80bb      	strh	r3, [r7, #4]
	uint32_t speed_sq = speed_x * speed_x + speed_y * speed_y;
 8002c38:	88fb      	ldrh	r3, [r7, #6]
 8002c3a:	88fa      	ldrh	r2, [r7, #6]
 8002c3c:	fb03 f202 	mul.w	r2, r3, r2
 8002c40:	88bb      	ldrh	r3, [r7, #4]
 8002c42:	88b9      	ldrh	r1, [r7, #4]
 8002c44:	fb01 f303 	mul.w	r3, r1, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]
	uint32_t sq_max_speed = max_speed*max_speed;
 8002c4c:	4b27      	ldr	r3, [pc, #156]	@ (8002cec <lcd_change_ball_color+0xc4>)
 8002c4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c52:	461a      	mov	r2, r3
 8002c54:	4b25      	ldr	r3, [pc, #148]	@ (8002cec <lcd_change_ball_color+0xc4>)
 8002c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c5a:	fb02 f303 	mul.w	r3, r2, r3
 8002c5e:	61bb      	str	r3, [r7, #24]
	if (speed_sq > sq_max_speed) {
 8002c60:	69fa      	ldr	r2, [r7, #28]
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d901      	bls.n	8002c6c <lcd_change_ball_color+0x44>
		speed_sq = sq_max_speed;
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	61fb      	str	r3, [r7, #28]
	}
	float ratio = (float)speed_sq/sq_max_speed;
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	ee07 3a90 	vmov	s15, r3
 8002c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	ee07 3a90 	vmov	s15, r3
 8002c7c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c84:	edc7 7a05 	vstr	s15, [r7, #20]

	// Kolor startowy: zielony (R=0, G=63, B=0)
	// Kolor docelowy: biały (R=31, G=63, B=31)

	uint8_t red   = (uint8_t)(31 * ratio);
 8002c88:	edd7 7a05 	vldr	s15, [r7, #20]
 8002c8c:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8002c90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c98:	edc7 7a00 	vstr	s15, [r7]
 8002c9c:	783b      	ldrb	r3, [r7, #0]
 8002c9e:	74fb      	strb	r3, [r7, #19]
	uint8_t green = 63;
 8002ca0:	233f      	movs	r3, #63	@ 0x3f
 8002ca2:	74bb      	strb	r3, [r7, #18]
	uint8_t blue  = (uint8_t)(31 * ratio);
 8002ca4:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ca8:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 8002cac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002cb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002cb4:	edc7 7a00 	vstr	s15, [r7]
 8002cb8:	783b      	ldrb	r3, [r7, #0]
 8002cba:	747b      	strb	r3, [r7, #17]

	uint16_t color = (red << 11) | (green << 5) | blue;
 8002cbc:	7cfb      	ldrb	r3, [r7, #19]
 8002cbe:	b21b      	sxth	r3, r3
 8002cc0:	02db      	lsls	r3, r3, #11
 8002cc2:	b21a      	sxth	r2, r3
 8002cc4:	7cbb      	ldrb	r3, [r7, #18]
 8002cc6:	b21b      	sxth	r3, r3
 8002cc8:	015b      	lsls	r3, r3, #5
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	b21a      	sxth	r2, r3
 8002cd0:	7c7b      	ldrb	r3, [r7, #17]
 8002cd2:	b21b      	sxth	r3, r3
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	b21b      	sxth	r3, r3
 8002cd8:	81fb      	strh	r3, [r7, #14]
	player.color = color;
 8002cda:	4a05      	ldr	r2, [pc, #20]	@ (8002cf0 <lcd_change_ball_color+0xc8>)
 8002cdc:	89fb      	ldrh	r3, [r7, #14]
 8002cde:	8193      	strh	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3724      	adds	r7, #36	@ 0x24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	20000000 	.word	0x20000000
 8002cf0:	20025bc4 	.word	0x20025bc4

08002cf4 <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08e      	sub	sp, #56	@ 0x38
 8002cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002cfa:	1d3b      	adds	r3, r7, #4
 8002cfc:	2234      	movs	r2, #52	@ 0x34
 8002cfe:	2100      	movs	r1, #0
 8002d00:	4618      	mov	r0, r3
 8002d02:	f009 fe13 	bl	800c92c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8002d06:	4b39      	ldr	r3, [pc, #228]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d08:	4a39      	ldr	r2, [pc, #228]	@ (8002df0 <MX_LTDC_Init+0xfc>)
 8002d0a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d0c:	4b37      	ldr	r3, [pc, #220]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002d12:	4b36      	ldr	r3, [pc, #216]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002d18:	4b34      	ldr	r3, [pc, #208]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d1e:	4b33      	ldr	r3, [pc, #204]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8002d24:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d26:	2209      	movs	r2, #9
 8002d28:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8002d2a:	4b30      	ldr	r3, [pc, #192]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8002d30:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d32:	221d      	movs	r2, #29
 8002d34:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8002d36:	4b2d      	ldr	r3, [pc, #180]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d38:	2203      	movs	r2, #3
 8002d3a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8002d3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d3e:	f240 120d 	movw	r2, #269	@ 0x10d
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8002d44:	4b29      	ldr	r3, [pc, #164]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d46:	f240 1243 	movw	r2, #323	@ 0x143
 8002d4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8002d4c:	4b27      	ldr	r3, [pc, #156]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d4e:	f240 1217 	movw	r2, #279	@ 0x117
 8002d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8002d54:	4b25      	ldr	r3, [pc, #148]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d56:	f240 1247 	movw	r2, #327	@ 0x147
 8002d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8002d5c:	4b23      	ldr	r3, [pc, #140]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002d64:	4b21      	ldr	r3, [pc, #132]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002d74:	481d      	ldr	r0, [pc, #116]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002d76:	f003 ff4b 	bl	8006c10 <HAL_LTDC_Init>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d001      	beq.n	8002d84 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8002d80:	f000 fb36 	bl	80033f0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8002d88:	23f0      	movs	r3, #240	@ 0xf0
 8002d8a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8002d90:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002d94:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8002d96:	2302      	movs	r3, #2
 8002d98:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8002d9a:	23ff      	movs	r3, #255	@ 0xff
 8002d9c:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002da2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002da6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002da8:	2307      	movs	r3, #7
 8002daa:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8002dac:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8002db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8002db2:	23f0      	movs	r3, #240	@ 0xf0
 8002db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8002db6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002dba:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002dce:	1d3b      	adds	r3, r7, #4
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4805      	ldr	r0, [pc, #20]	@ (8002dec <MX_LTDC_Init+0xf8>)
 8002dd6:	f004 f8ad 	bl	8006f34 <HAL_LTDC_ConfigLayer>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d001      	beq.n	8002de4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8002de0:	f000 fb06 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8002de4:	bf00      	nop
 8002de6:	3738      	adds	r7, #56	@ 0x38
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	20025e2c 	.word	0x20025e2c
 8002df0:	40016800 	.word	0x40016800

08002df4 <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b09a      	sub	sp, #104	@ 0x68
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e00:	2200      	movs	r2, #0
 8002e02:	601a      	str	r2, [r3, #0]
 8002e04:	605a      	str	r2, [r3, #4]
 8002e06:	609a      	str	r2, [r3, #8]
 8002e08:	60da      	str	r2, [r3, #12]
 8002e0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e10:	2230      	movs	r2, #48	@ 0x30
 8002e12:	2100      	movs	r1, #0
 8002e14:	4618      	mov	r0, r3
 8002e16:	f009 fd89 	bl	800c92c <memset>
  if(ltdcHandle->Instance==LTDC)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a85      	ldr	r2, [pc, #532]	@ (8003034 <HAL_LTDC_MspInit+0x240>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	f040 8102 	bne.w	800302a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8002e26:	2308      	movs	r3, #8
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8002e2a:	2332      	movs	r3, #50	@ 0x32
 8002e2c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8002e32:	2300      	movs	r3, #0
 8002e34:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f004 ff1a 	bl	8007c74 <HAL_RCCEx_PeriphCLKConfig>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d001      	beq.n	8002e4a <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8002e46:	f000 fad3 	bl	80033f0 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	623b      	str	r3, [r7, #32]
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	4a79      	ldr	r2, [pc, #484]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e54:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5a:	4b77      	ldr	r3, [pc, #476]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e62:	623b      	str	r3, [r7, #32]
 8002e64:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
 8002e6a:	4b73      	ldr	r3, [pc, #460]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6e:	4a72      	ldr	r2, [pc, #456]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e70:	f043 0320 	orr.w	r3, r3, #32
 8002e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e76:	4b70      	ldr	r3, [pc, #448]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	f003 0320 	and.w	r3, r3, #32
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e82:	2300      	movs	r3, #0
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	4b6c      	ldr	r3, [pc, #432]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	4a6b      	ldr	r2, [pc, #428]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e92:	4b69      	ldr	r3, [pc, #420]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e96:	f003 0301 	and.w	r3, r3, #1
 8002e9a:	61bb      	str	r3, [r7, #24]
 8002e9c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	4b65      	ldr	r3, [pc, #404]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea6:	4a64      	ldr	r2, [pc, #400]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002ea8:	f043 0302 	orr.w	r3, r3, #2
 8002eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eae:	4b62      	ldr	r3, [pc, #392]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	617b      	str	r3, [r7, #20]
 8002eb8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002eba:	2300      	movs	r3, #0
 8002ebc:	613b      	str	r3, [r7, #16]
 8002ebe:	4b5e      	ldr	r3, [pc, #376]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec2:	4a5d      	ldr	r2, [pc, #372]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eca:	4b5b      	ldr	r3, [pc, #364]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60fb      	str	r3, [r7, #12]
 8002eda:	4b57      	ldr	r3, [pc, #348]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	4a56      	ldr	r2, [pc, #344]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002ee0:	f043 0304 	orr.w	r3, r3, #4
 8002ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ee6:	4b54      	ldr	r3, [pc, #336]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	4b50      	ldr	r3, [pc, #320]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	4a4f      	ldr	r2, [pc, #316]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002efc:	f043 0308 	orr.w	r3, r3, #8
 8002f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f02:	4b4d      	ldr	r3, [pc, #308]	@ (8003038 <HAL_LTDC_MspInit+0x244>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	60bb      	str	r3, [r7, #8]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8002f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002f12:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f14:	2302      	movs	r3, #2
 8002f16:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f20:	230e      	movs	r3, #14
 8002f22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002f24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f28:	4619      	mov	r1, r3
 8002f2a:	4844      	ldr	r0, [pc, #272]	@ (800303c <HAL_LTDC_MspInit+0x248>)
 8002f2c:	f001 fd12 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8002f30:	f641 0358 	movw	r3, #6232	@ 0x1858
 8002f34:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f36:	2302      	movs	r3, #2
 8002f38:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f42:	230e      	movs	r3, #14
 8002f44:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	483c      	ldr	r0, [pc, #240]	@ (8003040 <HAL_LTDC_MspInit+0x24c>)
 8002f4e:	f001 fd01 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8002f52:	2303      	movs	r3, #3
 8002f54:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f56:	2302      	movs	r3, #2
 8002f58:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8002f62:	2309      	movs	r3, #9
 8002f64:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f66:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4835      	ldr	r0, [pc, #212]	@ (8003044 <HAL_LTDC_MspInit+0x250>)
 8002f6e:	f001 fcf1 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002f72:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002f76:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f78:	2302      	movs	r3, #2
 8002f7a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f80:	2300      	movs	r3, #0
 8002f82:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002f84:	230e      	movs	r3, #14
 8002f86:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f88:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f8c:	4619      	mov	r1, r3
 8002f8e:	482d      	ldr	r0, [pc, #180]	@ (8003044 <HAL_LTDC_MspInit+0x250>)
 8002f90:	f001 fce0 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002f94:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002f98:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fa6:	230e      	movs	r3, #14
 8002fa8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002faa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4825      	ldr	r0, [pc, #148]	@ (8003048 <HAL_LTDC_MspInit+0x254>)
 8002fb2:	f001 fccf 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002fb6:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002fba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fc8:	230e      	movs	r3, #14
 8002fca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fcc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	481e      	ldr	r0, [pc, #120]	@ (800304c <HAL_LTDC_MspInit+0x258>)
 8002fd4:	f001 fcbe 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2D6_Pin;
 8002fd8:	2348      	movs	r3, #72	@ 0x48
 8002fda:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002fe8:	230e      	movs	r3, #14
 8002fea:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fec:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4817      	ldr	r0, [pc, #92]	@ (8003050 <HAL_LTDC_MspInit+0x25c>)
 8002ff4:	f001 fcae 	bl	8004954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002ff8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002ffc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffe:	2302      	movs	r3, #2
 8003000:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003002:	2300      	movs	r3, #0
 8003004:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003006:	2300      	movs	r3, #0
 8003008:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800300a:	2309      	movs	r3, #9
 800300c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800300e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8003012:	4619      	mov	r1, r3
 8003014:	480c      	ldr	r0, [pc, #48]	@ (8003048 <HAL_LTDC_MspInit+0x254>)
 8003016:	f001 fc9d 	bl	8004954 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800301a:	2200      	movs	r2, #0
 800301c:	2105      	movs	r1, #5
 800301e:	2058      	movs	r0, #88	@ 0x58
 8003020:	f000 fef6 	bl	8003e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003024:	2058      	movs	r0, #88	@ 0x58
 8003026:	f000 ff0f 	bl	8003e48 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 800302a:	bf00      	nop
 800302c:	3768      	adds	r7, #104	@ 0x68
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40016800 	.word	0x40016800
 8003038:	40023800 	.word	0x40023800
 800303c:	40021400 	.word	0x40021400
 8003040:	40020000 	.word	0x40020000
 8003044:	40020400 	.word	0x40020400
 8003048:	40021800 	.word	0x40021800
 800304c:	40020800 	.word	0x40020800
 8003050:	40020c00 	.word	0x40020c00

08003054 <click_led>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int screen_id=0;

void click_led() {
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
	static uint8_t clicked;
	static uint32_t time;
	if (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_SET) {
 8003058:	2101      	movs	r1, #1
 800305a:	481b      	ldr	r0, [pc, #108]	@ (80030c8 <click_led+0x74>)
 800305c:	f001 fe26 	bl	8004cac <HAL_GPIO_ReadPin>
 8003060:	4603      	mov	r3, r0
 8003062:	2b01      	cmp	r3, #1
 8003064:	d12a      	bne.n	80030bc <click_led+0x68>
		if ((HAL_GetTick() - time) > 50) {
 8003066:	f000 fdeb 	bl	8003c40 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	4b17      	ldr	r3, [pc, #92]	@ (80030cc <click_led+0x78>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	1ad3      	subs	r3, r2, r3
 8003072:	2b32      	cmp	r3, #50	@ 0x32
 8003074:	d925      	bls.n	80030c2 <click_led+0x6e>
			time = HAL_GetTick();
 8003076:	f000 fde3 	bl	8003c40 <HAL_GetTick>
 800307a:	4603      	mov	r3, r0
 800307c:	4a13      	ldr	r2, [pc, #76]	@ (80030cc <click_led+0x78>)
 800307e:	6013      	str	r3, [r2, #0]
			if (clicked == 0) {
 8003080:	4b13      	ldr	r3, [pc, #76]	@ (80030d0 <click_led+0x7c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d11c      	bne.n	80030c2 <click_led+0x6e>
				clicked = 1;
 8003088:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <click_led+0x7c>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
				if(screen_id==1){
 800308e:	4b11      	ldr	r3, [pc, #68]	@ (80030d4 <click_led+0x80>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b01      	cmp	r3, #1
 8003094:	d107      	bne.n	80030a6 <click_led+0x52>
					screen_id++;
 8003096:	4b0f      	ldr	r3, [pc, #60]	@ (80030d4 <click_led+0x80>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	4a0d      	ldr	r2, [pc, #52]	@ (80030d4 <click_led+0x80>)
 800309e:	6013      	str	r3, [r2, #0]
					HAL_TIM_Base_Start_IT(&htim7);
 80030a0:	480d      	ldr	r0, [pc, #52]	@ (80030d8 <click_led+0x84>)
 80030a2:	f005 ff45 	bl	8008f30 <HAL_TIM_Base_Start_IT>
				}
				HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80030a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030aa:	480c      	ldr	r0, [pc, #48]	@ (80030dc <click_led+0x88>)
 80030ac:	f001 fe2f 	bl	8004d0e <HAL_GPIO_TogglePin>
				time = HAL_GetTick();
 80030b0:	f000 fdc6 	bl	8003c40 <HAL_GetTick>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4a05      	ldr	r2, [pc, #20]	@ (80030cc <click_led+0x78>)
 80030b8:	6013      	str	r3, [r2, #0]
			}
		}
	} else {
		clicked = 0;
	}
}
 80030ba:	e002      	b.n	80030c2 <click_led+0x6e>
		clicked = 0;
 80030bc:	4b04      	ldr	r3, [pc, #16]	@ (80030d0 <click_led+0x7c>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40020000 	.word	0x40020000
 80030cc:	20025ef4 	.word	0x20025ef4
 80030d0:	20025ef8 	.word	0x20025ef8
 80030d4:	20025ef0 	.word	0x20025ef0
 80030d8:	20026048 	.word	0x20026048
 80030dc:	40021800 	.word	0x40021800

080030e0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	if (hspi == &hspi5) {
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a04      	ldr	r2, [pc, #16]	@ (80030fc <HAL_SPI_TxCpltCallback+0x1c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d101      	bne.n	80030f4 <HAL_SPI_TxCpltCallback+0x14>
		go_for_next_chunk();
 80030f0:	f7ff fd7c 	bl	8002bec <go_for_next_chunk>
	}
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	20025efc 	.word	0x20025efc

08003100 <lcd_print_all_chars>:
void lcd_print_all_chars(void) {
 8003100:	b5b0      	push	{r4, r5, r7, lr}
 8003102:	b092      	sub	sp, #72	@ 0x48
 8003104:	af02      	add	r7, sp, #8
    const char znaczki[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
 8003106:	4b21      	ldr	r3, [pc, #132]	@ (800318c <lcd_print_all_chars+0x8c>)
 8003108:	1d3c      	adds	r4, r7, #4
 800310a:	461d      	mov	r5, r3
 800310c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800310e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003114:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003118:	6020      	str	r0, [r4, #0]
 800311a:	3404      	adds	r4, #4
 800311c:	7021      	strb	r1, [r4, #0]
    const int znak_szer = 16;
 800311e:	2310      	movs	r3, #16
 8003120:	633b      	str	r3, [r7, #48]	@ 0x30
    const int znak_wys = 16;
 8003122:	2310      	movs	r3, #16
 8003124:	62fb      	str	r3, [r7, #44]	@ 0x2c

    int i = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	63fb      	str	r3, [r7, #60]	@ 0x3c

    for (int y = 0; y < LCD_HEIGHT && i < 36; y += znak_wys) {
 800312a:	2300      	movs	r3, #0
 800312c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800312e:	e022      	b.n	8003176 <lcd_print_all_chars+0x76>
        for (int x = znak_szer; x + znak_szer <= LCD_WIDTH && i < 36; x += znak_szer) {
 8003130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003132:	637b      	str	r3, [r7, #52]	@ 0x34
 8003134:	e013      	b.n	800315e <lcd_print_all_chars+0x5e>
            lcd_set_char(i, x, y, znaczki[i], GREEN);
 8003136:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003138:	b298      	uxth	r0, r3
 800313a:	1d3a      	adds	r2, r7, #4
 800313c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800313e:	4413      	add	r3, r2
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8003146:	9200      	str	r2, [sp, #0]
 8003148:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800314a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800314c:	f7ff f8e6 	bl	800231c <lcd_set_char>
            i++;
 8003150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003152:	3301      	adds	r3, #1
 8003154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (int x = znak_szer; x + znak_szer <= LCD_WIDTH && i < 36; x += znak_szer) {
 8003156:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	4413      	add	r3, r2
 800315c:	637b      	str	r3, [r7, #52]	@ 0x34
 800315e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003162:	4413      	add	r3, r2
 8003164:	2bf0      	cmp	r3, #240	@ 0xf0
 8003166:	dc02      	bgt.n	800316e <lcd_print_all_chars+0x6e>
 8003168:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800316a:	2b23      	cmp	r3, #35	@ 0x23
 800316c:	dde3      	ble.n	8003136 <lcd_print_all_chars+0x36>
    for (int y = 0; y < LCD_HEIGHT && i < 36; y += znak_wys) {
 800316e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003172:	4413      	add	r3, r2
 8003174:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003178:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800317c:	da02      	bge.n	8003184 <lcd_print_all_chars+0x84>
 800317e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003180:	2b23      	cmp	r3, #35	@ 0x23
 8003182:	ddd5      	ble.n	8003130 <lcd_print_all_chars+0x30>
        }
    }
}
 8003184:	bf00      	nop
 8003186:	3740      	adds	r7, #64	@ 0x40
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}
 800318c:	0800e5c4 	.word	0x0800e5c4

08003190 <set_new_figs>:
void set_new_figs(void) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af02      	add	r7, sp, #8
	lcd_set_rectangle(0, 100, 0, 50, 100, RED);
 8003196:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800319a:	9301      	str	r3, [sp, #4]
 800319c:	2364      	movs	r3, #100	@ 0x64
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	2332      	movs	r3, #50	@ 0x32
 80031a2:	2200      	movs	r2, #0
 80031a4:	2164      	movs	r1, #100	@ 0x64
 80031a6:	2000      	movs	r0, #0
 80031a8:	f7ff f876 	bl	8002298 <lcd_set_rectangle>
	lcd_set_rectangle(1, 150, 190, 60, 15, YELLOW);
 80031ac:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	230f      	movs	r3, #15
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	233c      	movs	r3, #60	@ 0x3c
 80031b8:	22be      	movs	r2, #190	@ 0xbe
 80031ba:	2196      	movs	r1, #150	@ 0x96
 80031bc:	2001      	movs	r0, #1
 80031be:	f7ff f86b 	bl	8002298 <lcd_set_rectangle>
	lcd_set_rectangle(2, 0, 250, 200, 30, RED);
 80031c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80031c6:	9301      	str	r3, [sp, #4]
 80031c8:	231e      	movs	r3, #30
 80031ca:	9300      	str	r3, [sp, #0]
 80031cc:	23c8      	movs	r3, #200	@ 0xc8
 80031ce:	22fa      	movs	r2, #250	@ 0xfa
 80031d0:	2100      	movs	r1, #0
 80031d2:	2002      	movs	r0, #2
 80031d4:	f7ff f860 	bl	8002298 <lcd_set_rectangle>
	lcd_set_circle(LCD_WIDTH/2, LCD_HEIGHT/2, 10, GREEN);
 80031d8:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80031dc:	220a      	movs	r2, #10
 80031de:	21a0      	movs	r1, #160	@ 0xa0
 80031e0:	2078      	movs	r0, #120	@ 0x78
 80031e2:	f7ff f8d5 	bl	8002390 <lcd_set_circle>

	lcd_print_all_chars();
 80031e6:	f7ff ff8b 	bl	8003100 <lcd_print_all_chars>
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031f6:	f000 fced 	bl	8003bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031fa:	f000 f85b 	bl	80032b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031fe:	f7fe fa5b 	bl	80016b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003202:	f7fe f8f3 	bl	80013ec <MX_DMA_Init>
  MX_CRC_Init();
 8003206:	f7fe f8bb 	bl	8001380 <MX_CRC_Init>
  MX_DMA2D_Init();
 800320a:	f7fe f90f 	bl	800142c <MX_DMA2D_Init>
  MX_FMC_Init();
 800320e:	f7fe f967 	bl	80014e0 <MX_FMC_Init>
  MX_I2C3_Init();
 8003212:	f7fe fe8b 	bl	8001f2c <MX_I2C3_Init>
  MX_LTDC_Init();
 8003216:	f7ff fd6d 	bl	8002cf4 <MX_LTDC_Init>
  MX_SPI5_Init();
 800321a:	f000 f90f 	bl	800343c <MX_SPI5_Init>
  MX_TIM1_Init();
 800321e:	f000 fb79 	bl	8003914 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8003222:	f000 fc3b 	bl	8003a9c <MX_USART1_UART_Init>
  MX_TIM7_Init();
 8003226:	f000 fbc5 	bl	80039b4 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 800322a:	f7fe ffaf 	bl	800218c <lcd_init>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 800322e:	2300      	movs	r3, #0
 8003230:	607b      	str	r3, [r7, #4]
 8003232:	e010      	b.n	8003256 <main+0x66>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8003234:	2300      	movs	r3, #0
 8003236:	603b      	str	r3, [r7, #0]
 8003238:	e007      	b.n	800324a <main+0x5a>
			lcd_put_pixel(x, y, BLUE);
 800323a:	221f      	movs	r2, #31
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	6838      	ldr	r0, [r7, #0]
 8003240:	f7ff fa90 	bl	8002764 <lcd_put_pixel>
		for (int x = 0; x < LCD_WIDTH; x++) {
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	3301      	adds	r3, #1
 8003248:	603b      	str	r3, [r7, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2bef      	cmp	r3, #239	@ 0xef
 800324e:	ddf4      	ble.n	800323a <main+0x4a>
	for (int y = 0; y < LCD_HEIGHT; y++) {
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3301      	adds	r3, #1
 8003254:	607b      	str	r3, [r7, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800325c:	dbea      	blt.n	8003234 <main+0x44>
		}
	}
	set_new_figs();
 800325e:	f7ff ff97 	bl	8003190 <set_new_figs>
	lcd_update();
 8003262:	f7ff fc0b 	bl	8002a7c <lcd_update>

	while(!spi5_acquire()){}
 8003266:	bf00      	nop
 8003268:	f000 f8c8 	bl	80033fc <spi5_acquire>
 800326c:	4603      	mov	r3, r0
 800326e:	f083 0301 	eor.w	r3, r3, #1
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1f7      	bne.n	8003268 <main+0x78>
	spi5_release();
 8003278:	f000 f8d4 	bl	8003424 <spi5_release>


	HAL_Delay(500); //żeby LCD skończył swoje przesyłanie
 800327c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003280:	f000 fcea 	bl	8003c58 <HAL_Delay>
	gyro_init();
 8003284:	f7fe fb58 	bl	8001938 <gyro_init>
	HAL_Delay(2000);
 8003288:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800328c:	f000 fce4 	bl	8003c58 <HAL_Delay>
	gyro_calculate_offset(&gyro_offset_s);
 8003290:	4806      	ldr	r0, [pc, #24]	@ (80032ac <main+0xbc>)
 8003292:	f7fe fd0b 	bl	8001cac <gyro_calculate_offset>
	HAL_Delay(1000);
 8003296:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800329a:	f000 fcdd 	bl	8003c58 <HAL_Delay>
	screen_id = 1;
 800329e:	4b04      	ldr	r3, [pc, #16]	@ (80032b0 <main+0xc0>)
 80032a0:	2201      	movs	r2, #1
 80032a2:	601a      	str	r2, [r3, #0]
//		gyro_get_filtered_data(&gyro_raw_data_s);
//		gyro_compensate_and_scale(&gyro_raw_data_s, &gyro_offset_s, &gyro_scaled_data_s);
//		ball_set_speed();

//		lcd_update();
		click_led();
 80032a4:	f7ff fed6 	bl	8003054 <click_led>
 80032a8:	e7fc      	b.n	80032a4 <main+0xb4>
 80032aa:	bf00      	nop
 80032ac:	20025ee4 	.word	0x20025ee4
 80032b0:	20025ef0 	.word	0x20025ef0

080032b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b094      	sub	sp, #80	@ 0x50
 80032b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ba:	f107 0320 	add.w	r3, r7, #32
 80032be:	2230      	movs	r2, #48	@ 0x30
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f009 fb32 	bl	800c92c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c8:	f107 030c 	add.w	r3, r7, #12
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	60da      	str	r2, [r3, #12]
 80032d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	4b28      	ldr	r3, [pc, #160]	@ (8003380 <SystemClock_Config+0xcc>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	4a27      	ldr	r2, [pc, #156]	@ (8003380 <SystemClock_Config+0xcc>)
 80032e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80032e8:	4b25      	ldr	r3, [pc, #148]	@ (8003380 <SystemClock_Config+0xcc>)
 80032ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80032f4:	2300      	movs	r3, #0
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	4b22      	ldr	r3, [pc, #136]	@ (8003384 <SystemClock_Config+0xd0>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003300:	4a20      	ldr	r2, [pc, #128]	@ (8003384 <SystemClock_Config+0xd0>)
 8003302:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003306:	6013      	str	r3, [r2, #0]
 8003308:	4b1e      	ldr	r3, [pc, #120]	@ (8003384 <SystemClock_Config+0xd0>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8003310:	607b      	str	r3, [r7, #4]
 8003312:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003314:	2301      	movs	r3, #1
 8003316:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003318:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800331c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800331e:	2302      	movs	r3, #2
 8003320:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003322:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003326:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003328:	2304      	movs	r3, #4
 800332a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800332c:	2348      	movs	r3, #72	@ 0x48
 800332e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003330:	2302      	movs	r3, #2
 8003332:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8003334:	2303      	movs	r3, #3
 8003336:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003338:	f107 0320 	add.w	r3, r7, #32
 800333c:	4618      	mov	r0, r3
 800333e:	f003 ffcf 	bl	80072e0 <HAL_RCC_OscConfig>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d001      	beq.n	800334c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003348:	f000 f852 	bl	80033f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800334c:	230f      	movs	r3, #15
 800334e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003350:	2302      	movs	r3, #2
 8003352:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003358:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800335c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800335e:	2300      	movs	r3, #0
 8003360:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003362:	f107 030c 	add.w	r3, r7, #12
 8003366:	2102      	movs	r1, #2
 8003368:	4618      	mov	r0, r3
 800336a:	f004 fa31 	bl	80077d0 <HAL_RCC_ClockConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003374:	f000 f83c 	bl	80033f0 <Error_Handler>
  }
}
 8003378:	bf00      	nop
 800337a:	3750      	adds	r7, #80	@ 0x50
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	40007000 	.word	0x40007000

08003388 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a0f      	ldr	r2, [pc, #60]	@ (80033d4 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d102      	bne.n	80033a0 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
    HAL_IncTick();
 800339a:	f000 fc3d 	bl	8003c18 <HAL_IncTick>

	 ball_set_speed(&speed_x,&speed_y);
	 ball_move(&speed_x,&speed_y);
  }
  /* USER CODE END Callback 1 */
}
 800339e:	e014      	b.n	80033ca <HAL_TIM_PeriodElapsedCallback+0x42>
  else if(htim->Instance == TIM7) {
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a0c      	ldr	r2, [pc, #48]	@ (80033d8 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d10f      	bne.n	80033ca <HAL_TIM_PeriodElapsedCallback+0x42>
	 gyro_get_filtered_data(&gyro_raw_data_s);
 80033aa:	480c      	ldr	r0, [pc, #48]	@ (80033dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80033ac:	f7fe fb1c 	bl	80019e8 <gyro_get_filtered_data>
	 gyro_compensate_and_scale(&gyro_raw_data_s, &gyro_offset_s, &gyro_scaled_data_s);
 80033b0:	4a0b      	ldr	r2, [pc, #44]	@ (80033e0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80033b2:	490c      	ldr	r1, [pc, #48]	@ (80033e4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80033b4:	4809      	ldr	r0, [pc, #36]	@ (80033dc <HAL_TIM_PeriodElapsedCallback+0x54>)
 80033b6:	f7fe fd3b 	bl	8001e30 <gyro_compensate_and_scale>
	 ball_set_speed(&speed_x,&speed_y);
 80033ba:	490b      	ldr	r1, [pc, #44]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80033bc:	480b      	ldr	r0, [pc, #44]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80033be:	f7fd fdeb 	bl	8000f98 <ball_set_speed>
	 ball_move(&speed_x,&speed_y);
 80033c2:	4909      	ldr	r1, [pc, #36]	@ (80033e8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80033c4:	4809      	ldr	r0, [pc, #36]	@ (80033ec <HAL_TIM_PeriodElapsedCallback+0x64>)
 80033c6:	f7fd fedb 	bl	8001180 <ball_move>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40001000 	.word	0x40001000
 80033d8:	40001400 	.word	0x40001400
 80033dc:	20025ed4 	.word	0x20025ed4
 80033e0:	20025edc 	.word	0x20025edc
 80033e4:	20025ee4 	.word	0x20025ee4
 80033e8:	20025eec 	.word	0x20025eec
 80033ec:	20025eea 	.word	0x20025eea

080033f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033f4:	b672      	cpsid	i
}
 80033f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <Error_Handler+0x8>

080033fc <spi5_acquire>:
/* USER CODE BEGIN 0 */


static volatile bool spi5_busy = false;  //flaga informująca czy SPI5 jest zajęte

bool spi5_acquire(void) {  //zajmij SPI, gdy jest wolne
 80033fc:	b480      	push	{r7}
 80033fe:	af00      	add	r7, sp, #0

	if (spi5_busy) return false;
 8003400:	4b07      	ldr	r3, [pc, #28]	@ (8003420 <spi5_acquire+0x24>)
 8003402:	781b      	ldrb	r3, [r3, #0]
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <spi5_acquire+0x12>
 800340a:	2300      	movs	r3, #0
 800340c:	e003      	b.n	8003416 <spi5_acquire+0x1a>

    spi5_busy = true;
 800340e:	4b04      	ldr	r3, [pc, #16]	@ (8003420 <spi5_acquire+0x24>)
 8003410:	2201      	movs	r2, #1
 8003412:	701a      	strb	r2, [r3, #0]
    return true;
 8003414:	2301      	movs	r3, #1
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	20025ef9 	.word	0x20025ef9

08003424 <spi5_release>:

void spi5_release(void) { //zwolnij SPI
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
    spi5_busy = false;
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <spi5_release+0x14>)
 800342a:	2200      	movs	r2, #0
 800342c:	701a      	strb	r2, [r3, #0]
}
 800342e:	bf00      	nop
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr
 8003438:	20025ef9 	.word	0x20025ef9

0800343c <MX_SPI5_Init>:
SPI_HandleTypeDef hspi5;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003440:	4b17      	ldr	r3, [pc, #92]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003442:	4a18      	ldr	r2, [pc, #96]	@ (80034a4 <MX_SPI5_Init+0x68>)
 8003444:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003446:	4b16      	ldr	r3, [pc, #88]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003448:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800344c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800344e:	4b14      	ldr	r3, [pc, #80]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003454:	4b12      	ldr	r3, [pc, #72]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003456:	2200      	movs	r2, #0
 8003458:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800345a:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <MX_SPI5_Init+0x64>)
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003460:	4b0f      	ldr	r3, [pc, #60]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003462:	2200      	movs	r2, #0
 8003464:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8003466:	4b0e      	ldr	r3, [pc, #56]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003468:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800346c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800346e:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003470:	2218      	movs	r2, #24
 8003472:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003474:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003476:	2200      	movs	r2, #0
 8003478:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800347a:	4b09      	ldr	r3, [pc, #36]	@ (80034a0 <MX_SPI5_Init+0x64>)
 800347c:	2200      	movs	r2, #0
 800347e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003480:	4b07      	ldr	r3, [pc, #28]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003482:	2200      	movs	r2, #0
 8003484:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8003486:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <MX_SPI5_Init+0x64>)
 8003488:	220a      	movs	r2, #10
 800348a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800348c:	4804      	ldr	r0, [pc, #16]	@ (80034a0 <MX_SPI5_Init+0x64>)
 800348e:	f004 fde5 	bl	800805c <HAL_SPI_Init>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8003498:	f7ff ffaa 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800349c:	bf00      	nop
 800349e:	bd80      	pop	{r7, pc}
 80034a0:	20025efc 	.word	0x20025efc
 80034a4:	40015000 	.word	0x40015000

080034a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a30      	ldr	r2, [pc, #192]	@ (8003588 <HAL_SPI_MspInit+0xe0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d15a      	bne.n	8003580 <HAL_SPI_MspInit+0xd8>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b2f      	ldr	r3, [pc, #188]	@ (800358c <HAL_SPI_MspInit+0xe4>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a2e      	ldr	r2, [pc, #184]	@ (800358c <HAL_SPI_MspInit+0xe4>)
 80034d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b2c      	ldr	r3, [pc, #176]	@ (800358c <HAL_SPI_MspInit+0xe4>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b28      	ldr	r3, [pc, #160]	@ (800358c <HAL_SPI_MspInit+0xe4>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a27      	ldr	r2, [pc, #156]	@ (800358c <HAL_SPI_MspInit+0xe4>)
 80034f0:	f043 0320 	orr.w	r3, r3, #32
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b25      	ldr	r3, [pc, #148]	@ (800358c <HAL_SPI_MspInit+0xe4>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0320 	and.w	r3, r3, #32
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8003502:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8003506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003508:	2302      	movs	r3, #2
 800350a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350c:	2300      	movs	r3, #0
 800350e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003510:	2300      	movs	r3, #0
 8003512:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003514:	2305      	movs	r3, #5
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003518:	f107 0314 	add.w	r3, r7, #20
 800351c:	4619      	mov	r1, r3
 800351e:	481c      	ldr	r0, [pc, #112]	@ (8003590 <HAL_SPI_MspInit+0xe8>)
 8003520:	f001 fa18 	bl	8004954 <HAL_GPIO_Init>

    /* SPI5 DMA Init */
    /* SPI5_TX Init */
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8003524:	4b1b      	ldr	r3, [pc, #108]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 8003526:	4a1c      	ldr	r2, [pc, #112]	@ (8003598 <HAL_SPI_MspInit+0xf0>)
 8003528:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 800352a:	4b1a      	ldr	r3, [pc, #104]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 800352c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003530:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003532:	4b18      	ldr	r3, [pc, #96]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 8003534:	2240      	movs	r2, #64	@ 0x40
 8003536:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003538:	4b16      	ldr	r3, [pc, #88]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 800353a:	2200      	movs	r2, #0
 800353c:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800353e:	4b15      	ldr	r3, [pc, #84]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 8003540:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003544:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003546:	4b13      	ldr	r3, [pc, #76]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 8003548:	2200      	movs	r2, #0
 800354a:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800354c:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 800354e:	2200      	movs	r2, #0
 8003550:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8003552:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 8003554:	2200      	movs	r2, #0
 8003556:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003558:	4b0e      	ldr	r3, [pc, #56]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 800355a:	2200      	movs	r2, #0
 800355c:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800355e:	4b0d      	ldr	r3, [pc, #52]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 8003560:	2200      	movs	r2, #0
 8003562:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8003564:	480b      	ldr	r0, [pc, #44]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 8003566:	f000 fc99 	bl	8003e9c <HAL_DMA_Init>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <HAL_SPI_MspInit+0xcc>
    {
      Error_Handler();
 8003570:	f7ff ff3e 	bl	80033f0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a07      	ldr	r2, [pc, #28]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 8003578:	649a      	str	r2, [r3, #72]	@ 0x48
 800357a:	4a06      	ldr	r2, [pc, #24]	@ (8003594 <HAL_SPI_MspInit+0xec>)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003580:	bf00      	nop
 8003582:	3728      	adds	r7, #40	@ 0x28
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}
 8003588:	40015000 	.word	0x40015000
 800358c:	40023800 	.word	0x40023800
 8003590:	40021400 	.word	0x40021400
 8003594:	20025f54 	.word	0x20025f54
 8003598:	40026470 	.word	0x40026470

0800359c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	4b12      	ldr	r3, [pc, #72]	@ (80035f0 <HAL_MspInit+0x54>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	4a11      	ldr	r2, [pc, #68]	@ (80035f0 <HAL_MspInit+0x54>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b2:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <HAL_MspInit+0x54>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4b0b      	ldr	r3, [pc, #44]	@ (80035f0 <HAL_MspInit+0x54>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a0a      	ldr	r2, [pc, #40]	@ (80035f0 <HAL_MspInit+0x54>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b08      	ldr	r3, [pc, #32]	@ (80035f0 <HAL_MspInit+0x54>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80035da:	2200      	movs	r2, #0
 80035dc:	210f      	movs	r1, #15
 80035de:	f06f 0001 	mvn.w	r0, #1
 80035e2:	f000 fc15 	bl	8003e10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e6:	bf00      	nop
 80035e8:	3708      	adds	r7, #8
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800

080035f4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08e      	sub	sp, #56	@ 0x38
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	4b33      	ldr	r3, [pc, #204]	@ (80036d8 <HAL_InitTick+0xe4>)
 800360a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360c:	4a32      	ldr	r2, [pc, #200]	@ (80036d8 <HAL_InitTick+0xe4>)
 800360e:	f043 0310 	orr.w	r3, r3, #16
 8003612:	6413      	str	r3, [r2, #64]	@ 0x40
 8003614:	4b30      	ldr	r3, [pc, #192]	@ (80036d8 <HAL_InitTick+0xe4>)
 8003616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003618:	f003 0310 	and.w	r3, r3, #16
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003620:	f107 0210 	add.w	r2, r7, #16
 8003624:	f107 0314 	add.w	r3, r7, #20
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f004 faf0 	bl	8007c10 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800363a:	f004 fac1 	bl	8007bc0 <HAL_RCC_GetPCLK1Freq>
 800363e:	6378      	str	r0, [r7, #52]	@ 0x34
 8003640:	e004      	b.n	800364c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003642:	f004 fabd 	bl	8007bc0 <HAL_RCC_GetPCLK1Freq>
 8003646:	4603      	mov	r3, r0
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	4a23      	ldr	r2, [pc, #140]	@ (80036dc <HAL_InitTick+0xe8>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	0c9b      	lsrs	r3, r3, #18
 8003656:	3b01      	subs	r3, #1
 8003658:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800365a:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <HAL_InitTick+0xec>)
 800365c:	4a21      	ldr	r2, [pc, #132]	@ (80036e4 <HAL_InitTick+0xf0>)
 800365e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003660:	4b1f      	ldr	r3, [pc, #124]	@ (80036e0 <HAL_InitTick+0xec>)
 8003662:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003666:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003668:	4a1d      	ldr	r2, [pc, #116]	@ (80036e0 <HAL_InitTick+0xec>)
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800366e:	4b1c      	ldr	r3, [pc, #112]	@ (80036e0 <HAL_InitTick+0xec>)
 8003670:	2200      	movs	r2, #0
 8003672:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003674:	4b1a      	ldr	r3, [pc, #104]	@ (80036e0 <HAL_InitTick+0xec>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800367a:	4b19      	ldr	r3, [pc, #100]	@ (80036e0 <HAL_InitTick+0xec>)
 800367c:	2200      	movs	r2, #0
 800367e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003680:	4817      	ldr	r0, [pc, #92]	@ (80036e0 <HAL_InitTick+0xec>)
 8003682:	f005 fc05 	bl	8008e90 <HAL_TIM_Base_Init>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800368c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003690:	2b00      	cmp	r3, #0
 8003692:	d11b      	bne.n	80036cc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003694:	4812      	ldr	r0, [pc, #72]	@ (80036e0 <HAL_InitTick+0xec>)
 8003696:	f005 fc4b 	bl	8008f30 <HAL_TIM_Base_Start_IT>
 800369a:	4603      	mov	r3, r0
 800369c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80036a0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80036a8:	2036      	movs	r0, #54	@ 0x36
 80036aa:	f000 fbcd 	bl	8003e48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b0f      	cmp	r3, #15
 80036b2:	d808      	bhi.n	80036c6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80036b4:	2200      	movs	r2, #0
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	2036      	movs	r0, #54	@ 0x36
 80036ba:	f000 fba9 	bl	8003e10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036be:	4a0a      	ldr	r2, [pc, #40]	@ (80036e8 <HAL_InitTick+0xf4>)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6013      	str	r3, [r2, #0]
 80036c4:	e002      	b.n	80036cc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80036cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3738      	adds	r7, #56	@ 0x38
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	431bde83 	.word	0x431bde83
 80036e0:	20025fb4 	.word	0x20025fb4
 80036e4:	40001000 	.word	0x40001000
 80036e8:	2000000c 	.word	0x2000000c

080036ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80036ec:	b480      	push	{r7}
 80036ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80036f0:	bf00      	nop
 80036f2:	e7fd      	b.n	80036f0 <NMI_Handler+0x4>

080036f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <HardFault_Handler+0x4>

080036fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003700:	bf00      	nop
 8003702:	e7fd      	b.n	8003700 <MemManage_Handler+0x4>

08003704 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003704:	b480      	push	{r7}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003708:	bf00      	nop
 800370a:	e7fd      	b.n	8003708 <BusFault_Handler+0x4>

0800370c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <UsageFault_Handler+0x4>

08003714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003718:	bf00      	nop
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003728:	4802      	ldr	r0, [pc, #8]	@ (8003734 <TIM6_DAC_IRQHandler+0x10>)
 800372a:	f005 fc71 	bl	8009010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20025fb4 	.word	0x20025fb4

08003738 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800373c:	4802      	ldr	r0, [pc, #8]	@ (8003748 <TIM7_IRQHandler+0x10>)
 800373e:	f005 fc67 	bl	8009010 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	20026048 	.word	0x20026048

0800374c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8003750:	4802      	ldr	r0, [pc, #8]	@ (800375c <DMA2_Stream4_IRQHandler+0x10>)
 8003752:	f000 fca9 	bl	80040a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8003756:	bf00      	nop
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20025f54 	.word	0x20025f54

08003760 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8003764:	4802      	ldr	r0, [pc, #8]	@ (8003770 <OTG_HS_IRQHandler+0x10>)
 8003766:	f001 faec 	bl	8004d42 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	200261c8 	.word	0x200261c8

08003774 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8003778:	4802      	ldr	r0, [pc, #8]	@ (8003784 <LTDC_IRQHandler+0x10>)
 800377a:	f003 fb19 	bl	8006db0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800377e:	bf00      	nop
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	20025e2c 	.word	0x20025e2c

08003788 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 800378c:	4802      	ldr	r0, [pc, #8]	@ (8003798 <DMA2D_IRQHandler+0x10>)
 800378e:	f000 ff3e 	bl	800460e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8003792:	bf00      	nop
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	20000204 	.word	0x20000204

0800379c <_getpid>:
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
 80037a0:	2301      	movs	r3, #1
 80037a2:	4618      	mov	r0, r3
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <_kill>:
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
 80037b4:	6039      	str	r1, [r7, #0]
 80037b6:	f009 f91b 	bl	800c9f0 <__errno>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2216      	movs	r2, #22
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037c4:	4618      	mov	r0, r3
 80037c6:	3708      	adds	r7, #8
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <_exit>:
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ffe7 	bl	80037ac <_kill>
 80037de:	bf00      	nop
 80037e0:	e7fd      	b.n	80037de <_exit+0x12>

080037e2 <_read>:
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b086      	sub	sp, #24
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	60f8      	str	r0, [r7, #12]
 80037ea:	60b9      	str	r1, [r7, #8]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	2300      	movs	r3, #0
 80037f0:	617b      	str	r3, [r7, #20]
 80037f2:	e00a      	b.n	800380a <_read+0x28>
 80037f4:	f3af 8000 	nop.w
 80037f8:	4601      	mov	r1, r0
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	60ba      	str	r2, [r7, #8]
 8003800:	b2ca      	uxtb	r2, r1
 8003802:	701a      	strb	r2, [r3, #0]
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	3301      	adds	r3, #1
 8003808:	617b      	str	r3, [r7, #20]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	429a      	cmp	r2, r3
 8003810:	dbf0      	blt.n	80037f4 <_read+0x12>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4618      	mov	r0, r3
 8003816:	3718      	adds	r7, #24
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}

0800381c <_close>:
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <_fstat>:
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	2300      	movs	r3, #0
 8003848:	4618      	mov	r0, r3
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <_isatty>:
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	2301      	movs	r3, #1
 800385e:	4618      	mov	r0, r3
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr

0800386a <_lseek>:
 800386a:	b480      	push	{r7}
 800386c:	b085      	sub	sp, #20
 800386e:	af00      	add	r7, sp, #0
 8003870:	60f8      	str	r0, [r7, #12]
 8003872:	60b9      	str	r1, [r7, #8]
 8003874:	607a      	str	r2, [r7, #4]
 8003876:	2300      	movs	r3, #0
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <_sbrk>:
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	4a14      	ldr	r2, [pc, #80]	@ (80038e0 <_sbrk+0x5c>)
 800388e:	4b15      	ldr	r3, [pc, #84]	@ (80038e4 <_sbrk+0x60>)
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <_sbrk+0x64>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <_sbrk+0x22>
 80038a0:	4b11      	ldr	r3, [pc, #68]	@ (80038e8 <_sbrk+0x64>)
 80038a2:	4a12      	ldr	r2, [pc, #72]	@ (80038ec <_sbrk+0x68>)
 80038a4:	601a      	str	r2, [r3, #0]
 80038a6:	4b10      	ldr	r3, [pc, #64]	@ (80038e8 <_sbrk+0x64>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4413      	add	r3, r2
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d207      	bcs.n	80038c4 <_sbrk+0x40>
 80038b4:	f009 f89c 	bl	800c9f0 <__errno>
 80038b8:	4603      	mov	r3, r0
 80038ba:	220c      	movs	r2, #12
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038c2:	e009      	b.n	80038d8 <_sbrk+0x54>
 80038c4:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <_sbrk+0x64>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	4b07      	ldr	r3, [pc, #28]	@ (80038e8 <_sbrk+0x64>)
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4413      	add	r3, r2
 80038d2:	4a05      	ldr	r2, [pc, #20]	@ (80038e8 <_sbrk+0x64>)
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4618      	mov	r0, r3
 80038da:	3718      	adds	r7, #24
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	20030000 	.word	0x20030000
 80038e4:	00000400 	.word	0x00000400
 80038e8:	20025ffc 	.word	0x20025ffc
 80038ec:	200266f8 	.word	0x200266f8

080038f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80038f4:	4b06      	ldr	r3, [pc, #24]	@ (8003910 <SystemInit+0x20>)
 80038f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fa:	4a05      	ldr	r2, [pc, #20]	@ (8003910 <SystemInit+0x20>)
 80038fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003904:	bf00      	nop
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	e000ed00 	.word	0xe000ed00

08003914 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim7;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800391a:	f107 0308 	add.w	r3, r7, #8
 800391e:	2200      	movs	r2, #0
 8003920:	601a      	str	r2, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
 8003924:	609a      	str	r2, [r3, #8]
 8003926:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003928:	463b      	mov	r3, r7
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003930:	4b1e      	ldr	r3, [pc, #120]	@ (80039ac <MX_TIM1_Init+0x98>)
 8003932:	4a1f      	ldr	r2, [pc, #124]	@ (80039b0 <MX_TIM1_Init+0x9c>)
 8003934:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8003936:	4b1d      	ldr	r3, [pc, #116]	@ (80039ac <MX_TIM1_Init+0x98>)
 8003938:	2200      	movs	r2, #0
 800393a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <MX_TIM1_Init+0x98>)
 800393e:	2200      	movs	r2, #0
 8003940:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8003942:	4b1a      	ldr	r3, [pc, #104]	@ (80039ac <MX_TIM1_Init+0x98>)
 8003944:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003948:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800394a:	4b18      	ldr	r3, [pc, #96]	@ (80039ac <MX_TIM1_Init+0x98>)
 800394c:	2200      	movs	r2, #0
 800394e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003950:	4b16      	ldr	r3, [pc, #88]	@ (80039ac <MX_TIM1_Init+0x98>)
 8003952:	2200      	movs	r2, #0
 8003954:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003956:	4b15      	ldr	r3, [pc, #84]	@ (80039ac <MX_TIM1_Init+0x98>)
 8003958:	2200      	movs	r2, #0
 800395a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800395c:	4813      	ldr	r0, [pc, #76]	@ (80039ac <MX_TIM1_Init+0x98>)
 800395e:	f005 fa97 	bl	8008e90 <HAL_TIM_Base_Init>
 8003962:	4603      	mov	r3, r0
 8003964:	2b00      	cmp	r3, #0
 8003966:	d001      	beq.n	800396c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8003968:	f7ff fd42 	bl	80033f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800396c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003970:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003972:	f107 0308 	add.w	r3, r7, #8
 8003976:	4619      	mov	r1, r3
 8003978:	480c      	ldr	r0, [pc, #48]	@ (80039ac <MX_TIM1_Init+0x98>)
 800397a:	f005 fc39 	bl	80091f0 <HAL_TIM_ConfigClockSource>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8003984:	f7ff fd34 	bl	80033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003988:	2300      	movs	r3, #0
 800398a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800398c:	2300      	movs	r3, #0
 800398e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003990:	463b      	mov	r3, r7
 8003992:	4619      	mov	r1, r3
 8003994:	4805      	ldr	r0, [pc, #20]	@ (80039ac <MX_TIM1_Init+0x98>)
 8003996:	f005 fe61 	bl	800965c <HAL_TIMEx_MasterConfigSynchronization>
 800399a:	4603      	mov	r3, r0
 800399c:	2b00      	cmp	r3, #0
 800399e:	d001      	beq.n	80039a4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80039a0:	f7ff fd26 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80039a4:	bf00      	nop
 80039a6:	3718      	adds	r7, #24
 80039a8:	46bd      	mov	sp, r7
 80039aa:	bd80      	pop	{r7, pc}
 80039ac:	20026000 	.word	0x20026000
 80039b0:	40010000 	.word	0x40010000

080039b4 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039ba:	463b      	mov	r3, r7
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]
 80039c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80039c2:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <MX_TIM7_Init+0x64>)
 80039c4:	4a15      	ldr	r2, [pc, #84]	@ (8003a1c <MX_TIM7_Init+0x68>)
 80039c6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = TIM7_PRESCALER;
 80039c8:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <MX_TIM7_Init+0x64>)
 80039ca:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80039ce:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d0:	4b11      	ldr	r3, [pc, #68]	@ (8003a18 <MX_TIM7_Init+0x64>)
 80039d2:	2200      	movs	r2, #0
 80039d4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = TIM7_PERIOD;
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <MX_TIM7_Init+0x64>)
 80039d8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 80039dc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039de:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <MX_TIM7_Init+0x64>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80039e4:	480c      	ldr	r0, [pc, #48]	@ (8003a18 <MX_TIM7_Init+0x64>)
 80039e6:	f005 fa53 	bl	8008e90 <HAL_TIM_Base_Init>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80039f0:	f7ff fcfe 	bl	80033f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039f4:	2300      	movs	r3, #0
 80039f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039f8:	2300      	movs	r3, #0
 80039fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80039fc:	463b      	mov	r3, r7
 80039fe:	4619      	mov	r1, r3
 8003a00:	4805      	ldr	r0, [pc, #20]	@ (8003a18 <MX_TIM7_Init+0x64>)
 8003a02:	f005 fe2b 	bl	800965c <HAL_TIMEx_MasterConfigSynchronization>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003a0c:	f7ff fcf0 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003a10:	bf00      	nop
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	20026048 	.word	0x20026048
 8003a1c:	40001400 	.word	0x40001400

08003a20 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a18      	ldr	r2, [pc, #96]	@ (8003a90 <HAL_TIM_Base_MspInit+0x70>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d10e      	bne.n	8003a50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	4b17      	ldr	r3, [pc, #92]	@ (8003a94 <HAL_TIM_Base_MspInit+0x74>)
 8003a38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a3a:	4a16      	ldr	r2, [pc, #88]	@ (8003a94 <HAL_TIM_Base_MspInit+0x74>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a42:	4b14      	ldr	r3, [pc, #80]	@ (8003a94 <HAL_TIM_Base_MspInit+0x74>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	60fb      	str	r3, [r7, #12]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8003a4e:	e01a      	b.n	8003a86 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM7)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a10      	ldr	r2, [pc, #64]	@ (8003a98 <HAL_TIM_Base_MspInit+0x78>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d115      	bne.n	8003a86 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	60bb      	str	r3, [r7, #8]
 8003a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <HAL_TIM_Base_MspInit+0x74>)
 8003a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a62:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <HAL_TIM_Base_MspInit+0x74>)
 8003a64:	f043 0320 	orr.w	r3, r3, #32
 8003a68:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a6a:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <HAL_TIM_Base_MspInit+0x74>)
 8003a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a6e:	f003 0320 	and.w	r3, r3, #32
 8003a72:	60bb      	str	r3, [r7, #8]
 8003a74:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8003a76:	2200      	movs	r2, #0
 8003a78:	2105      	movs	r1, #5
 8003a7a:	2037      	movs	r0, #55	@ 0x37
 8003a7c:	f000 f9c8 	bl	8003e10 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003a80:	2037      	movs	r0, #55	@ 0x37
 8003a82:	f000 f9e1 	bl	8003e48 <HAL_NVIC_EnableIRQ>
}
 8003a86:	bf00      	nop
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40023800 	.word	0x40023800
 8003a98:	40001400 	.word	0x40001400

08003a9c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003aa0:	4b11      	ldr	r3, [pc, #68]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003aa2:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <MX_USART1_UART_Init+0x50>)
 8003aa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003aa6:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003aa8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003aac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003aae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003aba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003ac0:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ac2:	220c      	movs	r2, #12
 8003ac4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003ac6:	4b08      	ldr	r3, [pc, #32]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003acc:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003ad2:	4805      	ldr	r0, [pc, #20]	@ (8003ae8 <MX_USART1_UART_Init+0x4c>)
 8003ad4:	f005 fe52 	bl	800977c <HAL_UART_Init>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d001      	beq.n	8003ae2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003ade:	f7ff fc87 	bl	80033f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003ae2:	bf00      	nop
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	bf00      	nop
 8003ae8:	20026090 	.word	0x20026090
 8003aec:	40011000 	.word	0x40011000

08003af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b08a      	sub	sp, #40	@ 0x28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003af8:	f107 0314 	add.w	r3, r7, #20
 8003afc:	2200      	movs	r2, #0
 8003afe:	601a      	str	r2, [r3, #0]
 8003b00:	605a      	str	r2, [r3, #4]
 8003b02:	609a      	str	r2, [r3, #8]
 8003b04:	60da      	str	r2, [r3, #12]
 8003b06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a19      	ldr	r2, [pc, #100]	@ (8003b74 <HAL_UART_MspInit+0x84>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d12c      	bne.n	8003b6c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003b12:	2300      	movs	r3, #0
 8003b14:	613b      	str	r3, [r7, #16]
 8003b16:	4b18      	ldr	r3, [pc, #96]	@ (8003b78 <HAL_UART_MspInit+0x88>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	4a17      	ldr	r2, [pc, #92]	@ (8003b78 <HAL_UART_MspInit+0x88>)
 8003b1c:	f043 0310 	orr.w	r3, r3, #16
 8003b20:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b22:	4b15      	ldr	r3, [pc, #84]	@ (8003b78 <HAL_UART_MspInit+0x88>)
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	f003 0310 	and.w	r3, r3, #16
 8003b2a:	613b      	str	r3, [r7, #16]
 8003b2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	4b11      	ldr	r3, [pc, #68]	@ (8003b78 <HAL_UART_MspInit+0x88>)
 8003b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b36:	4a10      	ldr	r2, [pc, #64]	@ (8003b78 <HAL_UART_MspInit+0x88>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	@ (8003b78 <HAL_UART_MspInit+0x88>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003b4a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8003b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b50:	2302      	movs	r3, #2
 8003b52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b54:	2300      	movs	r3, #0
 8003b56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003b5c:	2307      	movs	r3, #7
 8003b5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b60:	f107 0314 	add.w	r3, r7, #20
 8003b64:	4619      	mov	r1, r3
 8003b66:	4805      	ldr	r0, [pc, #20]	@ (8003b7c <HAL_UART_MspInit+0x8c>)
 8003b68:	f000 fef4 	bl	8004954 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40011000 	.word	0x40011000
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	40020000 	.word	0x40020000

08003b80 <Reset_Handler>:
 8003b80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003bb8 <LoopFillZerobss+0xe>
 8003b84:	f7ff feb4 	bl	80038f0 <SystemInit>
 8003b88:	480c      	ldr	r0, [pc, #48]	@ (8003bbc <LoopFillZerobss+0x12>)
 8003b8a:	490d      	ldr	r1, [pc, #52]	@ (8003bc0 <LoopFillZerobss+0x16>)
 8003b8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003bc4 <LoopFillZerobss+0x1a>)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	e002      	b.n	8003b98 <LoopCopyDataInit>

08003b92 <CopyDataInit>:
 8003b92:	58d4      	ldr	r4, [r2, r3]
 8003b94:	50c4      	str	r4, [r0, r3]
 8003b96:	3304      	adds	r3, #4

08003b98 <LoopCopyDataInit>:
 8003b98:	18c4      	adds	r4, r0, r3
 8003b9a:	428c      	cmp	r4, r1
 8003b9c:	d3f9      	bcc.n	8003b92 <CopyDataInit>
 8003b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc8 <LoopFillZerobss+0x1e>)
 8003ba0:	4c0a      	ldr	r4, [pc, #40]	@ (8003bcc <LoopFillZerobss+0x22>)
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e001      	b.n	8003baa <LoopFillZerobss>

08003ba6 <FillZerobss>:
 8003ba6:	6013      	str	r3, [r2, #0]
 8003ba8:	3204      	adds	r2, #4

08003baa <LoopFillZerobss>:
 8003baa:	42a2      	cmp	r2, r4
 8003bac:	d3fb      	bcc.n	8003ba6 <FillZerobss>
 8003bae:	f008 ff25 	bl	800c9fc <__libc_init_array>
 8003bb2:	f7ff fb1d 	bl	80031f0 <main>
 8003bb6:	4770      	bx	lr
 8003bb8:	20030000 	.word	0x20030000
 8003bbc:	20000000 	.word	0x20000000
 8003bc0:	200001e0 	.word	0x200001e0
 8003bc4:	0800edec 	.word	0x0800edec
 8003bc8:	200001e0 	.word	0x200001e0
 8003bcc:	200266f4 	.word	0x200266f4

08003bd0 <ADC_IRQHandler>:
 8003bd0:	e7fe      	b.n	8003bd0 <ADC_IRQHandler>
	...

08003bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bd8:	4b0e      	ldr	r3, [pc, #56]	@ (8003c14 <HAL_Init+0x40>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a0d      	ldr	r2, [pc, #52]	@ (8003c14 <HAL_Init+0x40>)
 8003bde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003be2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003be4:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <HAL_Init+0x40>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a0a      	ldr	r2, [pc, #40]	@ (8003c14 <HAL_Init+0x40>)
 8003bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bf0:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <HAL_Init+0x40>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a07      	ldr	r2, [pc, #28]	@ (8003c14 <HAL_Init+0x40>)
 8003bf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bfc:	2003      	movs	r0, #3
 8003bfe:	f000 f8fc 	bl	8003dfa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c02:	200f      	movs	r0, #15
 8003c04:	f7ff fcf6 	bl	80035f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c08:	f7ff fcc8 	bl	800359c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	40023c00 	.word	0x40023c00

08003c18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c1c:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <HAL_IncTick+0x20>)
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	461a      	mov	r2, r3
 8003c22:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <HAL_IncTick+0x24>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4413      	add	r3, r2
 8003c28:	4a04      	ldr	r2, [pc, #16]	@ (8003c3c <HAL_IncTick+0x24>)
 8003c2a:	6013      	str	r3, [r2, #0]
}
 8003c2c:	bf00      	nop
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000010 	.word	0x20000010
 8003c3c:	200260d8 	.word	0x200260d8

08003c40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c40:	b480      	push	{r7}
 8003c42:	af00      	add	r7, sp, #0
  return uwTick;
 8003c44:	4b03      	ldr	r3, [pc, #12]	@ (8003c54 <HAL_GetTick+0x14>)
 8003c46:	681b      	ldr	r3, [r3, #0]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr
 8003c52:	bf00      	nop
 8003c54:	200260d8 	.word	0x200260d8

08003c58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c60:	f7ff ffee 	bl	8003c40 <HAL_GetTick>
 8003c64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c70:	d005      	beq.n	8003c7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c72:	4b0a      	ldr	r3, [pc, #40]	@ (8003c9c <HAL_Delay+0x44>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	461a      	mov	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c7e:	bf00      	nop
 8003c80:	f7ff ffde 	bl	8003c40 <HAL_GetTick>
 8003c84:	4602      	mov	r2, r0
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	1ad3      	subs	r3, r2, r3
 8003c8a:	68fa      	ldr	r2, [r7, #12]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d8f7      	bhi.n	8003c80 <HAL_Delay+0x28>
  {
  }
}
 8003c90:	bf00      	nop
 8003c92:	bf00      	nop
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	20000010 	.word	0x20000010

08003ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003ccc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	@ (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60d3      	str	r3, [r2, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cec:	4b04      	ldr	r3, [pc, #16]	@ (8003d00 <__NVIC_GetPriorityGrouping+0x18>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 0307 	and.w	r3, r3, #7
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db0b      	blt.n	8003d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	4907      	ldr	r1, [pc, #28]	@ (8003d3c <__NVIC_EnableIRQ+0x38>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2001      	movs	r0, #1
 8003d26:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000e100 	.word	0xe000e100

08003d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	db0a      	blt.n	8003d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	490c      	ldr	r1, [pc, #48]	@ (8003d8c <__NVIC_SetPriority+0x4c>)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	440b      	add	r3, r1
 8003d64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d68:	e00a      	b.n	8003d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4908      	ldr	r1, [pc, #32]	@ (8003d90 <__NVIC_SetPriority+0x50>)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	3b04      	subs	r3, #4
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	761a      	strb	r2, [r3, #24]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000e100 	.word	0xe000e100
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	@ 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	bf28      	it	cs
 8003db2:	2304      	movcs	r3, #4
 8003db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d902      	bls.n	8003dc4 <NVIC_EncodePriority+0x30>
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3b03      	subs	r3, #3
 8003dc2:	e000      	b.n	8003dc6 <NVIC_EncodePriority+0x32>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	4313      	orrs	r3, r2
         );
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	@ 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ff4c 	bl	8003ca0 <__NVIC_SetPriorityGrouping>
}
 8003e08:	bf00      	nop
 8003e0a:	3708      	adds	r7, #8
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b086      	sub	sp, #24
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	4603      	mov	r3, r0
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
 8003e1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e22:	f7ff ff61 	bl	8003ce8 <__NVIC_GetPriorityGrouping>
 8003e26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	68b9      	ldr	r1, [r7, #8]
 8003e2c:	6978      	ldr	r0, [r7, #20]
 8003e2e:	f7ff ffb1 	bl	8003d94 <NVIC_EncodePriority>
 8003e32:	4602      	mov	r2, r0
 8003e34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7ff ff80 	bl	8003d40 <__NVIC_SetPriority>
}
 8003e40:	bf00      	nop
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}

08003e48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	4603      	mov	r3, r0
 8003e50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff ff54 	bl	8003d04 <__NVIC_EnableIRQ>
}
 8003e5c:	bf00      	nop
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e00e      	b.n	8003e94 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	795b      	ldrb	r3, [r3, #5]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d105      	bne.n	8003e8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7fd fa8e 	bl	80013a8 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3708      	adds	r7, #8
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003ea8:	f7ff feca 	bl	8003c40 <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d101      	bne.n	8003eb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e099      	b.n	8003fec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2202      	movs	r2, #2
 8003ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ed8:	e00f      	b.n	8003efa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003eda:	f7ff feb1 	bl	8003c40 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b05      	cmp	r3, #5
 8003ee6:	d908      	bls.n	8003efa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2220      	movs	r2, #32
 8003eec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e078      	b.n	8003fec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d1e8      	bne.n	8003eda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f10:	697a      	ldr	r2, [r7, #20]
 8003f12:	4b38      	ldr	r3, [pc, #224]	@ (8003ff4 <HAL_DMA_Init+0x158>)
 8003f14:	4013      	ands	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	2b04      	cmp	r3, #4
 8003f52:	d107      	bne.n	8003f64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	697a      	ldr	r2, [r7, #20]
 8003f60:	4313      	orrs	r3, r2
 8003f62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f023 0307 	bic.w	r3, r3, #7
 8003f7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	2b04      	cmp	r3, #4
 8003f8c:	d117      	bne.n	8003fbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d00e      	beq.n	8003fbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f000 fa6f 	bl	8004484 <DMA_CheckFifoParam>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d008      	beq.n	8003fbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2240      	movs	r2, #64	@ 0x40
 8003fb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e016      	b.n	8003fec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	697a      	ldr	r2, [r7, #20]
 8003fc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa26 	bl	8004418 <DMA_CalcBaseAndBitshift>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fd4:	223f      	movs	r2, #63	@ 0x3f
 8003fd6:	409a      	lsls	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3718      	adds	r7, #24
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	f010803f 	.word	0xf010803f

08003ff8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b086      	sub	sp, #24
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	60f8      	str	r0, [r7, #12]
 8004000:	60b9      	str	r1, [r7, #8]
 8004002:	607a      	str	r2, [r7, #4]
 8004004:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004006:	2300      	movs	r3, #0
 8004008:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800400e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_DMA_Start_IT+0x26>
 800401a:	2302      	movs	r3, #2
 800401c:	e040      	b.n	80040a0 <HAL_DMA_Start_IT+0xa8>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800402c:	b2db      	uxtb	r3, r3
 800402e:	2b01      	cmp	r3, #1
 8004030:	d12f      	bne.n	8004092 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2202      	movs	r2, #2
 8004036:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68b9      	ldr	r1, [r7, #8]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 f9b8 	bl	80043bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	223f      	movs	r2, #63	@ 0x3f
 8004052:	409a      	lsls	r2, r3
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f042 0216 	orr.w	r2, r2, #22
 8004066:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d007      	beq.n	8004080 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0208 	orr.w	r2, r2, #8
 800407e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	e005      	b.n	800409e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800409a:	2302      	movs	r3, #2
 800409c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800409e:	7dfb      	ldrb	r3, [r7, #23]
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3718      	adds	r7, #24
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040b4:	4b8e      	ldr	r3, [pc, #568]	@ (80042f0 <HAL_DMA_IRQHandler+0x248>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a8e      	ldr	r2, [pc, #568]	@ (80042f4 <HAL_DMA_IRQHandler+0x24c>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	0a9b      	lsrs	r3, r3, #10
 80040c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d2:	2208      	movs	r2, #8
 80040d4:	409a      	lsls	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	4013      	ands	r3, r2
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d01a      	beq.n	8004114 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 0204 	bic.w	r2, r2, #4
 80040fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004100:	2208      	movs	r2, #8
 8004102:	409a      	lsls	r2, r3
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800410c:	f043 0201 	orr.w	r2, r3, #1
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004118:	2201      	movs	r2, #1
 800411a:	409a      	lsls	r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	4013      	ands	r3, r2
 8004120:	2b00      	cmp	r3, #0
 8004122:	d012      	beq.n	800414a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00b      	beq.n	800414a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004136:	2201      	movs	r2, #1
 8004138:	409a      	lsls	r2, r3
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004142:	f043 0202 	orr.w	r2, r3, #2
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414e:	2204      	movs	r2, #4
 8004150:	409a      	lsls	r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	4013      	ands	r3, r2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d012      	beq.n	8004180 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f003 0302 	and.w	r3, r3, #2
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00b      	beq.n	8004180 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800416c:	2204      	movs	r2, #4
 800416e:	409a      	lsls	r2, r3
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004178:	f043 0204 	orr.w	r2, r3, #4
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004184:	2210      	movs	r2, #16
 8004186:	409a      	lsls	r2, r3
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	4013      	ands	r3, r2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d043      	beq.n	8004218 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d03c      	beq.n	8004218 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041a2:	2210      	movs	r2, #16
 80041a4:	409a      	lsls	r2, r3
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d018      	beq.n	80041ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d108      	bne.n	80041d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d024      	beq.n	8004218 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	4798      	blx	r3
 80041d6:	e01f      	b.n	8004218 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01b      	beq.n	8004218 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	4798      	blx	r3
 80041e8:	e016      	b.n	8004218 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d107      	bne.n	8004208 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0208 	bic.w	r2, r2, #8
 8004206:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800421c:	2220      	movs	r2, #32
 800421e:	409a      	lsls	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4013      	ands	r3, r2
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 808f 	beq.w	8004348 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0310 	and.w	r3, r3, #16
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8087 	beq.w	8004348 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800423e:	2220      	movs	r2, #32
 8004240:	409a      	lsls	r2, r3
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b05      	cmp	r3, #5
 8004250:	d136      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0216 	bic.w	r2, r2, #22
 8004260:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	695a      	ldr	r2, [r3, #20]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004270:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004276:	2b00      	cmp	r3, #0
 8004278:	d103      	bne.n	8004282 <HAL_DMA_IRQHandler+0x1da>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800427e:	2b00      	cmp	r3, #0
 8004280:	d007      	beq.n	8004292 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f022 0208 	bic.w	r2, r2, #8
 8004290:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004296:	223f      	movs	r2, #63	@ 0x3f
 8004298:	409a      	lsls	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d07e      	beq.n	80043b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
        }
        return;
 80042be:	e079      	b.n	80043b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d01d      	beq.n	800430a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d10d      	bne.n	80042f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d031      	beq.n	8004348 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	4798      	blx	r3
 80042ec:	e02c      	b.n	8004348 <HAL_DMA_IRQHandler+0x2a0>
 80042ee:	bf00      	nop
 80042f0:	20000008 	.word	0x20000008
 80042f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d023      	beq.n	8004348 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	4798      	blx	r3
 8004308:	e01e      	b.n	8004348 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004314:	2b00      	cmp	r3, #0
 8004316:	d10f      	bne.n	8004338 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681a      	ldr	r2, [r3, #0]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f022 0210 	bic.w	r2, r2, #16
 8004326:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2201      	movs	r2, #1
 800432c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433c:	2b00      	cmp	r3, #0
 800433e:	d003      	beq.n	8004348 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434c:	2b00      	cmp	r3, #0
 800434e:	d032      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d022      	beq.n	80043a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2205      	movs	r2, #5
 8004360:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f022 0201 	bic.w	r2, r2, #1
 8004372:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	3301      	adds	r3, #1
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	429a      	cmp	r2, r3
 800437e:	d307      	bcc.n	8004390 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f2      	bne.n	8004374 <HAL_DMA_IRQHandler+0x2cc>
 800438e:	e000      	b.n	8004392 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004390:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d005      	beq.n	80043b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	4798      	blx	r3
 80043b2:	e000      	b.n	80043b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80043b4:	bf00      	nop
    }
  }
}
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80043d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	683a      	ldr	r2, [r7, #0]
 80043e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	2b40      	cmp	r3, #64	@ 0x40
 80043e8:	d108      	bne.n	80043fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043fa:	e007      	b.n	800440c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	60da      	str	r2, [r3, #12]
}
 800440c:	bf00      	nop
 800440e:	3714      	adds	r7, #20
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004418:	b480      	push	{r7}
 800441a:	b085      	sub	sp, #20
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	3b10      	subs	r3, #16
 8004428:	4a14      	ldr	r2, [pc, #80]	@ (800447c <DMA_CalcBaseAndBitshift+0x64>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004432:	4a13      	ldr	r2, [pc, #76]	@ (8004480 <DMA_CalcBaseAndBitshift+0x68>)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b03      	cmp	r3, #3
 8004444:	d909      	bls.n	800445a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800444e:	f023 0303 	bic.w	r3, r3, #3
 8004452:	1d1a      	adds	r2, r3, #4
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	659a      	str	r2, [r3, #88]	@ 0x58
 8004458:	e007      	b.n	800446a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004462:	f023 0303 	bic.w	r3, r3, #3
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	aaaaaaab 	.word	0xaaaaaaab
 8004480:	0800ea60 	.word	0x0800ea60

08004484 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800448c:	2300      	movs	r3, #0
 800448e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004494:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d11f      	bne.n	80044de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d856      	bhi.n	8004552 <DMA_CheckFifoParam+0xce>
 80044a4:	a201      	add	r2, pc, #4	@ (adr r2, 80044ac <DMA_CheckFifoParam+0x28>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044bd 	.word	0x080044bd
 80044b0:	080044cf 	.word	0x080044cf
 80044b4:	080044bd 	.word	0x080044bd
 80044b8:	08004553 	.word	0x08004553
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d046      	beq.n	8004556 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044cc:	e043      	b.n	8004556 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80044d6:	d140      	bne.n	800455a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044dc:	e03d      	b.n	800455a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	699b      	ldr	r3, [r3, #24]
 80044e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044e6:	d121      	bne.n	800452c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	2b03      	cmp	r3, #3
 80044ec:	d837      	bhi.n	800455e <DMA_CheckFifoParam+0xda>
 80044ee:	a201      	add	r2, pc, #4	@ (adr r2, 80044f4 <DMA_CheckFifoParam+0x70>)
 80044f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f4:	08004505 	.word	0x08004505
 80044f8:	0800450b 	.word	0x0800450b
 80044fc:	08004505 	.word	0x08004505
 8004500:	0800451d 	.word	0x0800451d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      break;
 8004508:	e030      	b.n	800456c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800450e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d025      	beq.n	8004562 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800451a:	e022      	b.n	8004562 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004520:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004524:	d11f      	bne.n	8004566 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800452a:	e01c      	b.n	8004566 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d903      	bls.n	800453a <DMA_CheckFifoParam+0xb6>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d003      	beq.n	8004540 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004538:	e018      	b.n	800456c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	73fb      	strb	r3, [r7, #15]
      break;
 800453e:	e015      	b.n	800456c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00e      	beq.n	800456a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800454c:	2301      	movs	r3, #1
 800454e:	73fb      	strb	r3, [r7, #15]
      break;
 8004550:	e00b      	b.n	800456a <DMA_CheckFifoParam+0xe6>
      break;
 8004552:	bf00      	nop
 8004554:	e00a      	b.n	800456c <DMA_CheckFifoParam+0xe8>
      break;
 8004556:	bf00      	nop
 8004558:	e008      	b.n	800456c <DMA_CheckFifoParam+0xe8>
      break;
 800455a:	bf00      	nop
 800455c:	e006      	b.n	800456c <DMA_CheckFifoParam+0xe8>
      break;
 800455e:	bf00      	nop
 8004560:	e004      	b.n	800456c <DMA_CheckFifoParam+0xe8>
      break;
 8004562:	bf00      	nop
 8004564:	e002      	b.n	800456c <DMA_CheckFifoParam+0xe8>
      break;   
 8004566:	bf00      	nop
 8004568:	e000      	b.n	800456c <DMA_CheckFifoParam+0xe8>
      break;
 800456a:	bf00      	nop
    }
  } 
  
  return status; 
 800456c:	7bfb      	ldrb	r3, [r7, #15]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop

0800457c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d101      	bne.n	800458e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e03b      	b.n	8004606 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d106      	bne.n	80045a8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f7fc ff74 	bl	8001490 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2202      	movs	r2, #2
 80045ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045cc:	f023 0107 	bic.w	r1, r3, #7
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	430a      	orrs	r2, r1
 80045da:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80045e6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68d1      	ldr	r1, [r2, #12]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	6812      	ldr	r2, [r2, #0]
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800460e:	b580      	push	{r7, lr}
 8004610:	b084      	sub	sp, #16
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d026      	beq.n	800467e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d021      	beq.n	800467e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004648:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	2201      	movs	r2, #1
 800465c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2204      	movs	r2, #4
 8004662:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d003      	beq.n	800467e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d026      	beq.n	80046d6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d021      	beq.n	80046d6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046a0:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	2220      	movs	r2, #32
 80046a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ae:	f043 0202 	orr.w	r2, r3, #2
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2204      	movs	r2, #4
 80046ba:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	f003 0308 	and.w	r3, r3, #8
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d026      	beq.n	800472e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d021      	beq.n	800472e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2208      	movs	r2, #8
 8004700:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004706:	f043 0204 	orr.w	r2, r3, #4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2204      	movs	r2, #4
 8004712:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d003      	beq.n	800472e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d013      	beq.n	8004760 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00e      	beq.n	8004760 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004750:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2204      	movs	r2, #4
 8004758:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f853 	bl	8004806 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d024      	beq.n	80047b4 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01f      	beq.n	80047b4 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004782:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2202      	movs	r2, #2
 800478a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f003 0310 	and.w	r3, r3, #16
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d01f      	beq.n	80047fe <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d01a      	beq.n	80047fe <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047d6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2210      	movs	r2, #16
 80047de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 f80e 	bl	800481a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80047fe:	bf00      	nop
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}

08004806 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8004806:	b480      	push	{r7}
 8004808:	b083      	sub	sp, #12
 800480a:	af00      	add	r7, sp, #0
 800480c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800481a:	b480      	push	{r7}
 800481c:	b083      	sub	sp, #12
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8004822:	bf00      	nop
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr
	...

08004830 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8004830:	b480      	push	{r7}
 8004832:	b087      	sub	sp, #28
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004848:	2b01      	cmp	r3, #1
 800484a:	d101      	bne.n	8004850 <HAL_DMA2D_ConfigLayer+0x20>
 800484c:	2302      	movs	r3, #2
 800484e:	e079      	b.n	8004944 <HAL_DMA2D_ConfigLayer+0x114>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	3318      	adds	r3, #24
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	4413      	add	r3, r2
 800486a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	685a      	ldr	r2, [r3, #4]
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	041b      	lsls	r3, r3, #16
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800487a:	4b35      	ldr	r3, [pc, #212]	@ (8004950 <HAL_DMA2D_ConfigLayer+0x120>)
 800487c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	2b0a      	cmp	r3, #10
 8004884:	d003      	beq.n	800488e <HAL_DMA2D_ConfigLayer+0x5e>
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b09      	cmp	r3, #9
 800488c:	d107      	bne.n	800489e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004896:	697a      	ldr	r2, [r7, #20]
 8004898:	4313      	orrs	r3, r2
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e005      	b.n	80048aa <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	061b      	lsls	r3, r3, #24
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d120      	bne.n	80048f2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	43db      	mvns	r3, r3
 80048ba:	ea02 0103 	and.w	r1, r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	6812      	ldr	r2, [r2, #0]
 80048d0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	2b0a      	cmp	r3, #10
 80048d8:	d003      	beq.n	80048e2 <HAL_DMA2D_ConfigLayer+0xb2>
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d127      	bne.n	8004932 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80048ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80048f0:	e01f      	b.n	8004932 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	ea02 0103 	and.w	r1, r2, r3
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	697a      	ldr	r2, [r7, #20]
 8004906:	430a      	orrs	r2, r1
 8004908:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	6812      	ldr	r2, [r2, #0]
 8004912:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	2b0a      	cmp	r3, #10
 800491a:	d003      	beq.n	8004924 <HAL_DMA2D_ConfigLayer+0xf4>
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	2b09      	cmp	r3, #9
 8004922:	d106      	bne.n	8004932 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	68da      	ldr	r2, [r3, #12]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8004930:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8004942:	2300      	movs	r3, #0
}
 8004944:	4618      	mov	r0, r3
 8004946:	371c      	adds	r7, #28
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr
 8004950:	ff03000f 	.word	0xff03000f

08004954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004954:	b480      	push	{r7}
 8004956:	b089      	sub	sp, #36	@ 0x24
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800495e:	2300      	movs	r3, #0
 8004960:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004962:	2300      	movs	r3, #0
 8004964:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
 800496e:	e177      	b.n	8004c60 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004970:	2201      	movs	r2, #1
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	fa02 f303 	lsl.w	r3, r2, r3
 8004978:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	697a      	ldr	r2, [r7, #20]
 8004980:	4013      	ands	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	429a      	cmp	r2, r3
 800498a:	f040 8166 	bne.w	8004c5a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f003 0303 	and.w	r3, r3, #3
 8004996:	2b01      	cmp	r3, #1
 8004998:	d005      	beq.n	80049a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d130      	bne.n	8004a08 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	005b      	lsls	r3, r3, #1
 80049b0:	2203      	movs	r2, #3
 80049b2:	fa02 f303 	lsl.w	r3, r2, r3
 80049b6:	43db      	mvns	r3, r3
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	4013      	ands	r3, r2
 80049bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	fa02 f303 	lsl.w	r3, r2, r3
 80049ca:	69ba      	ldr	r2, [r7, #24]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80049dc:	2201      	movs	r2, #1
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	fa02 f303 	lsl.w	r3, r2, r3
 80049e4:	43db      	mvns	r3, r3
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	091b      	lsrs	r3, r3, #4
 80049f2:	f003 0201 	and.w	r2, r3, #1
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	69ba      	ldr	r2, [r7, #24]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	69ba      	ldr	r2, [r7, #24]
 8004a06:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f003 0303 	and.w	r3, r3, #3
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d017      	beq.n	8004a44 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	005b      	lsls	r3, r3, #1
 8004a1e:	2203      	movs	r2, #3
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	43db      	mvns	r3, r3
 8004a26:	69ba      	ldr	r2, [r7, #24]
 8004a28:	4013      	ands	r3, r2
 8004a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	689a      	ldr	r2, [r3, #8]
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	005b      	lsls	r3, r3, #1
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d123      	bne.n	8004a98 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	08da      	lsrs	r2, r3, #3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3208      	adds	r2, #8
 8004a58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	220f      	movs	r2, #15
 8004a68:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6c:	43db      	mvns	r3, r3
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	4013      	ands	r3, r2
 8004a72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	691a      	ldr	r2, [r3, #16]
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	fa02 f303 	lsl.w	r3, r2, r3
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	08da      	lsrs	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3208      	adds	r2, #8
 8004a92:	69b9      	ldr	r1, [r7, #24]
 8004a94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	005b      	lsls	r3, r3, #1
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	69ba      	ldr	r2, [r7, #24]
 8004aac:	4013      	ands	r3, r2
 8004aae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f003 0203 	and.w	r2, r3, #3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	685b      	ldr	r3, [r3, #4]
 8004ad0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	f000 80c0 	beq.w	8004c5a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	4b66      	ldr	r3, [pc, #408]	@ (8004c78 <HAL_GPIO_Init+0x324>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	4a65      	ldr	r2, [pc, #404]	@ (8004c78 <HAL_GPIO_Init+0x324>)
 8004ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aea:	4b63      	ldr	r3, [pc, #396]	@ (8004c78 <HAL_GPIO_Init+0x324>)
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004af6:	4a61      	ldr	r2, [pc, #388]	@ (8004c7c <HAL_GPIO_Init+0x328>)
 8004af8:	69fb      	ldr	r3, [r7, #28]
 8004afa:	089b      	lsrs	r3, r3, #2
 8004afc:	3302      	adds	r3, #2
 8004afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	220f      	movs	r2, #15
 8004b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b12:	43db      	mvns	r3, r3
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	4013      	ands	r3, r2
 8004b18:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4a58      	ldr	r2, [pc, #352]	@ (8004c80 <HAL_GPIO_Init+0x32c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d037      	beq.n	8004b92 <HAL_GPIO_Init+0x23e>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a57      	ldr	r2, [pc, #348]	@ (8004c84 <HAL_GPIO_Init+0x330>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d031      	beq.n	8004b8e <HAL_GPIO_Init+0x23a>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a56      	ldr	r2, [pc, #344]	@ (8004c88 <HAL_GPIO_Init+0x334>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d02b      	beq.n	8004b8a <HAL_GPIO_Init+0x236>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a55      	ldr	r2, [pc, #340]	@ (8004c8c <HAL_GPIO_Init+0x338>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d025      	beq.n	8004b86 <HAL_GPIO_Init+0x232>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4a54      	ldr	r2, [pc, #336]	@ (8004c90 <HAL_GPIO_Init+0x33c>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d01f      	beq.n	8004b82 <HAL_GPIO_Init+0x22e>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a53      	ldr	r2, [pc, #332]	@ (8004c94 <HAL_GPIO_Init+0x340>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d019      	beq.n	8004b7e <HAL_GPIO_Init+0x22a>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	4a52      	ldr	r2, [pc, #328]	@ (8004c98 <HAL_GPIO_Init+0x344>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d013      	beq.n	8004b7a <HAL_GPIO_Init+0x226>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a51      	ldr	r2, [pc, #324]	@ (8004c9c <HAL_GPIO_Init+0x348>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d00d      	beq.n	8004b76 <HAL_GPIO_Init+0x222>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a50      	ldr	r2, [pc, #320]	@ (8004ca0 <HAL_GPIO_Init+0x34c>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d007      	beq.n	8004b72 <HAL_GPIO_Init+0x21e>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a4f      	ldr	r2, [pc, #316]	@ (8004ca4 <HAL_GPIO_Init+0x350>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d101      	bne.n	8004b6e <HAL_GPIO_Init+0x21a>
 8004b6a:	2309      	movs	r3, #9
 8004b6c:	e012      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b6e:	230a      	movs	r3, #10
 8004b70:	e010      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b72:	2308      	movs	r3, #8
 8004b74:	e00e      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b76:	2307      	movs	r3, #7
 8004b78:	e00c      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b7a:	2306      	movs	r3, #6
 8004b7c:	e00a      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b7e:	2305      	movs	r3, #5
 8004b80:	e008      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b82:	2304      	movs	r3, #4
 8004b84:	e006      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b86:	2303      	movs	r3, #3
 8004b88:	e004      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b8a:	2302      	movs	r3, #2
 8004b8c:	e002      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <HAL_GPIO_Init+0x240>
 8004b92:	2300      	movs	r3, #0
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	f002 0203 	and.w	r2, r2, #3
 8004b9a:	0092      	lsls	r2, r2, #2
 8004b9c:	4093      	lsls	r3, r2
 8004b9e:	69ba      	ldr	r2, [r7, #24]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ba4:	4935      	ldr	r1, [pc, #212]	@ (8004c7c <HAL_GPIO_Init+0x328>)
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	3302      	adds	r3, #2
 8004bac:	69ba      	ldr	r2, [r7, #24]
 8004bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bb2:	4b3d      	ldr	r3, [pc, #244]	@ (8004ca8 <HAL_GPIO_Init+0x354>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	43db      	mvns	r3, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004bce:	69ba      	ldr	r2, [r7, #24]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bd6:	4a34      	ldr	r2, [pc, #208]	@ (8004ca8 <HAL_GPIO_Init+0x354>)
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bdc:	4b32      	ldr	r3, [pc, #200]	@ (8004ca8 <HAL_GPIO_Init+0x354>)
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	43db      	mvns	r3, r3
 8004be6:	69ba      	ldr	r2, [r7, #24]
 8004be8:	4013      	ands	r3, r2
 8004bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d003      	beq.n	8004c00 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004bf8:	69ba      	ldr	r2, [r7, #24]
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004c00:	4a29      	ldr	r2, [pc, #164]	@ (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c06:	4b28      	ldr	r3, [pc, #160]	@ (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4013      	ands	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d003      	beq.n	8004c2a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c30:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	43db      	mvns	r3, r3
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d003      	beq.n	8004c54 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c54:	4a14      	ldr	r2, [pc, #80]	@ (8004ca8 <HAL_GPIO_Init+0x354>)
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	61fb      	str	r3, [r7, #28]
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	2b0f      	cmp	r3, #15
 8004c64:	f67f ae84 	bls.w	8004970 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004c68:	bf00      	nop
 8004c6a:	bf00      	nop
 8004c6c:	3724      	adds	r7, #36	@ 0x24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	40023800 	.word	0x40023800
 8004c7c:	40013800 	.word	0x40013800
 8004c80:	40020000 	.word	0x40020000
 8004c84:	40020400 	.word	0x40020400
 8004c88:	40020800 	.word	0x40020800
 8004c8c:	40020c00 	.word	0x40020c00
 8004c90:	40021000 	.word	0x40021000
 8004c94:	40021400 	.word	0x40021400
 8004c98:	40021800 	.word	0x40021800
 8004c9c:	40021c00 	.word	0x40021c00
 8004ca0:	40022000 	.word	0x40022000
 8004ca4:	40022400 	.word	0x40022400
 8004ca8:	40013c00 	.word	0x40013c00

08004cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	887b      	ldrh	r3, [r7, #2]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	e001      	b.n	8004cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004cec:	787b      	ldrb	r3, [r7, #1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cf8:	e003      	b.n	8004d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004cfa:	887b      	ldrh	r3, [r7, #2]
 8004cfc:	041a      	lsls	r2, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	619a      	str	r2, [r3, #24]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr

08004d0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004d0e:	b480      	push	{r7}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
 8004d16:	460b      	mov	r3, r1
 8004d18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	695b      	ldr	r3, [r3, #20]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d20:	887a      	ldrh	r2, [r7, #2]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	4013      	ands	r3, r2
 8004d26:	041a      	lsls	r2, r3, #16
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	43d9      	mvns	r1, r3
 8004d2c:	887b      	ldrh	r3, [r7, #2]
 8004d2e:	400b      	ands	r3, r1
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	619a      	str	r2, [r3, #24]
}
 8004d36:	bf00      	nop
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr

08004d42 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b086      	sub	sp, #24
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f005 faef 	bl	800a33c <USB_GetMode>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	f040 80fb 	bne.w	8004f5c <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f005 fab2 	bl	800a2d4 <USB_ReadInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 80f1 	beq.w	8004f5a <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f005 faa9 	bl	800a2d4 <USB_ReadInterrupts>
 8004d82:	4603      	mov	r3, r0
 8004d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d8c:	d104      	bne.n	8004d98 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004d96:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f005 fa99 	bl	800a2d4 <USB_ReadInterrupts>
 8004da2:	4603      	mov	r3, r0
 8004da4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dac:	d104      	bne.n	8004db8 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004db6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f005 fa89 	bl	800a2d4 <USB_ReadInterrupts>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004dc8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004dcc:	d104      	bne.n	8004dd8 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004dd6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f005 fa79 	bl	800a2d4 <USB_ReadInterrupts>
 8004de2:	4603      	mov	r3, r0
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b02      	cmp	r3, #2
 8004dea:	d103      	bne.n	8004df4 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2202      	movs	r2, #2
 8004df2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f005 fa6b 	bl	800a2d4 <USB_ReadInterrupts>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e08:	d120      	bne.n	8004e4c <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004e12:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d113      	bne.n	8004e4c <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004e24:	2110      	movs	r1, #16
 8004e26:	6938      	ldr	r0, [r7, #16]
 8004e28:	f005 f99c 	bl	800a164 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004e2c:	6938      	ldr	r0, [r7, #16]
 8004e2e:	f005 f9cb 	bl	800a1c8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	7a5b      	ldrb	r3, [r3, #9]
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d105      	bne.n	8004e46 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	2101      	movs	r1, #1
 8004e40:	4618      	mov	r0, r3
 8004e42:	f005 fa89 	bl	800a358 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f006 fdd6 	bl	800b9f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4618      	mov	r0, r3
 8004e52:	f005 fa3f 	bl	800a2d4 <USB_ReadInterrupts>
 8004e56:	4603      	mov	r3, r0
 8004e58:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e60:	d102      	bne.n	8004e68 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f001 fca1 	bl	80067aa <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f005 fa31 	bl	800a2d4 <USB_ReadInterrupts>
 8004e72:	4603      	mov	r3, r0
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d106      	bne.n	8004e8a <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	f006 fd9f 	bl	800b9c0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	2208      	movs	r2, #8
 8004e88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f005 fa20 	bl	800a2d4 <USB_ReadInterrupts>
 8004e94:	4603      	mov	r3, r0
 8004e96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004e9e:	d139      	bne.n	8004f14 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f005 fa94 	bl	800a3d2 <USB_HC_ReadInterrupt>
 8004eaa:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]
 8004eb0:	e025      	b.n	8004efe <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f003 030f 	and.w	r3, r3, #15
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	fa22 f303 	lsr.w	r3, r2, r3
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d018      	beq.n	8004ef8 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004edc:	d106      	bne.n	8004eec <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 f859 	bl	8004f9c <HCD_HC_IN_IRQHandler>
 8004eea:	e005      	b.n	8004ef8 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 febb 	bl	8005c6e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3301      	adds	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	795b      	ldrb	r3, [r3, #5]
 8004f02:	461a      	mov	r2, r3
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d3d3      	bcc.n	8004eb2 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004f12:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f005 f9db 	bl	800a2d4 <USB_ReadInterrupts>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	f003 0310 	and.w	r3, r3, #16
 8004f24:	2b10      	cmp	r3, #16
 8004f26:	d101      	bne.n	8004f2c <HAL_HCD_IRQHandler+0x1ea>
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e000      	b.n	8004f2e <HAL_HCD_IRQHandler+0x1ec>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d014      	beq.n	8004f5c <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	699a      	ldr	r2, [r3, #24]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f022 0210 	bic.w	r2, r2, #16
 8004f40:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 fb52 	bl	80065ec <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0210 	orr.w	r2, r2, #16
 8004f56:	619a      	str	r2, [r3, #24]
 8004f58:	e000      	b.n	8004f5c <HAL_HCD_IRQHandler+0x21a>
      return;
 8004f5a:	bf00      	nop
    }
  }
}
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}

08004f62 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004f62:	b580      	push	{r7, lr}
 8004f64:	b082      	sub	sp, #8
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_HCD_Stop+0x16>
 8004f74:	2302      	movs	r3, #2
 8004f76:	e00d      	b.n	8004f94 <HAL_HCD_Stop+0x32>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f005 fb55 	bl	800a634 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004f92:	2300      	movs	r3, #0
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b086      	sub	sp, #24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	78fa      	ldrb	r2, [r7, #3]
 8004fb8:	4611      	mov	r1, r2
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f005 f99d 	bl	800a2fa <USB_ReadChInterrupts>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	f003 0304 	and.w	r3, r3, #4
 8004fc6:	2b04      	cmp	r3, #4
 8004fc8:	d11a      	bne.n	8005000 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	015a      	lsls	r2, r3, #5
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	2304      	movs	r3, #4
 8004fda:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	011b      	lsls	r3, r3, #4
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	334d      	adds	r3, #77	@ 0x4d
 8004fec:	2207      	movs	r2, #7
 8004fee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	78fa      	ldrb	r2, [r7, #3]
 8004ff6:	4611      	mov	r1, r2
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f005 f9fb 	bl	800a3f4 <USB_HC_Halt>
 8004ffe:	e09e      	b.n	800513e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	78fa      	ldrb	r2, [r7, #3]
 8005006:	4611      	mov	r1, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f005 f976 	bl	800a2fa <USB_ReadChInterrupts>
 800500e:	4603      	mov	r3, r0
 8005010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005014:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005018:	d11b      	bne.n	8005052 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800501a:	78fb      	ldrb	r3, [r7, #3]
 800501c:	015a      	lsls	r2, r3, #5
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	4413      	add	r3, r2
 8005022:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005026:	461a      	mov	r2, r3
 8005028:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800502c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800502e:	78fa      	ldrb	r2, [r7, #3]
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	4613      	mov	r3, r2
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	1a9b      	subs	r3, r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	440b      	add	r3, r1
 800503c:	334d      	adds	r3, #77	@ 0x4d
 800503e:	2208      	movs	r2, #8
 8005040:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	4611      	mov	r1, r2
 800504a:	4618      	mov	r0, r3
 800504c:	f005 f9d2 	bl	800a3f4 <USB_HC_Halt>
 8005050:	e075      	b.n	800513e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	4611      	mov	r1, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f005 f94d 	bl	800a2fa <USB_ReadChInterrupts>
 8005060:	4603      	mov	r3, r0
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b08      	cmp	r3, #8
 8005068:	d11a      	bne.n	80050a0 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	015a      	lsls	r2, r3, #5
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	4413      	add	r3, r2
 8005072:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005076:	461a      	mov	r2, r3
 8005078:	2308      	movs	r3, #8
 800507a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800507c:	78fa      	ldrb	r2, [r7, #3]
 800507e:	6879      	ldr	r1, [r7, #4]
 8005080:	4613      	mov	r3, r2
 8005082:	011b      	lsls	r3, r3, #4
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	334d      	adds	r3, #77	@ 0x4d
 800508c:	2206      	movs	r2, #6
 800508e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	4611      	mov	r1, r2
 8005098:	4618      	mov	r0, r3
 800509a:	f005 f9ab 	bl	800a3f4 <USB_HC_Halt>
 800509e:	e04e      	b.n	800513e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	78fa      	ldrb	r2, [r7, #3]
 80050a6:	4611      	mov	r1, r2
 80050a8:	4618      	mov	r0, r3
 80050aa:	f005 f926 	bl	800a2fa <USB_ReadChInterrupts>
 80050ae:	4603      	mov	r3, r0
 80050b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b8:	d11b      	bne.n	80050f2 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80050ba:	78fb      	ldrb	r3, [r7, #3]
 80050bc:	015a      	lsls	r2, r3, #5
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4413      	add	r3, r2
 80050c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050c6:	461a      	mov	r2, r3
 80050c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80050cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80050ce:	78fa      	ldrb	r2, [r7, #3]
 80050d0:	6879      	ldr	r1, [r7, #4]
 80050d2:	4613      	mov	r3, r2
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	1a9b      	subs	r3, r3, r2
 80050d8:	009b      	lsls	r3, r3, #2
 80050da:	440b      	add	r3, r1
 80050dc:	334d      	adds	r3, #77	@ 0x4d
 80050de:	2209      	movs	r2, #9
 80050e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	4611      	mov	r1, r2
 80050ea:	4618      	mov	r0, r3
 80050ec:	f005 f982 	bl	800a3f4 <USB_HC_Halt>
 80050f0:	e025      	b.n	800513e <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	78fa      	ldrb	r2, [r7, #3]
 80050f8:	4611      	mov	r1, r2
 80050fa:	4618      	mov	r0, r3
 80050fc:	f005 f8fd 	bl	800a2fa <USB_ReadChInterrupts>
 8005100:	4603      	mov	r3, r0
 8005102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005106:	2b80      	cmp	r3, #128	@ 0x80
 8005108:	d119      	bne.n	800513e <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005116:	461a      	mov	r2, r3
 8005118:	2380      	movs	r3, #128	@ 0x80
 800511a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	334d      	adds	r3, #77	@ 0x4d
 800512c:	2207      	movs	r2, #7
 800512e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	78fa      	ldrb	r2, [r7, #3]
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f005 f95b 	bl	800a3f4 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	78fa      	ldrb	r2, [r7, #3]
 8005144:	4611      	mov	r1, r2
 8005146:	4618      	mov	r0, r3
 8005148:	f005 f8d7 	bl	800a2fa <USB_ReadChInterrupts>
 800514c:	4603      	mov	r3, r0
 800514e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005152:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005156:	d112      	bne.n	800517e <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	78fa      	ldrb	r2, [r7, #3]
 800515e:	4611      	mov	r1, r2
 8005160:	4618      	mov	r0, r3
 8005162:	f005 f947 	bl	800a3f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005166:	78fb      	ldrb	r3, [r7, #3]
 8005168:	015a      	lsls	r2, r3, #5
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	4413      	add	r3, r2
 800516e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005172:	461a      	mov	r2, r3
 8005174:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005178:	6093      	str	r3, [r2, #8]
 800517a:	f000 bd75 	b.w	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	78fa      	ldrb	r2, [r7, #3]
 8005184:	4611      	mov	r1, r2
 8005186:	4618      	mov	r0, r3
 8005188:	f005 f8b7 	bl	800a2fa <USB_ReadChInterrupts>
 800518c:	4603      	mov	r3, r0
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b01      	cmp	r3, #1
 8005194:	f040 8128 	bne.w	80053e8 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005198:	78fb      	ldrb	r3, [r7, #3]
 800519a:	015a      	lsls	r2, r3, #5
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	4413      	add	r3, r2
 80051a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a4:	461a      	mov	r2, r3
 80051a6:	2320      	movs	r3, #32
 80051a8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80051aa:	78fa      	ldrb	r2, [r7, #3]
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	011b      	lsls	r3, r3, #4
 80051b2:	1a9b      	subs	r3, r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	440b      	add	r3, r1
 80051b8:	331b      	adds	r3, #27
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d119      	bne.n	80051f4 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	331b      	adds	r3, #27
 80051d0:	2200      	movs	r2, #0
 80051d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80051d4:	78fb      	ldrb	r3, [r7, #3]
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	0151      	lsls	r1, r2, #5
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	440a      	add	r2, r1
 80051ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f2:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	799b      	ldrb	r3, [r3, #6]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01b      	beq.n	8005234 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	011b      	lsls	r3, r3, #4
 8005204:	1a9b      	subs	r3, r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	3330      	adds	r3, #48	@ 0x30
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	4413      	add	r3, r2
 8005216:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	1ac9      	subs	r1, r1, r3
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	4613      	mov	r3, r2
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4403      	add	r3, r0
 8005230:	3338      	adds	r3, #56	@ 0x38
 8005232:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8005234:	78fa      	ldrb	r2, [r7, #3]
 8005236:	6879      	ldr	r1, [r7, #4]
 8005238:	4613      	mov	r3, r2
 800523a:	011b      	lsls	r3, r3, #4
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	009b      	lsls	r3, r3, #2
 8005240:	440b      	add	r3, r1
 8005242:	334d      	adds	r3, #77	@ 0x4d
 8005244:	2201      	movs	r2, #1
 8005246:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8005248:	78fa      	ldrb	r2, [r7, #3]
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	011b      	lsls	r3, r3, #4
 8005250:	1a9b      	subs	r3, r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	3344      	adds	r3, #68	@ 0x44
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800525c:	78fb      	ldrb	r3, [r7, #3]
 800525e:	015a      	lsls	r2, r3, #5
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	4413      	add	r3, r2
 8005264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005268:	461a      	mov	r2, r3
 800526a:	2301      	movs	r3, #1
 800526c:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	3326      	adds	r3, #38	@ 0x26
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	3326      	adds	r3, #38	@ 0x26
 8005294:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005296:	2b02      	cmp	r3, #2
 8005298:	d110      	bne.n	80052bc <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	78fa      	ldrb	r2, [r7, #3]
 80052a0:	4611      	mov	r1, r2
 80052a2:	4618      	mov	r0, r3
 80052a4:	f005 f8a6 	bl	800a3f4 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80052a8:	78fb      	ldrb	r3, [r7, #3]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b4:	461a      	mov	r2, r3
 80052b6:	2310      	movs	r3, #16
 80052b8:	6093      	str	r3, [r2, #8]
 80052ba:	e03d      	b.n	8005338 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80052bc:	78fa      	ldrb	r2, [r7, #3]
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	011b      	lsls	r3, r3, #4
 80052c4:	1a9b      	subs	r3, r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	3326      	adds	r3, #38	@ 0x26
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d00a      	beq.n	80052e8 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80052d2:	78fa      	ldrb	r2, [r7, #3]
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	4613      	mov	r3, r2
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	1a9b      	subs	r3, r3, r2
 80052dc:	009b      	lsls	r3, r3, #2
 80052de:	440b      	add	r3, r1
 80052e0:	3326      	adds	r3, #38	@ 0x26
 80052e2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d127      	bne.n	8005338 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80052e8:	78fb      	ldrb	r3, [r7, #3]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	0151      	lsls	r1, r2, #5
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	440a      	add	r2, r1
 80052fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005302:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005306:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005308:	78fa      	ldrb	r2, [r7, #3]
 800530a:	6879      	ldr	r1, [r7, #4]
 800530c:	4613      	mov	r3, r2
 800530e:	011b      	lsls	r3, r3, #4
 8005310:	1a9b      	subs	r3, r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	440b      	add	r3, r1
 8005316:	334c      	adds	r3, #76	@ 0x4c
 8005318:	2201      	movs	r2, #1
 800531a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800531c:	78fa      	ldrb	r2, [r7, #3]
 800531e:	6879      	ldr	r1, [r7, #4]
 8005320:	4613      	mov	r3, r2
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	1a9b      	subs	r3, r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	334c      	adds	r3, #76	@ 0x4c
 800532c:	781a      	ldrb	r2, [r3, #0]
 800532e:	78fb      	ldrb	r3, [r7, #3]
 8005330:	4619      	mov	r1, r3
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f006 fb6e 	bl	800ba14 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	799b      	ldrb	r3, [r3, #6]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d13b      	bne.n	80053b8 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8005340:	78fa      	ldrb	r2, [r7, #3]
 8005342:	6879      	ldr	r1, [r7, #4]
 8005344:	4613      	mov	r3, r2
 8005346:	011b      	lsls	r3, r3, #4
 8005348:	1a9b      	subs	r3, r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	440b      	add	r3, r1
 800534e:	3338      	adds	r3, #56	@ 0x38
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	78fa      	ldrb	r2, [r7, #3]
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	011b      	lsls	r3, r3, #4
 800535a:	1a9b      	subs	r3, r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	4403      	add	r3, r0
 8005360:	3328      	adds	r3, #40	@ 0x28
 8005362:	881b      	ldrh	r3, [r3, #0]
 8005364:	440b      	add	r3, r1
 8005366:	1e59      	subs	r1, r3, #1
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4403      	add	r3, r0
 8005376:	3328      	adds	r3, #40	@ 0x28
 8005378:	881b      	ldrh	r3, [r3, #0]
 800537a:	fbb1 f3f3 	udiv	r3, r1, r3
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	f000 8470 	beq.w	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	6879      	ldr	r1, [r7, #4]
 800538c:	4613      	mov	r3, r2
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	1a9b      	subs	r3, r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	440b      	add	r3, r1
 8005396:	333c      	adds	r3, #60	@ 0x3c
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	f083 0301 	eor.w	r3, r3, #1
 80053a0:	b2d8      	uxtb	r0, r3
 80053a2:	6879      	ldr	r1, [r7, #4]
 80053a4:	4613      	mov	r3, r2
 80053a6:	011b      	lsls	r3, r3, #4
 80053a8:	1a9b      	subs	r3, r3, r2
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	333c      	adds	r3, #60	@ 0x3c
 80053b0:	4602      	mov	r2, r0
 80053b2:	701a      	strb	r2, [r3, #0]
 80053b4:	f000 bc58 	b.w	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80053b8:	78fa      	ldrb	r2, [r7, #3]
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	4613      	mov	r3, r2
 80053be:	011b      	lsls	r3, r3, #4
 80053c0:	1a9b      	subs	r3, r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	440b      	add	r3, r1
 80053c6:	333c      	adds	r3, #60	@ 0x3c
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	f083 0301 	eor.w	r3, r3, #1
 80053d0:	b2d8      	uxtb	r0, r3
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	011b      	lsls	r3, r3, #4
 80053d8:	1a9b      	subs	r3, r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	333c      	adds	r3, #60	@ 0x3c
 80053e0:	4602      	mov	r2, r0
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	f000 bc40 	b.w	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	4611      	mov	r1, r2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f004 ff82 	bl	800a2fa <USB_ReadChInterrupts>
 80053f6:	4603      	mov	r3, r0
 80053f8:	f003 0320 	and.w	r3, r3, #32
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d131      	bne.n	8005464 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005400:	78fb      	ldrb	r3, [r7, #3]
 8005402:	015a      	lsls	r2, r3, #5
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	4413      	add	r3, r2
 8005408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800540c:	461a      	mov	r2, r3
 800540e:	2320      	movs	r3, #32
 8005410:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8005412:	78fa      	ldrb	r2, [r7, #3]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	011b      	lsls	r3, r3, #4
 800541a:	1a9b      	subs	r3, r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	331a      	adds	r3, #26
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	f040 841f 	bne.w	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	331b      	adds	r3, #27
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800543e:	78fa      	ldrb	r2, [r7, #3]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	334d      	adds	r3, #77	@ 0x4d
 800544e:	2203      	movs	r2, #3
 8005450:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	78fa      	ldrb	r2, [r7, #3]
 8005458:	4611      	mov	r1, r2
 800545a:	4618      	mov	r0, r3
 800545c:	f004 ffca 	bl	800a3f4 <USB_HC_Halt>
 8005460:	f000 bc02 	b.w	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	4611      	mov	r1, r2
 800546c:	4618      	mov	r0, r3
 800546e:	f004 ff44 	bl	800a2fa <USB_ReadChInterrupts>
 8005472:	4603      	mov	r3, r0
 8005474:	f003 0302 	and.w	r3, r3, #2
 8005478:	2b02      	cmp	r3, #2
 800547a:	f040 8305 	bne.w	8005a88 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800547e:	78fb      	ldrb	r3, [r7, #3]
 8005480:	015a      	lsls	r2, r3, #5
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	4413      	add	r3, r2
 8005486:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800548a:	461a      	mov	r2, r3
 800548c:	2302      	movs	r3, #2
 800548e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005490:	78fa      	ldrb	r2, [r7, #3]
 8005492:	6879      	ldr	r1, [r7, #4]
 8005494:	4613      	mov	r3, r2
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	1a9b      	subs	r3, r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	440b      	add	r3, r1
 800549e:	334d      	adds	r3, #77	@ 0x4d
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d114      	bne.n	80054d0 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054a6:	78fa      	ldrb	r2, [r7, #3]
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	4613      	mov	r3, r2
 80054ac:	011b      	lsls	r3, r3, #4
 80054ae:	1a9b      	subs	r3, r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	440b      	add	r3, r1
 80054b4:	334d      	adds	r3, #77	@ 0x4d
 80054b6:	2202      	movs	r2, #2
 80054b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80054ba:	78fa      	ldrb	r2, [r7, #3]
 80054bc:	6879      	ldr	r1, [r7, #4]
 80054be:	4613      	mov	r3, r2
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	1a9b      	subs	r3, r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	440b      	add	r3, r1
 80054c8:	334c      	adds	r3, #76	@ 0x4c
 80054ca:	2201      	movs	r2, #1
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e2cc      	b.n	8005a6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	4613      	mov	r3, r2
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	440b      	add	r3, r1
 80054de:	334d      	adds	r3, #77	@ 0x4d
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	2b06      	cmp	r3, #6
 80054e4:	d114      	bne.n	8005510 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	6879      	ldr	r1, [r7, #4]
 80054ea:	4613      	mov	r3, r2
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	1a9b      	subs	r3, r3, r2
 80054f0:	009b      	lsls	r3, r3, #2
 80054f2:	440b      	add	r3, r1
 80054f4:	334d      	adds	r3, #77	@ 0x4d
 80054f6:	2202      	movs	r2, #2
 80054f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80054fa:	78fa      	ldrb	r2, [r7, #3]
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	4613      	mov	r3, r2
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	1a9b      	subs	r3, r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	440b      	add	r3, r1
 8005508:	334c      	adds	r3, #76	@ 0x4c
 800550a:	2205      	movs	r2, #5
 800550c:	701a      	strb	r2, [r3, #0]
 800550e:	e2ac      	b.n	8005a6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005510:	78fa      	ldrb	r2, [r7, #3]
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	334d      	adds	r3, #77	@ 0x4d
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b07      	cmp	r3, #7
 8005524:	d00b      	beq.n	800553e <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	334d      	adds	r3, #77	@ 0x4d
 8005536:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005538:	2b09      	cmp	r3, #9
 800553a:	f040 80a6 	bne.w	800568a <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800553e:	78fa      	ldrb	r2, [r7, #3]
 8005540:	6879      	ldr	r1, [r7, #4]
 8005542:	4613      	mov	r3, r2
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	440b      	add	r3, r1
 800554c:	334d      	adds	r3, #77	@ 0x4d
 800554e:	2202      	movs	r2, #2
 8005550:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005552:	78fa      	ldrb	r2, [r7, #3]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	4613      	mov	r3, r2
 8005558:	011b      	lsls	r3, r3, #4
 800555a:	1a9b      	subs	r3, r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	440b      	add	r3, r1
 8005560:	3344      	adds	r3, #68	@ 0x44
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	1c59      	adds	r1, r3, #1
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	4613      	mov	r3, r2
 800556a:	011b      	lsls	r3, r3, #4
 800556c:	1a9b      	subs	r3, r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4403      	add	r3, r0
 8005572:	3344      	adds	r3, #68	@ 0x44
 8005574:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005576:	78fa      	ldrb	r2, [r7, #3]
 8005578:	6879      	ldr	r1, [r7, #4]
 800557a:	4613      	mov	r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	1a9b      	subs	r3, r3, r2
 8005580:	009b      	lsls	r3, r3, #2
 8005582:	440b      	add	r3, r1
 8005584:	3344      	adds	r3, #68	@ 0x44
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d943      	bls.n	8005614 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800558c:	78fa      	ldrb	r2, [r7, #3]
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	011b      	lsls	r3, r3, #4
 8005594:	1a9b      	subs	r3, r3, r2
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	440b      	add	r3, r1
 800559a:	3344      	adds	r3, #68	@ 0x44
 800559c:	2200      	movs	r2, #0
 800559e:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80055a0:	78fa      	ldrb	r2, [r7, #3]
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	4613      	mov	r3, r2
 80055a6:	011b      	lsls	r3, r3, #4
 80055a8:	1a9b      	subs	r3, r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	440b      	add	r3, r1
 80055ae:	331a      	adds	r3, #26
 80055b0:	781b      	ldrb	r3, [r3, #0]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d123      	bne.n	80055fe <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80055b6:	78fa      	ldrb	r2, [r7, #3]
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	011b      	lsls	r3, r3, #4
 80055be:	1a9b      	subs	r3, r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	440b      	add	r3, r1
 80055c4:	331b      	adds	r3, #27
 80055c6:	2200      	movs	r2, #0
 80055c8:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80055ca:	78fa      	ldrb	r2, [r7, #3]
 80055cc:	6879      	ldr	r1, [r7, #4]
 80055ce:	4613      	mov	r3, r2
 80055d0:	011b      	lsls	r3, r3, #4
 80055d2:	1a9b      	subs	r3, r3, r2
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	440b      	add	r3, r1
 80055d8:	331c      	adds	r3, #28
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80055de:	78fb      	ldrb	r3, [r7, #3]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	78fa      	ldrb	r2, [r7, #3]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055f8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055fc:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80055fe:	78fa      	ldrb	r2, [r7, #3]
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	4613      	mov	r3, r2
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	1a9b      	subs	r3, r3, r2
 8005608:	009b      	lsls	r3, r3, #2
 800560a:	440b      	add	r3, r1
 800560c:	334c      	adds	r3, #76	@ 0x4c
 800560e:	2204      	movs	r2, #4
 8005610:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005612:	e229      	b.n	8005a68 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	6879      	ldr	r1, [r7, #4]
 8005618:	4613      	mov	r3, r2
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	1a9b      	subs	r3, r3, r2
 800561e:	009b      	lsls	r3, r3, #2
 8005620:	440b      	add	r3, r1
 8005622:	334c      	adds	r3, #76	@ 0x4c
 8005624:	2202      	movs	r2, #2
 8005626:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005628:	78fa      	ldrb	r2, [r7, #3]
 800562a:	6879      	ldr	r1, [r7, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	011b      	lsls	r3, r3, #4
 8005630:	1a9b      	subs	r3, r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	440b      	add	r3, r1
 8005636:	3326      	adds	r3, #38	@ 0x26
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00b      	beq.n	8005656 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800563e:	78fa      	ldrb	r2, [r7, #3]
 8005640:	6879      	ldr	r1, [r7, #4]
 8005642:	4613      	mov	r3, r2
 8005644:	011b      	lsls	r3, r3, #4
 8005646:	1a9b      	subs	r3, r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	3326      	adds	r3, #38	@ 0x26
 800564e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005650:	2b02      	cmp	r3, #2
 8005652:	f040 8209 	bne.w	8005a68 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005656:	78fb      	ldrb	r3, [r7, #3]
 8005658:	015a      	lsls	r2, r3, #5
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	4413      	add	r3, r2
 800565e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800566c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005674:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	015a      	lsls	r2, r3, #5
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	4413      	add	r3, r2
 800567e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005682:	461a      	mov	r2, r3
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005688:	e1ee      	b.n	8005a68 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	334d      	adds	r3, #77	@ 0x4d
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b05      	cmp	r3, #5
 800569e:	f040 80c8 	bne.w	8005832 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056a2:	78fa      	ldrb	r2, [r7, #3]
 80056a4:	6879      	ldr	r1, [r7, #4]
 80056a6:	4613      	mov	r3, r2
 80056a8:	011b      	lsls	r3, r3, #4
 80056aa:	1a9b      	subs	r3, r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	440b      	add	r3, r1
 80056b0:	334d      	adds	r3, #77	@ 0x4d
 80056b2:	2202      	movs	r2, #2
 80056b4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	331b      	adds	r3, #27
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	f040 81ce 	bne.w	8005a6a <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3326      	adds	r3, #38	@ 0x26
 80056de:	781b      	ldrb	r3, [r3, #0]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d16b      	bne.n	80057bc <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80056e4:	78fa      	ldrb	r2, [r7, #3]
 80056e6:	6879      	ldr	r1, [r7, #4]
 80056e8:	4613      	mov	r3, r2
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	1a9b      	subs	r3, r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	440b      	add	r3, r1
 80056f2:	3348      	adds	r3, #72	@ 0x48
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	1c59      	adds	r1, r3, #1
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4403      	add	r3, r0
 8005704:	3348      	adds	r3, #72	@ 0x48
 8005706:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8005708:	78fa      	ldrb	r2, [r7, #3]
 800570a:	6879      	ldr	r1, [r7, #4]
 800570c:	4613      	mov	r3, r2
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	1a9b      	subs	r3, r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	440b      	add	r3, r1
 8005716:	3348      	adds	r3, #72	@ 0x48
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b02      	cmp	r3, #2
 800571c:	d943      	bls.n	80057a6 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800571e:	78fa      	ldrb	r2, [r7, #3]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	011b      	lsls	r3, r3, #4
 8005726:	1a9b      	subs	r3, r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	3348      	adds	r3, #72	@ 0x48
 800572e:	2200      	movs	r2, #0
 8005730:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005732:	78fa      	ldrb	r2, [r7, #3]
 8005734:	6879      	ldr	r1, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	011b      	lsls	r3, r3, #4
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	440b      	add	r3, r1
 8005740:	331b      	adds	r3, #27
 8005742:	2200      	movs	r2, #0
 8005744:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005746:	78fa      	ldrb	r2, [r7, #3]
 8005748:	6879      	ldr	r1, [r7, #4]
 800574a:	4613      	mov	r3, r2
 800574c:	011b      	lsls	r3, r3, #4
 800574e:	1a9b      	subs	r3, r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	440b      	add	r3, r1
 8005754:	3344      	adds	r3, #68	@ 0x44
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b02      	cmp	r3, #2
 800575a:	d809      	bhi.n	8005770 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	6879      	ldr	r1, [r7, #4]
 8005760:	4613      	mov	r3, r2
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	1a9b      	subs	r3, r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	440b      	add	r3, r1
 800576a:	331c      	adds	r3, #28
 800576c:	2201      	movs	r2, #1
 800576e:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	015a      	lsls	r2, r3, #5
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	4413      	add	r3, r2
 8005778:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	78fa      	ldrb	r2, [r7, #3]
 8005780:	0151      	lsls	r1, r2, #5
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	440a      	add	r2, r1
 8005786:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800578a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800578e:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8005790:	78fa      	ldrb	r2, [r7, #3]
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4613      	mov	r3, r2
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	1a9b      	subs	r3, r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	440b      	add	r3, r1
 800579e:	334c      	adds	r3, #76	@ 0x4c
 80057a0:	2204      	movs	r2, #4
 80057a2:	701a      	strb	r2, [r3, #0]
 80057a4:	e014      	b.n	80057d0 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057a6:	78fa      	ldrb	r2, [r7, #3]
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	4613      	mov	r3, r2
 80057ac:	011b      	lsls	r3, r3, #4
 80057ae:	1a9b      	subs	r3, r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	440b      	add	r3, r1
 80057b4:	334c      	adds	r3, #76	@ 0x4c
 80057b6:	2202      	movs	r2, #2
 80057b8:	701a      	strb	r2, [r3, #0]
 80057ba:	e009      	b.n	80057d0 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	4613      	mov	r3, r2
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	1a9b      	subs	r3, r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	334c      	adds	r3, #76	@ 0x4c
 80057cc:	2202      	movs	r2, #2
 80057ce:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057d0:	78fa      	ldrb	r2, [r7, #3]
 80057d2:	6879      	ldr	r1, [r7, #4]
 80057d4:	4613      	mov	r3, r2
 80057d6:	011b      	lsls	r3, r3, #4
 80057d8:	1a9b      	subs	r3, r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	440b      	add	r3, r1
 80057de:	3326      	adds	r3, #38	@ 0x26
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00b      	beq.n	80057fe <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80057e6:	78fa      	ldrb	r2, [r7, #3]
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	4613      	mov	r3, r2
 80057ec:	011b      	lsls	r3, r3, #4
 80057ee:	1a9b      	subs	r3, r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	3326      	adds	r3, #38	@ 0x26
 80057f6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	f040 8136 	bne.w	8005a6a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	015a      	lsls	r2, r3, #5
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	4413      	add	r3, r2
 8005806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005814:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800581c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800581e:	78fb      	ldrb	r3, [r7, #3]
 8005820:	015a      	lsls	r2, r3, #5
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	4413      	add	r3, r2
 8005826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800582a:	461a      	mov	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6013      	str	r3, [r2, #0]
 8005830:	e11b      	b.n	8005a6a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005832:	78fa      	ldrb	r2, [r7, #3]
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	1a9b      	subs	r3, r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	334d      	adds	r3, #77	@ 0x4d
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b03      	cmp	r3, #3
 8005846:	f040 8081 	bne.w	800594c <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800584a:	78fa      	ldrb	r2, [r7, #3]
 800584c:	6879      	ldr	r1, [r7, #4]
 800584e:	4613      	mov	r3, r2
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	1a9b      	subs	r3, r3, r2
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	440b      	add	r3, r1
 8005858:	334d      	adds	r3, #77	@ 0x4d
 800585a:	2202      	movs	r2, #2
 800585c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800585e:	78fa      	ldrb	r2, [r7, #3]
 8005860:	6879      	ldr	r1, [r7, #4]
 8005862:	4613      	mov	r3, r2
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	1a9b      	subs	r3, r3, r2
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	440b      	add	r3, r1
 800586c:	331b      	adds	r3, #27
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	2b01      	cmp	r3, #1
 8005872:	f040 80fa 	bne.w	8005a6a <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005876:	78fa      	ldrb	r2, [r7, #3]
 8005878:	6879      	ldr	r1, [r7, #4]
 800587a:	4613      	mov	r3, r2
 800587c:	011b      	lsls	r3, r3, #4
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	440b      	add	r3, r1
 8005884:	334c      	adds	r3, #76	@ 0x4c
 8005886:	2202      	movs	r2, #2
 8005888:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800588a:	78fb      	ldrb	r3, [r7, #3]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	4413      	add	r3, r2
 8005892:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	693a      	ldr	r2, [r7, #16]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80058a8:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80058aa:	78fb      	ldrb	r3, [r7, #3]
 80058ac:	015a      	lsls	r2, r3, #5
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	4413      	add	r3, r2
 80058b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	78fa      	ldrb	r2, [r7, #3]
 80058ba:	0151      	lsls	r1, r2, #5
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	440a      	add	r2, r1
 80058c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80058c8:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058e4:	f023 0320 	bic.w	r3, r3, #32
 80058e8:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80058ea:	78fa      	ldrb	r2, [r7, #3]
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	011b      	lsls	r3, r3, #4
 80058f2:	1a9b      	subs	r3, r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	3326      	adds	r3, #38	@ 0x26
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00b      	beq.n	8005918 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005900:	78fa      	ldrb	r2, [r7, #3]
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	4613      	mov	r3, r2
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	1a9b      	subs	r3, r3, r2
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	440b      	add	r3, r1
 800590e:	3326      	adds	r3, #38	@ 0x26
 8005910:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005912:	2b02      	cmp	r3, #2
 8005914:	f040 80a9 	bne.w	8005a6a <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	4413      	add	r3, r2
 8005920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800592e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005936:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	015a      	lsls	r2, r3, #5
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	4413      	add	r3, r2
 8005940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005944:	461a      	mov	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6013      	str	r3, [r2, #0]
 800594a:	e08e      	b.n	8005a6a <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	334d      	adds	r3, #77	@ 0x4d
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b04      	cmp	r3, #4
 8005960:	d143      	bne.n	80059ea <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005962:	78fa      	ldrb	r2, [r7, #3]
 8005964:	6879      	ldr	r1, [r7, #4]
 8005966:	4613      	mov	r3, r2
 8005968:	011b      	lsls	r3, r3, #4
 800596a:	1a9b      	subs	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	440b      	add	r3, r1
 8005970:	334d      	adds	r3, #77	@ 0x4d
 8005972:	2202      	movs	r2, #2
 8005974:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005976:	78fa      	ldrb	r2, [r7, #3]
 8005978:	6879      	ldr	r1, [r7, #4]
 800597a:	4613      	mov	r3, r2
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	440b      	add	r3, r1
 8005984:	334c      	adds	r3, #76	@ 0x4c
 8005986:	2202      	movs	r2, #2
 8005988:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	011b      	lsls	r3, r3, #4
 8005992:	1a9b      	subs	r3, r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3326      	adds	r3, #38	@ 0x26
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00a      	beq.n	80059b6 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80059a0:	78fa      	ldrb	r2, [r7, #3]
 80059a2:	6879      	ldr	r1, [r7, #4]
 80059a4:	4613      	mov	r3, r2
 80059a6:	011b      	lsls	r3, r3, #4
 80059a8:	1a9b      	subs	r3, r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	440b      	add	r3, r1
 80059ae:	3326      	adds	r3, #38	@ 0x26
 80059b0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d159      	bne.n	8005a6a <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80059b6:	78fb      	ldrb	r3, [r7, #3]
 80059b8:	015a      	lsls	r2, r3, #5
 80059ba:	693b      	ldr	r3, [r7, #16]
 80059bc:	4413      	add	r3, r2
 80059be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80059cc:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80059d4:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80059d6:	78fb      	ldrb	r3, [r7, #3]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059e2:	461a      	mov	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6013      	str	r3, [r2, #0]
 80059e8:	e03f      	b.n	8005a6a <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80059ea:	78fa      	ldrb	r2, [r7, #3]
 80059ec:	6879      	ldr	r1, [r7, #4]
 80059ee:	4613      	mov	r3, r2
 80059f0:	011b      	lsls	r3, r3, #4
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	440b      	add	r3, r1
 80059f8:	334d      	adds	r3, #77	@ 0x4d
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b08      	cmp	r3, #8
 80059fe:	d126      	bne.n	8005a4e <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a00:	78fa      	ldrb	r2, [r7, #3]
 8005a02:	6879      	ldr	r1, [r7, #4]
 8005a04:	4613      	mov	r3, r2
 8005a06:	011b      	lsls	r3, r3, #4
 8005a08:	1a9b      	subs	r3, r3, r2
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	440b      	add	r3, r1
 8005a0e:	334d      	adds	r3, #77	@ 0x4d
 8005a10:	2202      	movs	r2, #2
 8005a12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005a14:	78fa      	ldrb	r2, [r7, #3]
 8005a16:	6879      	ldr	r1, [r7, #4]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	1a9b      	subs	r3, r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	440b      	add	r3, r1
 8005a22:	3344      	adds	r3, #68	@ 0x44
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	1c59      	adds	r1, r3, #1
 8005a28:	6878      	ldr	r0, [r7, #4]
 8005a2a:	4613      	mov	r3, r2
 8005a2c:	011b      	lsls	r3, r3, #4
 8005a2e:	1a9b      	subs	r3, r3, r2
 8005a30:	009b      	lsls	r3, r3, #2
 8005a32:	4403      	add	r3, r0
 8005a34:	3344      	adds	r3, #68	@ 0x44
 8005a36:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005a38:	78fa      	ldrb	r2, [r7, #3]
 8005a3a:	6879      	ldr	r1, [r7, #4]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	011b      	lsls	r3, r3, #4
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	334c      	adds	r3, #76	@ 0x4c
 8005a48:	2204      	movs	r2, #4
 8005a4a:	701a      	strb	r2, [r3, #0]
 8005a4c:	e00d      	b.n	8005a6a <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005a4e:	78fa      	ldrb	r2, [r7, #3]
 8005a50:	6879      	ldr	r1, [r7, #4]
 8005a52:	4613      	mov	r3, r2
 8005a54:	011b      	lsls	r3, r3, #4
 8005a56:	1a9b      	subs	r3, r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	440b      	add	r3, r1
 8005a5c:	334d      	adds	r3, #77	@ 0x4d
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	f000 8100 	beq.w	8005c66 <HCD_HC_IN_IRQHandler+0xcca>
 8005a66:	e000      	b.n	8005a6a <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005a68:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005a6a:	78fa      	ldrb	r2, [r7, #3]
 8005a6c:	6879      	ldr	r1, [r7, #4]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	1a9b      	subs	r3, r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	440b      	add	r3, r1
 8005a78:	334c      	adds	r3, #76	@ 0x4c
 8005a7a:	781a      	ldrb	r2, [r3, #0]
 8005a7c:	78fb      	ldrb	r3, [r7, #3]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f005 ffc7 	bl	800ba14 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005a86:	e0ef      	b.n	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	4611      	mov	r1, r2
 8005a90:	4618      	mov	r0, r3
 8005a92:	f004 fc32 	bl	800a2fa <USB_ReadChInterrupts>
 8005a96:	4603      	mov	r3, r0
 8005a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a9c:	2b40      	cmp	r3, #64	@ 0x40
 8005a9e:	d12f      	bne.n	8005b00 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005aa0:	78fb      	ldrb	r3, [r7, #3]
 8005aa2:	015a      	lsls	r2, r3, #5
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	4413      	add	r3, r2
 8005aa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005aac:	461a      	mov	r2, r3
 8005aae:	2340      	movs	r3, #64	@ 0x40
 8005ab0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005ab2:	78fa      	ldrb	r2, [r7, #3]
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	011b      	lsls	r3, r3, #4
 8005aba:	1a9b      	subs	r3, r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	334d      	adds	r3, #77	@ 0x4d
 8005ac2:	2205      	movs	r2, #5
 8005ac4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005ac6:	78fa      	ldrb	r2, [r7, #3]
 8005ac8:	6879      	ldr	r1, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	011b      	lsls	r3, r3, #4
 8005ace:	1a9b      	subs	r3, r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	331a      	adds	r3, #26
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d109      	bne.n	8005af0 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005adc:	78fa      	ldrb	r2, [r7, #3]
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	011b      	lsls	r3, r3, #4
 8005ae4:	1a9b      	subs	r3, r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	440b      	add	r3, r1
 8005aea:	3344      	adds	r3, #68	@ 0x44
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	78fa      	ldrb	r2, [r7, #3]
 8005af6:	4611      	mov	r1, r2
 8005af8:	4618      	mov	r0, r3
 8005afa:	f004 fc7b 	bl	800a3f4 <USB_HC_Halt>
 8005afe:	e0b3      	b.n	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	4611      	mov	r1, r2
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f004 fbf6 	bl	800a2fa <USB_ReadChInterrupts>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f003 0310 	and.w	r3, r3, #16
 8005b14:	2b10      	cmp	r3, #16
 8005b16:	f040 80a7 	bne.w	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8005b1a:	78fa      	ldrb	r2, [r7, #3]
 8005b1c:	6879      	ldr	r1, [r7, #4]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	1a9b      	subs	r3, r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	440b      	add	r3, r1
 8005b28:	3326      	adds	r3, #38	@ 0x26
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d11b      	bne.n	8005b68 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005b30:	78fa      	ldrb	r2, [r7, #3]
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	4613      	mov	r3, r2
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	1a9b      	subs	r3, r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	3344      	adds	r3, #68	@ 0x44
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005b44:	78fa      	ldrb	r2, [r7, #3]
 8005b46:	6879      	ldr	r1, [r7, #4]
 8005b48:	4613      	mov	r3, r2
 8005b4a:	011b      	lsls	r3, r3, #4
 8005b4c:	1a9b      	subs	r3, r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	440b      	add	r3, r1
 8005b52:	334d      	adds	r3, #77	@ 0x4d
 8005b54:	2204      	movs	r2, #4
 8005b56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	78fa      	ldrb	r2, [r7, #3]
 8005b5e:	4611      	mov	r1, r2
 8005b60:	4618      	mov	r0, r3
 8005b62:	f004 fc47 	bl	800a3f4 <USB_HC_Halt>
 8005b66:	e03f      	b.n	8005be8 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	3326      	adds	r3, #38	@ 0x26
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d00a      	beq.n	8005b94 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005b7e:	78fa      	ldrb	r2, [r7, #3]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	3326      	adds	r3, #38	@ 0x26
 8005b8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d129      	bne.n	8005be8 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005b94:	78fa      	ldrb	r2, [r7, #3]
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	011b      	lsls	r3, r3, #4
 8005b9c:	1a9b      	subs	r3, r3, r2
 8005b9e:	009b      	lsls	r3, r3, #2
 8005ba0:	440b      	add	r3, r1
 8005ba2:	3344      	adds	r3, #68	@ 0x44
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	799b      	ldrb	r3, [r3, #6]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d00a      	beq.n	8005bc6 <HCD_HC_IN_IRQHandler+0xc2a>
 8005bb0:	78fa      	ldrb	r2, [r7, #3]
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	011b      	lsls	r3, r3, #4
 8005bb8:	1a9b      	subs	r3, r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	331b      	adds	r3, #27
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d110      	bne.n	8005be8 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005bc6:	78fa      	ldrb	r2, [r7, #3]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	011b      	lsls	r3, r3, #4
 8005bce:	1a9b      	subs	r3, r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	334d      	adds	r3, #77	@ 0x4d
 8005bd6:	2204      	movs	r2, #4
 8005bd8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	78fa      	ldrb	r2, [r7, #3]
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f004 fc06 	bl	800a3f4 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8005be8:	78fa      	ldrb	r2, [r7, #3]
 8005bea:	6879      	ldr	r1, [r7, #4]
 8005bec:	4613      	mov	r3, r2
 8005bee:	011b      	lsls	r3, r3, #4
 8005bf0:	1a9b      	subs	r3, r3, r2
 8005bf2:	009b      	lsls	r3, r3, #2
 8005bf4:	440b      	add	r3, r1
 8005bf6:	331b      	adds	r3, #27
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d129      	bne.n	8005c52 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005bfe:	78fa      	ldrb	r2, [r7, #3]
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	4613      	mov	r3, r2
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	1a9b      	subs	r3, r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	331b      	adds	r3, #27
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	015a      	lsls	r2, r3, #5
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	4413      	add	r3, r2
 8005c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	78fa      	ldrb	r2, [r7, #3]
 8005c22:	0151      	lsls	r1, r2, #5
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	440a      	add	r2, r1
 8005c28:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c30:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005c32:	78fb      	ldrb	r3, [r7, #3]
 8005c34:	015a      	lsls	r2, r3, #5
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4413      	add	r3, r2
 8005c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	78fa      	ldrb	r2, [r7, #3]
 8005c42:	0151      	lsls	r1, r2, #5
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	440a      	add	r2, r1
 8005c48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c4c:	f043 0320 	orr.w	r3, r3, #32
 8005c50:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005c52:	78fb      	ldrb	r3, [r7, #3]
 8005c54:	015a      	lsls	r2, r3, #5
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	4413      	add	r3, r2
 8005c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5e:	461a      	mov	r2, r3
 8005c60:	2310      	movs	r3, #16
 8005c62:	6093      	str	r3, [r2, #8]
 8005c64:	e000      	b.n	8005c68 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005c66:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b086      	sub	sp, #24
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	460b      	mov	r3, r1
 8005c78:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	78fa      	ldrb	r2, [r7, #3]
 8005c8a:	4611      	mov	r1, r2
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f004 fb34 	bl	800a2fa <USB_ReadChInterrupts>
 8005c92:	4603      	mov	r3, r0
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b04      	cmp	r3, #4
 8005c9a:	d11b      	bne.n	8005cd4 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8005c9c:	78fb      	ldrb	r3, [r7, #3]
 8005c9e:	015a      	lsls	r2, r3, #5
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	4413      	add	r3, r2
 8005ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2304      	movs	r3, #4
 8005cac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005cae:	78fa      	ldrb	r2, [r7, #3]
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	1a9b      	subs	r3, r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	440b      	add	r3, r1
 8005cbc:	334d      	adds	r3, #77	@ 0x4d
 8005cbe:	2207      	movs	r2, #7
 8005cc0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	78fa      	ldrb	r2, [r7, #3]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f004 fb92 	bl	800a3f4 <USB_HC_Halt>
 8005cd0:	f000 bc89 	b.w	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	78fa      	ldrb	r2, [r7, #3]
 8005cda:	4611      	mov	r1, r2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f004 fb0c 	bl	800a2fa <USB_ReadChInterrupts>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	f040 8082 	bne.w	8005df2 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	015a      	lsls	r2, r3, #5
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8005d00:	78fa      	ldrb	r2, [r7, #3]
 8005d02:	6879      	ldr	r1, [r7, #4]
 8005d04:	4613      	mov	r3, r2
 8005d06:	011b      	lsls	r3, r3, #4
 8005d08:	1a9b      	subs	r3, r3, r2
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	440b      	add	r3, r1
 8005d0e:	3319      	adds	r3, #25
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d124      	bne.n	8005d60 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	6879      	ldr	r1, [r7, #4]
 8005d1a:	4613      	mov	r3, r2
 8005d1c:	011b      	lsls	r3, r3, #4
 8005d1e:	1a9b      	subs	r3, r3, r2
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	440b      	add	r3, r1
 8005d24:	3319      	adds	r3, #25
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	6879      	ldr	r1, [r7, #4]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	440b      	add	r3, r1
 8005d38:	334c      	adds	r3, #76	@ 0x4c
 8005d3a:	2202      	movs	r2, #2
 8005d3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005d3e:	78fa      	ldrb	r2, [r7, #3]
 8005d40:	6879      	ldr	r1, [r7, #4]
 8005d42:	4613      	mov	r3, r2
 8005d44:	011b      	lsls	r3, r3, #4
 8005d46:	1a9b      	subs	r3, r3, r2
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	440b      	add	r3, r1
 8005d4c:	334d      	adds	r3, #77	@ 0x4d
 8005d4e:	2203      	movs	r2, #3
 8005d50:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	4611      	mov	r1, r2
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f004 fb4a 	bl	800a3f4 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005d60:	78fa      	ldrb	r2, [r7, #3]
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	4613      	mov	r3, r2
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	440b      	add	r3, r1
 8005d6e:	331a      	adds	r3, #26
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	f040 8437 	bne.w	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
 8005d78:	78fa      	ldrb	r2, [r7, #3]
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	440b      	add	r3, r1
 8005d86:	331b      	adds	r3, #27
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f040 842b 	bne.w	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005d90:	78fa      	ldrb	r2, [r7, #3]
 8005d92:	6879      	ldr	r1, [r7, #4]
 8005d94:	4613      	mov	r3, r2
 8005d96:	011b      	lsls	r3, r3, #4
 8005d98:	1a9b      	subs	r3, r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	440b      	add	r3, r1
 8005d9e:	3326      	adds	r3, #38	@ 0x26
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d009      	beq.n	8005dba <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005da6:	78fa      	ldrb	r2, [r7, #3]
 8005da8:	6879      	ldr	r1, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	011b      	lsls	r3, r3, #4
 8005dae:	1a9b      	subs	r3, r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	440b      	add	r3, r1
 8005db4:	331b      	adds	r3, #27
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005dba:	78fa      	ldrb	r2, [r7, #3]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	011b      	lsls	r3, r3, #4
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	440b      	add	r3, r1
 8005dc8:	334d      	adds	r3, #77	@ 0x4d
 8005dca:	2203      	movs	r2, #3
 8005dcc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f004 fb0c 	bl	800a3f4 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005ddc:	78fa      	ldrb	r2, [r7, #3]
 8005dde:	6879      	ldr	r1, [r7, #4]
 8005de0:	4613      	mov	r3, r2
 8005de2:	011b      	lsls	r3, r3, #4
 8005de4:	1a9b      	subs	r3, r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	440b      	add	r3, r1
 8005dea:	3344      	adds	r3, #68	@ 0x44
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e3f9      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	78fa      	ldrb	r2, [r7, #3]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f004 fa7d 	bl	800a2fa <USB_ReadChInterrupts>
 8005e00:	4603      	mov	r3, r0
 8005e02:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005e0a:	d111      	bne.n	8005e30 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005e0c:	78fb      	ldrb	r3, [r7, #3]
 8005e0e:	015a      	lsls	r2, r3, #5
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e18:	461a      	mov	r2, r3
 8005e1a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005e1e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	4611      	mov	r1, r2
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f004 fae3 	bl	800a3f4 <USB_HC_Halt>
 8005e2e:	e3da      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	78fa      	ldrb	r2, [r7, #3]
 8005e36:	4611      	mov	r1, r2
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f004 fa5e 	bl	800a2fa <USB_ReadChInterrupts>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	f003 0301 	and.w	r3, r3, #1
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d168      	bne.n	8005f1a <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005e48:	78fa      	ldrb	r2, [r7, #3]
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	3344      	adds	r3, #68	@ 0x44
 8005e58:	2200      	movs	r2, #0
 8005e5a:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	78fa      	ldrb	r2, [r7, #3]
 8005e62:	4611      	mov	r1, r2
 8005e64:	4618      	mov	r0, r3
 8005e66:	f004 fa48 	bl	800a2fa <USB_ReadChInterrupts>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e70:	2b40      	cmp	r3, #64	@ 0x40
 8005e72:	d112      	bne.n	8005e9a <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005e74:	78fa      	ldrb	r2, [r7, #3]
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	1a9b      	subs	r3, r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	440b      	add	r3, r1
 8005e82:	3319      	adds	r3, #25
 8005e84:	2201      	movs	r2, #1
 8005e86:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005e88:	78fb      	ldrb	r3, [r7, #3]
 8005e8a:	015a      	lsls	r2, r3, #5
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	4413      	add	r3, r2
 8005e90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e94:	461a      	mov	r2, r3
 8005e96:	2340      	movs	r3, #64	@ 0x40
 8005e98:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005e9a:	78fa      	ldrb	r2, [r7, #3]
 8005e9c:	6879      	ldr	r1, [r7, #4]
 8005e9e:	4613      	mov	r3, r2
 8005ea0:	011b      	lsls	r3, r3, #4
 8005ea2:	1a9b      	subs	r3, r3, r2
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	331b      	adds	r3, #27
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d019      	beq.n	8005ee4 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005eb0:	78fa      	ldrb	r2, [r7, #3]
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	1a9b      	subs	r3, r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	331b      	adds	r3, #27
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005ec4:	78fb      	ldrb	r3, [r7, #3]
 8005ec6:	015a      	lsls	r2, r3, #5
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	4413      	add	r3, r2
 8005ecc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	78fa      	ldrb	r2, [r7, #3]
 8005ed4:	0151      	lsls	r1, r2, #5
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	440a      	add	r2, r1
 8005eda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ee2:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005ee4:	78fb      	ldrb	r3, [r7, #3]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ef0:	461a      	mov	r2, r3
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	6879      	ldr	r1, [r7, #4]
 8005efa:	4613      	mov	r3, r2
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	440b      	add	r3, r1
 8005f04:	334d      	adds	r3, #77	@ 0x4d
 8005f06:	2201      	movs	r2, #1
 8005f08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	78fa      	ldrb	r2, [r7, #3]
 8005f10:	4611      	mov	r1, r2
 8005f12:	4618      	mov	r0, r3
 8005f14:	f004 fa6e 	bl	800a3f4 <USB_HC_Halt>
 8005f18:	e365      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	78fa      	ldrb	r2, [r7, #3]
 8005f20:	4611      	mov	r1, r2
 8005f22:	4618      	mov	r0, r3
 8005f24:	f004 f9e9 	bl	800a2fa <USB_ReadChInterrupts>
 8005f28:	4603      	mov	r3, r0
 8005f2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f2e:	2b40      	cmp	r3, #64	@ 0x40
 8005f30:	d139      	bne.n	8005fa6 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005f32:	78fa      	ldrb	r2, [r7, #3]
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	334d      	adds	r3, #77	@ 0x4d
 8005f42:	2205      	movs	r2, #5
 8005f44:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005f46:	78fa      	ldrb	r2, [r7, #3]
 8005f48:	6879      	ldr	r1, [r7, #4]
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	1a9b      	subs	r3, r3, r2
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	440b      	add	r3, r1
 8005f54:	331a      	adds	r3, #26
 8005f56:	781b      	ldrb	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005f5c:	78fa      	ldrb	r2, [r7, #3]
 8005f5e:	6879      	ldr	r1, [r7, #4]
 8005f60:	4613      	mov	r3, r2
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	1a9b      	subs	r3, r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	3319      	adds	r3, #25
 8005f6c:	2201      	movs	r2, #1
 8005f6e:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005f70:	78fa      	ldrb	r2, [r7, #3]
 8005f72:	6879      	ldr	r1, [r7, #4]
 8005f74:	4613      	mov	r3, r2
 8005f76:	011b      	lsls	r3, r3, #4
 8005f78:	1a9b      	subs	r3, r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	440b      	add	r3, r1
 8005f7e:	3344      	adds	r3, #68	@ 0x44
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	78fa      	ldrb	r2, [r7, #3]
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f004 fa31 	bl	800a3f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005f92:	78fb      	ldrb	r3, [r7, #3]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	2340      	movs	r3, #64	@ 0x40
 8005fa2:	6093      	str	r3, [r2, #8]
 8005fa4:	e31f      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	4611      	mov	r1, r2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f004 f9a3 	bl	800a2fa <USB_ReadChInterrupts>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	f003 0308 	and.w	r3, r3, #8
 8005fba:	2b08      	cmp	r3, #8
 8005fbc:	d11a      	bne.n	8005ff4 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005fbe:	78fb      	ldrb	r3, [r7, #3]
 8005fc0:	015a      	lsls	r2, r3, #5
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fca:	461a      	mov	r2, r3
 8005fcc:	2308      	movs	r3, #8
 8005fce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005fd0:	78fa      	ldrb	r2, [r7, #3]
 8005fd2:	6879      	ldr	r1, [r7, #4]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	1a9b      	subs	r3, r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	440b      	add	r3, r1
 8005fde:	334d      	adds	r3, #77	@ 0x4d
 8005fe0:	2206      	movs	r2, #6
 8005fe2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	78fa      	ldrb	r2, [r7, #3]
 8005fea:	4611      	mov	r1, r2
 8005fec:	4618      	mov	r0, r3
 8005fee:	f004 fa01 	bl	800a3f4 <USB_HC_Halt>
 8005ff2:	e2f8      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	78fa      	ldrb	r2, [r7, #3]
 8005ffa:	4611      	mov	r1, r2
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f004 f97c 	bl	800a2fa <USB_ReadChInterrupts>
 8006002:	4603      	mov	r3, r0
 8006004:	f003 0310 	and.w	r3, r3, #16
 8006008:	2b10      	cmp	r3, #16
 800600a:	d144      	bne.n	8006096 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800600c:	78fa      	ldrb	r2, [r7, #3]
 800600e:	6879      	ldr	r1, [r7, #4]
 8006010:	4613      	mov	r3, r2
 8006012:	011b      	lsls	r3, r3, #4
 8006014:	1a9b      	subs	r3, r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	3344      	adds	r3, #68	@ 0x44
 800601c:	2200      	movs	r2, #0
 800601e:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8006020:	78fa      	ldrb	r2, [r7, #3]
 8006022:	6879      	ldr	r1, [r7, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	1a9b      	subs	r3, r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	440b      	add	r3, r1
 800602e:	334d      	adds	r3, #77	@ 0x4d
 8006030:	2204      	movs	r2, #4
 8006032:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8006034:	78fa      	ldrb	r2, [r7, #3]
 8006036:	6879      	ldr	r1, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	011b      	lsls	r3, r3, #4
 800603c:	1a9b      	subs	r3, r3, r2
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	440b      	add	r3, r1
 8006042:	3319      	adds	r3, #25
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d114      	bne.n	8006074 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	6879      	ldr	r1, [r7, #4]
 800604e:	4613      	mov	r3, r2
 8006050:	011b      	lsls	r3, r3, #4
 8006052:	1a9b      	subs	r3, r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	440b      	add	r3, r1
 8006058:	3318      	adds	r3, #24
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d109      	bne.n	8006074 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8006060:	78fa      	ldrb	r2, [r7, #3]
 8006062:	6879      	ldr	r1, [r7, #4]
 8006064:	4613      	mov	r3, r2
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	1a9b      	subs	r3, r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	440b      	add	r3, r1
 800606e:	3319      	adds	r3, #25
 8006070:	2201      	movs	r2, #1
 8006072:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	78fa      	ldrb	r2, [r7, #3]
 800607a:	4611      	mov	r1, r2
 800607c:	4618      	mov	r0, r3
 800607e:	f004 f9b9 	bl	800a3f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	4413      	add	r3, r2
 800608a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800608e:	461a      	mov	r2, r3
 8006090:	2310      	movs	r3, #16
 8006092:	6093      	str	r3, [r2, #8]
 8006094:	e2a7      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	78fa      	ldrb	r2, [r7, #3]
 800609c:	4611      	mov	r1, r2
 800609e:	4618      	mov	r0, r3
 80060a0:	f004 f92b 	bl	800a2fa <USB_ReadChInterrupts>
 80060a4:	4603      	mov	r3, r0
 80060a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060aa:	2b80      	cmp	r3, #128	@ 0x80
 80060ac:	f040 8083 	bne.w	80061b6 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	799b      	ldrb	r3, [r3, #6]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d111      	bne.n	80060dc <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	334d      	adds	r3, #77	@ 0x4d
 80060c8:	2207      	movs	r2, #7
 80060ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	78fa      	ldrb	r2, [r7, #3]
 80060d2:	4611      	mov	r1, r2
 80060d4:	4618      	mov	r0, r3
 80060d6:	f004 f98d 	bl	800a3f4 <USB_HC_Halt>
 80060da:	e062      	b.n	80061a2 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4613      	mov	r3, r2
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	1a9b      	subs	r3, r3, r2
 80060e6:	009b      	lsls	r3, r3, #2
 80060e8:	440b      	add	r3, r1
 80060ea:	3344      	adds	r3, #68	@ 0x44
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	1c59      	adds	r1, r3, #1
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	4403      	add	r3, r0
 80060fc:	3344      	adds	r3, #68	@ 0x44
 80060fe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	6879      	ldr	r1, [r7, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	1a9b      	subs	r3, r3, r2
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	3344      	adds	r3, #68	@ 0x44
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	2b02      	cmp	r3, #2
 8006114:	d922      	bls.n	800615c <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006116:	78fa      	ldrb	r2, [r7, #3]
 8006118:	6879      	ldr	r1, [r7, #4]
 800611a:	4613      	mov	r3, r2
 800611c:	011b      	lsls	r3, r3, #4
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	440b      	add	r3, r1
 8006124:	3344      	adds	r3, #68	@ 0x44
 8006126:	2200      	movs	r2, #0
 8006128:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800612a:	78fa      	ldrb	r2, [r7, #3]
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	4613      	mov	r3, r2
 8006130:	011b      	lsls	r3, r3, #4
 8006132:	1a9b      	subs	r3, r3, r2
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	440b      	add	r3, r1
 8006138:	334c      	adds	r3, #76	@ 0x4c
 800613a:	2204      	movs	r2, #4
 800613c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	334c      	adds	r3, #76	@ 0x4c
 800614e:	781a      	ldrb	r2, [r3, #0]
 8006150:	78fb      	ldrb	r3, [r7, #3]
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f005 fc5d 	bl	800ba14 <HAL_HCD_HC_NotifyURBChange_Callback>
 800615a:	e022      	b.n	80061a2 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800615c:	78fa      	ldrb	r2, [r7, #3]
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	011b      	lsls	r3, r3, #4
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	334c      	adds	r3, #76	@ 0x4c
 800616c:	2202      	movs	r2, #2
 800616e:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8006170:	78fb      	ldrb	r3, [r7, #3]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	4413      	add	r3, r2
 8006178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006186:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800618e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8006190:	78fb      	ldrb	r3, [r7, #3]
 8006192:	015a      	lsls	r2, r3, #5
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4413      	add	r3, r2
 8006198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800619c:	461a      	mov	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80061a2:	78fb      	ldrb	r3, [r7, #3]
 80061a4:	015a      	lsls	r2, r3, #5
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	4413      	add	r3, r2
 80061aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061ae:	461a      	mov	r2, r3
 80061b0:	2380      	movs	r3, #128	@ 0x80
 80061b2:	6093      	str	r3, [r2, #8]
 80061b4:	e217      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	4611      	mov	r1, r2
 80061be:	4618      	mov	r0, r3
 80061c0:	f004 f89b 	bl	800a2fa <USB_ReadChInterrupts>
 80061c4:	4603      	mov	r3, r0
 80061c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80061ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061ce:	d11b      	bne.n	8006208 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	4613      	mov	r3, r2
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	334d      	adds	r3, #77	@ 0x4d
 80061e0:	2209      	movs	r2, #9
 80061e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	78fa      	ldrb	r2, [r7, #3]
 80061ea:	4611      	mov	r1, r2
 80061ec:	4618      	mov	r0, r3
 80061ee:	f004 f901 	bl	800a3f4 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80061f2:	78fb      	ldrb	r3, [r7, #3]
 80061f4:	015a      	lsls	r2, r3, #5
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061fe:	461a      	mov	r2, r3
 8006200:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006204:	6093      	str	r3, [r2, #8]
 8006206:	e1ee      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	4611      	mov	r1, r2
 8006210:	4618      	mov	r0, r3
 8006212:	f004 f872 	bl	800a2fa <USB_ReadChInterrupts>
 8006216:	4603      	mov	r3, r0
 8006218:	f003 0302 	and.w	r3, r3, #2
 800621c:	2b02      	cmp	r3, #2
 800621e:	f040 81df 	bne.w	80065e0 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	015a      	lsls	r2, r3, #5
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	4413      	add	r3, r2
 800622a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800622e:	461a      	mov	r2, r3
 8006230:	2302      	movs	r3, #2
 8006232:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006234:	78fa      	ldrb	r2, [r7, #3]
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	1a9b      	subs	r3, r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	334d      	adds	r3, #77	@ 0x4d
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b01      	cmp	r3, #1
 8006248:	f040 8093 	bne.w	8006372 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800624c:	78fa      	ldrb	r2, [r7, #3]
 800624e:	6879      	ldr	r1, [r7, #4]
 8006250:	4613      	mov	r3, r2
 8006252:	011b      	lsls	r3, r3, #4
 8006254:	1a9b      	subs	r3, r3, r2
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	440b      	add	r3, r1
 800625a:	334d      	adds	r3, #77	@ 0x4d
 800625c:	2202      	movs	r2, #2
 800625e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006260:	78fa      	ldrb	r2, [r7, #3]
 8006262:	6879      	ldr	r1, [r7, #4]
 8006264:	4613      	mov	r3, r2
 8006266:	011b      	lsls	r3, r3, #4
 8006268:	1a9b      	subs	r3, r3, r2
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	440b      	add	r3, r1
 800626e:	334c      	adds	r3, #76	@ 0x4c
 8006270:	2201      	movs	r2, #1
 8006272:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8006274:	78fa      	ldrb	r2, [r7, #3]
 8006276:	6879      	ldr	r1, [r7, #4]
 8006278:	4613      	mov	r3, r2
 800627a:	011b      	lsls	r3, r3, #4
 800627c:	1a9b      	subs	r3, r3, r2
 800627e:	009b      	lsls	r3, r3, #2
 8006280:	440b      	add	r3, r1
 8006282:	3326      	adds	r3, #38	@ 0x26
 8006284:	781b      	ldrb	r3, [r3, #0]
 8006286:	2b02      	cmp	r3, #2
 8006288:	d00b      	beq.n	80062a2 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800628a:	78fa      	ldrb	r2, [r7, #3]
 800628c:	6879      	ldr	r1, [r7, #4]
 800628e:	4613      	mov	r3, r2
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	1a9b      	subs	r3, r3, r2
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	440b      	add	r3, r1
 8006298:	3326      	adds	r3, #38	@ 0x26
 800629a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800629c:	2b03      	cmp	r3, #3
 800629e:	f040 8190 	bne.w	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	799b      	ldrb	r3, [r3, #6]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d115      	bne.n	80062d6 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80062aa:	78fa      	ldrb	r2, [r7, #3]
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4613      	mov	r3, r2
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	1a9b      	subs	r3, r3, r2
 80062b4:	009b      	lsls	r3, r3, #2
 80062b6:	440b      	add	r3, r1
 80062b8:	333d      	adds	r3, #61	@ 0x3d
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	f083 0301 	eor.w	r3, r3, #1
 80062c2:	b2d8      	uxtb	r0, r3
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	333d      	adds	r3, #61	@ 0x3d
 80062d2:	4602      	mov	r2, r0
 80062d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	799b      	ldrb	r3, [r3, #6]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	f040 8171 	bne.w	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	4613      	mov	r3, r2
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	1a9b      	subs	r3, r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	440b      	add	r3, r1
 80062ee:	3334      	adds	r3, #52	@ 0x34
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	f000 8165 	beq.w	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80062f8:	78fa      	ldrb	r2, [r7, #3]
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	4613      	mov	r3, r2
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	1a9b      	subs	r3, r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	440b      	add	r3, r1
 8006306:	3334      	adds	r3, #52	@ 0x34
 8006308:	6819      	ldr	r1, [r3, #0]
 800630a:	78fa      	ldrb	r2, [r7, #3]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4403      	add	r3, r0
 8006318:	3328      	adds	r3, #40	@ 0x28
 800631a:	881b      	ldrh	r3, [r3, #0]
 800631c:	440b      	add	r3, r1
 800631e:	1e59      	subs	r1, r3, #1
 8006320:	78fa      	ldrb	r2, [r7, #3]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	4613      	mov	r3, r2
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4403      	add	r3, r0
 800632e:	3328      	adds	r3, #40	@ 0x28
 8006330:	881b      	ldrh	r3, [r3, #0]
 8006332:	fbb1 f3f3 	udiv	r3, r1, r3
 8006336:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	f003 0301 	and.w	r3, r3, #1
 800633e:	2b00      	cmp	r3, #0
 8006340:	f000 813f 	beq.w	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	333d      	adds	r3, #61	@ 0x3d
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	78fa      	ldrb	r2, [r7, #3]
 8006358:	f083 0301 	eor.w	r3, r3, #1
 800635c:	b2d8      	uxtb	r0, r3
 800635e:	6879      	ldr	r1, [r7, #4]
 8006360:	4613      	mov	r3, r2
 8006362:	011b      	lsls	r3, r3, #4
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	440b      	add	r3, r1
 800636a:	333d      	adds	r3, #61	@ 0x3d
 800636c:	4602      	mov	r2, r0
 800636e:	701a      	strb	r2, [r3, #0]
 8006370:	e127      	b.n	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006372:	78fa      	ldrb	r2, [r7, #3]
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	1a9b      	subs	r3, r3, r2
 800637c:	009b      	lsls	r3, r3, #2
 800637e:	440b      	add	r3, r1
 8006380:	334d      	adds	r3, #77	@ 0x4d
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b03      	cmp	r3, #3
 8006386:	d120      	bne.n	80063ca <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	6879      	ldr	r1, [r7, #4]
 800638c:	4613      	mov	r3, r2
 800638e:	011b      	lsls	r3, r3, #4
 8006390:	1a9b      	subs	r3, r3, r2
 8006392:	009b      	lsls	r3, r3, #2
 8006394:	440b      	add	r3, r1
 8006396:	334d      	adds	r3, #77	@ 0x4d
 8006398:	2202      	movs	r2, #2
 800639a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800639c:	78fa      	ldrb	r2, [r7, #3]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	1a9b      	subs	r3, r3, r2
 80063a6:	009b      	lsls	r3, r3, #2
 80063a8:	440b      	add	r3, r1
 80063aa:	331b      	adds	r3, #27
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	f040 8107 	bne.w	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063b4:	78fa      	ldrb	r2, [r7, #3]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	334c      	adds	r3, #76	@ 0x4c
 80063c4:	2202      	movs	r2, #2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	e0fb      	b.n	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80063ca:	78fa      	ldrb	r2, [r7, #3]
 80063cc:	6879      	ldr	r1, [r7, #4]
 80063ce:	4613      	mov	r3, r2
 80063d0:	011b      	lsls	r3, r3, #4
 80063d2:	1a9b      	subs	r3, r3, r2
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	440b      	add	r3, r1
 80063d8:	334d      	adds	r3, #77	@ 0x4d
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d13a      	bne.n	8006456 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80063e0:	78fa      	ldrb	r2, [r7, #3]
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	1a9b      	subs	r3, r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	334d      	adds	r3, #77	@ 0x4d
 80063f0:	2202      	movs	r2, #2
 80063f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	011b      	lsls	r3, r3, #4
 80063fc:	1a9b      	subs	r3, r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	334c      	adds	r3, #76	@ 0x4c
 8006404:	2202      	movs	r2, #2
 8006406:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006408:	78fa      	ldrb	r2, [r7, #3]
 800640a:	6879      	ldr	r1, [r7, #4]
 800640c:	4613      	mov	r3, r2
 800640e:	011b      	lsls	r3, r3, #4
 8006410:	1a9b      	subs	r3, r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	440b      	add	r3, r1
 8006416:	331b      	adds	r3, #27
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b01      	cmp	r3, #1
 800641c:	f040 80d1 	bne.w	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8006420:	78fa      	ldrb	r2, [r7, #3]
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	011b      	lsls	r3, r3, #4
 8006428:	1a9b      	subs	r3, r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	331b      	adds	r3, #27
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006434:	78fb      	ldrb	r3, [r7, #3]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	4413      	add	r3, r2
 800643c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	78fa      	ldrb	r2, [r7, #3]
 8006444:	0151      	lsls	r1, r2, #5
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	440a      	add	r2, r1
 800644a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800644e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006452:	6053      	str	r3, [r2, #4]
 8006454:	e0b5      	b.n	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006456:	78fa      	ldrb	r2, [r7, #3]
 8006458:	6879      	ldr	r1, [r7, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	011b      	lsls	r3, r3, #4
 800645e:	1a9b      	subs	r3, r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	440b      	add	r3, r1
 8006464:	334d      	adds	r3, #77	@ 0x4d
 8006466:	781b      	ldrb	r3, [r3, #0]
 8006468:	2b05      	cmp	r3, #5
 800646a:	d114      	bne.n	8006496 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800646c:	78fa      	ldrb	r2, [r7, #3]
 800646e:	6879      	ldr	r1, [r7, #4]
 8006470:	4613      	mov	r3, r2
 8006472:	011b      	lsls	r3, r3, #4
 8006474:	1a9b      	subs	r3, r3, r2
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	440b      	add	r3, r1
 800647a:	334d      	adds	r3, #77	@ 0x4d
 800647c:	2202      	movs	r2, #2
 800647e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8006480:	78fa      	ldrb	r2, [r7, #3]
 8006482:	6879      	ldr	r1, [r7, #4]
 8006484:	4613      	mov	r3, r2
 8006486:	011b      	lsls	r3, r3, #4
 8006488:	1a9b      	subs	r3, r3, r2
 800648a:	009b      	lsls	r3, r3, #2
 800648c:	440b      	add	r3, r1
 800648e:	334c      	adds	r3, #76	@ 0x4c
 8006490:	2202      	movs	r2, #2
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e095      	b.n	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006496:	78fa      	ldrb	r2, [r7, #3]
 8006498:	6879      	ldr	r1, [r7, #4]
 800649a:	4613      	mov	r3, r2
 800649c:	011b      	lsls	r3, r3, #4
 800649e:	1a9b      	subs	r3, r3, r2
 80064a0:	009b      	lsls	r3, r3, #2
 80064a2:	440b      	add	r3, r1
 80064a4:	334d      	adds	r3, #77	@ 0x4d
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	2b06      	cmp	r3, #6
 80064aa:	d114      	bne.n	80064d6 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80064ac:	78fa      	ldrb	r2, [r7, #3]
 80064ae:	6879      	ldr	r1, [r7, #4]
 80064b0:	4613      	mov	r3, r2
 80064b2:	011b      	lsls	r3, r3, #4
 80064b4:	1a9b      	subs	r3, r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	440b      	add	r3, r1
 80064ba:	334d      	adds	r3, #77	@ 0x4d
 80064bc:	2202      	movs	r2, #2
 80064be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80064c0:	78fa      	ldrb	r2, [r7, #3]
 80064c2:	6879      	ldr	r1, [r7, #4]
 80064c4:	4613      	mov	r3, r2
 80064c6:	011b      	lsls	r3, r3, #4
 80064c8:	1a9b      	subs	r3, r3, r2
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	440b      	add	r3, r1
 80064ce:	334c      	adds	r3, #76	@ 0x4c
 80064d0:	2205      	movs	r2, #5
 80064d2:	701a      	strb	r2, [r3, #0]
 80064d4:	e075      	b.n	80065c2 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	6879      	ldr	r1, [r7, #4]
 80064da:	4613      	mov	r3, r2
 80064dc:	011b      	lsls	r3, r3, #4
 80064de:	1a9b      	subs	r3, r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	334d      	adds	r3, #77	@ 0x4d
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b07      	cmp	r3, #7
 80064ea:	d00a      	beq.n	8006502 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80064ec:	78fa      	ldrb	r2, [r7, #3]
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	4613      	mov	r3, r2
 80064f2:	011b      	lsls	r3, r3, #4
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	009b      	lsls	r3, r3, #2
 80064f8:	440b      	add	r3, r1
 80064fa:	334d      	adds	r3, #77	@ 0x4d
 80064fc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80064fe:	2b09      	cmp	r3, #9
 8006500:	d170      	bne.n	80065e4 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006502:	78fa      	ldrb	r2, [r7, #3]
 8006504:	6879      	ldr	r1, [r7, #4]
 8006506:	4613      	mov	r3, r2
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	1a9b      	subs	r3, r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	334d      	adds	r3, #77	@ 0x4d
 8006512:	2202      	movs	r2, #2
 8006514:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006516:	78fa      	ldrb	r2, [r7, #3]
 8006518:	6879      	ldr	r1, [r7, #4]
 800651a:	4613      	mov	r3, r2
 800651c:	011b      	lsls	r3, r3, #4
 800651e:	1a9b      	subs	r3, r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	440b      	add	r3, r1
 8006524:	3344      	adds	r3, #68	@ 0x44
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	1c59      	adds	r1, r3, #1
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	4613      	mov	r3, r2
 800652e:	011b      	lsls	r3, r3, #4
 8006530:	1a9b      	subs	r3, r3, r2
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4403      	add	r3, r0
 8006536:	3344      	adds	r3, #68	@ 0x44
 8006538:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800653a:	78fa      	ldrb	r2, [r7, #3]
 800653c:	6879      	ldr	r1, [r7, #4]
 800653e:	4613      	mov	r3, r2
 8006540:	011b      	lsls	r3, r3, #4
 8006542:	1a9b      	subs	r3, r3, r2
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	440b      	add	r3, r1
 8006548:	3344      	adds	r3, #68	@ 0x44
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2b02      	cmp	r3, #2
 800654e:	d914      	bls.n	800657a <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006550:	78fa      	ldrb	r2, [r7, #3]
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	1a9b      	subs	r3, r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	3344      	adds	r3, #68	@ 0x44
 8006560:	2200      	movs	r2, #0
 8006562:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006564:	78fa      	ldrb	r2, [r7, #3]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	011b      	lsls	r3, r3, #4
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	334c      	adds	r3, #76	@ 0x4c
 8006574:	2204      	movs	r2, #4
 8006576:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006578:	e022      	b.n	80065c0 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800657a:	78fa      	ldrb	r2, [r7, #3]
 800657c:	6879      	ldr	r1, [r7, #4]
 800657e:	4613      	mov	r3, r2
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	1a9b      	subs	r3, r3, r2
 8006584:	009b      	lsls	r3, r3, #2
 8006586:	440b      	add	r3, r1
 8006588:	334c      	adds	r3, #76	@ 0x4c
 800658a:	2202      	movs	r2, #2
 800658c:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800658e:	78fb      	ldrb	r3, [r7, #3]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	4413      	add	r3, r2
 8006596:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80065a4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80065ac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80065ae:	78fb      	ldrb	r3, [r7, #3]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065ba:	461a      	mov	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80065c0:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80065c2:	78fa      	ldrb	r2, [r7, #3]
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	011b      	lsls	r3, r3, #4
 80065ca:	1a9b      	subs	r3, r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	440b      	add	r3, r1
 80065d0:	334c      	adds	r3, #76	@ 0x4c
 80065d2:	781a      	ldrb	r2, [r3, #0]
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	4619      	mov	r1, r3
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f005 fa1b 	bl	800ba14 <HAL_HCD_HC_NotifyURBChange_Callback>
 80065de:	e002      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80065e0:	bf00      	nop
 80065e2:	e000      	b.n	80065e6 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80065e4:	bf00      	nop
  }
}
 80065e6:	3718      	adds	r7, #24
 80065e8:	46bd      	mov	sp, r7
 80065ea:	bd80      	pop	{r7, pc}

080065ec <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b08a      	sub	sp, #40	@ 0x28
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	0c5b      	lsrs	r3, r3, #17
 8006612:	f003 030f 	and.w	r3, r3, #15
 8006616:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006620:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d004      	beq.n	8006632 <HCD_RXQLVL_IRQHandler+0x46>
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	2b05      	cmp	r3, #5
 800662c:	f000 80b6 	beq.w	800679c <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8006630:	e0b7      	b.n	80067a2 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	f000 80b3 	beq.w	80067a0 <HCD_RXQLVL_IRQHandler+0x1b4>
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4613      	mov	r3, r2
 8006640:	011b      	lsls	r3, r3, #4
 8006642:	1a9b      	subs	r3, r3, r2
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	440b      	add	r3, r1
 8006648:	332c      	adds	r3, #44	@ 0x2c
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	f000 80a7 	beq.w	80067a0 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006652:	6879      	ldr	r1, [r7, #4]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	4613      	mov	r3, r2
 8006658:	011b      	lsls	r3, r3, #4
 800665a:	1a9b      	subs	r3, r3, r2
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	440b      	add	r3, r1
 8006660:	3338      	adds	r3, #56	@ 0x38
 8006662:	681a      	ldr	r2, [r3, #0]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	18d1      	adds	r1, r2, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	4613      	mov	r3, r2
 800666e:	011b      	lsls	r3, r3, #4
 8006670:	1a9b      	subs	r3, r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4403      	add	r3, r0
 8006676:	3334      	adds	r3, #52	@ 0x34
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4299      	cmp	r1, r3
 800667c:	f200 8083 	bhi.w	8006786 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6818      	ldr	r0, [r3, #0]
 8006684:	6879      	ldr	r1, [r7, #4]
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4613      	mov	r3, r2
 800668a:	011b      	lsls	r3, r3, #4
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	440b      	add	r3, r1
 8006692:	332c      	adds	r3, #44	@ 0x2c
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	b292      	uxth	r2, r2
 800669a:	4619      	mov	r1, r3
 800669c:	f003 fdc2 	bl	800a224 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80066a0:	6879      	ldr	r1, [r7, #4]
 80066a2:	69ba      	ldr	r2, [r7, #24]
 80066a4:	4613      	mov	r3, r2
 80066a6:	011b      	lsls	r3, r3, #4
 80066a8:	1a9b      	subs	r3, r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	440b      	add	r3, r1
 80066ae:	332c      	adds	r3, #44	@ 0x2c
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	18d1      	adds	r1, r2, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4613      	mov	r3, r2
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	1a9b      	subs	r3, r3, r2
 80066c0:	009b      	lsls	r3, r3, #2
 80066c2:	4403      	add	r3, r0
 80066c4:	332c      	adds	r3, #44	@ 0x2c
 80066c6:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	4613      	mov	r3, r2
 80066ce:	011b      	lsls	r3, r3, #4
 80066d0:	1a9b      	subs	r3, r3, r2
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	3338      	adds	r3, #56	@ 0x38
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	18d1      	adds	r1, r2, r3
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4613      	mov	r3, r2
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	1a9b      	subs	r3, r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4403      	add	r3, r0
 80066ec:	3338      	adds	r3, #56	@ 0x38
 80066ee:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	015a      	lsls	r2, r3, #5
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	4413      	add	r3, r2
 80066f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	0cdb      	lsrs	r3, r3, #19
 8006700:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006704:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8006706:	6879      	ldr	r1, [r7, #4]
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	4613      	mov	r3, r2
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	1a9b      	subs	r3, r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	440b      	add	r3, r1
 8006714:	3328      	adds	r3, #40	@ 0x28
 8006716:	881b      	ldrh	r3, [r3, #0]
 8006718:	461a      	mov	r2, r3
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	4293      	cmp	r3, r2
 800671e:	d13f      	bne.n	80067a0 <HCD_RXQLVL_IRQHandler+0x1b4>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d03c      	beq.n	80067a0 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8006726:	69bb      	ldr	r3, [r7, #24]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	4413      	add	r3, r2
 800672e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800673c:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006744:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	015a      	lsls	r2, r3, #5
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	4413      	add	r3, r2
 800674e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006752:	461a      	mov	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006758:	6879      	ldr	r1, [r7, #4]
 800675a:	69ba      	ldr	r2, [r7, #24]
 800675c:	4613      	mov	r3, r2
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	1a9b      	subs	r3, r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	440b      	add	r3, r1
 8006766:	333c      	adds	r3, #60	@ 0x3c
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	f083 0301 	eor.w	r3, r3, #1
 800676e:	b2d8      	uxtb	r0, r3
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	69ba      	ldr	r2, [r7, #24]
 8006774:	4613      	mov	r3, r2
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	440b      	add	r3, r1
 800677e:	333c      	adds	r3, #60	@ 0x3c
 8006780:	4602      	mov	r2, r0
 8006782:	701a      	strb	r2, [r3, #0]
      break;
 8006784:	e00c      	b.n	80067a0 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006786:	6879      	ldr	r1, [r7, #4]
 8006788:	69ba      	ldr	r2, [r7, #24]
 800678a:	4613      	mov	r3, r2
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	1a9b      	subs	r3, r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	440b      	add	r3, r1
 8006794:	334c      	adds	r3, #76	@ 0x4c
 8006796:	2204      	movs	r2, #4
 8006798:	701a      	strb	r2, [r3, #0]
      break;
 800679a:	e001      	b.n	80067a0 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800679c:	bf00      	nop
 800679e:	e000      	b.n	80067a2 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80067a0:	bf00      	nop
  }
}
 80067a2:	bf00      	nop
 80067a4:	3728      	adds	r7, #40	@ 0x28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}

080067aa <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80067aa:	b580      	push	{r7, lr}
 80067ac:	b086      	sub	sp, #24
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80067d6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f003 0302 	and.w	r3, r3, #2
 80067de:	2b02      	cmp	r3, #2
 80067e0:	d10b      	bne.n	80067fa <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b01      	cmp	r3, #1
 80067ea:	d102      	bne.n	80067f2 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f005 f8f5 	bl	800b9dc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80067f2:	68bb      	ldr	r3, [r7, #8]
 80067f4:	f043 0302 	orr.w	r3, r3, #2
 80067f8:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b08      	cmp	r3, #8
 8006802:	d132      	bne.n	800686a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	f043 0308 	orr.w	r3, r3, #8
 800680a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f003 0304 	and.w	r3, r3, #4
 8006812:	2b04      	cmp	r3, #4
 8006814:	d126      	bne.n	8006864 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	7a5b      	ldrb	r3, [r3, #9]
 800681a:	2b02      	cmp	r3, #2
 800681c:	d113      	bne.n	8006846 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8006824:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006828:	d106      	bne.n	8006838 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2102      	movs	r1, #2
 8006830:	4618      	mov	r0, r3
 8006832:	f003 fd91 	bl	800a358 <USB_InitFSLSPClkSel>
 8006836:	e011      	b.n	800685c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2101      	movs	r1, #1
 800683e:	4618      	mov	r0, r3
 8006840:	f003 fd8a 	bl	800a358 <USB_InitFSLSPClkSel>
 8006844:	e00a      	b.n	800685c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	79db      	ldrb	r3, [r3, #7]
 800684a:	2b01      	cmp	r3, #1
 800684c:	d106      	bne.n	800685c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006854:	461a      	mov	r2, r3
 8006856:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800685a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f005 f8eb 	bl	800ba38 <HAL_HCD_PortEnabled_Callback>
 8006862:	e002      	b.n	800686a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f005 f8f5 	bl	800ba54 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f003 0320 	and.w	r3, r3, #32
 8006870:	2b20      	cmp	r3, #32
 8006872:	d103      	bne.n	800687c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f043 0320 	orr.w	r3, r3, #32
 800687a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006882:	461a      	mov	r2, r3
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	6013      	str	r3, [r2, #0]
}
 8006888:	bf00      	nop
 800688a:	3718      	adds	r7, #24
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d101      	bne.n	80068a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e12b      	b.n	8006afa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d106      	bne.n	80068bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f7fb fb78 	bl	8001fac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2224      	movs	r2, #36	@ 0x24
 80068c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f022 0201 	bic.w	r2, r2, #1
 80068d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80068e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681a      	ldr	r2, [r3, #0]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80068f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80068f4:	f001 f964 	bl	8007bc0 <HAL_RCC_GetPCLK1Freq>
 80068f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	4a81      	ldr	r2, [pc, #516]	@ (8006b04 <HAL_I2C_Init+0x274>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d807      	bhi.n	8006914 <HAL_I2C_Init+0x84>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	4a80      	ldr	r2, [pc, #512]	@ (8006b08 <HAL_I2C_Init+0x278>)
 8006908:	4293      	cmp	r3, r2
 800690a:	bf94      	ite	ls
 800690c:	2301      	movls	r3, #1
 800690e:	2300      	movhi	r3, #0
 8006910:	b2db      	uxtb	r3, r3
 8006912:	e006      	b.n	8006922 <HAL_I2C_Init+0x92>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	4a7d      	ldr	r2, [pc, #500]	@ (8006b0c <HAL_I2C_Init+0x27c>)
 8006918:	4293      	cmp	r3, r2
 800691a:	bf94      	ite	ls
 800691c:	2301      	movls	r3, #1
 800691e:	2300      	movhi	r3, #0
 8006920:	b2db      	uxtb	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e0e7      	b.n	8006afa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	4a78      	ldr	r2, [pc, #480]	@ (8006b10 <HAL_I2C_Init+0x280>)
 800692e:	fba2 2303 	umull	r2, r3, r2, r3
 8006932:	0c9b      	lsrs	r3, r3, #18
 8006934:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68ba      	ldr	r2, [r7, #8]
 8006946:	430a      	orrs	r2, r1
 8006948:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6a1b      	ldr	r3, [r3, #32]
 8006950:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4a6a      	ldr	r2, [pc, #424]	@ (8006b04 <HAL_I2C_Init+0x274>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d802      	bhi.n	8006964 <HAL_I2C_Init+0xd4>
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	3301      	adds	r3, #1
 8006962:	e009      	b.n	8006978 <HAL_I2C_Init+0xe8>
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800696a:	fb02 f303 	mul.w	r3, r2, r3
 800696e:	4a69      	ldr	r2, [pc, #420]	@ (8006b14 <HAL_I2C_Init+0x284>)
 8006970:	fba2 2303 	umull	r2, r3, r2, r3
 8006974:	099b      	lsrs	r3, r3, #6
 8006976:	3301      	adds	r3, #1
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	6812      	ldr	r2, [r2, #0]
 800697c:	430b      	orrs	r3, r1
 800697e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800698a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	495c      	ldr	r1, [pc, #368]	@ (8006b04 <HAL_I2C_Init+0x274>)
 8006994:	428b      	cmp	r3, r1
 8006996:	d819      	bhi.n	80069cc <HAL_I2C_Init+0x13c>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	1e59      	subs	r1, r3, #1
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	005b      	lsls	r3, r3, #1
 80069a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80069a6:	1c59      	adds	r1, r3, #1
 80069a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80069ac:	400b      	ands	r3, r1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00a      	beq.n	80069c8 <HAL_I2C_Init+0x138>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	1e59      	subs	r1, r3, #1
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	005b      	lsls	r3, r3, #1
 80069bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80069c0:	3301      	adds	r3, #1
 80069c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069c6:	e051      	b.n	8006a6c <HAL_I2C_Init+0x1dc>
 80069c8:	2304      	movs	r3, #4
 80069ca:	e04f      	b.n	8006a6c <HAL_I2C_Init+0x1dc>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d111      	bne.n	80069f8 <HAL_I2C_Init+0x168>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1e58      	subs	r0, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6859      	ldr	r1, [r3, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	440b      	add	r3, r1
 80069e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80069e6:	3301      	adds	r3, #1
 80069e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	bf0c      	ite	eq
 80069f0:	2301      	moveq	r3, #1
 80069f2:	2300      	movne	r3, #0
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	e012      	b.n	8006a1e <HAL_I2C_Init+0x18e>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	1e58      	subs	r0, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6859      	ldr	r1, [r3, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	440b      	add	r3, r1
 8006a06:	0099      	lsls	r1, r3, #2
 8006a08:	440b      	add	r3, r1
 8006a0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a0e:	3301      	adds	r3, #1
 8006a10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	bf0c      	ite	eq
 8006a18:	2301      	moveq	r3, #1
 8006a1a:	2300      	movne	r3, #0
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d001      	beq.n	8006a26 <HAL_I2C_Init+0x196>
 8006a22:	2301      	movs	r3, #1
 8006a24:	e022      	b.n	8006a6c <HAL_I2C_Init+0x1dc>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10e      	bne.n	8006a4c <HAL_I2C_Init+0x1bc>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1e58      	subs	r0, r3, #1
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	6859      	ldr	r1, [r3, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	440b      	add	r3, r1
 8006a3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a40:	3301      	adds	r3, #1
 8006a42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006a4a:	e00f      	b.n	8006a6c <HAL_I2C_Init+0x1dc>
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	1e58      	subs	r0, r3, #1
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6859      	ldr	r1, [r3, #4]
 8006a54:	460b      	mov	r3, r1
 8006a56:	009b      	lsls	r3, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	0099      	lsls	r1, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a62:	3301      	adds	r3, #1
 8006a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	6809      	ldr	r1, [r1, #0]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	69da      	ldr	r2, [r3, #28]
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	431a      	orrs	r2, r3
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006a9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006a9e:	687a      	ldr	r2, [r7, #4]
 8006aa0:	6911      	ldr	r1, [r2, #16]
 8006aa2:	687a      	ldr	r2, [r7, #4]
 8006aa4:	68d2      	ldr	r2, [r2, #12]
 8006aa6:	4311      	orrs	r1, r2
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	6812      	ldr	r2, [r2, #0]
 8006aac:	430b      	orrs	r3, r1
 8006aae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	431a      	orrs	r2, r3
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	430a      	orrs	r2, r1
 8006aca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681a      	ldr	r2, [r3, #0]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f042 0201 	orr.w	r2, r2, #1
 8006ada:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2200      	movs	r2, #0
 8006ae0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	000186a0 	.word	0x000186a0
 8006b08:	001e847f 	.word	0x001e847f
 8006b0c:	003d08ff 	.word	0x003d08ff
 8006b10:	431bde83 	.word	0x431bde83
 8006b14:	10624dd3 	.word	0x10624dd3

08006b18 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	2b20      	cmp	r3, #32
 8006b2c:	d129      	bne.n	8006b82 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2224      	movs	r2, #36	@ 0x24
 8006b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681a      	ldr	r2, [r3, #0]
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f022 0201 	bic.w	r2, r2, #1
 8006b44:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f022 0210 	bic.w	r2, r2, #16
 8006b54:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	430a      	orrs	r2, r1
 8006b64:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	e000      	b.n	8006b84 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8006b82:	2302      	movs	r3, #2
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	370c      	adds	r7, #12
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	2b20      	cmp	r3, #32
 8006ba8:	d12a      	bne.n	8006c00 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2224      	movs	r2, #36	@ 0x24
 8006bae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 0201 	bic.w	r2, r2, #1
 8006bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8006bca:	89fb      	ldrh	r3, [r7, #14]
 8006bcc:	f023 030f 	bic.w	r3, r3, #15
 8006bd0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	89fb      	ldrh	r3, [r7, #14]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	89fa      	ldrh	r2, [r7, #14]
 8006be2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f042 0201 	orr.w	r2, r2, #1
 8006bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2220      	movs	r2, #32
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	e000      	b.n	8006c02 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8006c00:	2302      	movs	r3, #2
  }
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3714      	adds	r7, #20
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr
	...

08006c10 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b084      	sub	sp, #16
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e0bf      	b.n	8006da2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d106      	bne.n	8006c3c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fc f8dc 	bl	8002df4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2202      	movs	r2, #2
 8006c40:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	699a      	ldr	r2, [r3, #24]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8006c52:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6999      	ldr	r1, [r3, #24]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685a      	ldr	r2, [r3, #4]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	430a      	orrs	r2, r1
 8006c76:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6899      	ldr	r1, [r3, #8]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b4a      	ldr	r3, [pc, #296]	@ (8006dac <HAL_LTDC_Init+0x19c>)
 8006c84:	400b      	ands	r3, r1
 8006c86:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	041b      	lsls	r3, r3, #16
 8006c8e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6899      	ldr	r1, [r3, #8]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	699a      	ldr	r2, [r3, #24]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68d9      	ldr	r1, [r3, #12]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	4b3e      	ldr	r3, [pc, #248]	@ (8006dac <HAL_LTDC_Init+0x19c>)
 8006cb2:	400b      	ands	r3, r1
 8006cb4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	69db      	ldr	r3, [r3, #28]
 8006cba:	041b      	lsls	r3, r3, #16
 8006cbc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	68d9      	ldr	r1, [r3, #12]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1a      	ldr	r2, [r3, #32]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	431a      	orrs	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	430a      	orrs	r2, r1
 8006cd2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	6919      	ldr	r1, [r3, #16]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4b33      	ldr	r3, [pc, #204]	@ (8006dac <HAL_LTDC_Init+0x19c>)
 8006ce0:	400b      	ands	r3, r1
 8006ce2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ce8:	041b      	lsls	r3, r3, #16
 8006cea:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	6919      	ldr	r1, [r3, #16]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	431a      	orrs	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	6959      	ldr	r1, [r3, #20]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	4b27      	ldr	r3, [pc, #156]	@ (8006dac <HAL_LTDC_Init+0x19c>)
 8006d0e:	400b      	ands	r3, r1
 8006d10:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d16:	041b      	lsls	r3, r3, #16
 8006d18:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	6959      	ldr	r1, [r3, #20]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8006d40:	041b      	lsls	r3, r3, #16
 8006d42:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8006d52:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8006d5a:	68ba      	ldr	r2, [r7, #8]
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8006d66:	431a      	orrs	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0206 	orr.w	r2, r2, #6
 8006d7e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	699a      	ldr	r2, [r3, #24]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f042 0201 	orr.w	r2, r2, #1
 8006d8e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
 8006daa:	bf00      	nop
 8006dac:	f000f800 	.word	0xf000f800

08006db0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dc6:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f003 0304 	and.w	r3, r3, #4
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d023      	beq.n	8006e1a <HAL_LTDC_IRQHandler+0x6a>
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f003 0304 	and.w	r3, r3, #4
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d01e      	beq.n	8006e1a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0204 	bic.w	r2, r2, #4
 8006dea:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	2204      	movs	r2, #4
 8006df2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006dfa:	f043 0201 	orr.w	r2, r3, #1
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2204      	movs	r2, #4
 8006e08:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 f86f 	bl	8006ef8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f003 0302 	and.w	r3, r3, #2
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d023      	beq.n	8006e6c <HAL_LTDC_IRQHandler+0xbc>
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	f003 0302 	and.w	r3, r3, #2
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d01e      	beq.n	8006e6c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0202 	bic.w	r2, r2, #2
 8006e3c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2202      	movs	r2, #2
 8006e44:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006e4c:	f043 0202 	orr.w	r2, r3, #2
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2204      	movs	r2, #4
 8006e5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 f846 	bl	8006ef8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f003 0301 	and.w	r3, r3, #1
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d01b      	beq.n	8006eae <HAL_LTDC_IRQHandler+0xfe>
 8006e76:	68bb      	ldr	r3, [r7, #8]
 8006e78:	f003 0301 	and.w	r3, r3, #1
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d016      	beq.n	8006eae <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f022 0201 	bic.w	r2, r2, #1
 8006e8e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2201      	movs	r2, #1
 8006e96:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f000 f82f 	bl	8006f0c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f003 0308 	and.w	r3, r3, #8
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01b      	beq.n	8006ef0 <HAL_LTDC_IRQHandler+0x140>
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d016      	beq.n	8006ef0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f022 0208 	bic.w	r2, r2, #8
 8006ed0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	2208      	movs	r2, #8
 8006ed8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f818 	bl	8006f20 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8006ef0:	bf00      	nop
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8006f00:	bf00      	nop
 8006f02:	370c      	adds	r7, #12
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr

08006f0c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8006f14:	bf00      	nop
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8006f28:	bf00      	nop
 8006f2a:	370c      	adds	r7, #12
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006f34:	b5b0      	push	{r4, r5, r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_LTDC_ConfigLayer+0x1a>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e02c      	b.n	8006fa8 <HAL_LTDC_ConfigLayer+0x74>
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006f5e:	68fa      	ldr	r2, [r7, #12]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2134      	movs	r1, #52	@ 0x34
 8006f64:	fb01 f303 	mul.w	r3, r1, r3
 8006f68:	4413      	add	r3, r2
 8006f6a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4614      	mov	r4, r2
 8006f72:	461d      	mov	r5, r3
 8006f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f811 	bl	8006fb0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	2201      	movs	r2, #1
 8006f94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bdb0      	pop	{r4, r5, r7, pc}

08006fb0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b089      	sub	sp, #36	@ 0x24
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	685a      	ldr	r2, [r3, #4]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fcc:	4413      	add	r3, r2
 8006fce:	041b      	lsls	r3, r3, #16
 8006fd0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	01db      	lsls	r3, r3, #7
 8006fdc:	4413      	add	r3, r2
 8006fde:	3384      	adds	r3, #132	@ 0x84
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	6812      	ldr	r2, [r2, #0]
 8006fe6:	4611      	mov	r1, r2
 8006fe8:	687a      	ldr	r2, [r7, #4]
 8006fea:	01d2      	lsls	r2, r2, #7
 8006fec:	440a      	add	r2, r1
 8006fee:	3284      	adds	r2, #132	@ 0x84
 8006ff0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8006ff4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	0c1b      	lsrs	r3, r3, #16
 8007002:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8007006:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007008:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4619      	mov	r1, r3
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	01db      	lsls	r3, r3, #7
 8007014:	440b      	add	r3, r1
 8007016:	3384      	adds	r3, #132	@ 0x84
 8007018:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800701a:	69fb      	ldr	r3, [r7, #28]
 800701c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800701e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	68da      	ldr	r2, [r3, #12]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800702e:	4413      	add	r3, r2
 8007030:	041b      	lsls	r3, r3, #16
 8007032:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	461a      	mov	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	01db      	lsls	r3, r3, #7
 800703e:	4413      	add	r3, r2
 8007040:	3384      	adds	r3, #132	@ 0x84
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	6812      	ldr	r2, [r2, #0]
 8007048:	4611      	mov	r1, r2
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	01d2      	lsls	r2, r2, #7
 800704e:	440a      	add	r2, r1
 8007050:	3284      	adds	r2, #132	@ 0x84
 8007052:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8007056:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007066:	4413      	add	r3, r2
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4619      	mov	r1, r3
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	01db      	lsls	r3, r3, #7
 8007074:	440b      	add	r3, r1
 8007076:	3384      	adds	r3, #132	@ 0x84
 8007078:	4619      	mov	r1, r3
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4313      	orrs	r3, r2
 800707e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	461a      	mov	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	01db      	lsls	r3, r3, #7
 800708a:	4413      	add	r3, r2
 800708c:	3384      	adds	r3, #132	@ 0x84
 800708e:	691b      	ldr	r3, [r3, #16]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	4611      	mov	r1, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	01d2      	lsls	r2, r2, #7
 800709a:	440a      	add	r2, r1
 800709c:	3284      	adds	r2, #132	@ 0x84
 800709e:	f023 0307 	bic.w	r3, r3, #7
 80070a2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	461a      	mov	r2, r3
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	01db      	lsls	r3, r3, #7
 80070ae:	4413      	add	r3, r2
 80070b0:	3384      	adds	r3, #132	@ 0x84
 80070b2:	461a      	mov	r2, r3
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80070c0:	021b      	lsls	r3, r3, #8
 80070c2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80070ca:	041b      	lsls	r3, r3, #16
 80070cc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	061b      	lsls	r3, r3, #24
 80070d4:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	461a      	mov	r2, r3
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	01db      	lsls	r3, r3, #7
 80070e0:	4413      	add	r3, r2
 80070e2:	3384      	adds	r3, #132	@ 0x84
 80070e4:	699b      	ldr	r3, [r3, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	01db      	lsls	r3, r3, #7
 80070f0:	4413      	add	r3, r2
 80070f2:	3384      	adds	r3, #132	@ 0x84
 80070f4:	461a      	mov	r2, r3
 80070f6:	2300      	movs	r3, #0
 80070f8:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007100:	461a      	mov	r2, r3
 8007102:	69fb      	ldr	r3, [r7, #28]
 8007104:	431a      	orrs	r2, r3
 8007106:	69bb      	ldr	r3, [r7, #24]
 8007108:	431a      	orrs	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4619      	mov	r1, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	01db      	lsls	r3, r3, #7
 8007114:	440b      	add	r3, r1
 8007116:	3384      	adds	r3, #132	@ 0x84
 8007118:	4619      	mov	r1, r3
 800711a:	697b      	ldr	r3, [r7, #20]
 800711c:	4313      	orrs	r3, r2
 800711e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	01db      	lsls	r3, r3, #7
 800712a:	4413      	add	r3, r2
 800712c:	3384      	adds	r3, #132	@ 0x84
 800712e:	695b      	ldr	r3, [r3, #20]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	6812      	ldr	r2, [r2, #0]
 8007134:	4611      	mov	r1, r2
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	01d2      	lsls	r2, r2, #7
 800713a:	440a      	add	r2, r1
 800713c:	3284      	adds	r2, #132	@ 0x84
 800713e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007142:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	461a      	mov	r2, r3
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	01db      	lsls	r3, r3, #7
 800714e:	4413      	add	r3, r2
 8007150:	3384      	adds	r3, #132	@ 0x84
 8007152:	461a      	mov	r2, r3
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	01db      	lsls	r3, r3, #7
 8007164:	4413      	add	r3, r2
 8007166:	3384      	adds	r3, #132	@ 0x84
 8007168:	69db      	ldr	r3, [r3, #28]
 800716a:	68fa      	ldr	r2, [r7, #12]
 800716c:	6812      	ldr	r2, [r2, #0]
 800716e:	4611      	mov	r1, r2
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	01d2      	lsls	r2, r2, #7
 8007174:	440a      	add	r2, r1
 8007176:	3284      	adds	r2, #132	@ 0x84
 8007178:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800717c:	f023 0307 	bic.w	r3, r3, #7
 8007180:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	69da      	ldr	r2, [r3, #28]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	68f9      	ldr	r1, [r7, #12]
 800718c:	6809      	ldr	r1, [r1, #0]
 800718e:	4608      	mov	r0, r1
 8007190:	6879      	ldr	r1, [r7, #4]
 8007192:	01c9      	lsls	r1, r1, #7
 8007194:	4401      	add	r1, r0
 8007196:	3184      	adds	r1, #132	@ 0x84
 8007198:	4313      	orrs	r3, r2
 800719a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	461a      	mov	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	01db      	lsls	r3, r3, #7
 80071a6:	4413      	add	r3, r2
 80071a8:	3384      	adds	r3, #132	@ 0x84
 80071aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	461a      	mov	r2, r3
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	01db      	lsls	r3, r3, #7
 80071b6:	4413      	add	r3, r2
 80071b8:	3384      	adds	r3, #132	@ 0x84
 80071ba:	461a      	mov	r2, r3
 80071bc:	2300      	movs	r3, #0
 80071be:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	461a      	mov	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	01db      	lsls	r3, r3, #7
 80071ca:	4413      	add	r3, r2
 80071cc:	3384      	adds	r3, #132	@ 0x84
 80071ce:	461a      	mov	r2, r3
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071d4:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d102      	bne.n	80071e4 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80071de:	2304      	movs	r3, #4
 80071e0:	61fb      	str	r3, [r7, #28]
 80071e2:	e01b      	b.n	800721c <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d102      	bne.n	80071f2 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80071ec:	2303      	movs	r3, #3
 80071ee:	61fb      	str	r3, [r7, #28]
 80071f0:	e014      	b.n	800721c <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b04      	cmp	r3, #4
 80071f8:	d00b      	beq.n	8007212 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80071fe:	2b02      	cmp	r3, #2
 8007200:	d007      	beq.n	8007212 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007206:	2b03      	cmp	r3, #3
 8007208:	d003      	beq.n	8007212 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800720e:	2b07      	cmp	r3, #7
 8007210:	d102      	bne.n	8007218 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8007212:	2302      	movs	r3, #2
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	e001      	b.n	800721c <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8007218:	2301      	movs	r3, #1
 800721a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	461a      	mov	r2, r3
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	01db      	lsls	r3, r3, #7
 8007226:	4413      	add	r3, r2
 8007228:	3384      	adds	r3, #132	@ 0x84
 800722a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	6812      	ldr	r2, [r2, #0]
 8007230:	4611      	mov	r1, r2
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	01d2      	lsls	r2, r2, #7
 8007236:	440a      	add	r2, r1
 8007238:	3284      	adds	r2, #132	@ 0x84
 800723a:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800723e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007244:	69fa      	ldr	r2, [r7, #28]
 8007246:	fb02 f303 	mul.w	r3, r2, r3
 800724a:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	6859      	ldr	r1, [r3, #4]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	1acb      	subs	r3, r1, r3
 8007256:	69f9      	ldr	r1, [r7, #28]
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800725e:	68f9      	ldr	r1, [r7, #12]
 8007260:	6809      	ldr	r1, [r1, #0]
 8007262:	4608      	mov	r0, r1
 8007264:	6879      	ldr	r1, [r7, #4]
 8007266:	01c9      	lsls	r1, r1, #7
 8007268:	4401      	add	r1, r0
 800726a:	3184      	adds	r1, #132	@ 0x84
 800726c:	4313      	orrs	r3, r2
 800726e:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	461a      	mov	r2, r3
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	01db      	lsls	r3, r3, #7
 800727a:	4413      	add	r3, r2
 800727c:	3384      	adds	r3, #132	@ 0x84
 800727e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	6812      	ldr	r2, [r2, #0]
 8007284:	4611      	mov	r1, r2
 8007286:	687a      	ldr	r2, [r7, #4]
 8007288:	01d2      	lsls	r2, r2, #7
 800728a:	440a      	add	r2, r1
 800728c:	3284      	adds	r2, #132	@ 0x84
 800728e:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8007292:	f023 0307 	bic.w	r3, r3, #7
 8007296:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	01db      	lsls	r3, r3, #7
 80072a2:	4413      	add	r3, r2
 80072a4:	3384      	adds	r3, #132	@ 0x84
 80072a6:	461a      	mov	r2, r3
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072ac:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	461a      	mov	r2, r3
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	01db      	lsls	r3, r3, #7
 80072b8:	4413      	add	r3, r2
 80072ba:	3384      	adds	r3, #132	@ 0x84
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	4611      	mov	r1, r2
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	01d2      	lsls	r2, r2, #7
 80072c8:	440a      	add	r2, r1
 80072ca:	3284      	adds	r2, #132	@ 0x84
 80072cc:	f043 0301 	orr.w	r3, r3, #1
 80072d0:	6013      	str	r3, [r2, #0]
}
 80072d2:	bf00      	nop
 80072d4:	3724      	adds	r7, #36	@ 0x24
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
	...

080072e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b086      	sub	sp, #24
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e267      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d075      	beq.n	80073ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80072fe:	4b88      	ldr	r3, [pc, #544]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	f003 030c 	and.w	r3, r3, #12
 8007306:	2b04      	cmp	r3, #4
 8007308:	d00c      	beq.n	8007324 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800730a:	4b85      	ldr	r3, [pc, #532]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800730c:	689b      	ldr	r3, [r3, #8]
 800730e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007312:	2b08      	cmp	r3, #8
 8007314:	d112      	bne.n	800733c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007316:	4b82      	ldr	r3, [pc, #520]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800731e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007322:	d10b      	bne.n	800733c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007324:	4b7e      	ldr	r3, [pc, #504]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d05b      	beq.n	80073e8 <HAL_RCC_OscConfig+0x108>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d157      	bne.n	80073e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e242      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007344:	d106      	bne.n	8007354 <HAL_RCC_OscConfig+0x74>
 8007346:	4b76      	ldr	r3, [pc, #472]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a75      	ldr	r2, [pc, #468]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800734c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	e01d      	b.n	8007390 <HAL_RCC_OscConfig+0xb0>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800735c:	d10c      	bne.n	8007378 <HAL_RCC_OscConfig+0x98>
 800735e:	4b70      	ldr	r3, [pc, #448]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a6f      	ldr	r2, [pc, #444]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007364:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	4b6d      	ldr	r3, [pc, #436]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a6c      	ldr	r2, [pc, #432]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007370:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007374:	6013      	str	r3, [r2, #0]
 8007376:	e00b      	b.n	8007390 <HAL_RCC_OscConfig+0xb0>
 8007378:	4b69      	ldr	r3, [pc, #420]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a68      	ldr	r2, [pc, #416]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800737e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007382:	6013      	str	r3, [r2, #0]
 8007384:	4b66      	ldr	r3, [pc, #408]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a65      	ldr	r2, [pc, #404]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800738a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800738e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	685b      	ldr	r3, [r3, #4]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d013      	beq.n	80073c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007398:	f7fc fc52 	bl	8003c40 <HAL_GetTick>
 800739c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800739e:	e008      	b.n	80073b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073a0:	f7fc fc4e 	bl	8003c40 <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b64      	cmp	r3, #100	@ 0x64
 80073ac:	d901      	bls.n	80073b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e207      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80073b2:	4b5b      	ldr	r3, [pc, #364]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0f0      	beq.n	80073a0 <HAL_RCC_OscConfig+0xc0>
 80073be:	e014      	b.n	80073ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073c0:	f7fc fc3e 	bl	8003c40 <HAL_GetTick>
 80073c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073c6:	e008      	b.n	80073da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073c8:	f7fc fc3a 	bl	8003c40 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	2b64      	cmp	r3, #100	@ 0x64
 80073d4:	d901      	bls.n	80073da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e1f3      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073da:	4b51      	ldr	r3, [pc, #324]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f0      	bne.n	80073c8 <HAL_RCC_OscConfig+0xe8>
 80073e6:	e000      	b.n	80073ea <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f003 0302 	and.w	r3, r3, #2
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d063      	beq.n	80074be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80073f6:	4b4a      	ldr	r3, [pc, #296]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 80073f8:	689b      	ldr	r3, [r3, #8]
 80073fa:	f003 030c 	and.w	r3, r3, #12
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007402:	4b47      	ldr	r3, [pc, #284]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800740a:	2b08      	cmp	r3, #8
 800740c:	d11c      	bne.n	8007448 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800740e:	4b44      	ldr	r3, [pc, #272]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007410:	685b      	ldr	r3, [r3, #4]
 8007412:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007416:	2b00      	cmp	r3, #0
 8007418:	d116      	bne.n	8007448 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800741a:	4b41      	ldr	r3, [pc, #260]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f003 0302 	and.w	r3, r3, #2
 8007422:	2b00      	cmp	r3, #0
 8007424:	d005      	beq.n	8007432 <HAL_RCC_OscConfig+0x152>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d001      	beq.n	8007432 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e1c7      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007432:	4b3b      	ldr	r3, [pc, #236]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	691b      	ldr	r3, [r3, #16]
 800743e:	00db      	lsls	r3, r3, #3
 8007440:	4937      	ldr	r1, [pc, #220]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007442:	4313      	orrs	r3, r2
 8007444:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007446:	e03a      	b.n	80074be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d020      	beq.n	8007492 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007450:	4b34      	ldr	r3, [pc, #208]	@ (8007524 <HAL_RCC_OscConfig+0x244>)
 8007452:	2201      	movs	r2, #1
 8007454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007456:	f7fc fbf3 	bl	8003c40 <HAL_GetTick>
 800745a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800745c:	e008      	b.n	8007470 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800745e:	f7fc fbef 	bl	8003c40 <HAL_GetTick>
 8007462:	4602      	mov	r2, r0
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	1ad3      	subs	r3, r2, r3
 8007468:	2b02      	cmp	r3, #2
 800746a:	d901      	bls.n	8007470 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e1a8      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007470:	4b2b      	ldr	r3, [pc, #172]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 0302 	and.w	r3, r3, #2
 8007478:	2b00      	cmp	r3, #0
 800747a:	d0f0      	beq.n	800745e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800747c:	4b28      	ldr	r3, [pc, #160]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	00db      	lsls	r3, r3, #3
 800748a:	4925      	ldr	r1, [pc, #148]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 800748c:	4313      	orrs	r3, r2
 800748e:	600b      	str	r3, [r1, #0]
 8007490:	e015      	b.n	80074be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007492:	4b24      	ldr	r3, [pc, #144]	@ (8007524 <HAL_RCC_OscConfig+0x244>)
 8007494:	2200      	movs	r2, #0
 8007496:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007498:	f7fc fbd2 	bl	8003c40 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074a0:	f7fc fbce 	bl	8003c40 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b02      	cmp	r3, #2
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e187      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80074b2:	4b1b      	ldr	r3, [pc, #108]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d1f0      	bne.n	80074a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d036      	beq.n	8007538 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d016      	beq.n	8007500 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074d2:	4b15      	ldr	r3, [pc, #84]	@ (8007528 <HAL_RCC_OscConfig+0x248>)
 80074d4:	2201      	movs	r2, #1
 80074d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074d8:	f7fc fbb2 	bl	8003c40 <HAL_GetTick>
 80074dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074de:	e008      	b.n	80074f2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074e0:	f7fc fbae 	bl	8003c40 <HAL_GetTick>
 80074e4:	4602      	mov	r2, r0
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	1ad3      	subs	r3, r2, r3
 80074ea:	2b02      	cmp	r3, #2
 80074ec:	d901      	bls.n	80074f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80074ee:	2303      	movs	r3, #3
 80074f0:	e167      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074f2:	4b0b      	ldr	r3, [pc, #44]	@ (8007520 <HAL_RCC_OscConfig+0x240>)
 80074f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80074f6:	f003 0302 	and.w	r3, r3, #2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d0f0      	beq.n	80074e0 <HAL_RCC_OscConfig+0x200>
 80074fe:	e01b      	b.n	8007538 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007500:	4b09      	ldr	r3, [pc, #36]	@ (8007528 <HAL_RCC_OscConfig+0x248>)
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007506:	f7fc fb9b 	bl	8003c40 <HAL_GetTick>
 800750a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800750c:	e00e      	b.n	800752c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800750e:	f7fc fb97 	bl	8003c40 <HAL_GetTick>
 8007512:	4602      	mov	r2, r0
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	1ad3      	subs	r3, r2, r3
 8007518:	2b02      	cmp	r3, #2
 800751a:	d907      	bls.n	800752c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e150      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
 8007520:	40023800 	.word	0x40023800
 8007524:	42470000 	.word	0x42470000
 8007528:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800752c:	4b88      	ldr	r3, [pc, #544]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 800752e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1ea      	bne.n	800750e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0304 	and.w	r3, r3, #4
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 8097 	beq.w	8007674 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007546:	2300      	movs	r3, #0
 8007548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800754a:	4b81      	ldr	r3, [pc, #516]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800754e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007552:	2b00      	cmp	r3, #0
 8007554:	d10f      	bne.n	8007576 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007556:	2300      	movs	r3, #0
 8007558:	60bb      	str	r3, [r7, #8]
 800755a:	4b7d      	ldr	r3, [pc, #500]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 800755c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800755e:	4a7c      	ldr	r2, [pc, #496]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 8007560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007564:	6413      	str	r3, [r2, #64]	@ 0x40
 8007566:	4b7a      	ldr	r3, [pc, #488]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 8007568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800756e:	60bb      	str	r3, [r7, #8]
 8007570:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007572:	2301      	movs	r3, #1
 8007574:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007576:	4b77      	ldr	r3, [pc, #476]	@ (8007754 <HAL_RCC_OscConfig+0x474>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800757e:	2b00      	cmp	r3, #0
 8007580:	d118      	bne.n	80075b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007582:	4b74      	ldr	r3, [pc, #464]	@ (8007754 <HAL_RCC_OscConfig+0x474>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a73      	ldr	r2, [pc, #460]	@ (8007754 <HAL_RCC_OscConfig+0x474>)
 8007588:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800758c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800758e:	f7fc fb57 	bl	8003c40 <HAL_GetTick>
 8007592:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007594:	e008      	b.n	80075a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007596:	f7fc fb53 	bl	8003c40 <HAL_GetTick>
 800759a:	4602      	mov	r2, r0
 800759c:	693b      	ldr	r3, [r7, #16]
 800759e:	1ad3      	subs	r3, r2, r3
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d901      	bls.n	80075a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80075a4:	2303      	movs	r3, #3
 80075a6:	e10c      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80075a8:	4b6a      	ldr	r3, [pc, #424]	@ (8007754 <HAL_RCC_OscConfig+0x474>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d0f0      	beq.n	8007596 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	689b      	ldr	r3, [r3, #8]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d106      	bne.n	80075ca <HAL_RCC_OscConfig+0x2ea>
 80075bc:	4b64      	ldr	r3, [pc, #400]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075c0:	4a63      	ldr	r2, [pc, #396]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075c2:	f043 0301 	orr.w	r3, r3, #1
 80075c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075c8:	e01c      	b.n	8007604 <HAL_RCC_OscConfig+0x324>
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	2b05      	cmp	r3, #5
 80075d0:	d10c      	bne.n	80075ec <HAL_RCC_OscConfig+0x30c>
 80075d2:	4b5f      	ldr	r3, [pc, #380]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075d6:	4a5e      	ldr	r2, [pc, #376]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075d8:	f043 0304 	orr.w	r3, r3, #4
 80075dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80075de:	4b5c      	ldr	r3, [pc, #368]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075e2:	4a5b      	ldr	r2, [pc, #364]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075e4:	f043 0301 	orr.w	r3, r3, #1
 80075e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80075ea:	e00b      	b.n	8007604 <HAL_RCC_OscConfig+0x324>
 80075ec:	4b58      	ldr	r3, [pc, #352]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075f0:	4a57      	ldr	r2, [pc, #348]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075f2:	f023 0301 	bic.w	r3, r3, #1
 80075f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075f8:	4b55      	ldr	r3, [pc, #340]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075fc:	4a54      	ldr	r2, [pc, #336]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80075fe:	f023 0304 	bic.w	r3, r3, #4
 8007602:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	2b00      	cmp	r3, #0
 800760a:	d015      	beq.n	8007638 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800760c:	f7fc fb18 	bl	8003c40 <HAL_GetTick>
 8007610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007612:	e00a      	b.n	800762a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007614:	f7fc fb14 	bl	8003c40 <HAL_GetTick>
 8007618:	4602      	mov	r2, r0
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007622:	4293      	cmp	r3, r2
 8007624:	d901      	bls.n	800762a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e0cb      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800762a:	4b49      	ldr	r3, [pc, #292]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 800762c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800762e:	f003 0302 	and.w	r3, r3, #2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d0ee      	beq.n	8007614 <HAL_RCC_OscConfig+0x334>
 8007636:	e014      	b.n	8007662 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007638:	f7fc fb02 	bl	8003c40 <HAL_GetTick>
 800763c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800763e:	e00a      	b.n	8007656 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007640:	f7fc fafe 	bl	8003c40 <HAL_GetTick>
 8007644:	4602      	mov	r2, r0
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	1ad3      	subs	r3, r2, r3
 800764a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800764e:	4293      	cmp	r3, r2
 8007650:	d901      	bls.n	8007656 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e0b5      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007656:	4b3e      	ldr	r3, [pc, #248]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 8007658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800765a:	f003 0302 	and.w	r3, r3, #2
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1ee      	bne.n	8007640 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007662:	7dfb      	ldrb	r3, [r7, #23]
 8007664:	2b01      	cmp	r3, #1
 8007666:	d105      	bne.n	8007674 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007668:	4b39      	ldr	r3, [pc, #228]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 800766a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800766c:	4a38      	ldr	r2, [pc, #224]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 800766e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007672:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	2b00      	cmp	r3, #0
 800767a:	f000 80a1 	beq.w	80077c0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800767e:	4b34      	ldr	r3, [pc, #208]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f003 030c 	and.w	r3, r3, #12
 8007686:	2b08      	cmp	r3, #8
 8007688:	d05c      	beq.n	8007744 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	2b02      	cmp	r3, #2
 8007690:	d141      	bne.n	8007716 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007692:	4b31      	ldr	r3, [pc, #196]	@ (8007758 <HAL_RCC_OscConfig+0x478>)
 8007694:	2200      	movs	r2, #0
 8007696:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007698:	f7fc fad2 	bl	8003c40 <HAL_GetTick>
 800769c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800769e:	e008      	b.n	80076b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076a0:	f7fc face 	bl	8003c40 <HAL_GetTick>
 80076a4:	4602      	mov	r2, r0
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	1ad3      	subs	r3, r2, r3
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d901      	bls.n	80076b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80076ae:	2303      	movs	r3, #3
 80076b0:	e087      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076b2:	4b27      	ldr	r3, [pc, #156]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d1f0      	bne.n	80076a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	69da      	ldr	r2, [r3, #28]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a1b      	ldr	r3, [r3, #32]
 80076c6:	431a      	orrs	r2, r3
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076cc:	019b      	lsls	r3, r3, #6
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d4:	085b      	lsrs	r3, r3, #1
 80076d6:	3b01      	subs	r3, #1
 80076d8:	041b      	lsls	r3, r3, #16
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076e0:	061b      	lsls	r3, r3, #24
 80076e2:	491b      	ldr	r1, [pc, #108]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 80076e4:	4313      	orrs	r3, r2
 80076e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007758 <HAL_RCC_OscConfig+0x478>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076ee:	f7fc faa7 	bl	8003c40 <HAL_GetTick>
 80076f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076f4:	e008      	b.n	8007708 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076f6:	f7fc faa3 	bl	8003c40 <HAL_GetTick>
 80076fa:	4602      	mov	r2, r0
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	1ad3      	subs	r3, r2, r3
 8007700:	2b02      	cmp	r3, #2
 8007702:	d901      	bls.n	8007708 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007704:	2303      	movs	r3, #3
 8007706:	e05c      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007708:	4b11      	ldr	r3, [pc, #68]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007710:	2b00      	cmp	r3, #0
 8007712:	d0f0      	beq.n	80076f6 <HAL_RCC_OscConfig+0x416>
 8007714:	e054      	b.n	80077c0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007716:	4b10      	ldr	r3, [pc, #64]	@ (8007758 <HAL_RCC_OscConfig+0x478>)
 8007718:	2200      	movs	r2, #0
 800771a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800771c:	f7fc fa90 	bl	8003c40 <HAL_GetTick>
 8007720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007722:	e008      	b.n	8007736 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007724:	f7fc fa8c 	bl	8003c40 <HAL_GetTick>
 8007728:	4602      	mov	r2, r0
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	2b02      	cmp	r3, #2
 8007730:	d901      	bls.n	8007736 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e045      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007736:	4b06      	ldr	r3, [pc, #24]	@ (8007750 <HAL_RCC_OscConfig+0x470>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800773e:	2b00      	cmp	r3, #0
 8007740:	d1f0      	bne.n	8007724 <HAL_RCC_OscConfig+0x444>
 8007742:	e03d      	b.n	80077c0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	2b01      	cmp	r3, #1
 800774a:	d107      	bne.n	800775c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800774c:	2301      	movs	r3, #1
 800774e:	e038      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
 8007750:	40023800 	.word	0x40023800
 8007754:	40007000 	.word	0x40007000
 8007758:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800775c:	4b1b      	ldr	r3, [pc, #108]	@ (80077cc <HAL_RCC_OscConfig+0x4ec>)
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	2b01      	cmp	r3, #1
 8007768:	d028      	beq.n	80077bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007774:	429a      	cmp	r2, r3
 8007776:	d121      	bne.n	80077bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007782:	429a      	cmp	r2, r3
 8007784:	d11a      	bne.n	80077bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007786:	68fa      	ldr	r2, [r7, #12]
 8007788:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800778c:	4013      	ands	r3, r2
 800778e:	687a      	ldr	r2, [r7, #4]
 8007790:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007792:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007794:	4293      	cmp	r3, r2
 8007796:	d111      	bne.n	80077bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	3b01      	subs	r3, #1
 80077a6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d107      	bne.n	80077bc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80077b8:	429a      	cmp	r2, r3
 80077ba:	d001      	beq.n	80077c0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80077c0:	2300      	movs	r3, #0
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3718      	adds	r7, #24
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	40023800 	.word	0x40023800

080077d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b084      	sub	sp, #16
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d101      	bne.n	80077e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80077e0:	2301      	movs	r3, #1
 80077e2:	e0cc      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077e4:	4b68      	ldr	r3, [pc, #416]	@ (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 030f 	and.w	r3, r3, #15
 80077ec:	683a      	ldr	r2, [r7, #0]
 80077ee:	429a      	cmp	r2, r3
 80077f0:	d90c      	bls.n	800780c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80077f2:	4b65      	ldr	r3, [pc, #404]	@ (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	b2d2      	uxtb	r2, r2
 80077f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80077fa:	4b63      	ldr	r3, [pc, #396]	@ (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 030f 	and.w	r3, r3, #15
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d001      	beq.n	800780c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007808:	2301      	movs	r3, #1
 800780a:	e0b8      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0302 	and.w	r3, r3, #2
 8007814:	2b00      	cmp	r3, #0
 8007816:	d020      	beq.n	800785a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0304 	and.w	r3, r3, #4
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007824:	4b59      	ldr	r3, [pc, #356]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	4a58      	ldr	r2, [pc, #352]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 800782a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800782e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0308 	and.w	r3, r3, #8
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800783c:	4b53      	ldr	r3, [pc, #332]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a52      	ldr	r2, [pc, #328]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007842:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007846:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007848:	4b50      	ldr	r3, [pc, #320]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	494d      	ldr	r1, [pc, #308]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007856:	4313      	orrs	r3, r2
 8007858:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b00      	cmp	r3, #0
 8007864:	d044      	beq.n	80078f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d107      	bne.n	800787e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800786e:	4b47      	ldr	r3, [pc, #284]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d119      	bne.n	80078ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	e07f      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d003      	beq.n	800788e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800788a:	2b03      	cmp	r3, #3
 800788c:	d107      	bne.n	800789e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800788e:	4b3f      	ldr	r3, [pc, #252]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d109      	bne.n	80078ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800789a:	2301      	movs	r3, #1
 800789c:	e06f      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800789e:	4b3b      	ldr	r3, [pc, #236]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0302 	and.w	r3, r3, #2
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e067      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078ae:	4b37      	ldr	r3, [pc, #220]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f023 0203 	bic.w	r2, r3, #3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	4934      	ldr	r1, [pc, #208]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 80078bc:	4313      	orrs	r3, r2
 80078be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80078c0:	f7fc f9be 	bl	8003c40 <HAL_GetTick>
 80078c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078c6:	e00a      	b.n	80078de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078c8:	f7fc f9ba 	bl	8003c40 <HAL_GetTick>
 80078cc:	4602      	mov	r2, r0
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	1ad3      	subs	r3, r2, r3
 80078d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d901      	bls.n	80078de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80078da:	2303      	movs	r3, #3
 80078dc:	e04f      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078de:	4b2b      	ldr	r3, [pc, #172]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 020c 	and.w	r2, r3, #12
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	685b      	ldr	r3, [r3, #4]
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d1eb      	bne.n	80078c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80078f0:	4b25      	ldr	r3, [pc, #148]	@ (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d20c      	bcs.n	8007918 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fe:	4b22      	ldr	r3, [pc, #136]	@ (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007906:	4b20      	ldr	r3, [pc, #128]	@ (8007988 <HAL_RCC_ClockConfig+0x1b8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 030f 	and.w	r3, r3, #15
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d001      	beq.n	8007918 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e032      	b.n	800797e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d008      	beq.n	8007936 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007924:	4b19      	ldr	r3, [pc, #100]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4916      	ldr	r1, [pc, #88]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	4313      	orrs	r3, r2
 8007934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 0308 	and.w	r3, r3, #8
 800793e:	2b00      	cmp	r3, #0
 8007940:	d009      	beq.n	8007956 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007942:	4b12      	ldr	r3, [pc, #72]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	490e      	ldr	r1, [pc, #56]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 8007952:	4313      	orrs	r3, r2
 8007954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007956:	f000 f821 	bl	800799c <HAL_RCC_GetSysClockFreq>
 800795a:	4602      	mov	r2, r0
 800795c:	4b0b      	ldr	r3, [pc, #44]	@ (800798c <HAL_RCC_ClockConfig+0x1bc>)
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	091b      	lsrs	r3, r3, #4
 8007962:	f003 030f 	and.w	r3, r3, #15
 8007966:	490a      	ldr	r1, [pc, #40]	@ (8007990 <HAL_RCC_ClockConfig+0x1c0>)
 8007968:	5ccb      	ldrb	r3, [r1, r3]
 800796a:	fa22 f303 	lsr.w	r3, r2, r3
 800796e:	4a09      	ldr	r2, [pc, #36]	@ (8007994 <HAL_RCC_ClockConfig+0x1c4>)
 8007970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007972:	4b09      	ldr	r3, [pc, #36]	@ (8007998 <HAL_RCC_ClockConfig+0x1c8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4618      	mov	r0, r3
 8007978:	f7fb fe3c 	bl	80035f4 <HAL_InitTick>

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}
 8007986:	bf00      	nop
 8007988:	40023c00 	.word	0x40023c00
 800798c:	40023800 	.word	0x40023800
 8007990:	0800ea48 	.word	0x0800ea48
 8007994:	20000008 	.word	0x20000008
 8007998:	2000000c 	.word	0x2000000c

0800799c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800799c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079a0:	b094      	sub	sp, #80	@ 0x50
 80079a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80079a4:	2300      	movs	r3, #0
 80079a6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80079a8:	2300      	movs	r3, #0
 80079aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079b4:	4b79      	ldr	r3, [pc, #484]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f003 030c 	and.w	r3, r3, #12
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d00d      	beq.n	80079dc <HAL_RCC_GetSysClockFreq+0x40>
 80079c0:	2b08      	cmp	r3, #8
 80079c2:	f200 80e1 	bhi.w	8007b88 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d002      	beq.n	80079d0 <HAL_RCC_GetSysClockFreq+0x34>
 80079ca:	2b04      	cmp	r3, #4
 80079cc:	d003      	beq.n	80079d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80079ce:	e0db      	b.n	8007b88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079d0:	4b73      	ldr	r3, [pc, #460]	@ (8007ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 80079d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079d4:	e0db      	b.n	8007b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079d6:	4b73      	ldr	r3, [pc, #460]	@ (8007ba4 <HAL_RCC_GetSysClockFreq+0x208>)
 80079d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079da:	e0d8      	b.n	8007b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079dc:	4b6f      	ldr	r3, [pc, #444]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079e4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80079e6:	4b6d      	ldr	r3, [pc, #436]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d063      	beq.n	8007aba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80079f2:	4b6a      	ldr	r3, [pc, #424]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x200>)
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	099b      	lsrs	r3, r3, #6
 80079f8:	2200      	movs	r2, #0
 80079fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80079fc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80079fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007a06:	2300      	movs	r3, #0
 8007a08:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007a0e:	4622      	mov	r2, r4
 8007a10:	462b      	mov	r3, r5
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f04f 0100 	mov.w	r1, #0
 8007a1a:	0159      	lsls	r1, r3, #5
 8007a1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a20:	0150      	lsls	r0, r2, #5
 8007a22:	4602      	mov	r2, r0
 8007a24:	460b      	mov	r3, r1
 8007a26:	4621      	mov	r1, r4
 8007a28:	1a51      	subs	r1, r2, r1
 8007a2a:	6139      	str	r1, [r7, #16]
 8007a2c:	4629      	mov	r1, r5
 8007a2e:	eb63 0301 	sbc.w	r3, r3, r1
 8007a32:	617b      	str	r3, [r7, #20]
 8007a34:	f04f 0200 	mov.w	r2, #0
 8007a38:	f04f 0300 	mov.w	r3, #0
 8007a3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a40:	4659      	mov	r1, fp
 8007a42:	018b      	lsls	r3, r1, #6
 8007a44:	4651      	mov	r1, sl
 8007a46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a4a:	4651      	mov	r1, sl
 8007a4c:	018a      	lsls	r2, r1, #6
 8007a4e:	4651      	mov	r1, sl
 8007a50:	ebb2 0801 	subs.w	r8, r2, r1
 8007a54:	4659      	mov	r1, fp
 8007a56:	eb63 0901 	sbc.w	r9, r3, r1
 8007a5a:	f04f 0200 	mov.w	r2, #0
 8007a5e:	f04f 0300 	mov.w	r3, #0
 8007a62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a6e:	4690      	mov	r8, r2
 8007a70:	4699      	mov	r9, r3
 8007a72:	4623      	mov	r3, r4
 8007a74:	eb18 0303 	adds.w	r3, r8, r3
 8007a78:	60bb      	str	r3, [r7, #8]
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	eb49 0303 	adc.w	r3, r9, r3
 8007a80:	60fb      	str	r3, [r7, #12]
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	f04f 0300 	mov.w	r3, #0
 8007a8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007a8e:	4629      	mov	r1, r5
 8007a90:	024b      	lsls	r3, r1, #9
 8007a92:	4621      	mov	r1, r4
 8007a94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007a98:	4621      	mov	r1, r4
 8007a9a:	024a      	lsls	r2, r1, #9
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007aa8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007aac:	f7f9 f8dc 	bl	8000c68 <__aeabi_uldivmod>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	4613      	mov	r3, r2
 8007ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ab8:	e058      	b.n	8007b6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aba:	4b38      	ldr	r3, [pc, #224]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8007abc:	685b      	ldr	r3, [r3, #4]
 8007abe:	099b      	lsrs	r3, r3, #6
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007aca:	623b      	str	r3, [r7, #32]
 8007acc:	2300      	movs	r3, #0
 8007ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8007ad0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007ad4:	4642      	mov	r2, r8
 8007ad6:	464b      	mov	r3, r9
 8007ad8:	f04f 0000 	mov.w	r0, #0
 8007adc:	f04f 0100 	mov.w	r1, #0
 8007ae0:	0159      	lsls	r1, r3, #5
 8007ae2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ae6:	0150      	lsls	r0, r2, #5
 8007ae8:	4602      	mov	r2, r0
 8007aea:	460b      	mov	r3, r1
 8007aec:	4641      	mov	r1, r8
 8007aee:	ebb2 0a01 	subs.w	sl, r2, r1
 8007af2:	4649      	mov	r1, r9
 8007af4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007af8:	f04f 0200 	mov.w	r2, #0
 8007afc:	f04f 0300 	mov.w	r3, #0
 8007b00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b0c:	ebb2 040a 	subs.w	r4, r2, sl
 8007b10:	eb63 050b 	sbc.w	r5, r3, fp
 8007b14:	f04f 0200 	mov.w	r2, #0
 8007b18:	f04f 0300 	mov.w	r3, #0
 8007b1c:	00eb      	lsls	r3, r5, #3
 8007b1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b22:	00e2      	lsls	r2, r4, #3
 8007b24:	4614      	mov	r4, r2
 8007b26:	461d      	mov	r5, r3
 8007b28:	4643      	mov	r3, r8
 8007b2a:	18e3      	adds	r3, r4, r3
 8007b2c:	603b      	str	r3, [r7, #0]
 8007b2e:	464b      	mov	r3, r9
 8007b30:	eb45 0303 	adc.w	r3, r5, r3
 8007b34:	607b      	str	r3, [r7, #4]
 8007b36:	f04f 0200 	mov.w	r2, #0
 8007b3a:	f04f 0300 	mov.w	r3, #0
 8007b3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b42:	4629      	mov	r1, r5
 8007b44:	028b      	lsls	r3, r1, #10
 8007b46:	4621      	mov	r1, r4
 8007b48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b4c:	4621      	mov	r1, r4
 8007b4e:	028a      	lsls	r2, r1, #10
 8007b50:	4610      	mov	r0, r2
 8007b52:	4619      	mov	r1, r3
 8007b54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007b56:	2200      	movs	r2, #0
 8007b58:	61bb      	str	r3, [r7, #24]
 8007b5a:	61fa      	str	r2, [r7, #28]
 8007b5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b60:	f7f9 f882 	bl	8000c68 <__aeabi_uldivmod>
 8007b64:	4602      	mov	r2, r0
 8007b66:	460b      	mov	r3, r1
 8007b68:	4613      	mov	r3, r2
 8007b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007b9c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	0c1b      	lsrs	r3, r3, #16
 8007b72:	f003 0303 	and.w	r3, r3, #3
 8007b76:	3301      	adds	r3, #1
 8007b78:	005b      	lsls	r3, r3, #1
 8007b7a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007b7c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b86:	e002      	b.n	8007b8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007b88:	4b05      	ldr	r3, [pc, #20]	@ (8007ba0 <HAL_RCC_GetSysClockFreq+0x204>)
 8007b8a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007b8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3750      	adds	r7, #80	@ 0x50
 8007b94:	46bd      	mov	sp, r7
 8007b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b9a:	bf00      	nop
 8007b9c:	40023800 	.word	0x40023800
 8007ba0:	00f42400 	.word	0x00f42400
 8007ba4:	007a1200 	.word	0x007a1200

08007ba8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bac:	4b03      	ldr	r3, [pc, #12]	@ (8007bbc <HAL_RCC_GetHCLKFreq+0x14>)
 8007bae:	681b      	ldr	r3, [r3, #0]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	20000008 	.word	0x20000008

08007bc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bc4:	f7ff fff0 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	4b05      	ldr	r3, [pc, #20]	@ (8007be0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	0a9b      	lsrs	r3, r3, #10
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	4903      	ldr	r1, [pc, #12]	@ (8007be4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bd6:	5ccb      	ldrb	r3, [r1, r3]
 8007bd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	40023800 	.word	0x40023800
 8007be4:	0800ea58 	.word	0x0800ea58

08007be8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007bec:	f7ff ffdc 	bl	8007ba8 <HAL_RCC_GetHCLKFreq>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	0b5b      	lsrs	r3, r3, #13
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	4903      	ldr	r1, [pc, #12]	@ (8007c0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007bfe:	5ccb      	ldrb	r3, [r1, r3]
 8007c00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	40023800 	.word	0x40023800
 8007c0c:	0800ea58 	.word	0x0800ea58

08007c10 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b083      	sub	sp, #12
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
 8007c18:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	220f      	movs	r2, #15
 8007c1e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007c20:	4b12      	ldr	r3, [pc, #72]	@ (8007c6c <HAL_RCC_GetClockConfig+0x5c>)
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	f003 0203 	and.w	r2, r3, #3
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007c2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007c6c <HAL_RCC_GetClockConfig+0x5c>)
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007c38:	4b0c      	ldr	r3, [pc, #48]	@ (8007c6c <HAL_RCC_GetClockConfig+0x5c>)
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007c44:	4b09      	ldr	r3, [pc, #36]	@ (8007c6c <HAL_RCC_GetClockConfig+0x5c>)
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	08db      	lsrs	r3, r3, #3
 8007c4a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007c52:	4b07      	ldr	r3, [pc, #28]	@ (8007c70 <HAL_RCC_GetClockConfig+0x60>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 020f 	and.w	r2, r3, #15
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	601a      	str	r2, [r3, #0]
}
 8007c5e:	bf00      	nop
 8007c60:	370c      	adds	r7, #12
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	40023800 	.word	0x40023800
 8007c70:	40023c00 	.word	0x40023c00

08007c74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d10b      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d105      	bne.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d075      	beq.n	8007d94 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007ca8:	4b91      	ldr	r3, [pc, #580]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007caa:	2200      	movs	r2, #0
 8007cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007cae:	f7fb ffc7 	bl	8003c40 <HAL_GetTick>
 8007cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cb4:	e008      	b.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007cb6:	f7fb ffc3 	bl	8003c40 <HAL_GetTick>
 8007cba:	4602      	mov	r2, r0
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d901      	bls.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007cc4:	2303      	movs	r3, #3
 8007cc6:	e189      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007cc8:	4b8a      	ldr	r3, [pc, #552]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d1f0      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0301 	and.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d009      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	019a      	lsls	r2, r3, #6
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	071b      	lsls	r3, r3, #28
 8007cec:	4981      	ldr	r1, [pc, #516]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f003 0302 	and.w	r3, r3, #2
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01f      	beq.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007d00:	4b7c      	ldr	r3, [pc, #496]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007d06:	0f1b      	lsrs	r3, r3, #28
 8007d08:	f003 0307 	and.w	r3, r3, #7
 8007d0c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	019a      	lsls	r2, r3, #6
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	061b      	lsls	r3, r3, #24
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	071b      	lsls	r3, r3, #28
 8007d20:	4974      	ldr	r1, [pc, #464]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007d28:	4b72      	ldr	r3, [pc, #456]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007d2e:	f023 021f 	bic.w	r2, r3, #31
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	496e      	ldr	r1, [pc, #440]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d00d      	beq.n	8007d68 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	019a      	lsls	r2, r3, #6
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	061b      	lsls	r3, r3, #24
 8007d58:	431a      	orrs	r2, r3
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	071b      	lsls	r3, r3, #28
 8007d60:	4964      	ldr	r1, [pc, #400]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007d68:	4b61      	ldr	r3, [pc, #388]	@ (8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007d6e:	f7fb ff67 	bl	8003c40 <HAL_GetTick>
 8007d72:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d74:	e008      	b.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d76:	f7fb ff63 	bl	8003c40 <HAL_GetTick>
 8007d7a:	4602      	mov	r2, r0
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	1ad3      	subs	r3, r2, r3
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d901      	bls.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d84:	2303      	movs	r3, #3
 8007d86:	e129      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007d88:	4b5a      	ldr	r3, [pc, #360]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d0f0      	beq.n	8007d76 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0304 	and.w	r3, r3, #4
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d105      	bne.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d079      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007dac:	4b52      	ldr	r3, [pc, #328]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007db2:	f7fb ff45 	bl	8003c40 <HAL_GetTick>
 8007db6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007db8:	e008      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007dba:	f7fb ff41 	bl	8003c40 <HAL_GetTick>
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	2b02      	cmp	r3, #2
 8007dc6:	d901      	bls.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e107      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007dcc:	4b49      	ldr	r3, [pc, #292]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007dd8:	d0ef      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f003 0304 	and.w	r3, r3, #4
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d020      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007de6:	4b43      	ldr	r3, [pc, #268]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007dec:	0f1b      	lsrs	r3, r3, #28
 8007dee:	f003 0307 	and.w	r3, r3, #7
 8007df2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	691b      	ldr	r3, [r3, #16]
 8007df8:	019a      	lsls	r2, r3, #6
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	061b      	lsls	r3, r3, #24
 8007e00:	431a      	orrs	r2, r3
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	071b      	lsls	r3, r3, #28
 8007e06:	493b      	ldr	r1, [pc, #236]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007e0e:	4b39      	ldr	r3, [pc, #228]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e14:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6a1b      	ldr	r3, [r3, #32]
 8007e1c:	3b01      	subs	r3, #1
 8007e1e:	021b      	lsls	r3, r3, #8
 8007e20:	4934      	ldr	r1, [pc, #208]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0308 	and.w	r3, r3, #8
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01e      	beq.n	8007e72 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007e34:	4b2f      	ldr	r3, [pc, #188]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e3a:	0e1b      	lsrs	r3, r3, #24
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	691b      	ldr	r3, [r3, #16]
 8007e46:	019a      	lsls	r2, r3, #6
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	061b      	lsls	r3, r3, #24
 8007e4c:	431a      	orrs	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	071b      	lsls	r3, r3, #28
 8007e54:	4927      	ldr	r1, [pc, #156]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007e5c:	4b25      	ldr	r3, [pc, #148]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e62:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6a:	4922      	ldr	r1, [pc, #136]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007e72:	4b21      	ldr	r3, [pc, #132]	@ (8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007e74:	2201      	movs	r2, #1
 8007e76:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e78:	f7fb fee2 	bl	8003c40 <HAL_GetTick>
 8007e7c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e7e:	e008      	b.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007e80:	f7fb fede 	bl	8003c40 <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	697b      	ldr	r3, [r7, #20]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e0a4      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007e92:	4b18      	ldr	r3, [pc, #96]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007e9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007e9e:	d1ef      	bne.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	f003 0320 	and.w	r3, r3, #32
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 808b 	beq.w	8007fc4 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60fb      	str	r3, [r7, #12]
 8007eb2:	4b10      	ldr	r3, [pc, #64]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eb6:	4a0f      	ldr	r2, [pc, #60]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007eb8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007ebc:	6413      	str	r3, [r2, #64]	@ 0x40
 8007ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8007ef4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007eca:	4b0c      	ldr	r3, [pc, #48]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a0b      	ldr	r2, [pc, #44]	@ (8007efc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8007ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ed4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007ed6:	f7fb feb3 	bl	8003c40 <HAL_GetTick>
 8007eda:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007edc:	e010      	b.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ede:	f7fb feaf 	bl	8003c40 <HAL_GetTick>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	2b02      	cmp	r3, #2
 8007eea:	d909      	bls.n	8007f00 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8007eec:	2303      	movs	r3, #3
 8007eee:	e075      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x368>
 8007ef0:	42470068 	.word	0x42470068
 8007ef4:	40023800 	.word	0x40023800
 8007ef8:	42470070 	.word	0x42470070
 8007efc:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007f00:	4b38      	ldr	r3, [pc, #224]	@ (8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0e8      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f0c:	4b36      	ldr	r3, [pc, #216]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f14:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d02f      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f20:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f24:	693a      	ldr	r2, [r7, #16]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d028      	beq.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f32:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007f34:	4b2d      	ldr	r3, [pc, #180]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f36:	2201      	movs	r2, #1
 8007f38:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8007fec <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007f40:	4a29      	ldr	r2, [pc, #164]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f42:	693b      	ldr	r3, [r7, #16]
 8007f44:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007f46:	4b28      	ldr	r3, [pc, #160]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	2b01      	cmp	r3, #1
 8007f50:	d114      	bne.n	8007f7c <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007f52:	f7fb fe75 	bl	8003c40 <HAL_GetTick>
 8007f56:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f58:	e00a      	b.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f5a:	f7fb fe71 	bl	8003c40 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d901      	bls.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007f6c:	2303      	movs	r3, #3
 8007f6e:	e035      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f70:	4b1d      	ldr	r3, [pc, #116]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d0ee      	beq.n	8007f5a <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f80:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007f84:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f88:	d10d      	bne.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8007f8a:	4b17      	ldr	r3, [pc, #92]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007f8c:	689b      	ldr	r3, [r3, #8]
 8007f8e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f96:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007f9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007f9e:	4912      	ldr	r1, [pc, #72]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	608b      	str	r3, [r1, #8]
 8007fa4:	e005      	b.n	8007fb2 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8007fa6:	4b10      	ldr	r3, [pc, #64]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	4a0f      	ldr	r2, [pc, #60]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fac:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007fb0:	6093      	str	r3, [r2, #8]
 8007fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fb4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fbe:	490a      	ldr	r1, [pc, #40]	@ (8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f003 0310 	and.w	r3, r3, #16
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d004      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8007fd6:	4b06      	ldr	r3, [pc, #24]	@ (8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8007fd8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3718      	adds	r7, #24
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}
 8007fe4:	40007000 	.word	0x40007000
 8007fe8:	40023800 	.word	0x40023800
 8007fec:	42470e40 	.word	0x42470e40
 8007ff0:	424711e0 	.word	0x424711e0

08007ff4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d101      	bne.n	8008008 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008004:	2301      	movs	r3, #1
 8008006:	e025      	b.n	8008054 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800800e:	b2db      	uxtb	r3, r3
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f7f9 fb41 	bl	80016a4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2202      	movs	r2, #2
 8008026:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681a      	ldr	r2, [r3, #0]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	3304      	adds	r3, #4
 8008032:	4619      	mov	r1, r3
 8008034:	4610      	mov	r0, r2
 8008036:	f001 ffad 	bl	8009f94 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6818      	ldr	r0, [r3, #0]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	461a      	mov	r2, r3
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	f002 f802 	bl	800a04e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2201      	movs	r2, #1
 800804e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008052:	2300      	movs	r3, #0
}
 8008054:	4618      	mov	r0, r3
 8008056:	3708      	adds	r7, #8
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800806a:	2301      	movs	r3, #1
 800806c:	e07b      	b.n	8008166 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d108      	bne.n	8008088 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800807e:	d009      	beq.n	8008094 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	2200      	movs	r2, #0
 8008084:	61da      	str	r2, [r3, #28]
 8008086:	e005      	b.n	8008094 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2200      	movs	r2, #0
 8008092:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fb f9fa 	bl	80034a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2202      	movs	r2, #2
 80080b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	681a      	ldr	r2, [r3, #0]
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	689b      	ldr	r3, [r3, #8]
 80080d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	f003 0302 	and.w	r3, r3, #2
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	695b      	ldr	r3, [r3, #20]
 80080f6:	f003 0301 	and.w	r3, r3, #1
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	699b      	ldr	r3, [r3, #24]
 8008100:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008104:	431a      	orrs	r2, r3
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	69db      	ldr	r3, [r3, #28]
 800810a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6a1b      	ldr	r3, [r3, #32]
 8008114:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008118:	ea42 0103 	orr.w	r1, r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008120:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	430a      	orrs	r2, r1
 800812a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	0c1b      	lsrs	r3, r3, #16
 8008132:	f003 0104 	and.w	r1, r3, #4
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800813a:	f003 0210 	and.w	r2, r3, #16
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	69da      	ldr	r2, [r3, #28]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008154:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2200      	movs	r2, #0
 800815a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2201      	movs	r2, #1
 8008160:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3708      	adds	r7, #8
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b088      	sub	sp, #32
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	60b9      	str	r1, [r7, #8]
 8008178:	603b      	str	r3, [r7, #0]
 800817a:	4613      	mov	r3, r2
 800817c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800817e:	f7fb fd5f 	bl	8003c40 <HAL_GetTick>
 8008182:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8008184:	88fb      	ldrh	r3, [r7, #6]
 8008186:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800818e:	b2db      	uxtb	r3, r3
 8008190:	2b01      	cmp	r3, #1
 8008192:	d001      	beq.n	8008198 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8008194:	2302      	movs	r3, #2
 8008196:	e12a      	b.n	80083ee <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <HAL_SPI_Transmit+0x36>
 800819e:	88fb      	ldrh	r3, [r7, #6]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d101      	bne.n	80081a8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	e122      	b.n	80083ee <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d101      	bne.n	80081b6 <HAL_SPI_Transmit+0x48>
 80081b2:	2302      	movs	r3, #2
 80081b4:	e11b      	b.n	80083ee <HAL_SPI_Transmit+0x280>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	2201      	movs	r2, #1
 80081ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2203      	movs	r2, #3
 80081c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	88fa      	ldrh	r2, [r7, #6]
 80081d6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	88fa      	ldrh	r2, [r7, #6]
 80081dc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2200      	movs	r2, #0
 80081e2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	2200      	movs	r2, #0
 80081ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	2200      	movs	r2, #0
 80081f4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2200      	movs	r2, #0
 80081fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008204:	d10f      	bne.n	8008226 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008214:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008224:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008230:	2b40      	cmp	r3, #64	@ 0x40
 8008232:	d007      	beq.n	8008244 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	681a      	ldr	r2, [r3, #0]
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008242:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68db      	ldr	r3, [r3, #12]
 8008248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800824c:	d152      	bne.n	80082f4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <HAL_SPI_Transmit+0xee>
 8008256:	8b7b      	ldrh	r3, [r7, #26]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d145      	bne.n	80082e8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008260:	881a      	ldrh	r2, [r3, #0]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800826c:	1c9a      	adds	r2, r3, #2
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008276:	b29b      	uxth	r3, r3
 8008278:	3b01      	subs	r3, #1
 800827a:	b29a      	uxth	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008280:	e032      	b.n	80082e8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 0302 	and.w	r3, r3, #2
 800828c:	2b02      	cmp	r3, #2
 800828e:	d112      	bne.n	80082b6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008294:	881a      	ldrh	r2, [r3, #0]
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082a0:	1c9a      	adds	r2, r3, #2
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80082b4:	e018      	b.n	80082e8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082b6:	f7fb fcc3 	bl	8003c40 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	683a      	ldr	r2, [r7, #0]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d803      	bhi.n	80082ce <HAL_SPI_Transmit+0x160>
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082cc:	d102      	bne.n	80082d4 <HAL_SPI_Transmit+0x166>
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d109      	bne.n	80082e8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2201      	movs	r2, #1
 80082d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80082e4:	2303      	movs	r3, #3
 80082e6:	e082      	b.n	80083ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082ec:	b29b      	uxth	r3, r3
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1c7      	bne.n	8008282 <HAL_SPI_Transmit+0x114>
 80082f2:	e053      	b.n	800839c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	685b      	ldr	r3, [r3, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d002      	beq.n	8008302 <HAL_SPI_Transmit+0x194>
 80082fc:	8b7b      	ldrh	r3, [r7, #26]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d147      	bne.n	8008392 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	330c      	adds	r3, #12
 800830c:	7812      	ldrb	r2, [r2, #0]
 800830e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008314:	1c5a      	adds	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8008328:	e033      	b.n	8008392 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0302 	and.w	r3, r3, #2
 8008334:	2b02      	cmp	r3, #2
 8008336:	d113      	bne.n	8008360 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	330c      	adds	r3, #12
 8008342:	7812      	ldrb	r2, [r2, #0]
 8008344:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800834a:	1c5a      	adds	r2, r3, #1
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008354:	b29b      	uxth	r3, r3
 8008356:	3b01      	subs	r3, #1
 8008358:	b29a      	uxth	r2, r3
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800835e:	e018      	b.n	8008392 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008360:	f7fb fc6e 	bl	8003c40 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	683a      	ldr	r2, [r7, #0]
 800836c:	429a      	cmp	r2, r3
 800836e:	d803      	bhi.n	8008378 <HAL_SPI_Transmit+0x20a>
 8008370:	683b      	ldr	r3, [r7, #0]
 8008372:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008376:	d102      	bne.n	800837e <HAL_SPI_Transmit+0x210>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d109      	bne.n	8008392 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e02d      	b.n	80083ee <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008396:	b29b      	uxth	r3, r3
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1c6      	bne.n	800832a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800839c:	69fa      	ldr	r2, [r7, #28]
 800839e:	6839      	ldr	r1, [r7, #0]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 fd21 	bl	8008de8 <SPI_EndRxTxTransaction>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d002      	beq.n	80083b2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2220      	movs	r2, #32
 80083b0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	617b      	str	r3, [r7, #20]
 80083ce:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80083e8:	2301      	movs	r3, #1
 80083ea:	e000      	b.n	80083ee <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80083ec:	2300      	movs	r3, #0
  }
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3720      	adds	r7, #32
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b088      	sub	sp, #32
 80083fa:	af02      	add	r7, sp, #8
 80083fc:	60f8      	str	r0, [r7, #12]
 80083fe:	60b9      	str	r1, [r7, #8]
 8008400:	603b      	str	r3, [r7, #0]
 8008402:	4613      	mov	r3, r2
 8008404:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b01      	cmp	r3, #1
 8008410:	d001      	beq.n	8008416 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8008412:	2302      	movs	r3, #2
 8008414:	e104      	b.n	8008620 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800841e:	d112      	bne.n	8008446 <HAL_SPI_Receive+0x50>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d10e      	bne.n	8008446 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2204      	movs	r2, #4
 800842c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008430:	88fa      	ldrh	r2, [r7, #6]
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4613      	mov	r3, r2
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	68b9      	ldr	r1, [r7, #8]
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f000 f8f3 	bl	8008628 <HAL_SPI_TransmitReceive>
 8008442:	4603      	mov	r3, r0
 8008444:	e0ec      	b.n	8008620 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008446:	f7fb fbfb 	bl	8003c40 <HAL_GetTick>
 800844a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d002      	beq.n	8008458 <HAL_SPI_Receive+0x62>
 8008452:	88fb      	ldrh	r3, [r7, #6]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d101      	bne.n	800845c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8008458:	2301      	movs	r3, #1
 800845a:	e0e1      	b.n	8008620 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_SPI_Receive+0x74>
 8008466:	2302      	movs	r3, #2
 8008468:	e0da      	b.n	8008620 <HAL_SPI_Receive+0x22a>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	2201      	movs	r2, #1
 800846e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	2204      	movs	r2, #4
 8008476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	68ba      	ldr	r2, [r7, #8]
 8008484:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	88fa      	ldrh	r2, [r7, #6]
 800848a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	88fa      	ldrh	r2, [r7, #6]
 8008490:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2200      	movs	r2, #0
 80084a2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084b8:	d10f      	bne.n	80084da <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	681a      	ldr	r2, [r3, #0]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681a      	ldr	r2, [r3, #0]
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80084d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084e4:	2b40      	cmp	r3, #64	@ 0x40
 80084e6:	d007      	beq.n	80084f8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	681a      	ldr	r2, [r3, #0]
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084f6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	68db      	ldr	r3, [r3, #12]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d170      	bne.n	80085e2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008500:	e035      	b.n	800856e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	2b01      	cmp	r3, #1
 800850e:	d115      	bne.n	800853c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f103 020c 	add.w	r2, r3, #12
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800851c:	7812      	ldrb	r2, [r2, #0]
 800851e:	b2d2      	uxtb	r2, r2
 8008520:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008526:	1c5a      	adds	r2, r3, #1
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008530:	b29b      	uxth	r3, r3
 8008532:	3b01      	subs	r3, #1
 8008534:	b29a      	uxth	r2, r3
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800853a:	e018      	b.n	800856e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800853c:	f7fb fb80 	bl	8003c40 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	429a      	cmp	r2, r3
 800854a:	d803      	bhi.n	8008554 <HAL_SPI_Receive+0x15e>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008552:	d102      	bne.n	800855a <HAL_SPI_Receive+0x164>
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d109      	bne.n	800856e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2200      	movs	r2, #0
 8008566:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800856a:	2303      	movs	r3, #3
 800856c:	e058      	b.n	8008620 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008572:	b29b      	uxth	r3, r3
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1c4      	bne.n	8008502 <HAL_SPI_Receive+0x10c>
 8008578:	e038      	b.n	80085ec <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	f003 0301 	and.w	r3, r3, #1
 8008584:	2b01      	cmp	r3, #1
 8008586:	d113      	bne.n	80085b0 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	68da      	ldr	r2, [r3, #12]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008592:	b292      	uxth	r2, r2
 8008594:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	1c9a      	adds	r2, r3, #2
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	3b01      	subs	r3, #1
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80085ae:	e018      	b.n	80085e2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80085b0:	f7fb fb46 	bl	8003c40 <HAL_GetTick>
 80085b4:	4602      	mov	r2, r0
 80085b6:	697b      	ldr	r3, [r7, #20]
 80085b8:	1ad3      	subs	r3, r2, r3
 80085ba:	683a      	ldr	r2, [r7, #0]
 80085bc:	429a      	cmp	r2, r3
 80085be:	d803      	bhi.n	80085c8 <HAL_SPI_Receive+0x1d2>
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80085c6:	d102      	bne.n	80085ce <HAL_SPI_Receive+0x1d8>
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d109      	bne.n	80085e2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	2200      	movs	r2, #0
 80085da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80085de:	2303      	movs	r3, #3
 80085e0:	e01e      	b.n	8008620 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d1c6      	bne.n	800857a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80085ec:	697a      	ldr	r2, [r7, #20]
 80085ee:	6839      	ldr	r1, [r7, #0]
 80085f0:	68f8      	ldr	r0, [r7, #12]
 80085f2:	f000 fb93 	bl	8008d1c <SPI_EndRxTransaction>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d002      	beq.n	8008602 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2220      	movs	r2, #32
 8008600:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e000      	b.n	8008620 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800861e:	2300      	movs	r3, #0
  }
}
 8008620:	4618      	mov	r0, r3
 8008622:	3718      	adds	r7, #24
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b08a      	sub	sp, #40	@ 0x28
 800862c:	af00      	add	r7, sp, #0
 800862e:	60f8      	str	r0, [r7, #12]
 8008630:	60b9      	str	r1, [r7, #8]
 8008632:	607a      	str	r2, [r7, #4]
 8008634:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008636:	2301      	movs	r3, #1
 8008638:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800863a:	f7fb fb01 	bl	8003c40 <HAL_GetTick>
 800863e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008646:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800864e:	887b      	ldrh	r3, [r7, #2]
 8008650:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008652:	7ffb      	ldrb	r3, [r7, #31]
 8008654:	2b01      	cmp	r3, #1
 8008656:	d00c      	beq.n	8008672 <HAL_SPI_TransmitReceive+0x4a>
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800865e:	d106      	bne.n	800866e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d102      	bne.n	800866e <HAL_SPI_TransmitReceive+0x46>
 8008668:	7ffb      	ldrb	r3, [r7, #31]
 800866a:	2b04      	cmp	r3, #4
 800866c:	d001      	beq.n	8008672 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800866e:	2302      	movs	r3, #2
 8008670:	e17f      	b.n	8008972 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d005      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x5c>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d002      	beq.n	8008684 <HAL_SPI_TransmitReceive+0x5c>
 800867e:	887b      	ldrh	r3, [r7, #2]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d101      	bne.n	8008688 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	e174      	b.n	8008972 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800868e:	2b01      	cmp	r3, #1
 8008690:	d101      	bne.n	8008696 <HAL_SPI_TransmitReceive+0x6e>
 8008692:	2302      	movs	r3, #2
 8008694:	e16d      	b.n	8008972 <HAL_SPI_TransmitReceive+0x34a>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	2201      	movs	r2, #1
 800869a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b04      	cmp	r3, #4
 80086a8:	d003      	beq.n	80086b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2205      	movs	r2, #5
 80086ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	887a      	ldrh	r2, [r7, #2]
 80086c2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	887a      	ldrh	r2, [r7, #2]
 80086c8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	887a      	ldrh	r2, [r7, #2]
 80086d4:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	887a      	ldrh	r2, [r7, #2]
 80086da:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2200      	movs	r2, #0
 80086e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2200      	movs	r2, #0
 80086e6:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086f2:	2b40      	cmp	r3, #64	@ 0x40
 80086f4:	d007      	beq.n	8008706 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681a      	ldr	r2, [r3, #0]
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008704:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	68db      	ldr	r3, [r3, #12]
 800870a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800870e:	d17e      	bne.n	800880e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d002      	beq.n	800871e <HAL_SPI_TransmitReceive+0xf6>
 8008718:	8afb      	ldrh	r3, [r7, #22]
 800871a:	2b01      	cmp	r3, #1
 800871c:	d16c      	bne.n	80087f8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008722:	881a      	ldrh	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800872e:	1c9a      	adds	r2, r3, #2
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008738:	b29b      	uxth	r3, r3
 800873a:	3b01      	subs	r3, #1
 800873c:	b29a      	uxth	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008742:	e059      	b.n	80087f8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b02      	cmp	r3, #2
 8008750:	d11b      	bne.n	800878a <HAL_SPI_TransmitReceive+0x162>
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008756:	b29b      	uxth	r3, r3
 8008758:	2b00      	cmp	r3, #0
 800875a:	d016      	beq.n	800878a <HAL_SPI_TransmitReceive+0x162>
 800875c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875e:	2b01      	cmp	r3, #1
 8008760:	d113      	bne.n	800878a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008766:	881a      	ldrh	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008772:	1c9a      	adds	r2, r3, #2
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800877c:	b29b      	uxth	r3, r3
 800877e:	3b01      	subs	r3, #1
 8008780:	b29a      	uxth	r2, r3
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	689b      	ldr	r3, [r3, #8]
 8008790:	f003 0301 	and.w	r3, r3, #1
 8008794:	2b01      	cmp	r3, #1
 8008796:	d119      	bne.n	80087cc <HAL_SPI_TransmitReceive+0x1a4>
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800879c:	b29b      	uxth	r3, r3
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d014      	beq.n	80087cc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	68da      	ldr	r2, [r3, #12]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ac:	b292      	uxth	r2, r2
 80087ae:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087b4:	1c9a      	adds	r2, r3, #2
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80087be:	b29b      	uxth	r3, r3
 80087c0:	3b01      	subs	r3, #1
 80087c2:	b29a      	uxth	r2, r3
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80087c8:	2301      	movs	r3, #1
 80087ca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80087cc:	f7fb fa38 	bl	8003c40 <HAL_GetTick>
 80087d0:	4602      	mov	r2, r0
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087d8:	429a      	cmp	r2, r3
 80087da:	d80d      	bhi.n	80087f8 <HAL_SPI_TransmitReceive+0x1d0>
 80087dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087e2:	d009      	beq.n	80087f8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e0bc      	b.n	8008972 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80087fc:	b29b      	uxth	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1a0      	bne.n	8008744 <HAL_SPI_TransmitReceive+0x11c>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008806:	b29b      	uxth	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d19b      	bne.n	8008744 <HAL_SPI_TransmitReceive+0x11c>
 800880c:	e082      	b.n	8008914 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <HAL_SPI_TransmitReceive+0x1f4>
 8008816:	8afb      	ldrh	r3, [r7, #22]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d171      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	330c      	adds	r3, #12
 8008826:	7812      	ldrb	r2, [r2, #0]
 8008828:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800882e:	1c5a      	adds	r2, r3, #1
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008838:	b29b      	uxth	r3, r3
 800883a:	3b01      	subs	r3, #1
 800883c:	b29a      	uxth	r2, r3
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008842:	e05d      	b.n	8008900 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	f003 0302 	and.w	r3, r3, #2
 800884e:	2b02      	cmp	r3, #2
 8008850:	d11c      	bne.n	800888c <HAL_SPI_TransmitReceive+0x264>
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008856:	b29b      	uxth	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	d017      	beq.n	800888c <HAL_SPI_TransmitReceive+0x264>
 800885c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800885e:	2b01      	cmp	r3, #1
 8008860:	d114      	bne.n	800888c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	330c      	adds	r3, #12
 800886c:	7812      	ldrb	r2, [r2, #0]
 800886e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008874:	1c5a      	adds	r2, r3, #1
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800887e:	b29b      	uxth	r3, r3
 8008880:	3b01      	subs	r3, #1
 8008882:	b29a      	uxth	r2, r3
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008888:	2300      	movs	r3, #0
 800888a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	689b      	ldr	r3, [r3, #8]
 8008892:	f003 0301 	and.w	r3, r3, #1
 8008896:	2b01      	cmp	r3, #1
 8008898:	d119      	bne.n	80088ce <HAL_SPI_TransmitReceive+0x2a6>
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800889e:	b29b      	uxth	r3, r3
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d014      	beq.n	80088ce <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088ae:	b2d2      	uxtb	r2, r2
 80088b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b6:	1c5a      	adds	r2, r3, #1
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80088c0:	b29b      	uxth	r3, r3
 80088c2:	3b01      	subs	r3, #1
 80088c4:	b29a      	uxth	r2, r3
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80088ca:	2301      	movs	r3, #1
 80088cc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80088ce:	f7fb f9b7 	bl	8003c40 <HAL_GetTick>
 80088d2:	4602      	mov	r2, r0
 80088d4:	6a3b      	ldr	r3, [r7, #32]
 80088d6:	1ad3      	subs	r3, r2, r3
 80088d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80088da:	429a      	cmp	r2, r3
 80088dc:	d803      	bhi.n	80088e6 <HAL_SPI_TransmitReceive+0x2be>
 80088de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088e4:	d102      	bne.n	80088ec <HAL_SPI_TransmitReceive+0x2c4>
 80088e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d109      	bne.n	8008900 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80088fc:	2303      	movs	r3, #3
 80088fe:	e038      	b.n	8008972 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008904:	b29b      	uxth	r3, r3
 8008906:	2b00      	cmp	r3, #0
 8008908:	d19c      	bne.n	8008844 <HAL_SPI_TransmitReceive+0x21c>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800890e:	b29b      	uxth	r3, r3
 8008910:	2b00      	cmp	r3, #0
 8008912:	d197      	bne.n	8008844 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008914:	6a3a      	ldr	r2, [r7, #32]
 8008916:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f000 fa65 	bl	8008de8 <SPI_EndRxTxTransaction>
 800891e:	4603      	mov	r3, r0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d008      	beq.n	8008936 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2220      	movs	r2, #32
 8008928:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008932:	2301      	movs	r3, #1
 8008934:	e01d      	b.n	8008972 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	689b      	ldr	r3, [r3, #8]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10a      	bne.n	8008954 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800893e:	2300      	movs	r3, #0
 8008940:	613b      	str	r3, [r7, #16]
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	613b      	str	r3, [r7, #16]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	613b      	str	r3, [r7, #16]
 8008952:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	2200      	movs	r2, #0
 8008960:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	e000      	b.n	8008972 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008970:	2300      	movs	r3, #0
  }
}
 8008972:	4618      	mov	r0, r3
 8008974:	3728      	adds	r7, #40	@ 0x28
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
	...

0800897c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	60f8      	str	r0, [r7, #12]
 8008984:	60b9      	str	r1, [r7, #8]
 8008986:	4613      	mov	r3, r2
 8008988:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b01      	cmp	r3, #1
 8008994:	d001      	beq.n	800899a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8008996:	2302      	movs	r3, #2
 8008998:	e097      	b.n	8008aca <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <HAL_SPI_Transmit_DMA+0x2a>
 80089a0:	88fb      	ldrh	r3, [r7, #6]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d101      	bne.n	80089aa <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e08f      	b.n	8008aca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d101      	bne.n	80089b8 <HAL_SPI_Transmit_DMA+0x3c>
 80089b4:	2302      	movs	r3, #2
 80089b6:	e088      	b.n	8008aca <HAL_SPI_Transmit_DMA+0x14e>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2203      	movs	r2, #3
 80089c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	68ba      	ldr	r2, [r7, #8]
 80089d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	88fa      	ldrh	r2, [r7, #6]
 80089d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	88fa      	ldrh	r2, [r7, #6]
 80089de:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	2200      	movs	r2, #0
 80089e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	2200      	movs	r2, #0
 80089ea:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	2200      	movs	r2, #0
 80089f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2200      	movs	r2, #0
 80089f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a06:	d10f      	bne.n	8008a28 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008a16:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008a26:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a2c:	4a29      	ldr	r2, [pc, #164]	@ (8008ad4 <HAL_SPI_Transmit_DMA+0x158>)
 8008a2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a34:	4a28      	ldr	r2, [pc, #160]	@ (8008ad8 <HAL_SPI_Transmit_DMA+0x15c>)
 8008a36:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a3c:	4a27      	ldr	r2, [pc, #156]	@ (8008adc <HAL_SPI_Transmit_DMA+0x160>)
 8008a3e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008a44:	2200      	movs	r2, #0
 8008a46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008a50:	4619      	mov	r1, r3
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	330c      	adds	r3, #12
 8008a58:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008a5e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8008a60:	f7fb faca 	bl	8003ff8 <HAL_DMA_Start_IT>
 8008a64:	4603      	mov	r3, r0
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d00b      	beq.n	8008a82 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a6e:	f043 0210 	orr.w	r2, r3, #16
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	e023      	b.n	8008aca <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a8c:	2b40      	cmp	r3, #64	@ 0x40
 8008a8e:	d007      	beq.n	8008aa0 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	681a      	ldr	r2, [r3, #0]
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008a9e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f042 0220 	orr.w	r2, r2, #32
 8008ab6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	685a      	ldr	r2, [r3, #4]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f042 0202 	orr.w	r2, r2, #2
 8008ac6:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008ac8:	2300      	movs	r3, #0
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	08008bb1 	.word	0x08008bb1
 8008ad8:	08008b09 	.word	0x08008b09
 8008adc:	08008bcd 	.word	0x08008bcd

08008ae0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b083      	sub	sp, #12
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8008afc:	bf00      	nop
 8008afe:	370c      	adds	r7, #12
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b14:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b16:	f7fb f893 	bl	8003c40 <HAL_GetTick>
 8008b1a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b2a:	d03b      	beq.n	8008ba4 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0220 	bic.w	r2, r2, #32
 8008b3a:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	697b      	ldr	r3, [r7, #20]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 0202 	bic.w	r2, r2, #2
 8008b4a:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	2164      	movs	r1, #100	@ 0x64
 8008b50:	6978      	ldr	r0, [r7, #20]
 8008b52:	f000 f949 	bl	8008de8 <SPI_EndRxTxTransaction>
 8008b56:	4603      	mov	r3, r0
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b60:	f043 0220 	orr.w	r2, r3, #32
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	689b      	ldr	r3, [r3, #8]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d10a      	bne.n	8008b86 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008b70:	2300      	movs	r3, #0
 8008b72:	60fb      	str	r3, [r7, #12]
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68db      	ldr	r3, [r3, #12]
 8008b7a:	60fb      	str	r3, [r7, #12]
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	60fb      	str	r3, [r7, #12]
 8008b84:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	2200      	movs	r2, #0
 8008b8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8008b8c:	697b      	ldr	r3, [r7, #20]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d003      	beq.n	8008ba4 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8008b9c:	6978      	ldr	r0, [r7, #20]
 8008b9e:	f7ff ffa9 	bl	8008af4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8008ba2:	e002      	b.n	8008baa <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8008ba4:	6978      	ldr	r0, [r7, #20]
 8008ba6:	f7fa fa9b 	bl	80030e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008baa:	3718      	adds	r7, #24
 8008bac:	46bd      	mov	sp, r7
 8008bae:	bd80      	pop	{r7, pc}

08008bb0 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7ff ff8e 	bl	8008ae0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008bc4:	bf00      	nop
 8008bc6:	3710      	adds	r7, #16
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	685a      	ldr	r2, [r3, #4]
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0203 	bic.w	r2, r2, #3
 8008be8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bee:	f043 0210 	orr.w	r2, r3, #16
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2201      	movs	r2, #1
 8008bfa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff ff78 	bl	8008af4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	60f8      	str	r0, [r7, #12]
 8008c14:	60b9      	str	r1, [r7, #8]
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	4613      	mov	r3, r2
 8008c1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008c1c:	f7fb f810 	bl	8003c40 <HAL_GetTick>
 8008c20:	4602      	mov	r2, r0
 8008c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c24:	1a9b      	subs	r3, r3, r2
 8008c26:	683a      	ldr	r2, [r7, #0]
 8008c28:	4413      	add	r3, r2
 8008c2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008c2c:	f7fb f808 	bl	8003c40 <HAL_GetTick>
 8008c30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008c32:	4b39      	ldr	r3, [pc, #228]	@ (8008d18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	015b      	lsls	r3, r3, #5
 8008c38:	0d1b      	lsrs	r3, r3, #20
 8008c3a:	69fa      	ldr	r2, [r7, #28]
 8008c3c:	fb02 f303 	mul.w	r3, r2, r3
 8008c40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008c42:	e054      	b.n	8008cee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c4a:	d050      	beq.n	8008cee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008c4c:	f7fa fff8 	bl	8003c40 <HAL_GetTick>
 8008c50:	4602      	mov	r2, r0
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	1ad3      	subs	r3, r2, r3
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	429a      	cmp	r2, r3
 8008c5a:	d902      	bls.n	8008c62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008c5c:	69fb      	ldr	r3, [r7, #28]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d13d      	bne.n	8008cde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008c7a:	d111      	bne.n	8008ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008c84:	d004      	beq.n	8008c90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	689b      	ldr	r3, [r3, #8]
 8008c8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c8e:	d107      	bne.n	8008ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ca8:	d10f      	bne.n	8008cca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008cb8:	601a      	str	r2, [r3, #0]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	2201      	movs	r2, #1
 8008cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e017      	b.n	8008d0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d101      	bne.n	8008ce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8008ce8:	697b      	ldr	r3, [r7, #20]
 8008cea:	3b01      	subs	r3, #1
 8008cec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	689a      	ldr	r2, [r3, #8]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4013      	ands	r3, r2
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	429a      	cmp	r2, r3
 8008cfc:	bf0c      	ite	eq
 8008cfe:	2301      	moveq	r3, #1
 8008d00:	2300      	movne	r3, #0
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	461a      	mov	r2, r3
 8008d06:	79fb      	ldrb	r3, [r7, #7]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d19b      	bne.n	8008c44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3720      	adds	r7, #32
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	20000008 	.word	0x20000008

08008d1c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d30:	d111      	bne.n	8008d56 <SPI_EndRxTransaction+0x3a>
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008d3a:	d004      	beq.n	8008d46 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	689b      	ldr	r3, [r3, #8]
 8008d40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d44:	d107      	bne.n	8008d56 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008d54:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008d5e:	d12a      	bne.n	8008db6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	689b      	ldr	r3, [r3, #8]
 8008d64:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d68:	d012      	beq.n	8008d90 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	9300      	str	r3, [sp, #0]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	2200      	movs	r2, #0
 8008d72:	2180      	movs	r1, #128	@ 0x80
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f7ff ff49 	bl	8008c0c <SPI_WaitFlagStateUntilTimeout>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d02d      	beq.n	8008ddc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d84:	f043 0220 	orr.w	r2, r3, #32
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	e026      	b.n	8008dde <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	9300      	str	r3, [sp, #0]
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2200      	movs	r2, #0
 8008d98:	2101      	movs	r1, #1
 8008d9a:	68f8      	ldr	r0, [r7, #12]
 8008d9c:	f7ff ff36 	bl	8008c0c <SPI_WaitFlagStateUntilTimeout>
 8008da0:	4603      	mov	r3, r0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d01a      	beq.n	8008ddc <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008daa:	f043 0220 	orr.w	r2, r3, #32
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008db2:	2303      	movs	r3, #3
 8008db4:	e013      	b.n	8008dde <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	2101      	movs	r1, #1
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f7ff ff23 	bl	8008c0c <SPI_WaitFlagStateUntilTimeout>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d007      	beq.n	8008ddc <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008dd0:	f043 0220 	orr.w	r2, r3, #32
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008dd8:	2303      	movs	r3, #3
 8008dda:	e000      	b.n	8008dde <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3710      	adds	r7, #16
 8008de2:	46bd      	mov	sp, r7
 8008de4:	bd80      	pop	{r7, pc}
	...

08008de8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b088      	sub	sp, #32
 8008dec:	af02      	add	r7, sp, #8
 8008dee:	60f8      	str	r0, [r7, #12]
 8008df0:	60b9      	str	r1, [r7, #8]
 8008df2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	9300      	str	r3, [sp, #0]
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	2102      	movs	r1, #2
 8008dfe:	68f8      	ldr	r0, [r7, #12]
 8008e00:	f7ff ff04 	bl	8008c0c <SPI_WaitFlagStateUntilTimeout>
 8008e04:	4603      	mov	r3, r0
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d007      	beq.n	8008e1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e0e:	f043 0220 	orr.w	r2, r3, #32
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8008e16:	2303      	movs	r3, #3
 8008e18:	e032      	b.n	8008e80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8008e88 <SPI_EndRxTxTransaction+0xa0>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a1b      	ldr	r2, [pc, #108]	@ (8008e8c <SPI_EndRxTxTransaction+0xa4>)
 8008e20:	fba2 2303 	umull	r2, r3, r2, r3
 8008e24:	0d5b      	lsrs	r3, r3, #21
 8008e26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008e2a:	fb02 f303 	mul.w	r3, r2, r3
 8008e2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008e38:	d112      	bne.n	8008e60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	2200      	movs	r2, #0
 8008e42:	2180      	movs	r1, #128	@ 0x80
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f7ff fee1 	bl	8008c0c <SPI_WaitFlagStateUntilTimeout>
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d016      	beq.n	8008e7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008e54:	f043 0220 	orr.w	r2, r3, #32
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e00f      	b.n	8008e80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d00a      	beq.n	8008e7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e76:	2b80      	cmp	r3, #128	@ 0x80
 8008e78:	d0f2      	beq.n	8008e60 <SPI_EndRxTxTransaction+0x78>
 8008e7a:	e000      	b.n	8008e7e <SPI_EndRxTxTransaction+0x96>
        break;
 8008e7c:	bf00      	nop
  }

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	20000008 	.word	0x20000008
 8008e8c:	165e9f81 	.word	0x165e9f81

08008e90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e041      	b.n	8008f26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d106      	bne.n	8008ebc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f7fa fdb2 	bl	8003a20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2202      	movs	r2, #2
 8008ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	3304      	adds	r3, #4
 8008ecc:	4619      	mov	r1, r3
 8008ece:	4610      	mov	r0, r2
 8008ed0:	f000 fa7e 	bl	80093d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2201      	movs	r2, #1
 8008ee8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	2201      	movs	r2, #1
 8008ef0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2201      	movs	r2, #1
 8008ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2201      	movs	r2, #1
 8008f00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3708      	adds	r7, #8
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
	...

08008f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f3e:	b2db      	uxtb	r3, r3
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d001      	beq.n	8008f48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008f44:	2301      	movs	r3, #1
 8008f46:	e04e      	b.n	8008fe6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f042 0201 	orr.w	r2, r2, #1
 8008f5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	4a23      	ldr	r2, [pc, #140]	@ (8008ff4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d022      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0x80>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f72:	d01d      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0x80>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	4a1f      	ldr	r2, [pc, #124]	@ (8008ff8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d018      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0x80>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4a1e      	ldr	r2, [pc, #120]	@ (8008ffc <HAL_TIM_Base_Start_IT+0xcc>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d013      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0x80>
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a1c      	ldr	r2, [pc, #112]	@ (8009000 <HAL_TIM_Base_Start_IT+0xd0>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d00e      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0x80>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a1b      	ldr	r2, [pc, #108]	@ (8009004 <HAL_TIM_Base_Start_IT+0xd4>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d009      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0x80>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a19      	ldr	r2, [pc, #100]	@ (8009008 <HAL_TIM_Base_Start_IT+0xd8>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d004      	beq.n	8008fb0 <HAL_TIM_Base_Start_IT+0x80>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a18      	ldr	r2, [pc, #96]	@ (800900c <HAL_TIM_Base_Start_IT+0xdc>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d111      	bne.n	8008fd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f003 0307 	and.w	r3, r3, #7
 8008fba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	2b06      	cmp	r3, #6
 8008fc0:	d010      	beq.n	8008fe4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	681a      	ldr	r2, [r3, #0]
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f042 0201 	orr.w	r2, r2, #1
 8008fd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008fd2:	e007      	b.n	8008fe4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	681a      	ldr	r2, [r3, #0]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f042 0201 	orr.w	r2, r2, #1
 8008fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008fe4:	2300      	movs	r3, #0
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	40010000 	.word	0x40010000
 8008ff8:	40000400 	.word	0x40000400
 8008ffc:	40000800 	.word	0x40000800
 8009000:	40000c00 	.word	0x40000c00
 8009004:	40010400 	.word	0x40010400
 8009008:	40014000 	.word	0x40014000
 800900c:	40001800 	.word	0x40001800

08009010 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d020      	beq.n	8009074 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f003 0302 	and.w	r3, r3, #2
 8009038:	2b00      	cmp	r3, #0
 800903a:	d01b      	beq.n	8009074 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0202 	mvn.w	r2, #2
 8009044:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2201      	movs	r2, #1
 800904a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	699b      	ldr	r3, [r3, #24]
 8009052:	f003 0303 	and.w	r3, r3, #3
 8009056:	2b00      	cmp	r3, #0
 8009058:	d003      	beq.n	8009062 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 f999 	bl	8009392 <HAL_TIM_IC_CaptureCallback>
 8009060:	e005      	b.n	800906e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009062:	6878      	ldr	r0, [r7, #4]
 8009064:	f000 f98b 	bl	800937e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f99c 	bl	80093a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009074:	68bb      	ldr	r3, [r7, #8]
 8009076:	f003 0304 	and.w	r3, r3, #4
 800907a:	2b00      	cmp	r3, #0
 800907c:	d020      	beq.n	80090c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f003 0304 	and.w	r3, r3, #4
 8009084:	2b00      	cmp	r3, #0
 8009086:	d01b      	beq.n	80090c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f06f 0204 	mvn.w	r2, #4
 8009090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2202      	movs	r2, #2
 8009096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f973 	bl	8009392 <HAL_TIM_IC_CaptureCallback>
 80090ac:	e005      	b.n	80090ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f000 f965 	bl	800937e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090b4:	6878      	ldr	r0, [r7, #4]
 80090b6:	f000 f976 	bl	80093a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2200      	movs	r2, #0
 80090be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	f003 0308 	and.w	r3, r3, #8
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d020      	beq.n	800910c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f003 0308 	and.w	r3, r3, #8
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d01b      	beq.n	800910c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f06f 0208 	mvn.w	r2, #8
 80090dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2204      	movs	r2, #4
 80090e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	69db      	ldr	r3, [r3, #28]
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d003      	beq.n	80090fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 f94d 	bl	8009392 <HAL_TIM_IC_CaptureCallback>
 80090f8:	e005      	b.n	8009106 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f000 f93f 	bl	800937e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 f950 	bl	80093a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	f003 0310 	and.w	r3, r3, #16
 8009112:	2b00      	cmp	r3, #0
 8009114:	d020      	beq.n	8009158 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	f003 0310 	and.w	r3, r3, #16
 800911c:	2b00      	cmp	r3, #0
 800911e:	d01b      	beq.n	8009158 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f06f 0210 	mvn.w	r2, #16
 8009128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2208      	movs	r2, #8
 800912e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	69db      	ldr	r3, [r3, #28]
 8009136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800913a:	2b00      	cmp	r3, #0
 800913c:	d003      	beq.n	8009146 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f927 	bl	8009392 <HAL_TIM_IC_CaptureCallback>
 8009144:	e005      	b.n	8009152 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 f919 	bl	800937e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 f92a 	bl	80093a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	2200      	movs	r2, #0
 8009156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	f003 0301 	and.w	r3, r3, #1
 800915e:	2b00      	cmp	r3, #0
 8009160:	d00c      	beq.n	800917c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	f003 0301 	and.w	r3, r3, #1
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f06f 0201 	mvn.w	r2, #1
 8009174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7fa f906 	bl	8003388 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00c      	beq.n	80091a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800918c:	2b00      	cmp	r3, #0
 800918e:	d007      	beq.n	80091a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fae4 	bl	8009768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d00c      	beq.n	80091c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d007      	beq.n	80091c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80091bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f8fb 	bl	80093ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80091c4:	68bb      	ldr	r3, [r7, #8]
 80091c6:	f003 0320 	and.w	r3, r3, #32
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00c      	beq.n	80091e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f003 0320 	and.w	r3, r3, #32
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d007      	beq.n	80091e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f06f 0220 	mvn.w	r2, #32
 80091e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091e2:	6878      	ldr	r0, [r7, #4]
 80091e4:	f000 fab6 	bl	8009754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091e8:	bf00      	nop
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	b084      	sub	sp, #16
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009204:	2b01      	cmp	r3, #1
 8009206:	d101      	bne.n	800920c <HAL_TIM_ConfigClockSource+0x1c>
 8009208:	2302      	movs	r3, #2
 800920a:	e0b4      	b.n	8009376 <HAL_TIM_ConfigClockSource+0x186>
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	2202      	movs	r2, #2
 8009218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	689b      	ldr	r3, [r3, #8]
 8009222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009224:	68bb      	ldr	r3, [r7, #8]
 8009226:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800922a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009232:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009244:	d03e      	beq.n	80092c4 <HAL_TIM_ConfigClockSource+0xd4>
 8009246:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800924a:	f200 8087 	bhi.w	800935c <HAL_TIM_ConfigClockSource+0x16c>
 800924e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009252:	f000 8086 	beq.w	8009362 <HAL_TIM_ConfigClockSource+0x172>
 8009256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800925a:	d87f      	bhi.n	800935c <HAL_TIM_ConfigClockSource+0x16c>
 800925c:	2b70      	cmp	r3, #112	@ 0x70
 800925e:	d01a      	beq.n	8009296 <HAL_TIM_ConfigClockSource+0xa6>
 8009260:	2b70      	cmp	r3, #112	@ 0x70
 8009262:	d87b      	bhi.n	800935c <HAL_TIM_ConfigClockSource+0x16c>
 8009264:	2b60      	cmp	r3, #96	@ 0x60
 8009266:	d050      	beq.n	800930a <HAL_TIM_ConfigClockSource+0x11a>
 8009268:	2b60      	cmp	r3, #96	@ 0x60
 800926a:	d877      	bhi.n	800935c <HAL_TIM_ConfigClockSource+0x16c>
 800926c:	2b50      	cmp	r3, #80	@ 0x50
 800926e:	d03c      	beq.n	80092ea <HAL_TIM_ConfigClockSource+0xfa>
 8009270:	2b50      	cmp	r3, #80	@ 0x50
 8009272:	d873      	bhi.n	800935c <HAL_TIM_ConfigClockSource+0x16c>
 8009274:	2b40      	cmp	r3, #64	@ 0x40
 8009276:	d058      	beq.n	800932a <HAL_TIM_ConfigClockSource+0x13a>
 8009278:	2b40      	cmp	r3, #64	@ 0x40
 800927a:	d86f      	bhi.n	800935c <HAL_TIM_ConfigClockSource+0x16c>
 800927c:	2b30      	cmp	r3, #48	@ 0x30
 800927e:	d064      	beq.n	800934a <HAL_TIM_ConfigClockSource+0x15a>
 8009280:	2b30      	cmp	r3, #48	@ 0x30
 8009282:	d86b      	bhi.n	800935c <HAL_TIM_ConfigClockSource+0x16c>
 8009284:	2b20      	cmp	r3, #32
 8009286:	d060      	beq.n	800934a <HAL_TIM_ConfigClockSource+0x15a>
 8009288:	2b20      	cmp	r3, #32
 800928a:	d867      	bhi.n	800935c <HAL_TIM_ConfigClockSource+0x16c>
 800928c:	2b00      	cmp	r3, #0
 800928e:	d05c      	beq.n	800934a <HAL_TIM_ConfigClockSource+0x15a>
 8009290:	2b10      	cmp	r3, #16
 8009292:	d05a      	beq.n	800934a <HAL_TIM_ConfigClockSource+0x15a>
 8009294:	e062      	b.n	800935c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092a6:	f000 f9b9 	bl	800961c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80092b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	609a      	str	r2, [r3, #8]
      break;
 80092c2:	e04f      	b.n	8009364 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092cc:	683b      	ldr	r3, [r7, #0]
 80092ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092d4:	f000 f9a2 	bl	800961c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	689a      	ldr	r2, [r3, #8]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80092e6:	609a      	str	r2, [r3, #8]
      break;
 80092e8:	e03c      	b.n	8009364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092f6:	461a      	mov	r2, r3
 80092f8:	f000 f916 	bl	8009528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2150      	movs	r1, #80	@ 0x50
 8009302:	4618      	mov	r0, r3
 8009304:	f000 f96f 	bl	80095e6 <TIM_ITRx_SetConfig>
      break;
 8009308:	e02c      	b.n	8009364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009316:	461a      	mov	r2, r3
 8009318:	f000 f935 	bl	8009586 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	2160      	movs	r1, #96	@ 0x60
 8009322:	4618      	mov	r0, r3
 8009324:	f000 f95f 	bl	80095e6 <TIM_ITRx_SetConfig>
      break;
 8009328:	e01c      	b.n	8009364 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800932e:	683b      	ldr	r3, [r7, #0]
 8009330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009332:	683b      	ldr	r3, [r7, #0]
 8009334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009336:	461a      	mov	r2, r3
 8009338:	f000 f8f6 	bl	8009528 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	2140      	movs	r1, #64	@ 0x40
 8009342:	4618      	mov	r0, r3
 8009344:	f000 f94f 	bl	80095e6 <TIM_ITRx_SetConfig>
      break;
 8009348:	e00c      	b.n	8009364 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4619      	mov	r1, r3
 8009354:	4610      	mov	r0, r2
 8009356:	f000 f946 	bl	80095e6 <TIM_ITRx_SetConfig>
      break;
 800935a:	e003      	b.n	8009364 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	73fb      	strb	r3, [r7, #15]
      break;
 8009360:	e000      	b.n	8009364 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009362:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009374:	7bfb      	ldrb	r3, [r7, #15]
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800937e:	b480      	push	{r7}
 8009380:	b083      	sub	sp, #12
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009386:	bf00      	nop
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009392:	b480      	push	{r7}
 8009394:	b083      	sub	sp, #12
 8009396:	af00      	add	r7, sp, #0
 8009398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800939a:	bf00      	nop
 800939c:	370c      	adds	r7, #12
 800939e:	46bd      	mov	sp, r7
 80093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a4:	4770      	bx	lr

080093a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093ae:	bf00      	nop
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr
	...

080093d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	4a46      	ldr	r2, [pc, #280]	@ (80094fc <TIM_Base_SetConfig+0x12c>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d013      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ee:	d00f      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a43      	ldr	r2, [pc, #268]	@ (8009500 <TIM_Base_SetConfig+0x130>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d00b      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a42      	ldr	r2, [pc, #264]	@ (8009504 <TIM_Base_SetConfig+0x134>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d007      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a41      	ldr	r2, [pc, #260]	@ (8009508 <TIM_Base_SetConfig+0x138>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d003      	beq.n	8009410 <TIM_Base_SetConfig+0x40>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a40      	ldr	r2, [pc, #256]	@ (800950c <TIM_Base_SetConfig+0x13c>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d108      	bne.n	8009422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	68fa      	ldr	r2, [r7, #12]
 800941e:	4313      	orrs	r3, r2
 8009420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a35      	ldr	r2, [pc, #212]	@ (80094fc <TIM_Base_SetConfig+0x12c>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d02b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009430:	d027      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	4a32      	ldr	r2, [pc, #200]	@ (8009500 <TIM_Base_SetConfig+0x130>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d023      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	4a31      	ldr	r2, [pc, #196]	@ (8009504 <TIM_Base_SetConfig+0x134>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d01f      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	4a30      	ldr	r2, [pc, #192]	@ (8009508 <TIM_Base_SetConfig+0x138>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d01b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a2f      	ldr	r2, [pc, #188]	@ (800950c <TIM_Base_SetConfig+0x13c>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d017      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	4a2e      	ldr	r2, [pc, #184]	@ (8009510 <TIM_Base_SetConfig+0x140>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d013      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a2d      	ldr	r2, [pc, #180]	@ (8009514 <TIM_Base_SetConfig+0x144>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d00f      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a2c      	ldr	r2, [pc, #176]	@ (8009518 <TIM_Base_SetConfig+0x148>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00b      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a2b      	ldr	r2, [pc, #172]	@ (800951c <TIM_Base_SetConfig+0x14c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d007      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a2a      	ldr	r2, [pc, #168]	@ (8009520 <TIM_Base_SetConfig+0x150>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d003      	beq.n	8009482 <TIM_Base_SetConfig+0xb2>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a29      	ldr	r2, [pc, #164]	@ (8009524 <TIM_Base_SetConfig+0x154>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d108      	bne.n	8009494 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009488:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
 800948e:	68fa      	ldr	r2, [r7, #12]
 8009490:	4313      	orrs	r3, r2
 8009492:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800949a:	683b      	ldr	r3, [r7, #0]
 800949c:	695b      	ldr	r3, [r3, #20]
 800949e:	4313      	orrs	r3, r2
 80094a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	68fa      	ldr	r2, [r7, #12]
 80094a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	689a      	ldr	r2, [r3, #8]
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681a      	ldr	r2, [r3, #0]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a10      	ldr	r2, [pc, #64]	@ (80094fc <TIM_Base_SetConfig+0x12c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d003      	beq.n	80094c8 <TIM_Base_SetConfig+0xf8>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	4a12      	ldr	r2, [pc, #72]	@ (800950c <TIM_Base_SetConfig+0x13c>)
 80094c4:	4293      	cmp	r3, r2
 80094c6:	d103      	bne.n	80094d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	691a      	ldr	r2, [r3, #16]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	f003 0301 	and.w	r3, r3, #1
 80094de:	2b01      	cmp	r3, #1
 80094e0:	d105      	bne.n	80094ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	f023 0201 	bic.w	r2, r3, #1
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	611a      	str	r2, [r3, #16]
  }
}
 80094ee:	bf00      	nop
 80094f0:	3714      	adds	r7, #20
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40010000 	.word	0x40010000
 8009500:	40000400 	.word	0x40000400
 8009504:	40000800 	.word	0x40000800
 8009508:	40000c00 	.word	0x40000c00
 800950c:	40010400 	.word	0x40010400
 8009510:	40014000 	.word	0x40014000
 8009514:	40014400 	.word	0x40014400
 8009518:	40014800 	.word	0x40014800
 800951c:	40001800 	.word	0x40001800
 8009520:	40001c00 	.word	0x40001c00
 8009524:	40002000 	.word	0x40002000

08009528 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009528:	b480      	push	{r7}
 800952a:	b087      	sub	sp, #28
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6a1b      	ldr	r3, [r3, #32]
 8009538:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	6a1b      	ldr	r3, [r3, #32]
 800953e:	f023 0201 	bic.w	r2, r3, #1
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	699b      	ldr	r3, [r3, #24]
 800954a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	011b      	lsls	r3, r3, #4
 8009558:	693a      	ldr	r2, [r7, #16]
 800955a:	4313      	orrs	r3, r2
 800955c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f023 030a 	bic.w	r3, r3, #10
 8009564:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009566:	697a      	ldr	r2, [r7, #20]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	4313      	orrs	r3, r2
 800956c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	693a      	ldr	r2, [r7, #16]
 8009572:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	621a      	str	r2, [r3, #32]
}
 800957a:	bf00      	nop
 800957c:	371c      	adds	r7, #28
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr

08009586 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009586:	b480      	push	{r7}
 8009588:	b087      	sub	sp, #28
 800958a:	af00      	add	r7, sp, #0
 800958c:	60f8      	str	r0, [r7, #12]
 800958e:	60b9      	str	r1, [r7, #8]
 8009590:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	6a1b      	ldr	r3, [r3, #32]
 8009596:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6a1b      	ldr	r3, [r3, #32]
 800959c:	f023 0210 	bic.w	r2, r3, #16
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	699b      	ldr	r3, [r3, #24]
 80095a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80095b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	031b      	lsls	r3, r3, #12
 80095b6:	693a      	ldr	r2, [r7, #16]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095bc:	697b      	ldr	r3, [r7, #20]
 80095be:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80095c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	011b      	lsls	r3, r3, #4
 80095c8:	697a      	ldr	r2, [r7, #20]
 80095ca:	4313      	orrs	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	693a      	ldr	r2, [r7, #16]
 80095d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	697a      	ldr	r2, [r7, #20]
 80095d8:	621a      	str	r2, [r3, #32]
}
 80095da:	bf00      	nop
 80095dc:	371c      	adds	r7, #28
 80095de:	46bd      	mov	sp, r7
 80095e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e4:	4770      	bx	lr

080095e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80095e6:	b480      	push	{r7}
 80095e8:	b085      	sub	sp, #20
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
 80095ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	4313      	orrs	r3, r2
 8009604:	f043 0307 	orr.w	r3, r3, #7
 8009608:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	609a      	str	r2, [r3, #8]
}
 8009610:	bf00      	nop
 8009612:	3714      	adds	r7, #20
 8009614:	46bd      	mov	sp, r7
 8009616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961a:	4770      	bx	lr

0800961c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	60f8      	str	r0, [r7, #12]
 8009624:	60b9      	str	r1, [r7, #8]
 8009626:	607a      	str	r2, [r7, #4]
 8009628:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009636:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	021a      	lsls	r2, r3, #8
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	431a      	orrs	r2, r3
 8009640:	68bb      	ldr	r3, [r7, #8]
 8009642:	4313      	orrs	r3, r2
 8009644:	697a      	ldr	r2, [r7, #20]
 8009646:	4313      	orrs	r3, r2
 8009648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	697a      	ldr	r2, [r7, #20]
 800964e:	609a      	str	r2, [r3, #8]
}
 8009650:	bf00      	nop
 8009652:	371c      	adds	r7, #28
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800966c:	2b01      	cmp	r3, #1
 800966e:	d101      	bne.n	8009674 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009670:	2302      	movs	r3, #2
 8009672:	e05a      	b.n	800972a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2201      	movs	r2, #1
 8009678:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2202      	movs	r2, #2
 8009680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	689b      	ldr	r3, [r3, #8]
 8009692:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800969a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	4313      	orrs	r3, r2
 80096a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68fa      	ldr	r2, [r7, #12]
 80096ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a21      	ldr	r2, [pc, #132]	@ (8009738 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d022      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80096c0:	d01d      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a1d      	ldr	r2, [pc, #116]	@ (800973c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d018      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a1b      	ldr	r2, [pc, #108]	@ (8009740 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d013      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a1a      	ldr	r2, [pc, #104]	@ (8009744 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d00e      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a18      	ldr	r2, [pc, #96]	@ (8009748 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d009      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a17      	ldr	r2, [pc, #92]	@ (800974c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d004      	beq.n	80096fe <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a15      	ldr	r2, [pc, #84]	@ (8009750 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d10c      	bne.n	8009718 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009704:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	4313      	orrs	r3, r2
 800970e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2201      	movs	r2, #1
 800971c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2200      	movs	r2, #0
 8009724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40010000 	.word	0x40010000
 800973c:	40000400 	.word	0x40000400
 8009740:	40000800 	.word	0x40000800
 8009744:	40000c00 	.word	0x40000c00
 8009748:	40010400 	.word	0x40010400
 800974c:	40014000 	.word	0x40014000
 8009750:	40001800 	.word	0x40001800

08009754 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009754:	b480      	push	{r7}
 8009756:	b083      	sub	sp, #12
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800975c:	bf00      	nop
 800975e:	370c      	adds	r7, #12
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009768:	b480      	push	{r7}
 800976a:	b083      	sub	sp, #12
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009770:	bf00      	nop
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr

0800977c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d101      	bne.n	800978e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978a:	2301      	movs	r3, #1
 800978c:	e042      	b.n	8009814 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b00      	cmp	r3, #0
 8009798:	d106      	bne.n	80097a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f7fa f9a4 	bl	8003af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2224      	movs	r2, #36	@ 0x24
 80097ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	68da      	ldr	r2, [r3, #12]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80097be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f000 f973 	bl	8009aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	691a      	ldr	r2, [r3, #16]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80097d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	695a      	ldr	r2, [r3, #20]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80097e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68da      	ldr	r2, [r3, #12]
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80097f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2220      	movs	r2, #32
 8009800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2220      	movs	r2, #32
 8009808:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2200      	movs	r2, #0
 8009810:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009812:	2300      	movs	r3, #0
}
 8009814:	4618      	mov	r0, r3
 8009816:	3708      	adds	r7, #8
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b08a      	sub	sp, #40	@ 0x28
 8009820:	af02      	add	r7, sp, #8
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	603b      	str	r3, [r7, #0]
 8009828:	4613      	mov	r3, r2
 800982a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b20      	cmp	r3, #32
 800983a:	d175      	bne.n	8009928 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <HAL_UART_Transmit+0x2c>
 8009842:	88fb      	ldrh	r3, [r7, #6]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	e06e      	b.n	800992a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	2200      	movs	r2, #0
 8009850:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2221      	movs	r2, #33	@ 0x21
 8009856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800985a:	f7fa f9f1 	bl	8003c40 <HAL_GetTick>
 800985e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	88fa      	ldrh	r2, [r7, #6]
 8009864:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	88fa      	ldrh	r2, [r7, #6]
 800986a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	689b      	ldr	r3, [r3, #8]
 8009870:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009874:	d108      	bne.n	8009888 <HAL_UART_Transmit+0x6c>
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	691b      	ldr	r3, [r3, #16]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d104      	bne.n	8009888 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	e003      	b.n	8009890 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800988c:	2300      	movs	r3, #0
 800988e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009890:	e02e      	b.n	80098f0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	9300      	str	r3, [sp, #0]
 8009896:	697b      	ldr	r3, [r7, #20]
 8009898:	2200      	movs	r2, #0
 800989a:	2180      	movs	r1, #128	@ 0x80
 800989c:	68f8      	ldr	r0, [r7, #12]
 800989e:	f000 f848 	bl	8009932 <UART_WaitOnFlagUntilTimeout>
 80098a2:	4603      	mov	r3, r0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d005      	beq.n	80098b4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80098b0:	2303      	movs	r3, #3
 80098b2:	e03a      	b.n	800992a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d10b      	bne.n	80098d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	881b      	ldrh	r3, [r3, #0]
 80098be:	461a      	mov	r2, r3
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80098c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	3302      	adds	r3, #2
 80098ce:	61bb      	str	r3, [r7, #24]
 80098d0:	e007      	b.n	80098e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80098d2:	69fb      	ldr	r3, [r7, #28]
 80098d4:	781a      	ldrb	r2, [r3, #0]
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	3301      	adds	r3, #1
 80098e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098e6:	b29b      	uxth	r3, r3
 80098e8:	3b01      	subs	r3, #1
 80098ea:	b29a      	uxth	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d1cb      	bne.n	8009892 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	2200      	movs	r2, #0
 8009902:	2140      	movs	r1, #64	@ 0x40
 8009904:	68f8      	ldr	r0, [r7, #12]
 8009906:	f000 f814 	bl	8009932 <UART_WaitOnFlagUntilTimeout>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d005      	beq.n	800991c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2220      	movs	r2, #32
 8009914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	e006      	b.n	800992a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2220      	movs	r2, #32
 8009920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009924:	2300      	movs	r3, #0
 8009926:	e000      	b.n	800992a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009928:	2302      	movs	r3, #2
  }
}
 800992a:	4618      	mov	r0, r3
 800992c:	3720      	adds	r7, #32
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}

08009932 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009932:	b580      	push	{r7, lr}
 8009934:	b086      	sub	sp, #24
 8009936:	af00      	add	r7, sp, #0
 8009938:	60f8      	str	r0, [r7, #12]
 800993a:	60b9      	str	r1, [r7, #8]
 800993c:	603b      	str	r3, [r7, #0]
 800993e:	4613      	mov	r3, r2
 8009940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009942:	e03b      	b.n	80099bc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009944:	6a3b      	ldr	r3, [r7, #32]
 8009946:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800994a:	d037      	beq.n	80099bc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800994c:	f7fa f978 	bl	8003c40 <HAL_GetTick>
 8009950:	4602      	mov	r2, r0
 8009952:	683b      	ldr	r3, [r7, #0]
 8009954:	1ad3      	subs	r3, r2, r3
 8009956:	6a3a      	ldr	r2, [r7, #32]
 8009958:	429a      	cmp	r2, r3
 800995a:	d302      	bcc.n	8009962 <UART_WaitOnFlagUntilTimeout+0x30>
 800995c:	6a3b      	ldr	r3, [r7, #32]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d101      	bne.n	8009966 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009962:	2303      	movs	r3, #3
 8009964:	e03a      	b.n	80099dc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68db      	ldr	r3, [r3, #12]
 800996c:	f003 0304 	and.w	r3, r3, #4
 8009970:	2b00      	cmp	r3, #0
 8009972:	d023      	beq.n	80099bc <UART_WaitOnFlagUntilTimeout+0x8a>
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b80      	cmp	r3, #128	@ 0x80
 8009978:	d020      	beq.n	80099bc <UART_WaitOnFlagUntilTimeout+0x8a>
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	2b40      	cmp	r3, #64	@ 0x40
 800997e:	d01d      	beq.n	80099bc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f003 0308 	and.w	r3, r3, #8
 800998a:	2b08      	cmp	r3, #8
 800998c:	d116      	bne.n	80099bc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800998e:	2300      	movs	r3, #0
 8009990:	617b      	str	r3, [r7, #20]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	617b      	str	r3, [r7, #20]
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	617b      	str	r3, [r7, #20]
 80099a2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099a4:	68f8      	ldr	r0, [r7, #12]
 80099a6:	f000 f81d 	bl	80099e4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2208      	movs	r2, #8
 80099ae:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80099b8:	2301      	movs	r3, #1
 80099ba:	e00f      	b.n	80099dc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	681a      	ldr	r2, [r3, #0]
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	4013      	ands	r3, r2
 80099c6:	68ba      	ldr	r2, [r7, #8]
 80099c8:	429a      	cmp	r2, r3
 80099ca:	bf0c      	ite	eq
 80099cc:	2301      	moveq	r3, #1
 80099ce:	2300      	movne	r3, #0
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	461a      	mov	r2, r3
 80099d4:	79fb      	ldrb	r3, [r7, #7]
 80099d6:	429a      	cmp	r2, r3
 80099d8:	d0b4      	beq.n	8009944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80099da:	2300      	movs	r3, #0
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3718      	adds	r7, #24
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80099e4:	b480      	push	{r7}
 80099e6:	b095      	sub	sp, #84	@ 0x54
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	330c      	adds	r3, #12
 80099f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099f6:	e853 3f00 	ldrex	r3, [r3]
 80099fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80099fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	330c      	adds	r3, #12
 8009a0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009a0c:	643a      	str	r2, [r7, #64]	@ 0x40
 8009a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a10:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009a12:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009a14:	e841 2300 	strex	r3, r2, [r1]
 8009a18:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009a1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d1e5      	bne.n	80099ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	3314      	adds	r3, #20
 8009a26:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	e853 3f00 	ldrex	r3, [r3]
 8009a2e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a30:	69fb      	ldr	r3, [r7, #28]
 8009a32:	f023 0301 	bic.w	r3, r3, #1
 8009a36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	3314      	adds	r3, #20
 8009a3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009a42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e5      	bne.n	8009a20 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d119      	bne.n	8009a90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	330c      	adds	r3, #12
 8009a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	e853 3f00 	ldrex	r3, [r3]
 8009a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	f023 0310 	bic.w	r3, r3, #16
 8009a72:	647b      	str	r3, [r7, #68]	@ 0x44
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	330c      	adds	r3, #12
 8009a7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009a7c:	61ba      	str	r2, [r7, #24]
 8009a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a80:	6979      	ldr	r1, [r7, #20]
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	e841 2300 	strex	r3, r2, [r1]
 8009a88:	613b      	str	r3, [r7, #16]
   return(result);
 8009a8a:	693b      	ldr	r3, [r7, #16]
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d1e5      	bne.n	8009a5c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2220      	movs	r2, #32
 8009a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009a9e:	bf00      	nop
 8009aa0:	3754      	adds	r7, #84	@ 0x54
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr
	...

08009aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ab0:	b0c0      	sub	sp, #256	@ 0x100
 8009ab2:	af00      	add	r7, sp, #0
 8009ab4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	691b      	ldr	r3, [r3, #16]
 8009ac0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ac8:	68d9      	ldr	r1, [r3, #12]
 8009aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	ea40 0301 	orr.w	r3, r0, r1
 8009ad4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ada:	689a      	ldr	r2, [r3, #8]
 8009adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	431a      	orrs	r2, r3
 8009ae4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ae8:	695b      	ldr	r3, [r3, #20]
 8009aea:	431a      	orrs	r2, r3
 8009aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009af0:	69db      	ldr	r3, [r3, #28]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009b04:	f021 010c 	bic.w	r1, r1, #12
 8009b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009b12:	430b      	orrs	r3, r1
 8009b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	695b      	ldr	r3, [r3, #20]
 8009b1e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b26:	6999      	ldr	r1, [r3, #24]
 8009b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b2c:	681a      	ldr	r2, [r3, #0]
 8009b2e:	ea40 0301 	orr.w	r3, r0, r1
 8009b32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b38:	681a      	ldr	r2, [r3, #0]
 8009b3a:	4b8f      	ldr	r3, [pc, #572]	@ (8009d78 <UART_SetConfig+0x2cc>)
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d005      	beq.n	8009b4c <UART_SetConfig+0xa0>
 8009b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b44:	681a      	ldr	r2, [r3, #0]
 8009b46:	4b8d      	ldr	r3, [pc, #564]	@ (8009d7c <UART_SetConfig+0x2d0>)
 8009b48:	429a      	cmp	r2, r3
 8009b4a:	d104      	bne.n	8009b56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b4c:	f7fe f84c 	bl	8007be8 <HAL_RCC_GetPCLK2Freq>
 8009b50:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009b54:	e003      	b.n	8009b5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b56:	f7fe f833 	bl	8007bc0 <HAL_RCC_GetPCLK1Freq>
 8009b5a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b62:	69db      	ldr	r3, [r3, #28]
 8009b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b68:	f040 810c 	bne.w	8009d84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009b70:	2200      	movs	r2, #0
 8009b72:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009b76:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009b7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009b7e:	4622      	mov	r2, r4
 8009b80:	462b      	mov	r3, r5
 8009b82:	1891      	adds	r1, r2, r2
 8009b84:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009b86:	415b      	adcs	r3, r3
 8009b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009b8e:	4621      	mov	r1, r4
 8009b90:	eb12 0801 	adds.w	r8, r2, r1
 8009b94:	4629      	mov	r1, r5
 8009b96:	eb43 0901 	adc.w	r9, r3, r1
 8009b9a:	f04f 0200 	mov.w	r2, #0
 8009b9e:	f04f 0300 	mov.w	r3, #0
 8009ba2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ba6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009baa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009bae:	4690      	mov	r8, r2
 8009bb0:	4699      	mov	r9, r3
 8009bb2:	4623      	mov	r3, r4
 8009bb4:	eb18 0303 	adds.w	r3, r8, r3
 8009bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009bbc:	462b      	mov	r3, r5
 8009bbe:	eb49 0303 	adc.w	r3, r9, r3
 8009bc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009bca:	685b      	ldr	r3, [r3, #4]
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009bd2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009bd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009bda:	460b      	mov	r3, r1
 8009bdc:	18db      	adds	r3, r3, r3
 8009bde:	653b      	str	r3, [r7, #80]	@ 0x50
 8009be0:	4613      	mov	r3, r2
 8009be2:	eb42 0303 	adc.w	r3, r2, r3
 8009be6:	657b      	str	r3, [r7, #84]	@ 0x54
 8009be8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009bec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009bf0:	f7f7 f83a 	bl	8000c68 <__aeabi_uldivmod>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	4b61      	ldr	r3, [pc, #388]	@ (8009d80 <UART_SetConfig+0x2d4>)
 8009bfa:	fba3 2302 	umull	r2, r3, r3, r2
 8009bfe:	095b      	lsrs	r3, r3, #5
 8009c00:	011c      	lsls	r4, r3, #4
 8009c02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009c0c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009c10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009c14:	4642      	mov	r2, r8
 8009c16:	464b      	mov	r3, r9
 8009c18:	1891      	adds	r1, r2, r2
 8009c1a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009c1c:	415b      	adcs	r3, r3
 8009c1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009c24:	4641      	mov	r1, r8
 8009c26:	eb12 0a01 	adds.w	sl, r2, r1
 8009c2a:	4649      	mov	r1, r9
 8009c2c:	eb43 0b01 	adc.w	fp, r3, r1
 8009c30:	f04f 0200 	mov.w	r2, #0
 8009c34:	f04f 0300 	mov.w	r3, #0
 8009c38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009c3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009c40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009c44:	4692      	mov	sl, r2
 8009c46:	469b      	mov	fp, r3
 8009c48:	4643      	mov	r3, r8
 8009c4a:	eb1a 0303 	adds.w	r3, sl, r3
 8009c4e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009c52:	464b      	mov	r3, r9
 8009c54:	eb4b 0303 	adc.w	r3, fp, r3
 8009c58:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c60:	685b      	ldr	r3, [r3, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009c68:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009c6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009c70:	460b      	mov	r3, r1
 8009c72:	18db      	adds	r3, r3, r3
 8009c74:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c76:	4613      	mov	r3, r2
 8009c78:	eb42 0303 	adc.w	r3, r2, r3
 8009c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009c82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009c86:	f7f6 ffef 	bl	8000c68 <__aeabi_uldivmod>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4611      	mov	r1, r2
 8009c90:	4b3b      	ldr	r3, [pc, #236]	@ (8009d80 <UART_SetConfig+0x2d4>)
 8009c92:	fba3 2301 	umull	r2, r3, r3, r1
 8009c96:	095b      	lsrs	r3, r3, #5
 8009c98:	2264      	movs	r2, #100	@ 0x64
 8009c9a:	fb02 f303 	mul.w	r3, r2, r3
 8009c9e:	1acb      	subs	r3, r1, r3
 8009ca0:	00db      	lsls	r3, r3, #3
 8009ca2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ca6:	4b36      	ldr	r3, [pc, #216]	@ (8009d80 <UART_SetConfig+0x2d4>)
 8009ca8:	fba3 2302 	umull	r2, r3, r3, r2
 8009cac:	095b      	lsrs	r3, r3, #5
 8009cae:	005b      	lsls	r3, r3, #1
 8009cb0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009cb4:	441c      	add	r4, r3
 8009cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009cba:	2200      	movs	r2, #0
 8009cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009cc0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009cc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009cc8:	4642      	mov	r2, r8
 8009cca:	464b      	mov	r3, r9
 8009ccc:	1891      	adds	r1, r2, r2
 8009cce:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009cd0:	415b      	adcs	r3, r3
 8009cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009cd8:	4641      	mov	r1, r8
 8009cda:	1851      	adds	r1, r2, r1
 8009cdc:	6339      	str	r1, [r7, #48]	@ 0x30
 8009cde:	4649      	mov	r1, r9
 8009ce0:	414b      	adcs	r3, r1
 8009ce2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009ce4:	f04f 0200 	mov.w	r2, #0
 8009ce8:	f04f 0300 	mov.w	r3, #0
 8009cec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009cf0:	4659      	mov	r1, fp
 8009cf2:	00cb      	lsls	r3, r1, #3
 8009cf4:	4651      	mov	r1, sl
 8009cf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009cfa:	4651      	mov	r1, sl
 8009cfc:	00ca      	lsls	r2, r1, #3
 8009cfe:	4610      	mov	r0, r2
 8009d00:	4619      	mov	r1, r3
 8009d02:	4603      	mov	r3, r0
 8009d04:	4642      	mov	r2, r8
 8009d06:	189b      	adds	r3, r3, r2
 8009d08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	460a      	mov	r2, r1
 8009d10:	eb42 0303 	adc.w	r3, r2, r3
 8009d14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009d24:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009d28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009d2c:	460b      	mov	r3, r1
 8009d2e:	18db      	adds	r3, r3, r3
 8009d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d32:	4613      	mov	r3, r2
 8009d34:	eb42 0303 	adc.w	r3, r2, r3
 8009d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009d3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009d42:	f7f6 ff91 	bl	8000c68 <__aeabi_uldivmod>
 8009d46:	4602      	mov	r2, r0
 8009d48:	460b      	mov	r3, r1
 8009d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8009d80 <UART_SetConfig+0x2d4>)
 8009d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8009d50:	095b      	lsrs	r3, r3, #5
 8009d52:	2164      	movs	r1, #100	@ 0x64
 8009d54:	fb01 f303 	mul.w	r3, r1, r3
 8009d58:	1ad3      	subs	r3, r2, r3
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	3332      	adds	r3, #50	@ 0x32
 8009d5e:	4a08      	ldr	r2, [pc, #32]	@ (8009d80 <UART_SetConfig+0x2d4>)
 8009d60:	fba2 2303 	umull	r2, r3, r2, r3
 8009d64:	095b      	lsrs	r3, r3, #5
 8009d66:	f003 0207 	and.w	r2, r3, #7
 8009d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4422      	add	r2, r4
 8009d72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009d74:	e106      	b.n	8009f84 <UART_SetConfig+0x4d8>
 8009d76:	bf00      	nop
 8009d78:	40011000 	.word	0x40011000
 8009d7c:	40011400 	.word	0x40011400
 8009d80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009d84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d88:	2200      	movs	r2, #0
 8009d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009d8e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009d92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009d96:	4642      	mov	r2, r8
 8009d98:	464b      	mov	r3, r9
 8009d9a:	1891      	adds	r1, r2, r2
 8009d9c:	6239      	str	r1, [r7, #32]
 8009d9e:	415b      	adcs	r3, r3
 8009da0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009da2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009da6:	4641      	mov	r1, r8
 8009da8:	1854      	adds	r4, r2, r1
 8009daa:	4649      	mov	r1, r9
 8009dac:	eb43 0501 	adc.w	r5, r3, r1
 8009db0:	f04f 0200 	mov.w	r2, #0
 8009db4:	f04f 0300 	mov.w	r3, #0
 8009db8:	00eb      	lsls	r3, r5, #3
 8009dba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009dbe:	00e2      	lsls	r2, r4, #3
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	461d      	mov	r5, r3
 8009dc4:	4643      	mov	r3, r8
 8009dc6:	18e3      	adds	r3, r4, r3
 8009dc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009dcc:	464b      	mov	r3, r9
 8009dce:	eb45 0303 	adc.w	r3, r5, r3
 8009dd2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009de2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009de6:	f04f 0200 	mov.w	r2, #0
 8009dea:	f04f 0300 	mov.w	r3, #0
 8009dee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009df2:	4629      	mov	r1, r5
 8009df4:	008b      	lsls	r3, r1, #2
 8009df6:	4621      	mov	r1, r4
 8009df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dfc:	4621      	mov	r1, r4
 8009dfe:	008a      	lsls	r2, r1, #2
 8009e00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009e04:	f7f6 ff30 	bl	8000c68 <__aeabi_uldivmod>
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4b60      	ldr	r3, [pc, #384]	@ (8009f90 <UART_SetConfig+0x4e4>)
 8009e0e:	fba3 2302 	umull	r2, r3, r3, r2
 8009e12:	095b      	lsrs	r3, r3, #5
 8009e14:	011c      	lsls	r4, r3, #4
 8009e16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009e20:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009e24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009e28:	4642      	mov	r2, r8
 8009e2a:	464b      	mov	r3, r9
 8009e2c:	1891      	adds	r1, r2, r2
 8009e2e:	61b9      	str	r1, [r7, #24]
 8009e30:	415b      	adcs	r3, r3
 8009e32:	61fb      	str	r3, [r7, #28]
 8009e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009e38:	4641      	mov	r1, r8
 8009e3a:	1851      	adds	r1, r2, r1
 8009e3c:	6139      	str	r1, [r7, #16]
 8009e3e:	4649      	mov	r1, r9
 8009e40:	414b      	adcs	r3, r1
 8009e42:	617b      	str	r3, [r7, #20]
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	f04f 0300 	mov.w	r3, #0
 8009e4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009e50:	4659      	mov	r1, fp
 8009e52:	00cb      	lsls	r3, r1, #3
 8009e54:	4651      	mov	r1, sl
 8009e56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e5a:	4651      	mov	r1, sl
 8009e5c:	00ca      	lsls	r2, r1, #3
 8009e5e:	4610      	mov	r0, r2
 8009e60:	4619      	mov	r1, r3
 8009e62:	4603      	mov	r3, r0
 8009e64:	4642      	mov	r2, r8
 8009e66:	189b      	adds	r3, r3, r2
 8009e68:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009e6c:	464b      	mov	r3, r9
 8009e6e:	460a      	mov	r2, r1
 8009e70:	eb42 0303 	adc.w	r3, r2, r3
 8009e74:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009e78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e82:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009e84:	f04f 0200 	mov.w	r2, #0
 8009e88:	f04f 0300 	mov.w	r3, #0
 8009e8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009e90:	4649      	mov	r1, r9
 8009e92:	008b      	lsls	r3, r1, #2
 8009e94:	4641      	mov	r1, r8
 8009e96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e9a:	4641      	mov	r1, r8
 8009e9c:	008a      	lsls	r2, r1, #2
 8009e9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009ea2:	f7f6 fee1 	bl	8000c68 <__aeabi_uldivmod>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4611      	mov	r1, r2
 8009eac:	4b38      	ldr	r3, [pc, #224]	@ (8009f90 <UART_SetConfig+0x4e4>)
 8009eae:	fba3 2301 	umull	r2, r3, r3, r1
 8009eb2:	095b      	lsrs	r3, r3, #5
 8009eb4:	2264      	movs	r2, #100	@ 0x64
 8009eb6:	fb02 f303 	mul.w	r3, r2, r3
 8009eba:	1acb      	subs	r3, r1, r3
 8009ebc:	011b      	lsls	r3, r3, #4
 8009ebe:	3332      	adds	r3, #50	@ 0x32
 8009ec0:	4a33      	ldr	r2, [pc, #204]	@ (8009f90 <UART_SetConfig+0x4e4>)
 8009ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec6:	095b      	lsrs	r3, r3, #5
 8009ec8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009ecc:	441c      	add	r4, r3
 8009ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ed6:	677a      	str	r2, [r7, #116]	@ 0x74
 8009ed8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009edc:	4642      	mov	r2, r8
 8009ede:	464b      	mov	r3, r9
 8009ee0:	1891      	adds	r1, r2, r2
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	415b      	adcs	r3, r3
 8009ee6:	60fb      	str	r3, [r7, #12]
 8009ee8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009eec:	4641      	mov	r1, r8
 8009eee:	1851      	adds	r1, r2, r1
 8009ef0:	6039      	str	r1, [r7, #0]
 8009ef2:	4649      	mov	r1, r9
 8009ef4:	414b      	adcs	r3, r1
 8009ef6:	607b      	str	r3, [r7, #4]
 8009ef8:	f04f 0200 	mov.w	r2, #0
 8009efc:	f04f 0300 	mov.w	r3, #0
 8009f00:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009f04:	4659      	mov	r1, fp
 8009f06:	00cb      	lsls	r3, r1, #3
 8009f08:	4651      	mov	r1, sl
 8009f0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f0e:	4651      	mov	r1, sl
 8009f10:	00ca      	lsls	r2, r1, #3
 8009f12:	4610      	mov	r0, r2
 8009f14:	4619      	mov	r1, r3
 8009f16:	4603      	mov	r3, r0
 8009f18:	4642      	mov	r2, r8
 8009f1a:	189b      	adds	r3, r3, r2
 8009f1c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f1e:	464b      	mov	r3, r9
 8009f20:	460a      	mov	r2, r1
 8009f22:	eb42 0303 	adc.w	r3, r2, r3
 8009f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	663b      	str	r3, [r7, #96]	@ 0x60
 8009f32:	667a      	str	r2, [r7, #100]	@ 0x64
 8009f34:	f04f 0200 	mov.w	r2, #0
 8009f38:	f04f 0300 	mov.w	r3, #0
 8009f3c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009f40:	4649      	mov	r1, r9
 8009f42:	008b      	lsls	r3, r1, #2
 8009f44:	4641      	mov	r1, r8
 8009f46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009f4a:	4641      	mov	r1, r8
 8009f4c:	008a      	lsls	r2, r1, #2
 8009f4e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009f52:	f7f6 fe89 	bl	8000c68 <__aeabi_uldivmod>
 8009f56:	4602      	mov	r2, r0
 8009f58:	460b      	mov	r3, r1
 8009f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8009f90 <UART_SetConfig+0x4e4>)
 8009f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8009f60:	095b      	lsrs	r3, r3, #5
 8009f62:	2164      	movs	r1, #100	@ 0x64
 8009f64:	fb01 f303 	mul.w	r3, r1, r3
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	011b      	lsls	r3, r3, #4
 8009f6c:	3332      	adds	r3, #50	@ 0x32
 8009f6e:	4a08      	ldr	r2, [pc, #32]	@ (8009f90 <UART_SetConfig+0x4e4>)
 8009f70:	fba2 2303 	umull	r2, r3, r2, r3
 8009f74:	095b      	lsrs	r3, r3, #5
 8009f76:	f003 020f 	and.w	r2, r3, #15
 8009f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4422      	add	r2, r4
 8009f82:	609a      	str	r2, [r3, #8]
}
 8009f84:	bf00      	nop
 8009f86:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f90:	51eb851f 	.word	0x51eb851f

08009f94 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b083      	sub	sp, #12
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d123      	bne.n	8009fee <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009fae:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009fb2:	683a      	ldr	r2, [r7, #0]
 8009fb4:	6851      	ldr	r1, [r2, #4]
 8009fb6:	683a      	ldr	r2, [r7, #0]
 8009fb8:	6892      	ldr	r2, [r2, #8]
 8009fba:	4311      	orrs	r1, r2
 8009fbc:	683a      	ldr	r2, [r7, #0]
 8009fbe:	68d2      	ldr	r2, [r2, #12]
 8009fc0:	4311      	orrs	r1, r2
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	6912      	ldr	r2, [r2, #16]
 8009fc6:	4311      	orrs	r1, r2
 8009fc8:	683a      	ldr	r2, [r7, #0]
 8009fca:	6952      	ldr	r2, [r2, #20]
 8009fcc:	4311      	orrs	r1, r2
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	6992      	ldr	r2, [r2, #24]
 8009fd2:	4311      	orrs	r1, r2
 8009fd4:	683a      	ldr	r2, [r7, #0]
 8009fd6:	69d2      	ldr	r2, [r2, #28]
 8009fd8:	4311      	orrs	r1, r2
 8009fda:	683a      	ldr	r2, [r7, #0]
 8009fdc:	6a12      	ldr	r2, [r2, #32]
 8009fde:	4311      	orrs	r1, r2
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	431a      	orrs	r2, r3
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	e028      	b.n	800a040 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	69d9      	ldr	r1, [r3, #28]
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	6a1b      	ldr	r3, [r3, #32]
 8009ffe:	4319      	orrs	r1, r3
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a004:	430b      	orrs	r3, r1
 800a006:	431a      	orrs	r2, r3
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800a014:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	6851      	ldr	r1, [r2, #4]
 800a01c:	683a      	ldr	r2, [r7, #0]
 800a01e:	6892      	ldr	r2, [r2, #8]
 800a020:	4311      	orrs	r1, r2
 800a022:	683a      	ldr	r2, [r7, #0]
 800a024:	68d2      	ldr	r2, [r2, #12]
 800a026:	4311      	orrs	r1, r2
 800a028:	683a      	ldr	r2, [r7, #0]
 800a02a:	6912      	ldr	r2, [r2, #16]
 800a02c:	4311      	orrs	r1, r2
 800a02e:	683a      	ldr	r2, [r7, #0]
 800a030:	6952      	ldr	r2, [r2, #20]
 800a032:	4311      	orrs	r1, r2
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	6992      	ldr	r2, [r2, #24]
 800a038:	430a      	orrs	r2, r1
 800a03a:	431a      	orrs	r2, r3
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800a040:	2300      	movs	r3, #0
}
 800a042:	4618      	mov	r0, r3
 800a044:	370c      	adds	r7, #12
 800a046:	46bd      	mov	sp, r7
 800a048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04c:	4770      	bx	lr

0800a04e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a04e:	b480      	push	{r7}
 800a050:	b085      	sub	sp, #20
 800a052:	af00      	add	r7, sp, #0
 800a054:	60f8      	str	r0, [r7, #12]
 800a056:	60b9      	str	r1, [r7, #8]
 800a058:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d128      	bne.n	800a0b2 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	1e59      	subs	r1, r3, #1
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	3b01      	subs	r3, #1
 800a074:	011b      	lsls	r3, r3, #4
 800a076:	4319      	orrs	r1, r3
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	689b      	ldr	r3, [r3, #8]
 800a07c:	3b01      	subs	r3, #1
 800a07e:	021b      	lsls	r3, r3, #8
 800a080:	4319      	orrs	r1, r3
 800a082:	68bb      	ldr	r3, [r7, #8]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	3b01      	subs	r3, #1
 800a088:	031b      	lsls	r3, r3, #12
 800a08a:	4319      	orrs	r1, r3
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	3b01      	subs	r3, #1
 800a092:	041b      	lsls	r3, r3, #16
 800a094:	4319      	orrs	r1, r3
 800a096:	68bb      	ldr	r3, [r7, #8]
 800a098:	695b      	ldr	r3, [r3, #20]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	051b      	lsls	r3, r3, #20
 800a09e:	4319      	orrs	r1, r3
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	699b      	ldr	r3, [r3, #24]
 800a0a4:	3b01      	subs	r3, #1
 800a0a6:	061b      	lsls	r3, r3, #24
 800a0a8:	430b      	orrs	r3, r1
 800a0aa:	431a      	orrs	r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	609a      	str	r2, [r3, #8]
 800a0b0:	e02f      	b.n	800a112 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	689b      	ldr	r3, [r3, #8]
 800a0b6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a0ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	68d2      	ldr	r2, [r2, #12]
 800a0c2:	3a01      	subs	r2, #1
 800a0c4:	0311      	lsls	r1, r2, #12
 800a0c6:	68ba      	ldr	r2, [r7, #8]
 800a0c8:	6952      	ldr	r2, [r2, #20]
 800a0ca:	3a01      	subs	r2, #1
 800a0cc:	0512      	lsls	r2, r2, #20
 800a0ce:	430a      	orrs	r2, r1
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	1e59      	subs	r1, r3, #1
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	3b01      	subs	r3, #1
 800a0ea:	011b      	lsls	r3, r3, #4
 800a0ec:	4319      	orrs	r1, r3
 800a0ee:	68bb      	ldr	r3, [r7, #8]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	3b01      	subs	r3, #1
 800a0f4:	021b      	lsls	r3, r3, #8
 800a0f6:	4319      	orrs	r1, r3
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	691b      	ldr	r3, [r3, #16]
 800a0fc:	3b01      	subs	r3, #1
 800a0fe:	041b      	lsls	r3, r3, #16
 800a100:	4319      	orrs	r1, r3
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	3b01      	subs	r3, #1
 800a108:	061b      	lsls	r3, r3, #24
 800a10a:	430b      	orrs	r3, r1
 800a10c:	431a      	orrs	r2, r3
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	3714      	adds	r7, #20
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689b      	ldr	r3, [r3, #8]
 800a12c:	f043 0201 	orr.w	r2, r3, #1
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a134:	2300      	movs	r3, #0
}
 800a136:	4618      	mov	r0, r3
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	689b      	ldr	r3, [r3, #8]
 800a14e:	f023 0201 	bic.w	r2, r3, #1
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
 800a16c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a16e:	2300      	movs	r3, #0
 800a170:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3301      	adds	r3, #1
 800a176:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a17e:	d901      	bls.n	800a184 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a180:	2303      	movs	r3, #3
 800a182:	e01b      	b.n	800a1bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	daf2      	bge.n	800a172 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	019b      	lsls	r3, r3, #6
 800a194:	f043 0220 	orr.w	r2, r3, #32
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	3301      	adds	r3, #1
 800a1a0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1a8:	d901      	bls.n	800a1ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e006      	b.n	800a1bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	691b      	ldr	r3, [r3, #16]
 800a1b2:	f003 0320 	and.w	r3, r3, #32
 800a1b6:	2b20      	cmp	r3, #32
 800a1b8:	d0f0      	beq.n	800a19c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr

0800a1c8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3301      	adds	r3, #1
 800a1d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a1e0:	d901      	bls.n	800a1e6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a1e2:	2303      	movs	r3, #3
 800a1e4:	e018      	b.n	800a218 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	691b      	ldr	r3, [r3, #16]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	daf2      	bge.n	800a1d4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2210      	movs	r2, #16
 800a1f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	3301      	adds	r3, #1
 800a1fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a204:	d901      	bls.n	800a20a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a206:	2303      	movs	r3, #3
 800a208:	e006      	b.n	800a218 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	691b      	ldr	r3, [r3, #16]
 800a20e:	f003 0310 	and.w	r3, r3, #16
 800a212:	2b10      	cmp	r3, #16
 800a214:	d0f0      	beq.n	800a1f8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a224:	b480      	push	{r7}
 800a226:	b08b      	sub	sp, #44	@ 0x2c
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a23a:	88fb      	ldrh	r3, [r7, #6]
 800a23c:	089b      	lsrs	r3, r3, #2
 800a23e:	b29b      	uxth	r3, r3
 800a240:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a242:	88fb      	ldrh	r3, [r7, #6]
 800a244:	f003 0303 	and.w	r3, r3, #3
 800a248:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a24a:	2300      	movs	r3, #0
 800a24c:	623b      	str	r3, [r7, #32]
 800a24e:	e014      	b.n	800a27a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25a:	601a      	str	r2, [r3, #0]
    pDest++;
 800a25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a25e:	3301      	adds	r3, #1
 800a260:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a264:	3301      	adds	r3, #1
 800a266:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26a:	3301      	adds	r3, #1
 800a26c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	3301      	adds	r3, #1
 800a272:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a274:	6a3b      	ldr	r3, [r7, #32]
 800a276:	3301      	adds	r3, #1
 800a278:	623b      	str	r3, [r7, #32]
 800a27a:	6a3a      	ldr	r2, [r7, #32]
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	429a      	cmp	r2, r3
 800a280:	d3e6      	bcc.n	800a250 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a282:	8bfb      	ldrh	r3, [r7, #30]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d01e      	beq.n	800a2c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a288:	2300      	movs	r3, #0
 800a28a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a292:	461a      	mov	r2, r3
 800a294:	f107 0310 	add.w	r3, r7, #16
 800a298:	6812      	ldr	r2, [r2, #0]
 800a29a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a29c:	693a      	ldr	r2, [r7, #16]
 800a29e:	6a3b      	ldr	r3, [r7, #32]
 800a2a0:	b2db      	uxtb	r3, r3
 800a2a2:	00db      	lsls	r3, r3, #3
 800a2a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a2a8:	b2da      	uxtb	r2, r3
 800a2aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2ac:	701a      	strb	r2, [r3, #0]
      i++;
 800a2ae:	6a3b      	ldr	r3, [r7, #32]
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	623b      	str	r3, [r7, #32]
      pDest++;
 800a2b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a2ba:	8bfb      	ldrh	r3, [r7, #30]
 800a2bc:	3b01      	subs	r3, #1
 800a2be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a2c0:	8bfb      	ldrh	r3, [r7, #30]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d1ea      	bne.n	800a29c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	372c      	adds	r7, #44	@ 0x2c
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	699b      	ldr	r3, [r3, #24]
 800a2e6:	68fa      	ldr	r2, [r7, #12]
 800a2e8:	4013      	ands	r3, r2
 800a2ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3714      	adds	r7, #20
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f8:	4770      	bx	lr

0800a2fa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800a2fa:	b480      	push	{r7}
 800a2fc:	b085      	sub	sp, #20
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
 800a302:	460b      	mov	r3, r1
 800a304:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800a30a:	78fb      	ldrb	r3, [r7, #3]
 800a30c:	015a      	lsls	r2, r3, #5
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	4413      	add	r3, r2
 800a312:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800a31a:	78fb      	ldrb	r3, [r7, #3]
 800a31c:	015a      	lsls	r2, r3, #5
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	4413      	add	r3, r2
 800a322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a326:	68db      	ldr	r3, [r3, #12]
 800a328:	68ba      	ldr	r2, [r7, #8]
 800a32a:	4013      	ands	r3, r2
 800a32c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a32e:	68bb      	ldr	r3, [r7, #8]
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	695b      	ldr	r3, [r3, #20]
 800a348:	f003 0301 	and.w	r3, r3, #1
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800a358:	b480      	push	{r7}
 800a35a:	b085      	sub	sp, #20
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
 800a360:	460b      	mov	r3, r1
 800a362:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	68fa      	ldr	r2, [r7, #12]
 800a372:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a376:	f023 0303 	bic.w	r3, r3, #3
 800a37a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	78fb      	ldrb	r3, [r7, #3]
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	68f9      	ldr	r1, [r7, #12]
 800a38c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800a390:	4313      	orrs	r3, r2
 800a392:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800a394:	78fb      	ldrb	r3, [r7, #3]
 800a396:	2b01      	cmp	r3, #1
 800a398:	d107      	bne.n	800a3aa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3a0:	461a      	mov	r2, r3
 800a3a2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800a3a6:	6053      	str	r3, [r2, #4]
 800a3a8:	e00c      	b.n	800a3c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800a3aa:	78fb      	ldrb	r3, [r7, #3]
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d107      	bne.n	800a3c0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f241 7370 	movw	r3, #6000	@ 0x1770
 800a3bc:	6053      	str	r3, [r2, #4]
 800a3be:	e001      	b.n	800a3c4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	e000      	b.n	800a3c6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3714      	adds	r7, #20
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d0:	4770      	bx	lr

0800a3d2 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3d2:	b480      	push	{r7}
 800a3d4:	b085      	sub	sp, #20
 800a3d6:	af00      	add	r7, sp, #0
 800a3d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	b29b      	uxth	r3, r3
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3714      	adds	r7, #20
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr

0800a3f4 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b089      	sub	sp, #36	@ 0x24
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	460b      	mov	r3, r1
 800a3fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a404:	78fb      	ldrb	r3, [r7, #3]
 800a406:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a40c:	69bb      	ldr	r3, [r7, #24]
 800a40e:	015a      	lsls	r2, r3, #5
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	4413      	add	r3, r2
 800a414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	0c9b      	lsrs	r3, r3, #18
 800a41c:	f003 0303 	and.w	r3, r3, #3
 800a420:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a422:	69bb      	ldr	r3, [r7, #24]
 800a424:	015a      	lsls	r2, r3, #5
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	4413      	add	r3, r2
 800a42a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	0fdb      	lsrs	r3, r3, #31
 800a432:	f003 0301 	and.w	r3, r3, #1
 800a436:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	0fdb      	lsrs	r3, r3, #31
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689b      	ldr	r3, [r3, #8]
 800a452:	f003 0320 	and.w	r3, r3, #32
 800a456:	2b20      	cmp	r3, #32
 800a458:	d10d      	bne.n	800a476 <USB_HC_Halt+0x82>
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d10a      	bne.n	800a476 <USB_HC_Halt+0x82>
 800a460:	693b      	ldr	r3, [r7, #16]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d005      	beq.n	800a472 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d002      	beq.n	800a472 <USB_HC_Halt+0x7e>
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	2b03      	cmp	r3, #3
 800a470:	d101      	bne.n	800a476 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a472:	2300      	movs	r3, #0
 800a474:	e0d8      	b.n	800a628 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	2b00      	cmp	r3, #0
 800a47a:	d002      	beq.n	800a482 <USB_HC_Halt+0x8e>
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d173      	bne.n	800a56a <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a482:	69bb      	ldr	r3, [r7, #24]
 800a484:	015a      	lsls	r2, r3, #5
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	4413      	add	r3, r2
 800a48a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	69ba      	ldr	r2, [r7, #24]
 800a492:	0151      	lsls	r1, r2, #5
 800a494:	69fa      	ldr	r2, [r7, #28]
 800a496:	440a      	add	r2, r1
 800a498:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a49c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a4a0:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	689b      	ldr	r3, [r3, #8]
 800a4a6:	f003 0320 	and.w	r3, r3, #32
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d14a      	bne.n	800a544 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a4b2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d133      	bne.n	800a522 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a4ba:	69bb      	ldr	r3, [r7, #24]
 800a4bc:	015a      	lsls	r2, r3, #5
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	4413      	add	r3, r2
 800a4c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	69ba      	ldr	r2, [r7, #24]
 800a4ca:	0151      	lsls	r1, r2, #5
 800a4cc:	69fa      	ldr	r2, [r7, #28]
 800a4ce:	440a      	add	r2, r1
 800a4d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4d4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a4d8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	015a      	lsls	r2, r3, #5
 800a4de:	69fb      	ldr	r3, [r7, #28]
 800a4e0:	4413      	add	r3, r2
 800a4e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	69ba      	ldr	r2, [r7, #24]
 800a4ea:	0151      	lsls	r1, r2, #5
 800a4ec:	69fa      	ldr	r2, [r7, #28]
 800a4ee:	440a      	add	r2, r1
 800a4f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a4f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a4f8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	3301      	adds	r3, #1
 800a4fe:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a506:	d82e      	bhi.n	800a566 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a51a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a51e:	d0ec      	beq.n	800a4fa <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a520:	e081      	b.n	800a626 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a522:	69bb      	ldr	r3, [r7, #24]
 800a524:	015a      	lsls	r2, r3, #5
 800a526:	69fb      	ldr	r3, [r7, #28]
 800a528:	4413      	add	r3, r2
 800a52a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	69ba      	ldr	r2, [r7, #24]
 800a532:	0151      	lsls	r1, r2, #5
 800a534:	69fa      	ldr	r2, [r7, #28]
 800a536:	440a      	add	r2, r1
 800a538:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a53c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a540:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a542:	e070      	b.n	800a626 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	015a      	lsls	r2, r3, #5
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	4413      	add	r3, r2
 800a54c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	69ba      	ldr	r2, [r7, #24]
 800a554:	0151      	lsls	r1, r2, #5
 800a556:	69fa      	ldr	r2, [r7, #28]
 800a558:	440a      	add	r2, r1
 800a55a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a55e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a562:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a564:	e05f      	b.n	800a626 <USB_HC_Halt+0x232>
            break;
 800a566:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a568:	e05d      	b.n	800a626 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	015a      	lsls	r2, r3, #5
 800a56e:	69fb      	ldr	r3, [r7, #28]
 800a570:	4413      	add	r3, r2
 800a572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	69ba      	ldr	r2, [r7, #24]
 800a57a:	0151      	lsls	r1, r2, #5
 800a57c:	69fa      	ldr	r2, [r7, #28]
 800a57e:	440a      	add	r2, r1
 800a580:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a584:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a588:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a58a:	69fb      	ldr	r3, [r7, #28]
 800a58c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a590:	691b      	ldr	r3, [r3, #16]
 800a592:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d133      	bne.n	800a602 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	015a      	lsls	r2, r3, #5
 800a59e:	69fb      	ldr	r3, [r7, #28]
 800a5a0:	4413      	add	r3, r2
 800a5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	69ba      	ldr	r2, [r7, #24]
 800a5aa:	0151      	lsls	r1, r2, #5
 800a5ac:	69fa      	ldr	r2, [r7, #28]
 800a5ae:	440a      	add	r2, r1
 800a5b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5b8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	015a      	lsls	r2, r3, #5
 800a5be:	69fb      	ldr	r3, [r7, #28]
 800a5c0:	4413      	add	r3, r2
 800a5c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	69ba      	ldr	r2, [r7, #24]
 800a5ca:	0151      	lsls	r1, r2, #5
 800a5cc:	69fa      	ldr	r2, [r7, #28]
 800a5ce:	440a      	add	r2, r1
 800a5d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5d4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5d8:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a5da:	68bb      	ldr	r3, [r7, #8]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5e6:	d81d      	bhi.n	800a624 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	015a      	lsls	r2, r3, #5
 800a5ec:	69fb      	ldr	r3, [r7, #28]
 800a5ee:	4413      	add	r3, r2
 800a5f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a5fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a5fe:	d0ec      	beq.n	800a5da <USB_HC_Halt+0x1e6>
 800a600:	e011      	b.n	800a626 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a602:	69bb      	ldr	r3, [r7, #24]
 800a604:	015a      	lsls	r2, r3, #5
 800a606:	69fb      	ldr	r3, [r7, #28]
 800a608:	4413      	add	r3, r2
 800a60a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	69ba      	ldr	r2, [r7, #24]
 800a612:	0151      	lsls	r1, r2, #5
 800a614:	69fa      	ldr	r2, [r7, #28]
 800a616:	440a      	add	r2, r1
 800a618:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a61c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a620:	6013      	str	r3, [r2, #0]
 800a622:	e000      	b.n	800a626 <USB_HC_Halt+0x232>
          break;
 800a624:	bf00      	nop
    }
  }

  return HAL_OK;
 800a626:	2300      	movs	r3, #0
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3724      	adds	r7, #36	@ 0x24
 800a62c:	46bd      	mov	sp, r7
 800a62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a632:	4770      	bx	lr

0800a634 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b088      	sub	sp, #32
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a63c:	2300      	movs	r3, #0
 800a63e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a644:	2300      	movs	r3, #0
 800a646:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f7ff fd7a 	bl	800a142 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a64e:	2110      	movs	r1, #16
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f7ff fd87 	bl	800a164 <USB_FlushTxFifo>
 800a656:	4603      	mov	r3, r0
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d001      	beq.n	800a660 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a65c:	2301      	movs	r3, #1
 800a65e:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff fdb1 	bl	800a1c8 <USB_FlushRxFifo>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d001      	beq.n	800a670 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a670:	2300      	movs	r3, #0
 800a672:	61bb      	str	r3, [r7, #24]
 800a674:	e01f      	b.n	800a6b6 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	015a      	lsls	r2, r3, #5
 800a67a:	697b      	ldr	r3, [r7, #20]
 800a67c:	4413      	add	r3, r2
 800a67e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a68c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a694:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a69c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a69e:	69bb      	ldr	r3, [r7, #24]
 800a6a0:	015a      	lsls	r2, r3, #5
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	4413      	add	r3, r2
 800a6a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	3301      	adds	r3, #1
 800a6b4:	61bb      	str	r3, [r7, #24]
 800a6b6:	69bb      	ldr	r3, [r7, #24]
 800a6b8:	2b0f      	cmp	r3, #15
 800a6ba:	d9dc      	bls.n	800a676 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a6bc:	2300      	movs	r3, #0
 800a6be:	61bb      	str	r3, [r7, #24]
 800a6c0:	e034      	b.n	800a72c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a6d8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6e0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a6e8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a6ea:	69bb      	ldr	r3, [r7, #24]
 800a6ec:	015a      	lsls	r2, r3, #5
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	4413      	add	r3, r2
 800a6f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6f6:	461a      	mov	r2, r3
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	3301      	adds	r3, #1
 800a700:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a708:	d80c      	bhi.n	800a724 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	015a      	lsls	r2, r3, #5
 800a70e:	697b      	ldr	r3, [r7, #20]
 800a710:	4413      	add	r3, r2
 800a712:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a71c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a720:	d0ec      	beq.n	800a6fc <USB_StopHost+0xc8>
 800a722:	e000      	b.n	800a726 <USB_StopHost+0xf2>
        break;
 800a724:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a726:	69bb      	ldr	r3, [r7, #24]
 800a728:	3301      	adds	r3, #1
 800a72a:	61bb      	str	r3, [r7, #24]
 800a72c:	69bb      	ldr	r3, [r7, #24]
 800a72e:	2b0f      	cmp	r3, #15
 800a730:	d9c7      	bls.n	800a6c2 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a738:	461a      	mov	r2, r3
 800a73a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a73e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a746:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f7ff fce9 	bl	800a120 <USB_EnableGlobalInt>

  return ret;
 800a74e:	7ffb      	ldrb	r3, [r7, #31]
}
 800a750:	4618      	mov	r0, r3
 800a752:	3720      	adds	r7, #32
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}

0800a758 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b082      	sub	sp, #8
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f804 	bl	800a77c <USBH_HandleSof>
}
 800a774:	bf00      	nop
 800a776:	3708      	adds	r7, #8
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b082      	sub	sp, #8
 800a780:	af00      	add	r7, sp, #0
 800a782:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	b2db      	uxtb	r3, r3
 800a78a:	2b0b      	cmp	r3, #11
 800a78c:	d10a      	bne.n	800a7a4 <USBH_HandleSof+0x28>
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a794:	2b00      	cmp	r3, #0
 800a796:	d005      	beq.n	800a7a4 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a79e:	699b      	ldr	r3, [r3, #24]
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	4798      	blx	r3
  }
}
 800a7a4:	bf00      	nop
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b082      	sub	sp, #8
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	2201      	movs	r2, #1
 800a7c0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	f000 f8ae 	bl	800a934 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a7d8:	bf00      	nop
}
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a7f0:	bf00      	nop
}
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b082      	sub	sp, #8
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2201      	movs	r2, #1
 800a808:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	2200      	movs	r2, #0
 800a810:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a830:	2200      	movs	r2, #0
 800a832:	4619      	mov	r1, r3
 800a834:	f000 f87e 	bl	800a934 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	3708      	adds	r7, #8
 800a83e:	46bd      	mov	sp, r7
 800a840:	bd80      	pop	{r7, pc}

0800a842 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a842:	b580      	push	{r7, lr}
 800a844:	b082      	sub	sp, #8
 800a846:	af00      	add	r7, sp, #0
 800a848:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	2201      	movs	r2, #1
 800a84e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2200      	movs	r2, #0
 800a856:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	2200      	movs	r2, #0
 800a85e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a862:	6878      	ldr	r0, [r7, #4]
 800a864:	f001 f904 	bl	800ba70 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	791b      	ldrb	r3, [r3, #4]
 800a86c:	4619      	mov	r1, r3
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f830 	bl	800a8d4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	795b      	ldrb	r3, [r3, #5]
 800a878:	4619      	mov	r1, r3
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f82a 	bl	800a8d4 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a894:	2200      	movs	r2, #0
 800a896:	4619      	mov	r1, r3
 800a898:	f000 f84c 	bl	800a934 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b082      	sub	sp, #8
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4619      	mov	r1, r3
 800a8c6:	f000 f835 	bl	800a934 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800a8ca:	2300      	movs	r3, #0
}
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	3708      	adds	r7, #8
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	bd80      	pop	{r7, pc}

0800a8d4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a8e0:	78fb      	ldrb	r3, [r7, #3]
 800a8e2:	2b0f      	cmp	r3, #15
 800a8e4:	d80d      	bhi.n	800a902 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a8e6:	78fb      	ldrb	r3, [r7, #3]
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	33e0      	adds	r3, #224	@ 0xe0
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	685a      	ldr	r2, [r3, #4]
 800a8f2:	78fb      	ldrb	r3, [r7, #3]
 800a8f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a8f8:	6879      	ldr	r1, [r7, #4]
 800a8fa:	33e0      	adds	r3, #224	@ 0xe0
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	440b      	add	r3, r1
 800a900:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a902:	2300      	movs	r3, #0
}
 800a904:	4618      	mov	r0, r3
 800a906:	370c      	adds	r7, #12
 800a908:	46bd      	mov	sp, r7
 800a90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90e:	4770      	bx	lr

0800a910 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a916:	f3ef 8305 	mrs	r3, IPSR
 800a91a:	607b      	str	r3, [r7, #4]
  return(result);
 800a91c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a91e:	2b00      	cmp	r3, #0
 800a920:	bf14      	ite	ne
 800a922:	2301      	movne	r3, #1
 800a924:	2300      	moveq	r3, #0
 800a926:	b2db      	uxtb	r3, r3
}
 800a928:	4618      	mov	r0, r3
 800a92a:	370c      	adds	r7, #12
 800a92c:	46bd      	mov	sp, r7
 800a92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a932:	4770      	bx	lr

0800a934 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b086      	sub	sp, #24
 800a938:	af00      	add	r7, sp, #0
 800a93a:	60f8      	str	r0, [r7, #12]
 800a93c:	60b9      	str	r1, [r7, #8]
 800a93e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a940:	2300      	movs	r3, #0
 800a942:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d101      	bne.n	800a952 <osMessagePut+0x1e>
    ticks = 1;
 800a94e:	2301      	movs	r3, #1
 800a950:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a952:	f7ff ffdd 	bl	800a910 <inHandlerMode>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d018      	beq.n	800a98e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a95c:	f107 0210 	add.w	r2, r7, #16
 800a960:	f107 0108 	add.w	r1, r7, #8
 800a964:	2300      	movs	r3, #0
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 f9ae 	bl	800acc8 <xQueueGenericSendFromISR>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b01      	cmp	r3, #1
 800a970:	d001      	beq.n	800a976 <osMessagePut+0x42>
      return osErrorOS;
 800a972:	23ff      	movs	r3, #255	@ 0xff
 800a974:	e018      	b.n	800a9a8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a976:	693b      	ldr	r3, [r7, #16]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d014      	beq.n	800a9a6 <osMessagePut+0x72>
 800a97c:	4b0c      	ldr	r3, [pc, #48]	@ (800a9b0 <osMessagePut+0x7c>)
 800a97e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a982:	601a      	str	r2, [r3, #0]
 800a984:	f3bf 8f4f 	dsb	sy
 800a988:	f3bf 8f6f 	isb	sy
 800a98c:	e00b      	b.n	800a9a6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a98e:	f107 0108 	add.w	r1, r7, #8
 800a992:	2300      	movs	r3, #0
 800a994:	697a      	ldr	r2, [r7, #20]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 f894 	bl	800aac4 <xQueueGenericSend>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b01      	cmp	r3, #1
 800a9a0:	d001      	beq.n	800a9a6 <osMessagePut+0x72>
      return osErrorOS;
 800a9a2:	23ff      	movs	r3, #255	@ 0xff
 800a9a4:	e000      	b.n	800a9a8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a9a6:	2300      	movs	r3, #0
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3718      	adds	r7, #24
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	e000ed04 	.word	0xe000ed04

0800a9b4 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	685b      	ldr	r3, [r3, #4]
 800a9c2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	689a      	ldr	r2, [r3, #8]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	683a      	ldr	r2, [r7, #0]
 800a9d8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	683a      	ldr	r2, [r7, #0]
 800a9de:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	687a      	ldr	r2, [r7, #4]
 800a9e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	1c5a      	adds	r2, r3, #1
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	601a      	str	r2, [r3, #0]
}
 800a9f0:	bf00      	nop
 800a9f2:	3714      	adds	r7, #20
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b085      	sub	sp, #20
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
 800aa04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa12:	d103      	bne.n	800aa1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	60fb      	str	r3, [r7, #12]
 800aa1a:	e00c      	b.n	800aa36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	3308      	adds	r3, #8
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	e002      	b.n	800aa2a <vListInsert+0x2e>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	60fb      	str	r3, [r7, #12]
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	68ba      	ldr	r2, [r7, #8]
 800aa32:	429a      	cmp	r2, r3
 800aa34:	d2f6      	bcs.n	800aa24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	685a      	ldr	r2, [r3, #4]
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	68fa      	ldr	r2, [r7, #12]
 800aa4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	683a      	ldr	r2, [r7, #0]
 800aa50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	687a      	ldr	r2, [r7, #4]
 800aa56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	1c5a      	adds	r2, r3, #1
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	601a      	str	r2, [r3, #0]
}
 800aa62:	bf00      	nop
 800aa64:	3714      	adds	r7, #20
 800aa66:	46bd      	mov	sp, r7
 800aa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6c:	4770      	bx	lr

0800aa6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa6e:	b480      	push	{r7}
 800aa70:	b085      	sub	sp, #20
 800aa72:	af00      	add	r7, sp, #0
 800aa74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	691b      	ldr	r3, [r3, #16]
 800aa7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	687a      	ldr	r2, [r7, #4]
 800aa82:	6892      	ldr	r2, [r2, #8]
 800aa84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	689b      	ldr	r3, [r3, #8]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	6852      	ldr	r2, [r2, #4]
 800aa8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	685b      	ldr	r3, [r3, #4]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	d103      	bne.n	800aaa2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	689a      	ldr	r2, [r3, #8]
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	1e5a      	subs	r2, r3, #1
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	3714      	adds	r7, #20
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr
	...

0800aac4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aac4:	b580      	push	{r7, lr}
 800aac6:	b08e      	sub	sp, #56	@ 0x38
 800aac8:	af00      	add	r7, sp, #0
 800aaca:	60f8      	str	r0, [r7, #12]
 800aacc:	60b9      	str	r1, [r7, #8]
 800aace:	607a      	str	r2, [r7, #4]
 800aad0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aad2:	2300      	movs	r3, #0
 800aad4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10b      	bne.n	800aaf8 <xQueueGenericSend+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	62bb      	str	r3, [r7, #40]	@ 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aaf2:	bf00      	nop
 800aaf4:	bf00      	nop
 800aaf6:	e7fd      	b.n	800aaf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d103      	bne.n	800ab06 <xQueueGenericSend+0x42>
 800aafe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d101      	bne.n	800ab0a <xQueueGenericSend+0x46>
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <xQueueGenericSend+0x48>
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d10b      	bne.n	800ab28 <xQueueGenericSend+0x64>
	__asm volatile
 800ab10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab14:	f383 8811 	msr	BASEPRI, r3
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	f3bf 8f4f 	dsb	sy
 800ab20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ab22:	bf00      	nop
 800ab24:	bf00      	nop
 800ab26:	e7fd      	b.n	800ab24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	2b02      	cmp	r3, #2
 800ab2c:	d103      	bne.n	800ab36 <xQueueGenericSend+0x72>
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab32:	2b01      	cmp	r3, #1
 800ab34:	d101      	bne.n	800ab3a <xQueueGenericSend+0x76>
 800ab36:	2301      	movs	r3, #1
 800ab38:	e000      	b.n	800ab3c <xQueueGenericSend+0x78>
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d10b      	bne.n	800ab58 <xQueueGenericSend+0x94>
	__asm volatile
 800ab40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab44:	f383 8811 	msr	BASEPRI, r3
 800ab48:	f3bf 8f6f 	isb	sy
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	623b      	str	r3, [r7, #32]
}
 800ab52:	bf00      	nop
 800ab54:	bf00      	nop
 800ab56:	e7fd      	b.n	800ab54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ab58:	f000 fd1a 	bl	800b590 <xTaskGetSchedulerState>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d102      	bne.n	800ab68 <xQueueGenericSend+0xa4>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <xQueueGenericSend+0xa8>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e000      	b.n	800ab6e <xQueueGenericSend+0xaa>
 800ab6c:	2300      	movs	r3, #0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d10b      	bne.n	800ab8a <xQueueGenericSend+0xc6>
	__asm volatile
 800ab72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ab76:	f383 8811 	msr	BASEPRI, r3
 800ab7a:	f3bf 8f6f 	isb	sy
 800ab7e:	f3bf 8f4f 	dsb	sy
 800ab82:	61fb      	str	r3, [r7, #28]
}
 800ab84:	bf00      	nop
 800ab86:	bf00      	nop
 800ab88:	e7fd      	b.n	800ab86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ab8a:	f000 fe25 	bl	800b7d8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab96:	429a      	cmp	r2, r3
 800ab98:	d302      	bcc.n	800aba0 <xQueueGenericSend+0xdc>
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	2b02      	cmp	r3, #2
 800ab9e:	d129      	bne.n	800abf4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	68b9      	ldr	r1, [r7, #8]
 800aba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aba6:	f000 f92d 	bl	800ae04 <prvCopyDataToQueue>
 800abaa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d010      	beq.n	800abd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800abb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb6:	3324      	adds	r3, #36	@ 0x24
 800abb8:	4618      	mov	r0, r3
 800abba:	f000 fbdf 	bl	800b37c <xTaskRemoveFromEventList>
 800abbe:	4603      	mov	r3, r0
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d013      	beq.n	800abec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800abc4:	4b3f      	ldr	r3, [pc, #252]	@ (800acc4 <xQueueGenericSend+0x200>)
 800abc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abca:	601a      	str	r2, [r3, #0]
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	e00a      	b.n	800abec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800abd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d007      	beq.n	800abec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800abdc:	4b39      	ldr	r3, [pc, #228]	@ (800acc4 <xQueueGenericSend+0x200>)
 800abde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	f3bf 8f4f 	dsb	sy
 800abe8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800abec:	f000 fe26 	bl	800b83c <vPortExitCritical>
				return pdPASS;
 800abf0:	2301      	movs	r3, #1
 800abf2:	e063      	b.n	800acbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d103      	bne.n	800ac02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800abfa:	f000 fe1f 	bl	800b83c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800abfe:	2300      	movs	r3, #0
 800ac00:	e05c      	b.n	800acbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d106      	bne.n	800ac16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac08:	f107 0314 	add.w	r3, r7, #20
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f000 fc19 	bl	800b444 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac12:	2301      	movs	r3, #1
 800ac14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac16:	f000 fe11 	bl	800b83c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac1a:	f000 f9c7 	bl	800afac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac1e:	f000 fddb 	bl	800b7d8 <vPortEnterCritical>
 800ac22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac28:	b25b      	sxtb	r3, r3
 800ac2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac2e:	d103      	bne.n	800ac38 <xQueueGenericSend+0x174>
 800ac30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac32:	2200      	movs	r2, #0
 800ac34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac3e:	b25b      	sxtb	r3, r3
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac44:	d103      	bne.n	800ac4e <xQueueGenericSend+0x18a>
 800ac46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac4e:	f000 fdf5 	bl	800b83c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac52:	1d3a      	adds	r2, r7, #4
 800ac54:	f107 0314 	add.w	r3, r7, #20
 800ac58:	4611      	mov	r1, r2
 800ac5a:	4618      	mov	r0, r3
 800ac5c:	f000 fc08 	bl	800b470 <xTaskCheckForTimeOut>
 800ac60:	4603      	mov	r3, r0
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d124      	bne.n	800acb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ac66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac68:	f000 f988 	bl	800af7c <prvIsQueueFull>
 800ac6c:	4603      	mov	r3, r0
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d018      	beq.n	800aca4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ac72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac74:	3310      	adds	r3, #16
 800ac76:	687a      	ldr	r2, [r7, #4]
 800ac78:	4611      	mov	r1, r2
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	f000 fb58 	bl	800b330 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ac80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac82:	f000 f929 	bl	800aed8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ac86:	f000 f99f 	bl	800afc8 <xTaskResumeAll>
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	f47f af7c 	bne.w	800ab8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ac92:	4b0c      	ldr	r3, [pc, #48]	@ (800acc4 <xQueueGenericSend+0x200>)
 800ac94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac98:	601a      	str	r2, [r3, #0]
 800ac9a:	f3bf 8f4f 	dsb	sy
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	e772      	b.n	800ab8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aca6:	f000 f917 	bl	800aed8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acaa:	f000 f98d 	bl	800afc8 <xTaskResumeAll>
 800acae:	e76c      	b.n	800ab8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800acb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800acb2:	f000 f911 	bl	800aed8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800acb6:	f000 f987 	bl	800afc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800acba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800acbc:	4618      	mov	r0, r3
 800acbe:	3738      	adds	r7, #56	@ 0x38
 800acc0:	46bd      	mov	sp, r7
 800acc2:	bd80      	pop	{r7, pc}
 800acc4:	e000ed04 	.word	0xe000ed04

0800acc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b090      	sub	sp, #64	@ 0x40
 800accc:	af00      	add	r7, sp, #0
 800acce:	60f8      	str	r0, [r7, #12]
 800acd0:	60b9      	str	r1, [r7, #8]
 800acd2:	607a      	str	r2, [r7, #4]
 800acd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800acda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10b      	bne.n	800acf8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ace0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ace4:	f383 8811 	msr	BASEPRI, r3
 800ace8:	f3bf 8f6f 	isb	sy
 800acec:	f3bf 8f4f 	dsb	sy
 800acf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800acf2:	bf00      	nop
 800acf4:	bf00      	nop
 800acf6:	e7fd      	b.n	800acf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d103      	bne.n	800ad06 <xQueueGenericSendFromISR+0x3e>
 800acfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d101      	bne.n	800ad0a <xQueueGenericSendFromISR+0x42>
 800ad06:	2301      	movs	r3, #1
 800ad08:	e000      	b.n	800ad0c <xQueueGenericSendFromISR+0x44>
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d10b      	bne.n	800ad28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ad10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad14:	f383 8811 	msr	BASEPRI, r3
 800ad18:	f3bf 8f6f 	isb	sy
 800ad1c:	f3bf 8f4f 	dsb	sy
 800ad20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad22:	bf00      	nop
 800ad24:	bf00      	nop
 800ad26:	e7fd      	b.n	800ad24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	2b02      	cmp	r3, #2
 800ad2c:	d103      	bne.n	800ad36 <xQueueGenericSendFromISR+0x6e>
 800ad2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad32:	2b01      	cmp	r3, #1
 800ad34:	d101      	bne.n	800ad3a <xQueueGenericSendFromISR+0x72>
 800ad36:	2301      	movs	r3, #1
 800ad38:	e000      	b.n	800ad3c <xQueueGenericSendFromISR+0x74>
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10b      	bne.n	800ad58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	623b      	str	r3, [r7, #32]
}
 800ad52:	bf00      	nop
 800ad54:	bf00      	nop
 800ad56:	e7fd      	b.n	800ad54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad58:	f000 fdf0 	bl	800b93c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ad5c:	f3ef 8211 	mrs	r2, BASEPRI
 800ad60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad64:	f383 8811 	msr	BASEPRI, r3
 800ad68:	f3bf 8f6f 	isb	sy
 800ad6c:	f3bf 8f4f 	dsb	sy
 800ad70:	61fa      	str	r2, [r7, #28]
 800ad72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ad74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ad76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d302      	bcc.n	800ad8a <xQueueGenericSendFromISR+0xc2>
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	d12f      	bne.n	800adea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ad94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad9a:	683a      	ldr	r2, [r7, #0]
 800ad9c:	68b9      	ldr	r1, [r7, #8]
 800ad9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ada0:	f000 f830 	bl	800ae04 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ada4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ada8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adac:	d112      	bne.n	800add4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d016      	beq.n	800ade4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb8:	3324      	adds	r3, #36	@ 0x24
 800adba:	4618      	mov	r0, r3
 800adbc:	f000 fade 	bl	800b37c <xTaskRemoveFromEventList>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d00e      	beq.n	800ade4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d00b      	beq.n	800ade4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	2201      	movs	r2, #1
 800add0:	601a      	str	r2, [r3, #0]
 800add2:	e007      	b.n	800ade4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800add4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800add8:	3301      	adds	r3, #1
 800adda:	b2db      	uxtb	r3, r3
 800addc:	b25a      	sxtb	r2, r3
 800adde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ade4:	2301      	movs	r3, #1
 800ade6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ade8:	e001      	b.n	800adee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800adea:	2300      	movs	r3, #0
 800adec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800adee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adf0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800adf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800adfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3740      	adds	r7, #64	@ 0x40
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b086      	sub	sp, #24
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	60f8      	str	r0, [r7, #12]
 800ae0c:	60b9      	str	r1, [r7, #8]
 800ae0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae18:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d10d      	bne.n	800ae3e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d14d      	bne.n	800aec6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f000 fbcc 	bl	800b5cc <xTaskPriorityDisinherit>
 800ae34:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	609a      	str	r2, [r3, #8]
 800ae3c:	e043      	b.n	800aec6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d119      	bne.n	800ae78 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	6858      	ldr	r0, [r3, #4]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae4c:	461a      	mov	r2, r3
 800ae4e:	68b9      	ldr	r1, [r7, #8]
 800ae50:	f001 fdfb 	bl	800ca4a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5c:	441a      	add	r2, r3
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	685a      	ldr	r2, [r3, #4]
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	689b      	ldr	r3, [r3, #8]
 800ae6a:	429a      	cmp	r2, r3
 800ae6c:	d32b      	bcc.n	800aec6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	605a      	str	r2, [r3, #4]
 800ae76:	e026      	b.n	800aec6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	68d8      	ldr	r0, [r3, #12]
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae80:	461a      	mov	r2, r3
 800ae82:	68b9      	ldr	r1, [r7, #8]
 800ae84:	f001 fde1 	bl	800ca4a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae90:	425b      	negs	r3, r3
 800ae92:	441a      	add	r2, r3
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	68da      	ldr	r2, [r3, #12]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d207      	bcs.n	800aeb4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aeac:	425b      	negs	r3, r3
 800aeae:	441a      	add	r2, r3
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d105      	bne.n	800aec6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d002      	beq.n	800aec6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aece:	697b      	ldr	r3, [r7, #20]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aee0:	f000 fc7a 	bl	800b7d8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aeea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aeec:	e011      	b.n	800af12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d012      	beq.n	800af1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	3324      	adds	r3, #36	@ 0x24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fa3e 	bl	800b37c <xTaskRemoveFromEventList>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800af06:	f000 fb17 	bl	800b538 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800af0a:	7bfb      	ldrb	r3, [r7, #15]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	b2db      	uxtb	r3, r3
 800af10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800af12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800af16:	2b00      	cmp	r3, #0
 800af18:	dce9      	bgt.n	800aeee <prvUnlockQueue+0x16>
 800af1a:	e000      	b.n	800af1e <prvUnlockQueue+0x46>
					break;
 800af1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	22ff      	movs	r2, #255	@ 0xff
 800af22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800af26:	f000 fc89 	bl	800b83c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800af2a:	f000 fc55 	bl	800b7d8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800af34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af36:	e011      	b.n	800af5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	691b      	ldr	r3, [r3, #16]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d012      	beq.n	800af66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	3310      	adds	r3, #16
 800af44:	4618      	mov	r0, r3
 800af46:	f000 fa19 	bl	800b37c <xTaskRemoveFromEventList>
 800af4a:	4603      	mov	r3, r0
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d001      	beq.n	800af54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800af50:	f000 faf2 	bl	800b538 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800af54:	7bbb      	ldrb	r3, [r7, #14]
 800af56:	3b01      	subs	r3, #1
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800af5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af60:	2b00      	cmp	r3, #0
 800af62:	dce9      	bgt.n	800af38 <prvUnlockQueue+0x60>
 800af64:	e000      	b.n	800af68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800af66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	22ff      	movs	r2, #255	@ 0xff
 800af6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800af70:	f000 fc64 	bl	800b83c <vPortExitCritical>
}
 800af74:	bf00      	nop
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b084      	sub	sp, #16
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800af84:	f000 fc28 	bl	800b7d8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af90:	429a      	cmp	r2, r3
 800af92:	d102      	bne.n	800af9a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800af94:	2301      	movs	r3, #1
 800af96:	60fb      	str	r3, [r7, #12]
 800af98:	e001      	b.n	800af9e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800af9e:	f000 fc4d 	bl	800b83c <vPortExitCritical>

	return xReturn;
 800afa2:	68fb      	ldr	r3, [r7, #12]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800afac:	b480      	push	{r7}
 800afae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800afb0:	4b04      	ldr	r3, [pc, #16]	@ (800afc4 <vTaskSuspendAll+0x18>)
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	3301      	adds	r3, #1
 800afb6:	4a03      	ldr	r2, [pc, #12]	@ (800afc4 <vTaskSuspendAll+0x18>)
 800afb8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800afba:	bf00      	nop
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr
 800afc4:	200261bc 	.word	0x200261bc

0800afc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800afce:	2300      	movs	r3, #0
 800afd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800afd6:	4b42      	ldr	r3, [pc, #264]	@ (800b0e0 <xTaskResumeAll+0x118>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d10b      	bne.n	800aff6 <xTaskResumeAll+0x2e>
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	603b      	str	r3, [r7, #0]
}
 800aff0:	bf00      	nop
 800aff2:	bf00      	nop
 800aff4:	e7fd      	b.n	800aff2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aff6:	f000 fbef 	bl	800b7d8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800affa:	4b39      	ldr	r3, [pc, #228]	@ (800b0e0 <xTaskResumeAll+0x118>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	3b01      	subs	r3, #1
 800b000:	4a37      	ldr	r2, [pc, #220]	@ (800b0e0 <xTaskResumeAll+0x118>)
 800b002:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b004:	4b36      	ldr	r3, [pc, #216]	@ (800b0e0 <xTaskResumeAll+0x118>)
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d161      	bne.n	800b0d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b00c:	4b35      	ldr	r3, [pc, #212]	@ (800b0e4 <xTaskResumeAll+0x11c>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d05d      	beq.n	800b0d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b014:	e02e      	b.n	800b074 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b016:	4b34      	ldr	r3, [pc, #208]	@ (800b0e8 <xTaskResumeAll+0x120>)
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	68db      	ldr	r3, [r3, #12]
 800b01c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	3318      	adds	r3, #24
 800b022:	4618      	mov	r0, r3
 800b024:	f7ff fd23 	bl	800aa6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	3304      	adds	r3, #4
 800b02c:	4618      	mov	r0, r3
 800b02e:	f7ff fd1e 	bl	800aa6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b036:	2201      	movs	r2, #1
 800b038:	409a      	lsls	r2, r3
 800b03a:	4b2c      	ldr	r3, [pc, #176]	@ (800b0ec <xTaskResumeAll+0x124>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	4313      	orrs	r3, r2
 800b040:	4a2a      	ldr	r2, [pc, #168]	@ (800b0ec <xTaskResumeAll+0x124>)
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b048:	4613      	mov	r3, r2
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	4413      	add	r3, r2
 800b04e:	009b      	lsls	r3, r3, #2
 800b050:	4a27      	ldr	r2, [pc, #156]	@ (800b0f0 <xTaskResumeAll+0x128>)
 800b052:	441a      	add	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	3304      	adds	r3, #4
 800b058:	4619      	mov	r1, r3
 800b05a:	4610      	mov	r0, r2
 800b05c:	f7ff fcaa 	bl	800a9b4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b064:	4b23      	ldr	r3, [pc, #140]	@ (800b0f4 <xTaskResumeAll+0x12c>)
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b06a:	429a      	cmp	r2, r3
 800b06c:	d302      	bcc.n	800b074 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b06e:	4b22      	ldr	r3, [pc, #136]	@ (800b0f8 <xTaskResumeAll+0x130>)
 800b070:	2201      	movs	r2, #1
 800b072:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b074:	4b1c      	ldr	r3, [pc, #112]	@ (800b0e8 <xTaskResumeAll+0x120>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d1cc      	bne.n	800b016 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d001      	beq.n	800b086 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b082:	f000 fa65 	bl	800b550 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b086:	4b1d      	ldr	r3, [pc, #116]	@ (800b0fc <xTaskResumeAll+0x134>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d010      	beq.n	800b0b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b092:	f000 f837 	bl	800b104 <xTaskIncrementTick>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b09c:	4b16      	ldr	r3, [pc, #88]	@ (800b0f8 <xTaskResumeAll+0x130>)
 800b09e:	2201      	movs	r2, #1
 800b0a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	3b01      	subs	r3, #1
 800b0a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1f1      	bne.n	800b092 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b0ae:	4b13      	ldr	r3, [pc, #76]	@ (800b0fc <xTaskResumeAll+0x134>)
 800b0b0:	2200      	movs	r2, #0
 800b0b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b0b4:	4b10      	ldr	r3, [pc, #64]	@ (800b0f8 <xTaskResumeAll+0x130>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d009      	beq.n	800b0d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b0bc:	2301      	movs	r3, #1
 800b0be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	@ (800b100 <xTaskResumeAll+0x138>)
 800b0c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0c6:	601a      	str	r2, [r3, #0]
 800b0c8:	f3bf 8f4f 	dsb	sy
 800b0cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0d0:	f000 fbb4 	bl	800b83c <vPortExitCritical>

	return xAlreadyYielded;
 800b0d4:	68bb      	ldr	r3, [r7, #8]
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}
 800b0de:	bf00      	nop
 800b0e0:	200261bc 	.word	0x200261bc
 800b0e4:	2002619c 	.word	0x2002619c
 800b0e8:	20026174 	.word	0x20026174
 800b0ec:	200261a4 	.word	0x200261a4
 800b0f0:	200260e0 	.word	0x200260e0
 800b0f4:	200260dc 	.word	0x200260dc
 800b0f8:	200261b0 	.word	0x200261b0
 800b0fc:	200261ac 	.word	0x200261ac
 800b100:	e000ed04 	.word	0xe000ed04

0800b104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b086      	sub	sp, #24
 800b108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b10a:	2300      	movs	r3, #0
 800b10c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b10e:	4b4f      	ldr	r3, [pc, #316]	@ (800b24c <xTaskIncrementTick+0x148>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	2b00      	cmp	r3, #0
 800b114:	f040 808f 	bne.w	800b236 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b118:	4b4d      	ldr	r3, [pc, #308]	@ (800b250 <xTaskIncrementTick+0x14c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	3301      	adds	r3, #1
 800b11e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b120:	4a4b      	ldr	r2, [pc, #300]	@ (800b250 <xTaskIncrementTick+0x14c>)
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d121      	bne.n	800b170 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b12c:	4b49      	ldr	r3, [pc, #292]	@ (800b254 <xTaskIncrementTick+0x150>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00b      	beq.n	800b14e <xTaskIncrementTick+0x4a>
	__asm volatile
 800b136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b13a:	f383 8811 	msr	BASEPRI, r3
 800b13e:	f3bf 8f6f 	isb	sy
 800b142:	f3bf 8f4f 	dsb	sy
 800b146:	603b      	str	r3, [r7, #0]
}
 800b148:	bf00      	nop
 800b14a:	bf00      	nop
 800b14c:	e7fd      	b.n	800b14a <xTaskIncrementTick+0x46>
 800b14e:	4b41      	ldr	r3, [pc, #260]	@ (800b254 <xTaskIncrementTick+0x150>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	60fb      	str	r3, [r7, #12]
 800b154:	4b40      	ldr	r3, [pc, #256]	@ (800b258 <xTaskIncrementTick+0x154>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	4a3e      	ldr	r2, [pc, #248]	@ (800b254 <xTaskIncrementTick+0x150>)
 800b15a:	6013      	str	r3, [r2, #0]
 800b15c:	4a3e      	ldr	r2, [pc, #248]	@ (800b258 <xTaskIncrementTick+0x154>)
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6013      	str	r3, [r2, #0]
 800b162:	4b3e      	ldr	r3, [pc, #248]	@ (800b25c <xTaskIncrementTick+0x158>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	3301      	adds	r3, #1
 800b168:	4a3c      	ldr	r2, [pc, #240]	@ (800b25c <xTaskIncrementTick+0x158>)
 800b16a:	6013      	str	r3, [r2, #0]
 800b16c:	f000 f9f0 	bl	800b550 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b170:	4b3b      	ldr	r3, [pc, #236]	@ (800b260 <xTaskIncrementTick+0x15c>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	693a      	ldr	r2, [r7, #16]
 800b176:	429a      	cmp	r2, r3
 800b178:	d348      	bcc.n	800b20c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b17a:	4b36      	ldr	r3, [pc, #216]	@ (800b254 <xTaskIncrementTick+0x150>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d104      	bne.n	800b18e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b184:	4b36      	ldr	r3, [pc, #216]	@ (800b260 <xTaskIncrementTick+0x15c>)
 800b186:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b18a:	601a      	str	r2, [r3, #0]
					break;
 800b18c:	e03e      	b.n	800b20c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b18e:	4b31      	ldr	r3, [pc, #196]	@ (800b254 <xTaskIncrementTick+0x150>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	68db      	ldr	r3, [r3, #12]
 800b194:	68db      	ldr	r3, [r3, #12]
 800b196:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b198:	68bb      	ldr	r3, [r7, #8]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b19e:	693a      	ldr	r2, [r7, #16]
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d203      	bcs.n	800b1ae <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b1a6:	4a2e      	ldr	r2, [pc, #184]	@ (800b260 <xTaskIncrementTick+0x15c>)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b1ac:	e02e      	b.n	800b20c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	3304      	adds	r3, #4
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7ff fc5b 	bl	800aa6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d004      	beq.n	800b1ca <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1c0:	68bb      	ldr	r3, [r7, #8]
 800b1c2:	3318      	adds	r3, #24
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff fc52 	bl	800aa6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	409a      	lsls	r2, r3
 800b1d2:	4b24      	ldr	r3, [pc, #144]	@ (800b264 <xTaskIncrementTick+0x160>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	4a22      	ldr	r2, [pc, #136]	@ (800b264 <xTaskIncrementTick+0x160>)
 800b1da:	6013      	str	r3, [r2, #0]
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	009b      	lsls	r3, r3, #2
 800b1e4:	4413      	add	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4a1f      	ldr	r2, [pc, #124]	@ (800b268 <xTaskIncrementTick+0x164>)
 800b1ea:	441a      	add	r2, r3
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	3304      	adds	r3, #4
 800b1f0:	4619      	mov	r1, r3
 800b1f2:	4610      	mov	r0, r2
 800b1f4:	f7ff fbde 	bl	800a9b4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1fc:	4b1b      	ldr	r3, [pc, #108]	@ (800b26c <xTaskIncrementTick+0x168>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b202:	429a      	cmp	r2, r3
 800b204:	d3b9      	bcc.n	800b17a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b206:	2301      	movs	r3, #1
 800b208:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b20a:	e7b6      	b.n	800b17a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b20c:	4b17      	ldr	r3, [pc, #92]	@ (800b26c <xTaskIncrementTick+0x168>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b212:	4915      	ldr	r1, [pc, #84]	@ (800b268 <xTaskIncrementTick+0x164>)
 800b214:	4613      	mov	r3, r2
 800b216:	009b      	lsls	r3, r3, #2
 800b218:	4413      	add	r3, r2
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	440b      	add	r3, r1
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	2b01      	cmp	r3, #1
 800b222:	d901      	bls.n	800b228 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b224:	2301      	movs	r3, #1
 800b226:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b228:	4b11      	ldr	r3, [pc, #68]	@ (800b270 <xTaskIncrementTick+0x16c>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d007      	beq.n	800b240 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b230:	2301      	movs	r3, #1
 800b232:	617b      	str	r3, [r7, #20]
 800b234:	e004      	b.n	800b240 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b236:	4b0f      	ldr	r3, [pc, #60]	@ (800b274 <xTaskIncrementTick+0x170>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	3301      	adds	r3, #1
 800b23c:	4a0d      	ldr	r2, [pc, #52]	@ (800b274 <xTaskIncrementTick+0x170>)
 800b23e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b240:	697b      	ldr	r3, [r7, #20]
}
 800b242:	4618      	mov	r0, r3
 800b244:	3718      	adds	r7, #24
 800b246:	46bd      	mov	sp, r7
 800b248:	bd80      	pop	{r7, pc}
 800b24a:	bf00      	nop
 800b24c:	200261bc 	.word	0x200261bc
 800b250:	200261a0 	.word	0x200261a0
 800b254:	2002616c 	.word	0x2002616c
 800b258:	20026170 	.word	0x20026170
 800b25c:	200261b4 	.word	0x200261b4
 800b260:	200261b8 	.word	0x200261b8
 800b264:	200261a4 	.word	0x200261a4
 800b268:	200260e0 	.word	0x200260e0
 800b26c:	200260dc 	.word	0x200260dc
 800b270:	200261b0 	.word	0x200261b0
 800b274:	200261ac 	.word	0x200261ac

0800b278 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b278:	b480      	push	{r7}
 800b27a:	b087      	sub	sp, #28
 800b27c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b27e:	4b27      	ldr	r3, [pc, #156]	@ (800b31c <vTaskSwitchContext+0xa4>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d003      	beq.n	800b28e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b286:	4b26      	ldr	r3, [pc, #152]	@ (800b320 <vTaskSwitchContext+0xa8>)
 800b288:	2201      	movs	r2, #1
 800b28a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b28c:	e040      	b.n	800b310 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800b28e:	4b24      	ldr	r3, [pc, #144]	@ (800b320 <vTaskSwitchContext+0xa8>)
 800b290:	2200      	movs	r2, #0
 800b292:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b294:	4b23      	ldr	r3, [pc, #140]	@ (800b324 <vTaskSwitchContext+0xac>)
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	fab3 f383 	clz	r3, r3
 800b2a0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800b2a2:	7afb      	ldrb	r3, [r7, #11]
 800b2a4:	f1c3 031f 	rsb	r3, r3, #31
 800b2a8:	617b      	str	r3, [r7, #20]
 800b2aa:	491f      	ldr	r1, [pc, #124]	@ (800b328 <vTaskSwitchContext+0xb0>)
 800b2ac:	697a      	ldr	r2, [r7, #20]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	009b      	lsls	r3, r3, #2
 800b2b2:	4413      	add	r3, r2
 800b2b4:	009b      	lsls	r3, r3, #2
 800b2b6:	440b      	add	r3, r1
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10b      	bne.n	800b2d6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	607b      	str	r3, [r7, #4]
}
 800b2d0:	bf00      	nop
 800b2d2:	bf00      	nop
 800b2d4:	e7fd      	b.n	800b2d2 <vTaskSwitchContext+0x5a>
 800b2d6:	697a      	ldr	r2, [r7, #20]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	4413      	add	r3, r2
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4a11      	ldr	r2, [pc, #68]	@ (800b328 <vTaskSwitchContext+0xb0>)
 800b2e2:	4413      	add	r3, r2
 800b2e4:	613b      	str	r3, [r7, #16]
 800b2e6:	693b      	ldr	r3, [r7, #16]
 800b2e8:	685b      	ldr	r3, [r3, #4]
 800b2ea:	685a      	ldr	r2, [r3, #4]
 800b2ec:	693b      	ldr	r3, [r7, #16]
 800b2ee:	605a      	str	r2, [r3, #4]
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	3308      	adds	r3, #8
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d104      	bne.n	800b306 <vTaskSwitchContext+0x8e>
 800b2fc:	693b      	ldr	r3, [r7, #16]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	685a      	ldr	r2, [r3, #4]
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	605a      	str	r2, [r3, #4]
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	685b      	ldr	r3, [r3, #4]
 800b30a:	68db      	ldr	r3, [r3, #12]
 800b30c:	4a07      	ldr	r2, [pc, #28]	@ (800b32c <vTaskSwitchContext+0xb4>)
 800b30e:	6013      	str	r3, [r2, #0]
}
 800b310:	bf00      	nop
 800b312:	371c      	adds	r7, #28
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr
 800b31c:	200261bc 	.word	0x200261bc
 800b320:	200261b0 	.word	0x200261b0
 800b324:	200261a4 	.word	0x200261a4
 800b328:	200260e0 	.word	0x200260e0
 800b32c:	200260dc 	.word	0x200260dc

0800b330 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d10b      	bne.n	800b358 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b344:	f383 8811 	msr	BASEPRI, r3
 800b348:	f3bf 8f6f 	isb	sy
 800b34c:	f3bf 8f4f 	dsb	sy
 800b350:	60fb      	str	r3, [r7, #12]
}
 800b352:	bf00      	nop
 800b354:	bf00      	nop
 800b356:	e7fd      	b.n	800b354 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b358:	4b07      	ldr	r3, [pc, #28]	@ (800b378 <vTaskPlaceOnEventList+0x48>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	3318      	adds	r3, #24
 800b35e:	4619      	mov	r1, r3
 800b360:	6878      	ldr	r0, [r7, #4]
 800b362:	f7ff fb4b 	bl	800a9fc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b366:	2101      	movs	r1, #1
 800b368:	6838      	ldr	r0, [r7, #0]
 800b36a:	f000 f9b7 	bl	800b6dc <prvAddCurrentTaskToDelayedList>
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	200260dc 	.word	0x200260dc

0800b37c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b086      	sub	sp, #24
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	68db      	ldr	r3, [r3, #12]
 800b388:	68db      	ldr	r3, [r3, #12]
 800b38a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10b      	bne.n	800b3aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b396:	f383 8811 	msr	BASEPRI, r3
 800b39a:	f3bf 8f6f 	isb	sy
 800b39e:	f3bf 8f4f 	dsb	sy
 800b3a2:	60fb      	str	r3, [r7, #12]
}
 800b3a4:	bf00      	nop
 800b3a6:	bf00      	nop
 800b3a8:	e7fd      	b.n	800b3a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b3aa:	693b      	ldr	r3, [r7, #16]
 800b3ac:	3318      	adds	r3, #24
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fb5d 	bl	800aa6e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b42c <xTaskRemoveFromEventList+0xb0>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d11c      	bne.n	800b3f6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	3304      	adds	r3, #4
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff fb54 	bl	800aa6e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b3c6:	693b      	ldr	r3, [r7, #16]
 800b3c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	409a      	lsls	r2, r3
 800b3ce:	4b18      	ldr	r3, [pc, #96]	@ (800b430 <xTaskRemoveFromEventList+0xb4>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	4a16      	ldr	r2, [pc, #88]	@ (800b430 <xTaskRemoveFromEventList+0xb4>)
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	693b      	ldr	r3, [r7, #16]
 800b3da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3dc:	4613      	mov	r3, r2
 800b3de:	009b      	lsls	r3, r3, #2
 800b3e0:	4413      	add	r3, r2
 800b3e2:	009b      	lsls	r3, r3, #2
 800b3e4:	4a13      	ldr	r2, [pc, #76]	@ (800b434 <xTaskRemoveFromEventList+0xb8>)
 800b3e6:	441a      	add	r2, r3
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	3304      	adds	r3, #4
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	4610      	mov	r0, r2
 800b3f0:	f7ff fae0 	bl	800a9b4 <vListInsertEnd>
 800b3f4:	e005      	b.n	800b402 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b3f6:	693b      	ldr	r3, [r7, #16]
 800b3f8:	3318      	adds	r3, #24
 800b3fa:	4619      	mov	r1, r3
 800b3fc:	480e      	ldr	r0, [pc, #56]	@ (800b438 <xTaskRemoveFromEventList+0xbc>)
 800b3fe:	f7ff fad9 	bl	800a9b4 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b402:	693b      	ldr	r3, [r7, #16]
 800b404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b406:	4b0d      	ldr	r3, [pc, #52]	@ (800b43c <xTaskRemoveFromEventList+0xc0>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b40c:	429a      	cmp	r2, r3
 800b40e:	d905      	bls.n	800b41c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b410:	2301      	movs	r3, #1
 800b412:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b414:	4b0a      	ldr	r3, [pc, #40]	@ (800b440 <xTaskRemoveFromEventList+0xc4>)
 800b416:	2201      	movs	r2, #1
 800b418:	601a      	str	r2, [r3, #0]
 800b41a:	e001      	b.n	800b420 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b41c:	2300      	movs	r3, #0
 800b41e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b420:	697b      	ldr	r3, [r7, #20]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3718      	adds	r7, #24
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	200261bc 	.word	0x200261bc
 800b430:	200261a4 	.word	0x200261a4
 800b434:	200260e0 	.word	0x200260e0
 800b438:	20026174 	.word	0x20026174
 800b43c:	200260dc 	.word	0x200260dc
 800b440:	200261b0 	.word	0x200261b0

0800b444 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b444:	b480      	push	{r7}
 800b446:	b083      	sub	sp, #12
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b44c:	4b06      	ldr	r3, [pc, #24]	@ (800b468 <vTaskInternalSetTimeOutState+0x24>)
 800b44e:	681a      	ldr	r2, [r3, #0]
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b454:	4b05      	ldr	r3, [pc, #20]	@ (800b46c <vTaskInternalSetTimeOutState+0x28>)
 800b456:	681a      	ldr	r2, [r3, #0]
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	605a      	str	r2, [r3, #4]
}
 800b45c:	bf00      	nop
 800b45e:	370c      	adds	r7, #12
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr
 800b468:	200261b4 	.word	0x200261b4
 800b46c:	200261a0 	.word	0x200261a0

0800b470 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b470:	b580      	push	{r7, lr}
 800b472:	b088      	sub	sp, #32
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10b      	bne.n	800b498 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b484:	f383 8811 	msr	BASEPRI, r3
 800b488:	f3bf 8f6f 	isb	sy
 800b48c:	f3bf 8f4f 	dsb	sy
 800b490:	613b      	str	r3, [r7, #16]
}
 800b492:	bf00      	nop
 800b494:	bf00      	nop
 800b496:	e7fd      	b.n	800b494 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b498:	683b      	ldr	r3, [r7, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d10b      	bne.n	800b4b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	60fb      	str	r3, [r7, #12]
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	e7fd      	b.n	800b4b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b4b6:	f000 f98f 	bl	800b7d8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b4ba:	4b1d      	ldr	r3, [pc, #116]	@ (800b530 <xTaskCheckForTimeOut+0xc0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	69ba      	ldr	r2, [r7, #24]
 800b4c6:	1ad3      	subs	r3, r2, r3
 800b4c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b4d2:	d102      	bne.n	800b4da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	61fb      	str	r3, [r7, #28]
 800b4d8:	e023      	b.n	800b522 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	4b15      	ldr	r3, [pc, #84]	@ (800b534 <xTaskCheckForTimeOut+0xc4>)
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	429a      	cmp	r2, r3
 800b4e4:	d007      	beq.n	800b4f6 <xTaskCheckForTimeOut+0x86>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	685b      	ldr	r3, [r3, #4]
 800b4ea:	69ba      	ldr	r2, [r7, #24]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d302      	bcc.n	800b4f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	61fb      	str	r3, [r7, #28]
 800b4f4:	e015      	b.n	800b522 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	697a      	ldr	r2, [r7, #20]
 800b4fc:	429a      	cmp	r2, r3
 800b4fe:	d20b      	bcs.n	800b518 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	1ad2      	subs	r2, r2, r3
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7ff ff99 	bl	800b444 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b512:	2300      	movs	r3, #0
 800b514:	61fb      	str	r3, [r7, #28]
 800b516:	e004      	b.n	800b522 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	2200      	movs	r2, #0
 800b51c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b51e:	2301      	movs	r3, #1
 800b520:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b522:	f000 f98b 	bl	800b83c <vPortExitCritical>

	return xReturn;
 800b526:	69fb      	ldr	r3, [r7, #28]
}
 800b528:	4618      	mov	r0, r3
 800b52a:	3720      	adds	r7, #32
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	200261a0 	.word	0x200261a0
 800b534:	200261b4 	.word	0x200261b4

0800b538 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b538:	b480      	push	{r7}
 800b53a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b53c:	4b03      	ldr	r3, [pc, #12]	@ (800b54c <vTaskMissedYield+0x14>)
 800b53e:	2201      	movs	r2, #1
 800b540:	601a      	str	r2, [r3, #0]
}
 800b542:	bf00      	nop
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr
 800b54c:	200261b0 	.word	0x200261b0

0800b550 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b550:	b480      	push	{r7}
 800b552:	b083      	sub	sp, #12
 800b554:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b556:	4b0c      	ldr	r3, [pc, #48]	@ (800b588 <prvResetNextTaskUnblockTime+0x38>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d104      	bne.n	800b56a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b560:	4b0a      	ldr	r3, [pc, #40]	@ (800b58c <prvResetNextTaskUnblockTime+0x3c>)
 800b562:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b566:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b568:	e008      	b.n	800b57c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b56a:	4b07      	ldr	r3, [pc, #28]	@ (800b588 <prvResetNextTaskUnblockTime+0x38>)
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	68db      	ldr	r3, [r3, #12]
 800b570:	68db      	ldr	r3, [r3, #12]
 800b572:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4a04      	ldr	r2, [pc, #16]	@ (800b58c <prvResetNextTaskUnblockTime+0x3c>)
 800b57a:	6013      	str	r3, [r2, #0]
}
 800b57c:	bf00      	nop
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr
 800b588:	2002616c 	.word	0x2002616c
 800b58c:	200261b8 	.word	0x200261b8

0800b590 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b590:	b480      	push	{r7}
 800b592:	b083      	sub	sp, #12
 800b594:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b596:	4b0b      	ldr	r3, [pc, #44]	@ (800b5c4 <xTaskGetSchedulerState+0x34>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d102      	bne.n	800b5a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b59e:	2301      	movs	r3, #1
 800b5a0:	607b      	str	r3, [r7, #4]
 800b5a2:	e008      	b.n	800b5b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5a4:	4b08      	ldr	r3, [pc, #32]	@ (800b5c8 <xTaskGetSchedulerState+0x38>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d102      	bne.n	800b5b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b5ac:	2302      	movs	r3, #2
 800b5ae:	607b      	str	r3, [r7, #4]
 800b5b0:	e001      	b.n	800b5b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b5b6:	687b      	ldr	r3, [r7, #4]
	}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	370c      	adds	r7, #12
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c2:	4770      	bx	lr
 800b5c4:	200261a8 	.word	0x200261a8
 800b5c8:	200261bc 	.word	0x200261bc

0800b5cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b086      	sub	sp, #24
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d070      	beq.n	800b6c4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b5e2:	4b3b      	ldr	r3, [pc, #236]	@ (800b6d0 <xTaskPriorityDisinherit+0x104>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d00b      	beq.n	800b604 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b5ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5f0:	f383 8811 	msr	BASEPRI, r3
 800b5f4:	f3bf 8f6f 	isb	sy
 800b5f8:	f3bf 8f4f 	dsb	sy
 800b5fc:	60fb      	str	r3, [r7, #12]
}
 800b5fe:	bf00      	nop
 800b600:	bf00      	nop
 800b602:	e7fd      	b.n	800b600 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d10b      	bne.n	800b624 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b60c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b610:	f383 8811 	msr	BASEPRI, r3
 800b614:	f3bf 8f6f 	isb	sy
 800b618:	f3bf 8f4f 	dsb	sy
 800b61c:	60bb      	str	r3, [r7, #8]
}
 800b61e:	bf00      	nop
 800b620:	bf00      	nop
 800b622:	e7fd      	b.n	800b620 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b628:	1e5a      	subs	r2, r3, #1
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b636:	429a      	cmp	r2, r3
 800b638:	d044      	beq.n	800b6c4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b63a:	693b      	ldr	r3, [r7, #16]
 800b63c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d140      	bne.n	800b6c4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b642:	693b      	ldr	r3, [r7, #16]
 800b644:	3304      	adds	r3, #4
 800b646:	4618      	mov	r0, r3
 800b648:	f7ff fa11 	bl	800aa6e <uxListRemove>
 800b64c:	4603      	mov	r3, r0
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d115      	bne.n	800b67e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b652:	693b      	ldr	r3, [r7, #16]
 800b654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b656:	491f      	ldr	r1, [pc, #124]	@ (800b6d4 <xTaskPriorityDisinherit+0x108>)
 800b658:	4613      	mov	r3, r2
 800b65a:	009b      	lsls	r3, r3, #2
 800b65c:	4413      	add	r3, r2
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	440b      	add	r3, r1
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10a      	bne.n	800b67e <xTaskPriorityDisinherit+0xb2>
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b66c:	2201      	movs	r2, #1
 800b66e:	fa02 f303 	lsl.w	r3, r2, r3
 800b672:	43da      	mvns	r2, r3
 800b674:	4b18      	ldr	r3, [pc, #96]	@ (800b6d8 <xTaskPriorityDisinherit+0x10c>)
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	4013      	ands	r3, r2
 800b67a:	4a17      	ldr	r2, [pc, #92]	@ (800b6d8 <xTaskPriorityDisinherit+0x10c>)
 800b67c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b686:	693b      	ldr	r3, [r7, #16]
 800b688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b68a:	f1c3 0207 	rsb	r2, r3, #7
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b696:	2201      	movs	r2, #1
 800b698:	409a      	lsls	r2, r3
 800b69a:	4b0f      	ldr	r3, [pc, #60]	@ (800b6d8 <xTaskPriorityDisinherit+0x10c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	4a0d      	ldr	r2, [pc, #52]	@ (800b6d8 <xTaskPriorityDisinherit+0x10c>)
 800b6a2:	6013      	str	r3, [r2, #0]
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6a8:	4613      	mov	r3, r2
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	4a08      	ldr	r2, [pc, #32]	@ (800b6d4 <xTaskPriorityDisinherit+0x108>)
 800b6b2:	441a      	add	r2, r3
 800b6b4:	693b      	ldr	r3, [r7, #16]
 800b6b6:	3304      	adds	r3, #4
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4610      	mov	r0, r2
 800b6bc:	f7ff f97a 	bl	800a9b4 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b6c4:	697b      	ldr	r3, [r7, #20]
	}
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	3718      	adds	r7, #24
 800b6ca:	46bd      	mov	sp, r7
 800b6cc:	bd80      	pop	{r7, pc}
 800b6ce:	bf00      	nop
 800b6d0:	200260dc 	.word	0x200260dc
 800b6d4:	200260e0 	.word	0x200260e0
 800b6d8:	200261a4 	.word	0x200261a4

0800b6dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b084      	sub	sp, #16
 800b6e0:	af00      	add	r7, sp, #0
 800b6e2:	6078      	str	r0, [r7, #4]
 800b6e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b6e6:	4b29      	ldr	r3, [pc, #164]	@ (800b78c <prvAddCurrentTaskToDelayedList+0xb0>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6ec:	4b28      	ldr	r3, [pc, #160]	@ (800b790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	f7ff f9bb 	bl	800aa6e <uxListRemove>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d10b      	bne.n	800b716 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800b6fe:	4b24      	ldr	r3, [pc, #144]	@ (800b790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b704:	2201      	movs	r2, #1
 800b706:	fa02 f303 	lsl.w	r3, r2, r3
 800b70a:	43da      	mvns	r2, r3
 800b70c:	4b21      	ldr	r3, [pc, #132]	@ (800b794 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4013      	ands	r3, r2
 800b712:	4a20      	ldr	r2, [pc, #128]	@ (800b794 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b714:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b71c:	d10a      	bne.n	800b734 <prvAddCurrentTaskToDelayedList+0x58>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d007      	beq.n	800b734 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b724:	4b1a      	ldr	r3, [pc, #104]	@ (800b790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	3304      	adds	r3, #4
 800b72a:	4619      	mov	r1, r3
 800b72c:	481a      	ldr	r0, [pc, #104]	@ (800b798 <prvAddCurrentTaskToDelayedList+0xbc>)
 800b72e:	f7ff f941 	bl	800a9b4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b732:	e026      	b.n	800b782 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b734:	68fa      	ldr	r2, [r7, #12]
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	4413      	add	r3, r2
 800b73a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b73c:	4b14      	ldr	r3, [pc, #80]	@ (800b790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	68ba      	ldr	r2, [r7, #8]
 800b742:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b744:	68ba      	ldr	r2, [r7, #8]
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	429a      	cmp	r2, r3
 800b74a:	d209      	bcs.n	800b760 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b74c:	4b13      	ldr	r3, [pc, #76]	@ (800b79c <prvAddCurrentTaskToDelayedList+0xc0>)
 800b74e:	681a      	ldr	r2, [r3, #0]
 800b750:	4b0f      	ldr	r3, [pc, #60]	@ (800b790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	3304      	adds	r3, #4
 800b756:	4619      	mov	r1, r3
 800b758:	4610      	mov	r0, r2
 800b75a:	f7ff f94f 	bl	800a9fc <vListInsert>
}
 800b75e:	e010      	b.n	800b782 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b760:	4b0f      	ldr	r3, [pc, #60]	@ (800b7a0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b762:	681a      	ldr	r2, [r3, #0]
 800b764:	4b0a      	ldr	r3, [pc, #40]	@ (800b790 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	3304      	adds	r3, #4
 800b76a:	4619      	mov	r1, r3
 800b76c:	4610      	mov	r0, r2
 800b76e:	f7ff f945 	bl	800a9fc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b772:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	68ba      	ldr	r2, [r7, #8]
 800b778:	429a      	cmp	r2, r3
 800b77a:	d202      	bcs.n	800b782 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b77c:	4a09      	ldr	r2, [pc, #36]	@ (800b7a4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b77e:	68bb      	ldr	r3, [r7, #8]
 800b780:	6013      	str	r3, [r2, #0]
}
 800b782:	bf00      	nop
 800b784:	3710      	adds	r7, #16
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}
 800b78a:	bf00      	nop
 800b78c:	200261a0 	.word	0x200261a0
 800b790:	200260dc 	.word	0x200260dc
 800b794:	200261a4 	.word	0x200261a4
 800b798:	20026188 	.word	0x20026188
 800b79c:	20026170 	.word	0x20026170
 800b7a0:	2002616c 	.word	0x2002616c
 800b7a4:	200261b8 	.word	0x200261b8
	...

0800b7b0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b7b0:	4b07      	ldr	r3, [pc, #28]	@ (800b7d0 <pxCurrentTCBConst2>)
 800b7b2:	6819      	ldr	r1, [r3, #0]
 800b7b4:	6808      	ldr	r0, [r1, #0]
 800b7b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7ba:	f380 8809 	msr	PSP, r0
 800b7be:	f3bf 8f6f 	isb	sy
 800b7c2:	f04f 0000 	mov.w	r0, #0
 800b7c6:	f380 8811 	msr	BASEPRI, r0
 800b7ca:	4770      	bx	lr
 800b7cc:	f3af 8000 	nop.w

0800b7d0 <pxCurrentTCBConst2>:
 800b7d0:	200260dc 	.word	0x200260dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b7d4:	bf00      	nop
 800b7d6:	bf00      	nop

0800b7d8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b083      	sub	sp, #12
 800b7dc:	af00      	add	r7, sp, #0
	__asm volatile
 800b7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e2:	f383 8811 	msr	BASEPRI, r3
 800b7e6:	f3bf 8f6f 	isb	sy
 800b7ea:	f3bf 8f4f 	dsb	sy
 800b7ee:	607b      	str	r3, [r7, #4]
}
 800b7f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b7f2:	4b10      	ldr	r3, [pc, #64]	@ (800b834 <vPortEnterCritical+0x5c>)
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	3301      	adds	r3, #1
 800b7f8:	4a0e      	ldr	r2, [pc, #56]	@ (800b834 <vPortEnterCritical+0x5c>)
 800b7fa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b7fc:	4b0d      	ldr	r3, [pc, #52]	@ (800b834 <vPortEnterCritical+0x5c>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	2b01      	cmp	r3, #1
 800b802:	d110      	bne.n	800b826 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b804:	4b0c      	ldr	r3, [pc, #48]	@ (800b838 <vPortEnterCritical+0x60>)
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d00b      	beq.n	800b826 <vPortEnterCritical+0x4e>
	__asm volatile
 800b80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b812:	f383 8811 	msr	BASEPRI, r3
 800b816:	f3bf 8f6f 	isb	sy
 800b81a:	f3bf 8f4f 	dsb	sy
 800b81e:	603b      	str	r3, [r7, #0]
}
 800b820:	bf00      	nop
 800b822:	bf00      	nop
 800b824:	e7fd      	b.n	800b822 <vPortEnterCritical+0x4a>
	}
}
 800b826:	bf00      	nop
 800b828:	370c      	adds	r7, #12
 800b82a:	46bd      	mov	sp, r7
 800b82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b830:	4770      	bx	lr
 800b832:	bf00      	nop
 800b834:	20000014 	.word	0x20000014
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b83c:	b480      	push	{r7}
 800b83e:	b083      	sub	sp, #12
 800b840:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b842:	4b12      	ldr	r3, [pc, #72]	@ (800b88c <vPortExitCritical+0x50>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10b      	bne.n	800b862 <vPortExitCritical+0x26>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	607b      	str	r3, [r7, #4]
}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	e7fd      	b.n	800b85e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b862:	4b0a      	ldr	r3, [pc, #40]	@ (800b88c <vPortExitCritical+0x50>)
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	3b01      	subs	r3, #1
 800b868:	4a08      	ldr	r2, [pc, #32]	@ (800b88c <vPortExitCritical+0x50>)
 800b86a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b86c:	4b07      	ldr	r3, [pc, #28]	@ (800b88c <vPortExitCritical+0x50>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d105      	bne.n	800b880 <vPortExitCritical+0x44>
 800b874:	2300      	movs	r3, #0
 800b876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	f383 8811 	msr	BASEPRI, r3
}
 800b87e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b880:	bf00      	nop
 800b882:	370c      	adds	r7, #12
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr
 800b88c:	20000014 	.word	0x20000014

0800b890 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b890:	f3ef 8009 	mrs	r0, PSP
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	4b15      	ldr	r3, [pc, #84]	@ (800b8f0 <pxCurrentTCBConst>)
 800b89a:	681a      	ldr	r2, [r3, #0]
 800b89c:	f01e 0f10 	tst.w	lr, #16
 800b8a0:	bf08      	it	eq
 800b8a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b8a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8aa:	6010      	str	r0, [r2, #0]
 800b8ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b8b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b8b4:	f380 8811 	msr	BASEPRI, r0
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	f3bf 8f6f 	isb	sy
 800b8c0:	f7ff fcda 	bl	800b278 <vTaskSwitchContext>
 800b8c4:	f04f 0000 	mov.w	r0, #0
 800b8c8:	f380 8811 	msr	BASEPRI, r0
 800b8cc:	bc09      	pop	{r0, r3}
 800b8ce:	6819      	ldr	r1, [r3, #0]
 800b8d0:	6808      	ldr	r0, [r1, #0]
 800b8d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8d6:	f01e 0f10 	tst.w	lr, #16
 800b8da:	bf08      	it	eq
 800b8dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b8e0:	f380 8809 	msr	PSP, r0
 800b8e4:	f3bf 8f6f 	isb	sy
 800b8e8:	4770      	bx	lr
 800b8ea:	bf00      	nop
 800b8ec:	f3af 8000 	nop.w

0800b8f0 <pxCurrentTCBConst>:
 800b8f0:	200260dc 	.word	0x200260dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b8f4:	bf00      	nop
 800b8f6:	bf00      	nop

0800b8f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b082      	sub	sp, #8
 800b8fc:	af00      	add	r7, sp, #0
	__asm volatile
 800b8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b902:	f383 8811 	msr	BASEPRI, r3
 800b906:	f3bf 8f6f 	isb	sy
 800b90a:	f3bf 8f4f 	dsb	sy
 800b90e:	607b      	str	r3, [r7, #4]
}
 800b910:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b912:	f7ff fbf7 	bl	800b104 <xTaskIncrementTick>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d003      	beq.n	800b924 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b91c:	4b06      	ldr	r3, [pc, #24]	@ (800b938 <SysTick_Handler+0x40>)
 800b91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b922:	601a      	str	r2, [r3, #0]
 800b924:	2300      	movs	r3, #0
 800b926:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	f383 8811 	msr	BASEPRI, r3
}
 800b92e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b930:	bf00      	nop
 800b932:	3708      	adds	r7, #8
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}
 800b938:	e000ed04 	.word	0xe000ed04

0800b93c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b942:	f3ef 8305 	mrs	r3, IPSR
 800b946:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2b0f      	cmp	r3, #15
 800b94c:	d915      	bls.n	800b97a <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b94e:	4a18      	ldr	r2, [pc, #96]	@ (800b9b0 <vPortValidateInterruptPriority+0x74>)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4413      	add	r3, r2
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b958:	4b16      	ldr	r3, [pc, #88]	@ (800b9b4 <vPortValidateInterruptPriority+0x78>)
 800b95a:	781b      	ldrb	r3, [r3, #0]
 800b95c:	7afa      	ldrb	r2, [r7, #11]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d20b      	bcs.n	800b97a <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b966:	f383 8811 	msr	BASEPRI, r3
 800b96a:	f3bf 8f6f 	isb	sy
 800b96e:	f3bf 8f4f 	dsb	sy
 800b972:	607b      	str	r3, [r7, #4]
}
 800b974:	bf00      	nop
 800b976:	bf00      	nop
 800b978:	e7fd      	b.n	800b976 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b97a:	4b0f      	ldr	r3, [pc, #60]	@ (800b9b8 <vPortValidateInterruptPriority+0x7c>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b982:	4b0e      	ldr	r3, [pc, #56]	@ (800b9bc <vPortValidateInterruptPriority+0x80>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d90b      	bls.n	800b9a2 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b98a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b98e:	f383 8811 	msr	BASEPRI, r3
 800b992:	f3bf 8f6f 	isb	sy
 800b996:	f3bf 8f4f 	dsb	sy
 800b99a:	603b      	str	r3, [r7, #0]
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	e7fd      	b.n	800b99e <vPortValidateInterruptPriority+0x62>
	}
 800b9a2:	bf00      	nop
 800b9a4:	3714      	adds	r7, #20
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	e000e3f0 	.word	0xe000e3f0
 800b9b4:	200261c0 	.word	0x200261c0
 800b9b8:	e000ed0c 	.word	0xe000ed0c
 800b9bc:	200261c4 	.word	0x200261c4

0800b9c0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b082      	sub	sp, #8
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f7fe fec2 	bl	800a758 <USBH_LL_IncTimer>
}
 800b9d4:	bf00      	nop
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	f7fe ff06 	bl	800a7fc <USBH_LL_Connect>
}
 800b9f0:	bf00      	nop
 800b9f2:	3708      	adds	r7, #8
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ba06:	4618      	mov	r0, r3
 800ba08:	f7fe ff1b 	bl	800a842 <USBH_LL_Disconnect>
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b082      	sub	sp, #8
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	70fb      	strb	r3, [r7, #3]
 800ba20:	4613      	mov	r3, r2
 800ba22:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe ff3b 	bl	800a8a6 <USBH_LL_NotifyURBChange>
#endif
}
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe feb0 	bl	800a7ac <USBH_LL_PortEnabled>
}
 800ba4c:	bf00      	nop
 800ba4e:	3708      	adds	r7, #8
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b082      	sub	sp, #8
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ba62:	4618      	mov	r0, r3
 800ba64:	f7fe febc 	bl	800a7e0 <USBH_LL_PortDisabled>
}
 800ba68:	bf00      	nop
 800ba6a:	3708      	adds	r7, #8
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	bd80      	pop	{r7, pc}

0800ba70 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f9 fa6b 	bl	8004f62 <HAL_HCD_Stop>
 800ba8c:	4603      	mov	r3, r0
 800ba8e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ba90:	7bfb      	ldrb	r3, [r7, #15]
 800ba92:	4618      	mov	r0, r3
 800ba94:	f000 f808 	bl	800baa8 <USBH_Get_USB_Status>
 800ba98:	4603      	mov	r3, r0
 800ba9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3710      	adds	r7, #16
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bd80      	pop	{r7, pc}
	...

0800baa8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b085      	sub	sp, #20
 800baac:	af00      	add	r7, sp, #0
 800baae:	4603      	mov	r3, r0
 800bab0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bab2:	2300      	movs	r3, #0
 800bab4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bab6:	79fb      	ldrb	r3, [r7, #7]
 800bab8:	2b03      	cmp	r3, #3
 800baba:	d817      	bhi.n	800baec <USBH_Get_USB_Status+0x44>
 800babc:	a201      	add	r2, pc, #4	@ (adr r2, 800bac4 <USBH_Get_USB_Status+0x1c>)
 800babe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac2:	bf00      	nop
 800bac4:	0800bad5 	.word	0x0800bad5
 800bac8:	0800badb 	.word	0x0800badb
 800bacc:	0800bae1 	.word	0x0800bae1
 800bad0:	0800bae7 	.word	0x0800bae7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	73fb      	strb	r3, [r7, #15]
    break;
 800bad8:	e00b      	b.n	800baf2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800bada:	2302      	movs	r3, #2
 800badc:	73fb      	strb	r3, [r7, #15]
    break;
 800bade:	e008      	b.n	800baf2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800bae0:	2301      	movs	r3, #1
 800bae2:	73fb      	strb	r3, [r7, #15]
    break;
 800bae4:	e005      	b.n	800baf2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800bae6:	2302      	movs	r3, #2
 800bae8:	73fb      	strb	r3, [r7, #15]
    break;
 800baea:	e002      	b.n	800baf2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800baec:	2302      	movs	r3, #2
 800baee:	73fb      	strb	r3, [r7, #15]
    break;
 800baf0:	bf00      	nop
  }
  return usb_status;
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr

0800bb00 <malloc>:
 800bb00:	4b02      	ldr	r3, [pc, #8]	@ (800bb0c <malloc+0xc>)
 800bb02:	4601      	mov	r1, r0
 800bb04:	6818      	ldr	r0, [r3, #0]
 800bb06:	f000 b825 	b.w	800bb54 <_malloc_r>
 800bb0a:	bf00      	nop
 800bb0c:	20000024 	.word	0x20000024

0800bb10 <sbrk_aligned>:
 800bb10:	b570      	push	{r4, r5, r6, lr}
 800bb12:	4e0f      	ldr	r6, [pc, #60]	@ (800bb50 <sbrk_aligned+0x40>)
 800bb14:	460c      	mov	r4, r1
 800bb16:	6831      	ldr	r1, [r6, #0]
 800bb18:	4605      	mov	r5, r0
 800bb1a:	b911      	cbnz	r1, 800bb22 <sbrk_aligned+0x12>
 800bb1c:	f000 ff46 	bl	800c9ac <_sbrk_r>
 800bb20:	6030      	str	r0, [r6, #0]
 800bb22:	4621      	mov	r1, r4
 800bb24:	4628      	mov	r0, r5
 800bb26:	f000 ff41 	bl	800c9ac <_sbrk_r>
 800bb2a:	1c43      	adds	r3, r0, #1
 800bb2c:	d103      	bne.n	800bb36 <sbrk_aligned+0x26>
 800bb2e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bb32:	4620      	mov	r0, r4
 800bb34:	bd70      	pop	{r4, r5, r6, pc}
 800bb36:	1cc4      	adds	r4, r0, #3
 800bb38:	f024 0403 	bic.w	r4, r4, #3
 800bb3c:	42a0      	cmp	r0, r4
 800bb3e:	d0f8      	beq.n	800bb32 <sbrk_aligned+0x22>
 800bb40:	1a21      	subs	r1, r4, r0
 800bb42:	4628      	mov	r0, r5
 800bb44:	f000 ff32 	bl	800c9ac <_sbrk_r>
 800bb48:	3001      	adds	r0, #1
 800bb4a:	d1f2      	bne.n	800bb32 <sbrk_aligned+0x22>
 800bb4c:	e7ef      	b.n	800bb2e <sbrk_aligned+0x1e>
 800bb4e:	bf00      	nop
 800bb50:	200265a8 	.word	0x200265a8

0800bb54 <_malloc_r>:
 800bb54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb58:	1ccd      	adds	r5, r1, #3
 800bb5a:	f025 0503 	bic.w	r5, r5, #3
 800bb5e:	3508      	adds	r5, #8
 800bb60:	2d0c      	cmp	r5, #12
 800bb62:	bf38      	it	cc
 800bb64:	250c      	movcc	r5, #12
 800bb66:	2d00      	cmp	r5, #0
 800bb68:	4606      	mov	r6, r0
 800bb6a:	db01      	blt.n	800bb70 <_malloc_r+0x1c>
 800bb6c:	42a9      	cmp	r1, r5
 800bb6e:	d904      	bls.n	800bb7a <_malloc_r+0x26>
 800bb70:	230c      	movs	r3, #12
 800bb72:	6033      	str	r3, [r6, #0]
 800bb74:	2000      	movs	r0, #0
 800bb76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc50 <_malloc_r+0xfc>
 800bb7e:	f000 f869 	bl	800bc54 <__malloc_lock>
 800bb82:	f8d8 3000 	ldr.w	r3, [r8]
 800bb86:	461c      	mov	r4, r3
 800bb88:	bb44      	cbnz	r4, 800bbdc <_malloc_r+0x88>
 800bb8a:	4629      	mov	r1, r5
 800bb8c:	4630      	mov	r0, r6
 800bb8e:	f7ff ffbf 	bl	800bb10 <sbrk_aligned>
 800bb92:	1c43      	adds	r3, r0, #1
 800bb94:	4604      	mov	r4, r0
 800bb96:	d158      	bne.n	800bc4a <_malloc_r+0xf6>
 800bb98:	f8d8 4000 	ldr.w	r4, [r8]
 800bb9c:	4627      	mov	r7, r4
 800bb9e:	2f00      	cmp	r7, #0
 800bba0:	d143      	bne.n	800bc2a <_malloc_r+0xd6>
 800bba2:	2c00      	cmp	r4, #0
 800bba4:	d04b      	beq.n	800bc3e <_malloc_r+0xea>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	4639      	mov	r1, r7
 800bbaa:	4630      	mov	r0, r6
 800bbac:	eb04 0903 	add.w	r9, r4, r3
 800bbb0:	f000 fefc 	bl	800c9ac <_sbrk_r>
 800bbb4:	4581      	cmp	r9, r0
 800bbb6:	d142      	bne.n	800bc3e <_malloc_r+0xea>
 800bbb8:	6821      	ldr	r1, [r4, #0]
 800bbba:	1a6d      	subs	r5, r5, r1
 800bbbc:	4629      	mov	r1, r5
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f7ff ffa6 	bl	800bb10 <sbrk_aligned>
 800bbc4:	3001      	adds	r0, #1
 800bbc6:	d03a      	beq.n	800bc3e <_malloc_r+0xea>
 800bbc8:	6823      	ldr	r3, [r4, #0]
 800bbca:	442b      	add	r3, r5
 800bbcc:	6023      	str	r3, [r4, #0]
 800bbce:	f8d8 3000 	ldr.w	r3, [r8]
 800bbd2:	685a      	ldr	r2, [r3, #4]
 800bbd4:	bb62      	cbnz	r2, 800bc30 <_malloc_r+0xdc>
 800bbd6:	f8c8 7000 	str.w	r7, [r8]
 800bbda:	e00f      	b.n	800bbfc <_malloc_r+0xa8>
 800bbdc:	6822      	ldr	r2, [r4, #0]
 800bbde:	1b52      	subs	r2, r2, r5
 800bbe0:	d420      	bmi.n	800bc24 <_malloc_r+0xd0>
 800bbe2:	2a0b      	cmp	r2, #11
 800bbe4:	d917      	bls.n	800bc16 <_malloc_r+0xc2>
 800bbe6:	1961      	adds	r1, r4, r5
 800bbe8:	42a3      	cmp	r3, r4
 800bbea:	6025      	str	r5, [r4, #0]
 800bbec:	bf18      	it	ne
 800bbee:	6059      	strne	r1, [r3, #4]
 800bbf0:	6863      	ldr	r3, [r4, #4]
 800bbf2:	bf08      	it	eq
 800bbf4:	f8c8 1000 	streq.w	r1, [r8]
 800bbf8:	5162      	str	r2, [r4, r5]
 800bbfa:	604b      	str	r3, [r1, #4]
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	f000 f82f 	bl	800bc60 <__malloc_unlock>
 800bc02:	f104 000b 	add.w	r0, r4, #11
 800bc06:	1d23      	adds	r3, r4, #4
 800bc08:	f020 0007 	bic.w	r0, r0, #7
 800bc0c:	1ac2      	subs	r2, r0, r3
 800bc0e:	bf1c      	itt	ne
 800bc10:	1a1b      	subne	r3, r3, r0
 800bc12:	50a3      	strne	r3, [r4, r2]
 800bc14:	e7af      	b.n	800bb76 <_malloc_r+0x22>
 800bc16:	6862      	ldr	r2, [r4, #4]
 800bc18:	42a3      	cmp	r3, r4
 800bc1a:	bf0c      	ite	eq
 800bc1c:	f8c8 2000 	streq.w	r2, [r8]
 800bc20:	605a      	strne	r2, [r3, #4]
 800bc22:	e7eb      	b.n	800bbfc <_malloc_r+0xa8>
 800bc24:	4623      	mov	r3, r4
 800bc26:	6864      	ldr	r4, [r4, #4]
 800bc28:	e7ae      	b.n	800bb88 <_malloc_r+0x34>
 800bc2a:	463c      	mov	r4, r7
 800bc2c:	687f      	ldr	r7, [r7, #4]
 800bc2e:	e7b6      	b.n	800bb9e <_malloc_r+0x4a>
 800bc30:	461a      	mov	r2, r3
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	42a3      	cmp	r3, r4
 800bc36:	d1fb      	bne.n	800bc30 <_malloc_r+0xdc>
 800bc38:	2300      	movs	r3, #0
 800bc3a:	6053      	str	r3, [r2, #4]
 800bc3c:	e7de      	b.n	800bbfc <_malloc_r+0xa8>
 800bc3e:	230c      	movs	r3, #12
 800bc40:	6033      	str	r3, [r6, #0]
 800bc42:	4630      	mov	r0, r6
 800bc44:	f000 f80c 	bl	800bc60 <__malloc_unlock>
 800bc48:	e794      	b.n	800bb74 <_malloc_r+0x20>
 800bc4a:	6005      	str	r5, [r0, #0]
 800bc4c:	e7d6      	b.n	800bbfc <_malloc_r+0xa8>
 800bc4e:	bf00      	nop
 800bc50:	200265ac 	.word	0x200265ac

0800bc54 <__malloc_lock>:
 800bc54:	4801      	ldr	r0, [pc, #4]	@ (800bc5c <__malloc_lock+0x8>)
 800bc56:	f000 bef6 	b.w	800ca46 <__retarget_lock_acquire_recursive>
 800bc5a:	bf00      	nop
 800bc5c:	200266f0 	.word	0x200266f0

0800bc60 <__malloc_unlock>:
 800bc60:	4801      	ldr	r0, [pc, #4]	@ (800bc68 <__malloc_unlock+0x8>)
 800bc62:	f000 bef1 	b.w	800ca48 <__retarget_lock_release_recursive>
 800bc66:	bf00      	nop
 800bc68:	200266f0 	.word	0x200266f0

0800bc6c <__cvt>:
 800bc6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc70:	ec57 6b10 	vmov	r6, r7, d0
 800bc74:	2f00      	cmp	r7, #0
 800bc76:	460c      	mov	r4, r1
 800bc78:	4619      	mov	r1, r3
 800bc7a:	463b      	mov	r3, r7
 800bc7c:	bfbb      	ittet	lt
 800bc7e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bc82:	461f      	movlt	r7, r3
 800bc84:	2300      	movge	r3, #0
 800bc86:	232d      	movlt	r3, #45	@ 0x2d
 800bc88:	700b      	strb	r3, [r1, #0]
 800bc8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc8c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bc90:	4691      	mov	r9, r2
 800bc92:	f023 0820 	bic.w	r8, r3, #32
 800bc96:	bfbc      	itt	lt
 800bc98:	4632      	movlt	r2, r6
 800bc9a:	4616      	movlt	r6, r2
 800bc9c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bca0:	d005      	beq.n	800bcae <__cvt+0x42>
 800bca2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bca6:	d100      	bne.n	800bcaa <__cvt+0x3e>
 800bca8:	3401      	adds	r4, #1
 800bcaa:	2102      	movs	r1, #2
 800bcac:	e000      	b.n	800bcb0 <__cvt+0x44>
 800bcae:	2103      	movs	r1, #3
 800bcb0:	ab03      	add	r3, sp, #12
 800bcb2:	9301      	str	r3, [sp, #4]
 800bcb4:	ab02      	add	r3, sp, #8
 800bcb6:	9300      	str	r3, [sp, #0]
 800bcb8:	ec47 6b10 	vmov	d0, r6, r7
 800bcbc:	4653      	mov	r3, sl
 800bcbe:	4622      	mov	r2, r4
 800bcc0:	f000 ff5a 	bl	800cb78 <_dtoa_r>
 800bcc4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bcc8:	4605      	mov	r5, r0
 800bcca:	d119      	bne.n	800bd00 <__cvt+0x94>
 800bccc:	f019 0f01 	tst.w	r9, #1
 800bcd0:	d00e      	beq.n	800bcf0 <__cvt+0x84>
 800bcd2:	eb00 0904 	add.w	r9, r0, r4
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2300      	movs	r3, #0
 800bcda:	4630      	mov	r0, r6
 800bcdc:	4639      	mov	r1, r7
 800bcde:	f7f4 ff03 	bl	8000ae8 <__aeabi_dcmpeq>
 800bce2:	b108      	cbz	r0, 800bce8 <__cvt+0x7c>
 800bce4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bce8:	2230      	movs	r2, #48	@ 0x30
 800bcea:	9b03      	ldr	r3, [sp, #12]
 800bcec:	454b      	cmp	r3, r9
 800bcee:	d31e      	bcc.n	800bd2e <__cvt+0xc2>
 800bcf0:	9b03      	ldr	r3, [sp, #12]
 800bcf2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcf4:	1b5b      	subs	r3, r3, r5
 800bcf6:	4628      	mov	r0, r5
 800bcf8:	6013      	str	r3, [r2, #0]
 800bcfa:	b004      	add	sp, #16
 800bcfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd00:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bd04:	eb00 0904 	add.w	r9, r0, r4
 800bd08:	d1e5      	bne.n	800bcd6 <__cvt+0x6a>
 800bd0a:	7803      	ldrb	r3, [r0, #0]
 800bd0c:	2b30      	cmp	r3, #48	@ 0x30
 800bd0e:	d10a      	bne.n	800bd26 <__cvt+0xba>
 800bd10:	2200      	movs	r2, #0
 800bd12:	2300      	movs	r3, #0
 800bd14:	4630      	mov	r0, r6
 800bd16:	4639      	mov	r1, r7
 800bd18:	f7f4 fee6 	bl	8000ae8 <__aeabi_dcmpeq>
 800bd1c:	b918      	cbnz	r0, 800bd26 <__cvt+0xba>
 800bd1e:	f1c4 0401 	rsb	r4, r4, #1
 800bd22:	f8ca 4000 	str.w	r4, [sl]
 800bd26:	f8da 3000 	ldr.w	r3, [sl]
 800bd2a:	4499      	add	r9, r3
 800bd2c:	e7d3      	b.n	800bcd6 <__cvt+0x6a>
 800bd2e:	1c59      	adds	r1, r3, #1
 800bd30:	9103      	str	r1, [sp, #12]
 800bd32:	701a      	strb	r2, [r3, #0]
 800bd34:	e7d9      	b.n	800bcea <__cvt+0x7e>

0800bd36 <__exponent>:
 800bd36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd38:	2900      	cmp	r1, #0
 800bd3a:	bfba      	itte	lt
 800bd3c:	4249      	neglt	r1, r1
 800bd3e:	232d      	movlt	r3, #45	@ 0x2d
 800bd40:	232b      	movge	r3, #43	@ 0x2b
 800bd42:	2909      	cmp	r1, #9
 800bd44:	7002      	strb	r2, [r0, #0]
 800bd46:	7043      	strb	r3, [r0, #1]
 800bd48:	dd29      	ble.n	800bd9e <__exponent+0x68>
 800bd4a:	f10d 0307 	add.w	r3, sp, #7
 800bd4e:	461d      	mov	r5, r3
 800bd50:	270a      	movs	r7, #10
 800bd52:	461a      	mov	r2, r3
 800bd54:	fbb1 f6f7 	udiv	r6, r1, r7
 800bd58:	fb07 1416 	mls	r4, r7, r6, r1
 800bd5c:	3430      	adds	r4, #48	@ 0x30
 800bd5e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bd62:	460c      	mov	r4, r1
 800bd64:	2c63      	cmp	r4, #99	@ 0x63
 800bd66:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800bd6a:	4631      	mov	r1, r6
 800bd6c:	dcf1      	bgt.n	800bd52 <__exponent+0x1c>
 800bd6e:	3130      	adds	r1, #48	@ 0x30
 800bd70:	1e94      	subs	r4, r2, #2
 800bd72:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd76:	1c41      	adds	r1, r0, #1
 800bd78:	4623      	mov	r3, r4
 800bd7a:	42ab      	cmp	r3, r5
 800bd7c:	d30a      	bcc.n	800bd94 <__exponent+0x5e>
 800bd7e:	f10d 0309 	add.w	r3, sp, #9
 800bd82:	1a9b      	subs	r3, r3, r2
 800bd84:	42ac      	cmp	r4, r5
 800bd86:	bf88      	it	hi
 800bd88:	2300      	movhi	r3, #0
 800bd8a:	3302      	adds	r3, #2
 800bd8c:	4403      	add	r3, r0
 800bd8e:	1a18      	subs	r0, r3, r0
 800bd90:	b003      	add	sp, #12
 800bd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd94:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd98:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bd9c:	e7ed      	b.n	800bd7a <__exponent+0x44>
 800bd9e:	2330      	movs	r3, #48	@ 0x30
 800bda0:	3130      	adds	r1, #48	@ 0x30
 800bda2:	7083      	strb	r3, [r0, #2]
 800bda4:	70c1      	strb	r1, [r0, #3]
 800bda6:	1d03      	adds	r3, r0, #4
 800bda8:	e7f1      	b.n	800bd8e <__exponent+0x58>
	...

0800bdac <_printf_float>:
 800bdac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb0:	b08d      	sub	sp, #52	@ 0x34
 800bdb2:	460c      	mov	r4, r1
 800bdb4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bdb8:	4616      	mov	r6, r2
 800bdba:	461f      	mov	r7, r3
 800bdbc:	4605      	mov	r5, r0
 800bdbe:	f000 fdbd 	bl	800c93c <_localeconv_r>
 800bdc2:	6803      	ldr	r3, [r0, #0]
 800bdc4:	9304      	str	r3, [sp, #16]
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	f7f4 fa62 	bl	8000290 <strlen>
 800bdcc:	2300      	movs	r3, #0
 800bdce:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdd0:	f8d8 3000 	ldr.w	r3, [r8]
 800bdd4:	9005      	str	r0, [sp, #20]
 800bdd6:	3307      	adds	r3, #7
 800bdd8:	f023 0307 	bic.w	r3, r3, #7
 800bddc:	f103 0208 	add.w	r2, r3, #8
 800bde0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bde4:	f8d4 b000 	ldr.w	fp, [r4]
 800bde8:	f8c8 2000 	str.w	r2, [r8]
 800bdec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdf0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bdf4:	9307      	str	r3, [sp, #28]
 800bdf6:	f8cd 8018 	str.w	r8, [sp, #24]
 800bdfa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bdfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be02:	4b9c      	ldr	r3, [pc, #624]	@ (800c074 <_printf_float+0x2c8>)
 800be04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be08:	f7f4 fea0 	bl	8000b4c <__aeabi_dcmpun>
 800be0c:	bb70      	cbnz	r0, 800be6c <_printf_float+0xc0>
 800be0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be12:	4b98      	ldr	r3, [pc, #608]	@ (800c074 <_printf_float+0x2c8>)
 800be14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800be18:	f7f4 fe7a 	bl	8000b10 <__aeabi_dcmple>
 800be1c:	bb30      	cbnz	r0, 800be6c <_printf_float+0xc0>
 800be1e:	2200      	movs	r2, #0
 800be20:	2300      	movs	r3, #0
 800be22:	4640      	mov	r0, r8
 800be24:	4649      	mov	r1, r9
 800be26:	f7f4 fe69 	bl	8000afc <__aeabi_dcmplt>
 800be2a:	b110      	cbz	r0, 800be32 <_printf_float+0x86>
 800be2c:	232d      	movs	r3, #45	@ 0x2d
 800be2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be32:	4a91      	ldr	r2, [pc, #580]	@ (800c078 <_printf_float+0x2cc>)
 800be34:	4b91      	ldr	r3, [pc, #580]	@ (800c07c <_printf_float+0x2d0>)
 800be36:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800be3a:	bf8c      	ite	hi
 800be3c:	4690      	movhi	r8, r2
 800be3e:	4698      	movls	r8, r3
 800be40:	2303      	movs	r3, #3
 800be42:	6123      	str	r3, [r4, #16]
 800be44:	f02b 0304 	bic.w	r3, fp, #4
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	f04f 0900 	mov.w	r9, #0
 800be4e:	9700      	str	r7, [sp, #0]
 800be50:	4633      	mov	r3, r6
 800be52:	aa0b      	add	r2, sp, #44	@ 0x2c
 800be54:	4621      	mov	r1, r4
 800be56:	4628      	mov	r0, r5
 800be58:	f000 f9d2 	bl	800c200 <_printf_common>
 800be5c:	3001      	adds	r0, #1
 800be5e:	f040 808d 	bne.w	800bf7c <_printf_float+0x1d0>
 800be62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800be66:	b00d      	add	sp, #52	@ 0x34
 800be68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6c:	4642      	mov	r2, r8
 800be6e:	464b      	mov	r3, r9
 800be70:	4640      	mov	r0, r8
 800be72:	4649      	mov	r1, r9
 800be74:	f7f4 fe6a 	bl	8000b4c <__aeabi_dcmpun>
 800be78:	b140      	cbz	r0, 800be8c <_printf_float+0xe0>
 800be7a:	464b      	mov	r3, r9
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	bfbc      	itt	lt
 800be80:	232d      	movlt	r3, #45	@ 0x2d
 800be82:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800be86:	4a7e      	ldr	r2, [pc, #504]	@ (800c080 <_printf_float+0x2d4>)
 800be88:	4b7e      	ldr	r3, [pc, #504]	@ (800c084 <_printf_float+0x2d8>)
 800be8a:	e7d4      	b.n	800be36 <_printf_float+0x8a>
 800be8c:	6863      	ldr	r3, [r4, #4]
 800be8e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800be92:	9206      	str	r2, [sp, #24]
 800be94:	1c5a      	adds	r2, r3, #1
 800be96:	d13b      	bne.n	800bf10 <_printf_float+0x164>
 800be98:	2306      	movs	r3, #6
 800be9a:	6063      	str	r3, [r4, #4]
 800be9c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800bea0:	2300      	movs	r3, #0
 800bea2:	6022      	str	r2, [r4, #0]
 800bea4:	9303      	str	r3, [sp, #12]
 800bea6:	ab0a      	add	r3, sp, #40	@ 0x28
 800bea8:	e9cd a301 	strd	sl, r3, [sp, #4]
 800beac:	ab09      	add	r3, sp, #36	@ 0x24
 800beae:	9300      	str	r3, [sp, #0]
 800beb0:	6861      	ldr	r1, [r4, #4]
 800beb2:	ec49 8b10 	vmov	d0, r8, r9
 800beb6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800beba:	4628      	mov	r0, r5
 800bebc:	f7ff fed6 	bl	800bc6c <__cvt>
 800bec0:	9b06      	ldr	r3, [sp, #24]
 800bec2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bec4:	2b47      	cmp	r3, #71	@ 0x47
 800bec6:	4680      	mov	r8, r0
 800bec8:	d129      	bne.n	800bf1e <_printf_float+0x172>
 800beca:	1cc8      	adds	r0, r1, #3
 800becc:	db02      	blt.n	800bed4 <_printf_float+0x128>
 800bece:	6863      	ldr	r3, [r4, #4]
 800bed0:	4299      	cmp	r1, r3
 800bed2:	dd41      	ble.n	800bf58 <_printf_float+0x1ac>
 800bed4:	f1aa 0a02 	sub.w	sl, sl, #2
 800bed8:	fa5f fa8a 	uxtb.w	sl, sl
 800bedc:	3901      	subs	r1, #1
 800bede:	4652      	mov	r2, sl
 800bee0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bee4:	9109      	str	r1, [sp, #36]	@ 0x24
 800bee6:	f7ff ff26 	bl	800bd36 <__exponent>
 800beea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800beec:	1813      	adds	r3, r2, r0
 800beee:	2a01      	cmp	r2, #1
 800bef0:	4681      	mov	r9, r0
 800bef2:	6123      	str	r3, [r4, #16]
 800bef4:	dc02      	bgt.n	800befc <_printf_float+0x150>
 800bef6:	6822      	ldr	r2, [r4, #0]
 800bef8:	07d2      	lsls	r2, r2, #31
 800befa:	d501      	bpl.n	800bf00 <_printf_float+0x154>
 800befc:	3301      	adds	r3, #1
 800befe:	6123      	str	r3, [r4, #16]
 800bf00:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d0a2      	beq.n	800be4e <_printf_float+0xa2>
 800bf08:	232d      	movs	r3, #45	@ 0x2d
 800bf0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf0e:	e79e      	b.n	800be4e <_printf_float+0xa2>
 800bf10:	9a06      	ldr	r2, [sp, #24]
 800bf12:	2a47      	cmp	r2, #71	@ 0x47
 800bf14:	d1c2      	bne.n	800be9c <_printf_float+0xf0>
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1c0      	bne.n	800be9c <_printf_float+0xf0>
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e7bd      	b.n	800be9a <_printf_float+0xee>
 800bf1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf22:	d9db      	bls.n	800bedc <_printf_float+0x130>
 800bf24:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bf28:	d118      	bne.n	800bf5c <_printf_float+0x1b0>
 800bf2a:	2900      	cmp	r1, #0
 800bf2c:	6863      	ldr	r3, [r4, #4]
 800bf2e:	dd0b      	ble.n	800bf48 <_printf_float+0x19c>
 800bf30:	6121      	str	r1, [r4, #16]
 800bf32:	b913      	cbnz	r3, 800bf3a <_printf_float+0x18e>
 800bf34:	6822      	ldr	r2, [r4, #0]
 800bf36:	07d0      	lsls	r0, r2, #31
 800bf38:	d502      	bpl.n	800bf40 <_printf_float+0x194>
 800bf3a:	3301      	adds	r3, #1
 800bf3c:	440b      	add	r3, r1
 800bf3e:	6123      	str	r3, [r4, #16]
 800bf40:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bf42:	f04f 0900 	mov.w	r9, #0
 800bf46:	e7db      	b.n	800bf00 <_printf_float+0x154>
 800bf48:	b913      	cbnz	r3, 800bf50 <_printf_float+0x1a4>
 800bf4a:	6822      	ldr	r2, [r4, #0]
 800bf4c:	07d2      	lsls	r2, r2, #31
 800bf4e:	d501      	bpl.n	800bf54 <_printf_float+0x1a8>
 800bf50:	3302      	adds	r3, #2
 800bf52:	e7f4      	b.n	800bf3e <_printf_float+0x192>
 800bf54:	2301      	movs	r3, #1
 800bf56:	e7f2      	b.n	800bf3e <_printf_float+0x192>
 800bf58:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bf5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf5e:	4299      	cmp	r1, r3
 800bf60:	db05      	blt.n	800bf6e <_printf_float+0x1c2>
 800bf62:	6823      	ldr	r3, [r4, #0]
 800bf64:	6121      	str	r1, [r4, #16]
 800bf66:	07d8      	lsls	r0, r3, #31
 800bf68:	d5ea      	bpl.n	800bf40 <_printf_float+0x194>
 800bf6a:	1c4b      	adds	r3, r1, #1
 800bf6c:	e7e7      	b.n	800bf3e <_printf_float+0x192>
 800bf6e:	2900      	cmp	r1, #0
 800bf70:	bfd4      	ite	le
 800bf72:	f1c1 0202 	rsble	r2, r1, #2
 800bf76:	2201      	movgt	r2, #1
 800bf78:	4413      	add	r3, r2
 800bf7a:	e7e0      	b.n	800bf3e <_printf_float+0x192>
 800bf7c:	6823      	ldr	r3, [r4, #0]
 800bf7e:	055a      	lsls	r2, r3, #21
 800bf80:	d407      	bmi.n	800bf92 <_printf_float+0x1e6>
 800bf82:	6923      	ldr	r3, [r4, #16]
 800bf84:	4642      	mov	r2, r8
 800bf86:	4631      	mov	r1, r6
 800bf88:	4628      	mov	r0, r5
 800bf8a:	47b8      	blx	r7
 800bf8c:	3001      	adds	r0, #1
 800bf8e:	d12b      	bne.n	800bfe8 <_printf_float+0x23c>
 800bf90:	e767      	b.n	800be62 <_printf_float+0xb6>
 800bf92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf96:	f240 80dd 	bls.w	800c154 <_printf_float+0x3a8>
 800bf9a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f7f4 fda1 	bl	8000ae8 <__aeabi_dcmpeq>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	d033      	beq.n	800c012 <_printf_float+0x266>
 800bfaa:	4a37      	ldr	r2, [pc, #220]	@ (800c088 <_printf_float+0x2dc>)
 800bfac:	2301      	movs	r3, #1
 800bfae:	4631      	mov	r1, r6
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	47b8      	blx	r7
 800bfb4:	3001      	adds	r0, #1
 800bfb6:	f43f af54 	beq.w	800be62 <_printf_float+0xb6>
 800bfba:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bfbe:	4543      	cmp	r3, r8
 800bfc0:	db02      	blt.n	800bfc8 <_printf_float+0x21c>
 800bfc2:	6823      	ldr	r3, [r4, #0]
 800bfc4:	07d8      	lsls	r0, r3, #31
 800bfc6:	d50f      	bpl.n	800bfe8 <_printf_float+0x23c>
 800bfc8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfcc:	4631      	mov	r1, r6
 800bfce:	4628      	mov	r0, r5
 800bfd0:	47b8      	blx	r7
 800bfd2:	3001      	adds	r0, #1
 800bfd4:	f43f af45 	beq.w	800be62 <_printf_float+0xb6>
 800bfd8:	f04f 0900 	mov.w	r9, #0
 800bfdc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800bfe0:	f104 0a1a 	add.w	sl, r4, #26
 800bfe4:	45c8      	cmp	r8, r9
 800bfe6:	dc09      	bgt.n	800bffc <_printf_float+0x250>
 800bfe8:	6823      	ldr	r3, [r4, #0]
 800bfea:	079b      	lsls	r3, r3, #30
 800bfec:	f100 8103 	bmi.w	800c1f6 <_printf_float+0x44a>
 800bff0:	68e0      	ldr	r0, [r4, #12]
 800bff2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bff4:	4298      	cmp	r0, r3
 800bff6:	bfb8      	it	lt
 800bff8:	4618      	movlt	r0, r3
 800bffa:	e734      	b.n	800be66 <_printf_float+0xba>
 800bffc:	2301      	movs	r3, #1
 800bffe:	4652      	mov	r2, sl
 800c000:	4631      	mov	r1, r6
 800c002:	4628      	mov	r0, r5
 800c004:	47b8      	blx	r7
 800c006:	3001      	adds	r0, #1
 800c008:	f43f af2b 	beq.w	800be62 <_printf_float+0xb6>
 800c00c:	f109 0901 	add.w	r9, r9, #1
 800c010:	e7e8      	b.n	800bfe4 <_printf_float+0x238>
 800c012:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c014:	2b00      	cmp	r3, #0
 800c016:	dc39      	bgt.n	800c08c <_printf_float+0x2e0>
 800c018:	4a1b      	ldr	r2, [pc, #108]	@ (800c088 <_printf_float+0x2dc>)
 800c01a:	2301      	movs	r3, #1
 800c01c:	4631      	mov	r1, r6
 800c01e:	4628      	mov	r0, r5
 800c020:	47b8      	blx	r7
 800c022:	3001      	adds	r0, #1
 800c024:	f43f af1d 	beq.w	800be62 <_printf_float+0xb6>
 800c028:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c02c:	ea59 0303 	orrs.w	r3, r9, r3
 800c030:	d102      	bne.n	800c038 <_printf_float+0x28c>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	07d9      	lsls	r1, r3, #31
 800c036:	d5d7      	bpl.n	800bfe8 <_printf_float+0x23c>
 800c038:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c03c:	4631      	mov	r1, r6
 800c03e:	4628      	mov	r0, r5
 800c040:	47b8      	blx	r7
 800c042:	3001      	adds	r0, #1
 800c044:	f43f af0d 	beq.w	800be62 <_printf_float+0xb6>
 800c048:	f04f 0a00 	mov.w	sl, #0
 800c04c:	f104 0b1a 	add.w	fp, r4, #26
 800c050:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c052:	425b      	negs	r3, r3
 800c054:	4553      	cmp	r3, sl
 800c056:	dc01      	bgt.n	800c05c <_printf_float+0x2b0>
 800c058:	464b      	mov	r3, r9
 800c05a:	e793      	b.n	800bf84 <_printf_float+0x1d8>
 800c05c:	2301      	movs	r3, #1
 800c05e:	465a      	mov	r2, fp
 800c060:	4631      	mov	r1, r6
 800c062:	4628      	mov	r0, r5
 800c064:	47b8      	blx	r7
 800c066:	3001      	adds	r0, #1
 800c068:	f43f aefb 	beq.w	800be62 <_printf_float+0xb6>
 800c06c:	f10a 0a01 	add.w	sl, sl, #1
 800c070:	e7ee      	b.n	800c050 <_printf_float+0x2a4>
 800c072:	bf00      	nop
 800c074:	7fefffff 	.word	0x7fefffff
 800c078:	0800ea6c 	.word	0x0800ea6c
 800c07c:	0800ea68 	.word	0x0800ea68
 800c080:	0800ea74 	.word	0x0800ea74
 800c084:	0800ea70 	.word	0x0800ea70
 800c088:	0800ea78 	.word	0x0800ea78
 800c08c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c08e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c092:	4553      	cmp	r3, sl
 800c094:	bfa8      	it	ge
 800c096:	4653      	movge	r3, sl
 800c098:	2b00      	cmp	r3, #0
 800c09a:	4699      	mov	r9, r3
 800c09c:	dc36      	bgt.n	800c10c <_printf_float+0x360>
 800c09e:	f04f 0b00 	mov.w	fp, #0
 800c0a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0a6:	f104 021a 	add.w	r2, r4, #26
 800c0aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c0ac:	9306      	str	r3, [sp, #24]
 800c0ae:	eba3 0309 	sub.w	r3, r3, r9
 800c0b2:	455b      	cmp	r3, fp
 800c0b4:	dc31      	bgt.n	800c11a <_printf_float+0x36e>
 800c0b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0b8:	459a      	cmp	sl, r3
 800c0ba:	dc3a      	bgt.n	800c132 <_printf_float+0x386>
 800c0bc:	6823      	ldr	r3, [r4, #0]
 800c0be:	07da      	lsls	r2, r3, #31
 800c0c0:	d437      	bmi.n	800c132 <_printf_float+0x386>
 800c0c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0c4:	ebaa 0903 	sub.w	r9, sl, r3
 800c0c8:	9b06      	ldr	r3, [sp, #24]
 800c0ca:	ebaa 0303 	sub.w	r3, sl, r3
 800c0ce:	4599      	cmp	r9, r3
 800c0d0:	bfa8      	it	ge
 800c0d2:	4699      	movge	r9, r3
 800c0d4:	f1b9 0f00 	cmp.w	r9, #0
 800c0d8:	dc33      	bgt.n	800c142 <_printf_float+0x396>
 800c0da:	f04f 0800 	mov.w	r8, #0
 800c0de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0e2:	f104 0b1a 	add.w	fp, r4, #26
 800c0e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0e8:	ebaa 0303 	sub.w	r3, sl, r3
 800c0ec:	eba3 0309 	sub.w	r3, r3, r9
 800c0f0:	4543      	cmp	r3, r8
 800c0f2:	f77f af79 	ble.w	800bfe8 <_printf_float+0x23c>
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	465a      	mov	r2, fp
 800c0fa:	4631      	mov	r1, r6
 800c0fc:	4628      	mov	r0, r5
 800c0fe:	47b8      	blx	r7
 800c100:	3001      	adds	r0, #1
 800c102:	f43f aeae 	beq.w	800be62 <_printf_float+0xb6>
 800c106:	f108 0801 	add.w	r8, r8, #1
 800c10a:	e7ec      	b.n	800c0e6 <_printf_float+0x33a>
 800c10c:	4642      	mov	r2, r8
 800c10e:	4631      	mov	r1, r6
 800c110:	4628      	mov	r0, r5
 800c112:	47b8      	blx	r7
 800c114:	3001      	adds	r0, #1
 800c116:	d1c2      	bne.n	800c09e <_printf_float+0x2f2>
 800c118:	e6a3      	b.n	800be62 <_printf_float+0xb6>
 800c11a:	2301      	movs	r3, #1
 800c11c:	4631      	mov	r1, r6
 800c11e:	4628      	mov	r0, r5
 800c120:	9206      	str	r2, [sp, #24]
 800c122:	47b8      	blx	r7
 800c124:	3001      	adds	r0, #1
 800c126:	f43f ae9c 	beq.w	800be62 <_printf_float+0xb6>
 800c12a:	9a06      	ldr	r2, [sp, #24]
 800c12c:	f10b 0b01 	add.w	fp, fp, #1
 800c130:	e7bb      	b.n	800c0aa <_printf_float+0x2fe>
 800c132:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c136:	4631      	mov	r1, r6
 800c138:	4628      	mov	r0, r5
 800c13a:	47b8      	blx	r7
 800c13c:	3001      	adds	r0, #1
 800c13e:	d1c0      	bne.n	800c0c2 <_printf_float+0x316>
 800c140:	e68f      	b.n	800be62 <_printf_float+0xb6>
 800c142:	9a06      	ldr	r2, [sp, #24]
 800c144:	464b      	mov	r3, r9
 800c146:	4442      	add	r2, r8
 800c148:	4631      	mov	r1, r6
 800c14a:	4628      	mov	r0, r5
 800c14c:	47b8      	blx	r7
 800c14e:	3001      	adds	r0, #1
 800c150:	d1c3      	bne.n	800c0da <_printf_float+0x32e>
 800c152:	e686      	b.n	800be62 <_printf_float+0xb6>
 800c154:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c158:	f1ba 0f01 	cmp.w	sl, #1
 800c15c:	dc01      	bgt.n	800c162 <_printf_float+0x3b6>
 800c15e:	07db      	lsls	r3, r3, #31
 800c160:	d536      	bpl.n	800c1d0 <_printf_float+0x424>
 800c162:	2301      	movs	r3, #1
 800c164:	4642      	mov	r2, r8
 800c166:	4631      	mov	r1, r6
 800c168:	4628      	mov	r0, r5
 800c16a:	47b8      	blx	r7
 800c16c:	3001      	adds	r0, #1
 800c16e:	f43f ae78 	beq.w	800be62 <_printf_float+0xb6>
 800c172:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c176:	4631      	mov	r1, r6
 800c178:	4628      	mov	r0, r5
 800c17a:	47b8      	blx	r7
 800c17c:	3001      	adds	r0, #1
 800c17e:	f43f ae70 	beq.w	800be62 <_printf_float+0xb6>
 800c182:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c186:	2200      	movs	r2, #0
 800c188:	2300      	movs	r3, #0
 800c18a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c18e:	f7f4 fcab 	bl	8000ae8 <__aeabi_dcmpeq>
 800c192:	b9c0      	cbnz	r0, 800c1c6 <_printf_float+0x41a>
 800c194:	4653      	mov	r3, sl
 800c196:	f108 0201 	add.w	r2, r8, #1
 800c19a:	4631      	mov	r1, r6
 800c19c:	4628      	mov	r0, r5
 800c19e:	47b8      	blx	r7
 800c1a0:	3001      	adds	r0, #1
 800c1a2:	d10c      	bne.n	800c1be <_printf_float+0x412>
 800c1a4:	e65d      	b.n	800be62 <_printf_float+0xb6>
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	465a      	mov	r2, fp
 800c1aa:	4631      	mov	r1, r6
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	47b8      	blx	r7
 800c1b0:	3001      	adds	r0, #1
 800c1b2:	f43f ae56 	beq.w	800be62 <_printf_float+0xb6>
 800c1b6:	f108 0801 	add.w	r8, r8, #1
 800c1ba:	45d0      	cmp	r8, sl
 800c1bc:	dbf3      	blt.n	800c1a6 <_printf_float+0x3fa>
 800c1be:	464b      	mov	r3, r9
 800c1c0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c1c4:	e6df      	b.n	800bf86 <_printf_float+0x1da>
 800c1c6:	f04f 0800 	mov.w	r8, #0
 800c1ca:	f104 0b1a 	add.w	fp, r4, #26
 800c1ce:	e7f4      	b.n	800c1ba <_printf_float+0x40e>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	4642      	mov	r2, r8
 800c1d4:	e7e1      	b.n	800c19a <_printf_float+0x3ee>
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	464a      	mov	r2, r9
 800c1da:	4631      	mov	r1, r6
 800c1dc:	4628      	mov	r0, r5
 800c1de:	47b8      	blx	r7
 800c1e0:	3001      	adds	r0, #1
 800c1e2:	f43f ae3e 	beq.w	800be62 <_printf_float+0xb6>
 800c1e6:	f108 0801 	add.w	r8, r8, #1
 800c1ea:	68e3      	ldr	r3, [r4, #12]
 800c1ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1ee:	1a5b      	subs	r3, r3, r1
 800c1f0:	4543      	cmp	r3, r8
 800c1f2:	dcf0      	bgt.n	800c1d6 <_printf_float+0x42a>
 800c1f4:	e6fc      	b.n	800bff0 <_printf_float+0x244>
 800c1f6:	f04f 0800 	mov.w	r8, #0
 800c1fa:	f104 0919 	add.w	r9, r4, #25
 800c1fe:	e7f4      	b.n	800c1ea <_printf_float+0x43e>

0800c200 <_printf_common>:
 800c200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c204:	4616      	mov	r6, r2
 800c206:	4698      	mov	r8, r3
 800c208:	688a      	ldr	r2, [r1, #8]
 800c20a:	690b      	ldr	r3, [r1, #16]
 800c20c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c210:	4293      	cmp	r3, r2
 800c212:	bfb8      	it	lt
 800c214:	4613      	movlt	r3, r2
 800c216:	6033      	str	r3, [r6, #0]
 800c218:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c21c:	4607      	mov	r7, r0
 800c21e:	460c      	mov	r4, r1
 800c220:	b10a      	cbz	r2, 800c226 <_printf_common+0x26>
 800c222:	3301      	adds	r3, #1
 800c224:	6033      	str	r3, [r6, #0]
 800c226:	6823      	ldr	r3, [r4, #0]
 800c228:	0699      	lsls	r1, r3, #26
 800c22a:	bf42      	ittt	mi
 800c22c:	6833      	ldrmi	r3, [r6, #0]
 800c22e:	3302      	addmi	r3, #2
 800c230:	6033      	strmi	r3, [r6, #0]
 800c232:	6825      	ldr	r5, [r4, #0]
 800c234:	f015 0506 	ands.w	r5, r5, #6
 800c238:	d106      	bne.n	800c248 <_printf_common+0x48>
 800c23a:	f104 0a19 	add.w	sl, r4, #25
 800c23e:	68e3      	ldr	r3, [r4, #12]
 800c240:	6832      	ldr	r2, [r6, #0]
 800c242:	1a9b      	subs	r3, r3, r2
 800c244:	42ab      	cmp	r3, r5
 800c246:	dc26      	bgt.n	800c296 <_printf_common+0x96>
 800c248:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c24c:	6822      	ldr	r2, [r4, #0]
 800c24e:	3b00      	subs	r3, #0
 800c250:	bf18      	it	ne
 800c252:	2301      	movne	r3, #1
 800c254:	0692      	lsls	r2, r2, #26
 800c256:	d42b      	bmi.n	800c2b0 <_printf_common+0xb0>
 800c258:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c25c:	4641      	mov	r1, r8
 800c25e:	4638      	mov	r0, r7
 800c260:	47c8      	blx	r9
 800c262:	3001      	adds	r0, #1
 800c264:	d01e      	beq.n	800c2a4 <_printf_common+0xa4>
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	6922      	ldr	r2, [r4, #16]
 800c26a:	f003 0306 	and.w	r3, r3, #6
 800c26e:	2b04      	cmp	r3, #4
 800c270:	bf02      	ittt	eq
 800c272:	68e5      	ldreq	r5, [r4, #12]
 800c274:	6833      	ldreq	r3, [r6, #0]
 800c276:	1aed      	subeq	r5, r5, r3
 800c278:	68a3      	ldr	r3, [r4, #8]
 800c27a:	bf0c      	ite	eq
 800c27c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c280:	2500      	movne	r5, #0
 800c282:	4293      	cmp	r3, r2
 800c284:	bfc4      	itt	gt
 800c286:	1a9b      	subgt	r3, r3, r2
 800c288:	18ed      	addgt	r5, r5, r3
 800c28a:	2600      	movs	r6, #0
 800c28c:	341a      	adds	r4, #26
 800c28e:	42b5      	cmp	r5, r6
 800c290:	d11a      	bne.n	800c2c8 <_printf_common+0xc8>
 800c292:	2000      	movs	r0, #0
 800c294:	e008      	b.n	800c2a8 <_printf_common+0xa8>
 800c296:	2301      	movs	r3, #1
 800c298:	4652      	mov	r2, sl
 800c29a:	4641      	mov	r1, r8
 800c29c:	4638      	mov	r0, r7
 800c29e:	47c8      	blx	r9
 800c2a0:	3001      	adds	r0, #1
 800c2a2:	d103      	bne.n	800c2ac <_printf_common+0xac>
 800c2a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c2a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ac:	3501      	adds	r5, #1
 800c2ae:	e7c6      	b.n	800c23e <_printf_common+0x3e>
 800c2b0:	18e1      	adds	r1, r4, r3
 800c2b2:	1c5a      	adds	r2, r3, #1
 800c2b4:	2030      	movs	r0, #48	@ 0x30
 800c2b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c2ba:	4422      	add	r2, r4
 800c2bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c2c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c2c4:	3302      	adds	r3, #2
 800c2c6:	e7c7      	b.n	800c258 <_printf_common+0x58>
 800c2c8:	2301      	movs	r3, #1
 800c2ca:	4622      	mov	r2, r4
 800c2cc:	4641      	mov	r1, r8
 800c2ce:	4638      	mov	r0, r7
 800c2d0:	47c8      	blx	r9
 800c2d2:	3001      	adds	r0, #1
 800c2d4:	d0e6      	beq.n	800c2a4 <_printf_common+0xa4>
 800c2d6:	3601      	adds	r6, #1
 800c2d8:	e7d9      	b.n	800c28e <_printf_common+0x8e>
	...

0800c2dc <_printf_i>:
 800c2dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2e0:	7e0f      	ldrb	r7, [r1, #24]
 800c2e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c2e4:	2f78      	cmp	r7, #120	@ 0x78
 800c2e6:	4691      	mov	r9, r2
 800c2e8:	4680      	mov	r8, r0
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	469a      	mov	sl, r3
 800c2ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c2f2:	d807      	bhi.n	800c304 <_printf_i+0x28>
 800c2f4:	2f62      	cmp	r7, #98	@ 0x62
 800c2f6:	d80a      	bhi.n	800c30e <_printf_i+0x32>
 800c2f8:	2f00      	cmp	r7, #0
 800c2fa:	f000 80d1 	beq.w	800c4a0 <_printf_i+0x1c4>
 800c2fe:	2f58      	cmp	r7, #88	@ 0x58
 800c300:	f000 80b8 	beq.w	800c474 <_printf_i+0x198>
 800c304:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c308:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c30c:	e03a      	b.n	800c384 <_printf_i+0xa8>
 800c30e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c312:	2b15      	cmp	r3, #21
 800c314:	d8f6      	bhi.n	800c304 <_printf_i+0x28>
 800c316:	a101      	add	r1, pc, #4	@ (adr r1, 800c31c <_printf_i+0x40>)
 800c318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c31c:	0800c375 	.word	0x0800c375
 800c320:	0800c389 	.word	0x0800c389
 800c324:	0800c305 	.word	0x0800c305
 800c328:	0800c305 	.word	0x0800c305
 800c32c:	0800c305 	.word	0x0800c305
 800c330:	0800c305 	.word	0x0800c305
 800c334:	0800c389 	.word	0x0800c389
 800c338:	0800c305 	.word	0x0800c305
 800c33c:	0800c305 	.word	0x0800c305
 800c340:	0800c305 	.word	0x0800c305
 800c344:	0800c305 	.word	0x0800c305
 800c348:	0800c487 	.word	0x0800c487
 800c34c:	0800c3b3 	.word	0x0800c3b3
 800c350:	0800c441 	.word	0x0800c441
 800c354:	0800c305 	.word	0x0800c305
 800c358:	0800c305 	.word	0x0800c305
 800c35c:	0800c4a9 	.word	0x0800c4a9
 800c360:	0800c305 	.word	0x0800c305
 800c364:	0800c3b3 	.word	0x0800c3b3
 800c368:	0800c305 	.word	0x0800c305
 800c36c:	0800c305 	.word	0x0800c305
 800c370:	0800c449 	.word	0x0800c449
 800c374:	6833      	ldr	r3, [r6, #0]
 800c376:	1d1a      	adds	r2, r3, #4
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	6032      	str	r2, [r6, #0]
 800c37c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c380:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c384:	2301      	movs	r3, #1
 800c386:	e09c      	b.n	800c4c2 <_printf_i+0x1e6>
 800c388:	6833      	ldr	r3, [r6, #0]
 800c38a:	6820      	ldr	r0, [r4, #0]
 800c38c:	1d19      	adds	r1, r3, #4
 800c38e:	6031      	str	r1, [r6, #0]
 800c390:	0606      	lsls	r6, r0, #24
 800c392:	d501      	bpl.n	800c398 <_printf_i+0xbc>
 800c394:	681d      	ldr	r5, [r3, #0]
 800c396:	e003      	b.n	800c3a0 <_printf_i+0xc4>
 800c398:	0645      	lsls	r5, r0, #25
 800c39a:	d5fb      	bpl.n	800c394 <_printf_i+0xb8>
 800c39c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c3a0:	2d00      	cmp	r5, #0
 800c3a2:	da03      	bge.n	800c3ac <_printf_i+0xd0>
 800c3a4:	232d      	movs	r3, #45	@ 0x2d
 800c3a6:	426d      	negs	r5, r5
 800c3a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3ac:	4858      	ldr	r0, [pc, #352]	@ (800c510 <_printf_i+0x234>)
 800c3ae:	230a      	movs	r3, #10
 800c3b0:	e011      	b.n	800c3d6 <_printf_i+0xfa>
 800c3b2:	6821      	ldr	r1, [r4, #0]
 800c3b4:	6833      	ldr	r3, [r6, #0]
 800c3b6:	0608      	lsls	r0, r1, #24
 800c3b8:	f853 5b04 	ldr.w	r5, [r3], #4
 800c3bc:	d402      	bmi.n	800c3c4 <_printf_i+0xe8>
 800c3be:	0649      	lsls	r1, r1, #25
 800c3c0:	bf48      	it	mi
 800c3c2:	b2ad      	uxthmi	r5, r5
 800c3c4:	2f6f      	cmp	r7, #111	@ 0x6f
 800c3c6:	4852      	ldr	r0, [pc, #328]	@ (800c510 <_printf_i+0x234>)
 800c3c8:	6033      	str	r3, [r6, #0]
 800c3ca:	bf14      	ite	ne
 800c3cc:	230a      	movne	r3, #10
 800c3ce:	2308      	moveq	r3, #8
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c3d6:	6866      	ldr	r6, [r4, #4]
 800c3d8:	60a6      	str	r6, [r4, #8]
 800c3da:	2e00      	cmp	r6, #0
 800c3dc:	db05      	blt.n	800c3ea <_printf_i+0x10e>
 800c3de:	6821      	ldr	r1, [r4, #0]
 800c3e0:	432e      	orrs	r6, r5
 800c3e2:	f021 0104 	bic.w	r1, r1, #4
 800c3e6:	6021      	str	r1, [r4, #0]
 800c3e8:	d04b      	beq.n	800c482 <_printf_i+0x1a6>
 800c3ea:	4616      	mov	r6, r2
 800c3ec:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3f0:	fb03 5711 	mls	r7, r3, r1, r5
 800c3f4:	5dc7      	ldrb	r7, [r0, r7]
 800c3f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3fa:	462f      	mov	r7, r5
 800c3fc:	42bb      	cmp	r3, r7
 800c3fe:	460d      	mov	r5, r1
 800c400:	d9f4      	bls.n	800c3ec <_printf_i+0x110>
 800c402:	2b08      	cmp	r3, #8
 800c404:	d10b      	bne.n	800c41e <_printf_i+0x142>
 800c406:	6823      	ldr	r3, [r4, #0]
 800c408:	07df      	lsls	r7, r3, #31
 800c40a:	d508      	bpl.n	800c41e <_printf_i+0x142>
 800c40c:	6923      	ldr	r3, [r4, #16]
 800c40e:	6861      	ldr	r1, [r4, #4]
 800c410:	4299      	cmp	r1, r3
 800c412:	bfde      	ittt	le
 800c414:	2330      	movle	r3, #48	@ 0x30
 800c416:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c41a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c41e:	1b92      	subs	r2, r2, r6
 800c420:	6122      	str	r2, [r4, #16]
 800c422:	f8cd a000 	str.w	sl, [sp]
 800c426:	464b      	mov	r3, r9
 800c428:	aa03      	add	r2, sp, #12
 800c42a:	4621      	mov	r1, r4
 800c42c:	4640      	mov	r0, r8
 800c42e:	f7ff fee7 	bl	800c200 <_printf_common>
 800c432:	3001      	adds	r0, #1
 800c434:	d14a      	bne.n	800c4cc <_printf_i+0x1f0>
 800c436:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c43a:	b004      	add	sp, #16
 800c43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c440:	6823      	ldr	r3, [r4, #0]
 800c442:	f043 0320 	orr.w	r3, r3, #32
 800c446:	6023      	str	r3, [r4, #0]
 800c448:	4832      	ldr	r0, [pc, #200]	@ (800c514 <_printf_i+0x238>)
 800c44a:	2778      	movs	r7, #120	@ 0x78
 800c44c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c450:	6823      	ldr	r3, [r4, #0]
 800c452:	6831      	ldr	r1, [r6, #0]
 800c454:	061f      	lsls	r7, r3, #24
 800c456:	f851 5b04 	ldr.w	r5, [r1], #4
 800c45a:	d402      	bmi.n	800c462 <_printf_i+0x186>
 800c45c:	065f      	lsls	r7, r3, #25
 800c45e:	bf48      	it	mi
 800c460:	b2ad      	uxthmi	r5, r5
 800c462:	6031      	str	r1, [r6, #0]
 800c464:	07d9      	lsls	r1, r3, #31
 800c466:	bf44      	itt	mi
 800c468:	f043 0320 	orrmi.w	r3, r3, #32
 800c46c:	6023      	strmi	r3, [r4, #0]
 800c46e:	b11d      	cbz	r5, 800c478 <_printf_i+0x19c>
 800c470:	2310      	movs	r3, #16
 800c472:	e7ad      	b.n	800c3d0 <_printf_i+0xf4>
 800c474:	4826      	ldr	r0, [pc, #152]	@ (800c510 <_printf_i+0x234>)
 800c476:	e7e9      	b.n	800c44c <_printf_i+0x170>
 800c478:	6823      	ldr	r3, [r4, #0]
 800c47a:	f023 0320 	bic.w	r3, r3, #32
 800c47e:	6023      	str	r3, [r4, #0]
 800c480:	e7f6      	b.n	800c470 <_printf_i+0x194>
 800c482:	4616      	mov	r6, r2
 800c484:	e7bd      	b.n	800c402 <_printf_i+0x126>
 800c486:	6833      	ldr	r3, [r6, #0]
 800c488:	6825      	ldr	r5, [r4, #0]
 800c48a:	6961      	ldr	r1, [r4, #20]
 800c48c:	1d18      	adds	r0, r3, #4
 800c48e:	6030      	str	r0, [r6, #0]
 800c490:	062e      	lsls	r6, r5, #24
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	d501      	bpl.n	800c49a <_printf_i+0x1be>
 800c496:	6019      	str	r1, [r3, #0]
 800c498:	e002      	b.n	800c4a0 <_printf_i+0x1c4>
 800c49a:	0668      	lsls	r0, r5, #25
 800c49c:	d5fb      	bpl.n	800c496 <_printf_i+0x1ba>
 800c49e:	8019      	strh	r1, [r3, #0]
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	6123      	str	r3, [r4, #16]
 800c4a4:	4616      	mov	r6, r2
 800c4a6:	e7bc      	b.n	800c422 <_printf_i+0x146>
 800c4a8:	6833      	ldr	r3, [r6, #0]
 800c4aa:	1d1a      	adds	r2, r3, #4
 800c4ac:	6032      	str	r2, [r6, #0]
 800c4ae:	681e      	ldr	r6, [r3, #0]
 800c4b0:	6862      	ldr	r2, [r4, #4]
 800c4b2:	2100      	movs	r1, #0
 800c4b4:	4630      	mov	r0, r6
 800c4b6:	f7f3 fe9b 	bl	80001f0 <memchr>
 800c4ba:	b108      	cbz	r0, 800c4c0 <_printf_i+0x1e4>
 800c4bc:	1b80      	subs	r0, r0, r6
 800c4be:	6060      	str	r0, [r4, #4]
 800c4c0:	6863      	ldr	r3, [r4, #4]
 800c4c2:	6123      	str	r3, [r4, #16]
 800c4c4:	2300      	movs	r3, #0
 800c4c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4ca:	e7aa      	b.n	800c422 <_printf_i+0x146>
 800c4cc:	6923      	ldr	r3, [r4, #16]
 800c4ce:	4632      	mov	r2, r6
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	4640      	mov	r0, r8
 800c4d4:	47d0      	blx	sl
 800c4d6:	3001      	adds	r0, #1
 800c4d8:	d0ad      	beq.n	800c436 <_printf_i+0x15a>
 800c4da:	6823      	ldr	r3, [r4, #0]
 800c4dc:	079b      	lsls	r3, r3, #30
 800c4de:	d413      	bmi.n	800c508 <_printf_i+0x22c>
 800c4e0:	68e0      	ldr	r0, [r4, #12]
 800c4e2:	9b03      	ldr	r3, [sp, #12]
 800c4e4:	4298      	cmp	r0, r3
 800c4e6:	bfb8      	it	lt
 800c4e8:	4618      	movlt	r0, r3
 800c4ea:	e7a6      	b.n	800c43a <_printf_i+0x15e>
 800c4ec:	2301      	movs	r3, #1
 800c4ee:	4632      	mov	r2, r6
 800c4f0:	4649      	mov	r1, r9
 800c4f2:	4640      	mov	r0, r8
 800c4f4:	47d0      	blx	sl
 800c4f6:	3001      	adds	r0, #1
 800c4f8:	d09d      	beq.n	800c436 <_printf_i+0x15a>
 800c4fa:	3501      	adds	r5, #1
 800c4fc:	68e3      	ldr	r3, [r4, #12]
 800c4fe:	9903      	ldr	r1, [sp, #12]
 800c500:	1a5b      	subs	r3, r3, r1
 800c502:	42ab      	cmp	r3, r5
 800c504:	dcf2      	bgt.n	800c4ec <_printf_i+0x210>
 800c506:	e7eb      	b.n	800c4e0 <_printf_i+0x204>
 800c508:	2500      	movs	r5, #0
 800c50a:	f104 0619 	add.w	r6, r4, #25
 800c50e:	e7f5      	b.n	800c4fc <_printf_i+0x220>
 800c510:	0800ea7a 	.word	0x0800ea7a
 800c514:	0800ea8b 	.word	0x0800ea8b

0800c518 <std>:
 800c518:	2300      	movs	r3, #0
 800c51a:	b510      	push	{r4, lr}
 800c51c:	4604      	mov	r4, r0
 800c51e:	e9c0 3300 	strd	r3, r3, [r0]
 800c522:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c526:	6083      	str	r3, [r0, #8]
 800c528:	8181      	strh	r1, [r0, #12]
 800c52a:	6643      	str	r3, [r0, #100]	@ 0x64
 800c52c:	81c2      	strh	r2, [r0, #14]
 800c52e:	6183      	str	r3, [r0, #24]
 800c530:	4619      	mov	r1, r3
 800c532:	2208      	movs	r2, #8
 800c534:	305c      	adds	r0, #92	@ 0x5c
 800c536:	f000 f9f9 	bl	800c92c <memset>
 800c53a:	4b0d      	ldr	r3, [pc, #52]	@ (800c570 <std+0x58>)
 800c53c:	6263      	str	r3, [r4, #36]	@ 0x24
 800c53e:	4b0d      	ldr	r3, [pc, #52]	@ (800c574 <std+0x5c>)
 800c540:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c542:	4b0d      	ldr	r3, [pc, #52]	@ (800c578 <std+0x60>)
 800c544:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c546:	4b0d      	ldr	r3, [pc, #52]	@ (800c57c <std+0x64>)
 800c548:	6323      	str	r3, [r4, #48]	@ 0x30
 800c54a:	4b0d      	ldr	r3, [pc, #52]	@ (800c580 <std+0x68>)
 800c54c:	6224      	str	r4, [r4, #32]
 800c54e:	429c      	cmp	r4, r3
 800c550:	d006      	beq.n	800c560 <std+0x48>
 800c552:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c556:	4294      	cmp	r4, r2
 800c558:	d002      	beq.n	800c560 <std+0x48>
 800c55a:	33d0      	adds	r3, #208	@ 0xd0
 800c55c:	429c      	cmp	r4, r3
 800c55e:	d105      	bne.n	800c56c <std+0x54>
 800c560:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c568:	f000 ba6c 	b.w	800ca44 <__retarget_lock_init_recursive>
 800c56c:	bd10      	pop	{r4, pc}
 800c56e:	bf00      	nop
 800c570:	0800c77d 	.word	0x0800c77d
 800c574:	0800c79f 	.word	0x0800c79f
 800c578:	0800c7d7 	.word	0x0800c7d7
 800c57c:	0800c7fb 	.word	0x0800c7fb
 800c580:	200265b0 	.word	0x200265b0

0800c584 <stdio_exit_handler>:
 800c584:	4a02      	ldr	r2, [pc, #8]	@ (800c590 <stdio_exit_handler+0xc>)
 800c586:	4903      	ldr	r1, [pc, #12]	@ (800c594 <stdio_exit_handler+0x10>)
 800c588:	4803      	ldr	r0, [pc, #12]	@ (800c598 <stdio_exit_handler+0x14>)
 800c58a:	f000 b869 	b.w	800c660 <_fwalk_sglue>
 800c58e:	bf00      	nop
 800c590:	20000018 	.word	0x20000018
 800c594:	0800e22d 	.word	0x0800e22d
 800c598:	20000028 	.word	0x20000028

0800c59c <cleanup_stdio>:
 800c59c:	6841      	ldr	r1, [r0, #4]
 800c59e:	4b0c      	ldr	r3, [pc, #48]	@ (800c5d0 <cleanup_stdio+0x34>)
 800c5a0:	4299      	cmp	r1, r3
 800c5a2:	b510      	push	{r4, lr}
 800c5a4:	4604      	mov	r4, r0
 800c5a6:	d001      	beq.n	800c5ac <cleanup_stdio+0x10>
 800c5a8:	f001 fe40 	bl	800e22c <_fflush_r>
 800c5ac:	68a1      	ldr	r1, [r4, #8]
 800c5ae:	4b09      	ldr	r3, [pc, #36]	@ (800c5d4 <cleanup_stdio+0x38>)
 800c5b0:	4299      	cmp	r1, r3
 800c5b2:	d002      	beq.n	800c5ba <cleanup_stdio+0x1e>
 800c5b4:	4620      	mov	r0, r4
 800c5b6:	f001 fe39 	bl	800e22c <_fflush_r>
 800c5ba:	68e1      	ldr	r1, [r4, #12]
 800c5bc:	4b06      	ldr	r3, [pc, #24]	@ (800c5d8 <cleanup_stdio+0x3c>)
 800c5be:	4299      	cmp	r1, r3
 800c5c0:	d004      	beq.n	800c5cc <cleanup_stdio+0x30>
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5c8:	f001 be30 	b.w	800e22c <_fflush_r>
 800c5cc:	bd10      	pop	{r4, pc}
 800c5ce:	bf00      	nop
 800c5d0:	200265b0 	.word	0x200265b0
 800c5d4:	20026618 	.word	0x20026618
 800c5d8:	20026680 	.word	0x20026680

0800c5dc <global_stdio_init.part.0>:
 800c5dc:	b510      	push	{r4, lr}
 800c5de:	4b0b      	ldr	r3, [pc, #44]	@ (800c60c <global_stdio_init.part.0+0x30>)
 800c5e0:	4c0b      	ldr	r4, [pc, #44]	@ (800c610 <global_stdio_init.part.0+0x34>)
 800c5e2:	4a0c      	ldr	r2, [pc, #48]	@ (800c614 <global_stdio_init.part.0+0x38>)
 800c5e4:	601a      	str	r2, [r3, #0]
 800c5e6:	4620      	mov	r0, r4
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	2104      	movs	r1, #4
 800c5ec:	f7ff ff94 	bl	800c518 <std>
 800c5f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c5f4:	2201      	movs	r2, #1
 800c5f6:	2109      	movs	r1, #9
 800c5f8:	f7ff ff8e 	bl	800c518 <std>
 800c5fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c600:	2202      	movs	r2, #2
 800c602:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c606:	2112      	movs	r1, #18
 800c608:	f7ff bf86 	b.w	800c518 <std>
 800c60c:	200266e8 	.word	0x200266e8
 800c610:	200265b0 	.word	0x200265b0
 800c614:	0800c585 	.word	0x0800c585

0800c618 <__sfp_lock_acquire>:
 800c618:	4801      	ldr	r0, [pc, #4]	@ (800c620 <__sfp_lock_acquire+0x8>)
 800c61a:	f000 ba14 	b.w	800ca46 <__retarget_lock_acquire_recursive>
 800c61e:	bf00      	nop
 800c620:	200266f1 	.word	0x200266f1

0800c624 <__sfp_lock_release>:
 800c624:	4801      	ldr	r0, [pc, #4]	@ (800c62c <__sfp_lock_release+0x8>)
 800c626:	f000 ba0f 	b.w	800ca48 <__retarget_lock_release_recursive>
 800c62a:	bf00      	nop
 800c62c:	200266f1 	.word	0x200266f1

0800c630 <__sinit>:
 800c630:	b510      	push	{r4, lr}
 800c632:	4604      	mov	r4, r0
 800c634:	f7ff fff0 	bl	800c618 <__sfp_lock_acquire>
 800c638:	6a23      	ldr	r3, [r4, #32]
 800c63a:	b11b      	cbz	r3, 800c644 <__sinit+0x14>
 800c63c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c640:	f7ff bff0 	b.w	800c624 <__sfp_lock_release>
 800c644:	4b04      	ldr	r3, [pc, #16]	@ (800c658 <__sinit+0x28>)
 800c646:	6223      	str	r3, [r4, #32]
 800c648:	4b04      	ldr	r3, [pc, #16]	@ (800c65c <__sinit+0x2c>)
 800c64a:	681b      	ldr	r3, [r3, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d1f5      	bne.n	800c63c <__sinit+0xc>
 800c650:	f7ff ffc4 	bl	800c5dc <global_stdio_init.part.0>
 800c654:	e7f2      	b.n	800c63c <__sinit+0xc>
 800c656:	bf00      	nop
 800c658:	0800c59d 	.word	0x0800c59d
 800c65c:	200266e8 	.word	0x200266e8

0800c660 <_fwalk_sglue>:
 800c660:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c664:	4607      	mov	r7, r0
 800c666:	4688      	mov	r8, r1
 800c668:	4614      	mov	r4, r2
 800c66a:	2600      	movs	r6, #0
 800c66c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c670:	f1b9 0901 	subs.w	r9, r9, #1
 800c674:	d505      	bpl.n	800c682 <_fwalk_sglue+0x22>
 800c676:	6824      	ldr	r4, [r4, #0]
 800c678:	2c00      	cmp	r4, #0
 800c67a:	d1f7      	bne.n	800c66c <_fwalk_sglue+0xc>
 800c67c:	4630      	mov	r0, r6
 800c67e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c682:	89ab      	ldrh	r3, [r5, #12]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d907      	bls.n	800c698 <_fwalk_sglue+0x38>
 800c688:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c68c:	3301      	adds	r3, #1
 800c68e:	d003      	beq.n	800c698 <_fwalk_sglue+0x38>
 800c690:	4629      	mov	r1, r5
 800c692:	4638      	mov	r0, r7
 800c694:	47c0      	blx	r8
 800c696:	4306      	orrs	r6, r0
 800c698:	3568      	adds	r5, #104	@ 0x68
 800c69a:	e7e9      	b.n	800c670 <_fwalk_sglue+0x10>

0800c69c <iprintf>:
 800c69c:	b40f      	push	{r0, r1, r2, r3}
 800c69e:	b507      	push	{r0, r1, r2, lr}
 800c6a0:	4906      	ldr	r1, [pc, #24]	@ (800c6bc <iprintf+0x20>)
 800c6a2:	ab04      	add	r3, sp, #16
 800c6a4:	6808      	ldr	r0, [r1, #0]
 800c6a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6aa:	6881      	ldr	r1, [r0, #8]
 800c6ac:	9301      	str	r3, [sp, #4]
 800c6ae:	f001 fc21 	bl	800def4 <_vfiprintf_r>
 800c6b2:	b003      	add	sp, #12
 800c6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6b8:	b004      	add	sp, #16
 800c6ba:	4770      	bx	lr
 800c6bc:	20000024 	.word	0x20000024

0800c6c0 <_puts_r>:
 800c6c0:	6a03      	ldr	r3, [r0, #32]
 800c6c2:	b570      	push	{r4, r5, r6, lr}
 800c6c4:	6884      	ldr	r4, [r0, #8]
 800c6c6:	4605      	mov	r5, r0
 800c6c8:	460e      	mov	r6, r1
 800c6ca:	b90b      	cbnz	r3, 800c6d0 <_puts_r+0x10>
 800c6cc:	f7ff ffb0 	bl	800c630 <__sinit>
 800c6d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6d2:	07db      	lsls	r3, r3, #31
 800c6d4:	d405      	bmi.n	800c6e2 <_puts_r+0x22>
 800c6d6:	89a3      	ldrh	r3, [r4, #12]
 800c6d8:	0598      	lsls	r0, r3, #22
 800c6da:	d402      	bmi.n	800c6e2 <_puts_r+0x22>
 800c6dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c6de:	f000 f9b2 	bl	800ca46 <__retarget_lock_acquire_recursive>
 800c6e2:	89a3      	ldrh	r3, [r4, #12]
 800c6e4:	0719      	lsls	r1, r3, #28
 800c6e6:	d502      	bpl.n	800c6ee <_puts_r+0x2e>
 800c6e8:	6923      	ldr	r3, [r4, #16]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d135      	bne.n	800c75a <_puts_r+0x9a>
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4628      	mov	r0, r5
 800c6f2:	f000 f8c5 	bl	800c880 <__swsetup_r>
 800c6f6:	b380      	cbz	r0, 800c75a <_puts_r+0x9a>
 800c6f8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800c6fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c6fe:	07da      	lsls	r2, r3, #31
 800c700:	d405      	bmi.n	800c70e <_puts_r+0x4e>
 800c702:	89a3      	ldrh	r3, [r4, #12]
 800c704:	059b      	lsls	r3, r3, #22
 800c706:	d402      	bmi.n	800c70e <_puts_r+0x4e>
 800c708:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c70a:	f000 f99d 	bl	800ca48 <__retarget_lock_release_recursive>
 800c70e:	4628      	mov	r0, r5
 800c710:	bd70      	pop	{r4, r5, r6, pc}
 800c712:	2b00      	cmp	r3, #0
 800c714:	da04      	bge.n	800c720 <_puts_r+0x60>
 800c716:	69a2      	ldr	r2, [r4, #24]
 800c718:	429a      	cmp	r2, r3
 800c71a:	dc17      	bgt.n	800c74c <_puts_r+0x8c>
 800c71c:	290a      	cmp	r1, #10
 800c71e:	d015      	beq.n	800c74c <_puts_r+0x8c>
 800c720:	6823      	ldr	r3, [r4, #0]
 800c722:	1c5a      	adds	r2, r3, #1
 800c724:	6022      	str	r2, [r4, #0]
 800c726:	7019      	strb	r1, [r3, #0]
 800c728:	68a3      	ldr	r3, [r4, #8]
 800c72a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c72e:	3b01      	subs	r3, #1
 800c730:	60a3      	str	r3, [r4, #8]
 800c732:	2900      	cmp	r1, #0
 800c734:	d1ed      	bne.n	800c712 <_puts_r+0x52>
 800c736:	2b00      	cmp	r3, #0
 800c738:	da11      	bge.n	800c75e <_puts_r+0x9e>
 800c73a:	4622      	mov	r2, r4
 800c73c:	210a      	movs	r1, #10
 800c73e:	4628      	mov	r0, r5
 800c740:	f000 f85f 	bl	800c802 <__swbuf_r>
 800c744:	3001      	adds	r0, #1
 800c746:	d0d7      	beq.n	800c6f8 <_puts_r+0x38>
 800c748:	250a      	movs	r5, #10
 800c74a:	e7d7      	b.n	800c6fc <_puts_r+0x3c>
 800c74c:	4622      	mov	r2, r4
 800c74e:	4628      	mov	r0, r5
 800c750:	f000 f857 	bl	800c802 <__swbuf_r>
 800c754:	3001      	adds	r0, #1
 800c756:	d1e7      	bne.n	800c728 <_puts_r+0x68>
 800c758:	e7ce      	b.n	800c6f8 <_puts_r+0x38>
 800c75a:	3e01      	subs	r6, #1
 800c75c:	e7e4      	b.n	800c728 <_puts_r+0x68>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	1c5a      	adds	r2, r3, #1
 800c762:	6022      	str	r2, [r4, #0]
 800c764:	220a      	movs	r2, #10
 800c766:	701a      	strb	r2, [r3, #0]
 800c768:	e7ee      	b.n	800c748 <_puts_r+0x88>
	...

0800c76c <puts>:
 800c76c:	4b02      	ldr	r3, [pc, #8]	@ (800c778 <puts+0xc>)
 800c76e:	4601      	mov	r1, r0
 800c770:	6818      	ldr	r0, [r3, #0]
 800c772:	f7ff bfa5 	b.w	800c6c0 <_puts_r>
 800c776:	bf00      	nop
 800c778:	20000024 	.word	0x20000024

0800c77c <__sread>:
 800c77c:	b510      	push	{r4, lr}
 800c77e:	460c      	mov	r4, r1
 800c780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c784:	f000 f900 	bl	800c988 <_read_r>
 800c788:	2800      	cmp	r0, #0
 800c78a:	bfab      	itete	ge
 800c78c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c78e:	89a3      	ldrhlt	r3, [r4, #12]
 800c790:	181b      	addge	r3, r3, r0
 800c792:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c796:	bfac      	ite	ge
 800c798:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c79a:	81a3      	strhlt	r3, [r4, #12]
 800c79c:	bd10      	pop	{r4, pc}

0800c79e <__swrite>:
 800c79e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a2:	461f      	mov	r7, r3
 800c7a4:	898b      	ldrh	r3, [r1, #12]
 800c7a6:	05db      	lsls	r3, r3, #23
 800c7a8:	4605      	mov	r5, r0
 800c7aa:	460c      	mov	r4, r1
 800c7ac:	4616      	mov	r6, r2
 800c7ae:	d505      	bpl.n	800c7bc <__swrite+0x1e>
 800c7b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7b4:	2302      	movs	r3, #2
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	f000 f8d4 	bl	800c964 <_lseek_r>
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c7c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c7c6:	81a3      	strh	r3, [r4, #12]
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	463b      	mov	r3, r7
 800c7cc:	4628      	mov	r0, r5
 800c7ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7d2:	f000 b8fb 	b.w	800c9cc <_write_r>

0800c7d6 <__sseek>:
 800c7d6:	b510      	push	{r4, lr}
 800c7d8:	460c      	mov	r4, r1
 800c7da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7de:	f000 f8c1 	bl	800c964 <_lseek_r>
 800c7e2:	1c43      	adds	r3, r0, #1
 800c7e4:	89a3      	ldrh	r3, [r4, #12]
 800c7e6:	bf15      	itete	ne
 800c7e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c7ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c7ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c7f2:	81a3      	strheq	r3, [r4, #12]
 800c7f4:	bf18      	it	ne
 800c7f6:	81a3      	strhne	r3, [r4, #12]
 800c7f8:	bd10      	pop	{r4, pc}

0800c7fa <__sclose>:
 800c7fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7fe:	f000 b8a1 	b.w	800c944 <_close_r>

0800c802 <__swbuf_r>:
 800c802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c804:	460e      	mov	r6, r1
 800c806:	4614      	mov	r4, r2
 800c808:	4605      	mov	r5, r0
 800c80a:	b118      	cbz	r0, 800c814 <__swbuf_r+0x12>
 800c80c:	6a03      	ldr	r3, [r0, #32]
 800c80e:	b90b      	cbnz	r3, 800c814 <__swbuf_r+0x12>
 800c810:	f7ff ff0e 	bl	800c630 <__sinit>
 800c814:	69a3      	ldr	r3, [r4, #24]
 800c816:	60a3      	str	r3, [r4, #8]
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	071a      	lsls	r2, r3, #28
 800c81c:	d501      	bpl.n	800c822 <__swbuf_r+0x20>
 800c81e:	6923      	ldr	r3, [r4, #16]
 800c820:	b943      	cbnz	r3, 800c834 <__swbuf_r+0x32>
 800c822:	4621      	mov	r1, r4
 800c824:	4628      	mov	r0, r5
 800c826:	f000 f82b 	bl	800c880 <__swsetup_r>
 800c82a:	b118      	cbz	r0, 800c834 <__swbuf_r+0x32>
 800c82c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c830:	4638      	mov	r0, r7
 800c832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c834:	6823      	ldr	r3, [r4, #0]
 800c836:	6922      	ldr	r2, [r4, #16]
 800c838:	1a98      	subs	r0, r3, r2
 800c83a:	6963      	ldr	r3, [r4, #20]
 800c83c:	b2f6      	uxtb	r6, r6
 800c83e:	4283      	cmp	r3, r0
 800c840:	4637      	mov	r7, r6
 800c842:	dc05      	bgt.n	800c850 <__swbuf_r+0x4e>
 800c844:	4621      	mov	r1, r4
 800c846:	4628      	mov	r0, r5
 800c848:	f001 fcf0 	bl	800e22c <_fflush_r>
 800c84c:	2800      	cmp	r0, #0
 800c84e:	d1ed      	bne.n	800c82c <__swbuf_r+0x2a>
 800c850:	68a3      	ldr	r3, [r4, #8]
 800c852:	3b01      	subs	r3, #1
 800c854:	60a3      	str	r3, [r4, #8]
 800c856:	6823      	ldr	r3, [r4, #0]
 800c858:	1c5a      	adds	r2, r3, #1
 800c85a:	6022      	str	r2, [r4, #0]
 800c85c:	701e      	strb	r6, [r3, #0]
 800c85e:	6962      	ldr	r2, [r4, #20]
 800c860:	1c43      	adds	r3, r0, #1
 800c862:	429a      	cmp	r2, r3
 800c864:	d004      	beq.n	800c870 <__swbuf_r+0x6e>
 800c866:	89a3      	ldrh	r3, [r4, #12]
 800c868:	07db      	lsls	r3, r3, #31
 800c86a:	d5e1      	bpl.n	800c830 <__swbuf_r+0x2e>
 800c86c:	2e0a      	cmp	r6, #10
 800c86e:	d1df      	bne.n	800c830 <__swbuf_r+0x2e>
 800c870:	4621      	mov	r1, r4
 800c872:	4628      	mov	r0, r5
 800c874:	f001 fcda 	bl	800e22c <_fflush_r>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d0d9      	beq.n	800c830 <__swbuf_r+0x2e>
 800c87c:	e7d6      	b.n	800c82c <__swbuf_r+0x2a>
	...

0800c880 <__swsetup_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	4b29      	ldr	r3, [pc, #164]	@ (800c928 <__swsetup_r+0xa8>)
 800c884:	4605      	mov	r5, r0
 800c886:	6818      	ldr	r0, [r3, #0]
 800c888:	460c      	mov	r4, r1
 800c88a:	b118      	cbz	r0, 800c894 <__swsetup_r+0x14>
 800c88c:	6a03      	ldr	r3, [r0, #32]
 800c88e:	b90b      	cbnz	r3, 800c894 <__swsetup_r+0x14>
 800c890:	f7ff fece 	bl	800c630 <__sinit>
 800c894:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c898:	0719      	lsls	r1, r3, #28
 800c89a:	d422      	bmi.n	800c8e2 <__swsetup_r+0x62>
 800c89c:	06da      	lsls	r2, r3, #27
 800c89e:	d407      	bmi.n	800c8b0 <__swsetup_r+0x30>
 800c8a0:	2209      	movs	r2, #9
 800c8a2:	602a      	str	r2, [r5, #0]
 800c8a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c8a8:	81a3      	strh	r3, [r4, #12]
 800c8aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c8ae:	e033      	b.n	800c918 <__swsetup_r+0x98>
 800c8b0:	0758      	lsls	r0, r3, #29
 800c8b2:	d512      	bpl.n	800c8da <__swsetup_r+0x5a>
 800c8b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c8b6:	b141      	cbz	r1, 800c8ca <__swsetup_r+0x4a>
 800c8b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c8bc:	4299      	cmp	r1, r3
 800c8be:	d002      	beq.n	800c8c6 <__swsetup_r+0x46>
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	f000 ff29 	bl	800d718 <_free_r>
 800c8c6:	2300      	movs	r3, #0
 800c8c8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c8ca:	89a3      	ldrh	r3, [r4, #12]
 800c8cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c8d0:	81a3      	strh	r3, [r4, #12]
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	6063      	str	r3, [r4, #4]
 800c8d6:	6923      	ldr	r3, [r4, #16]
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	89a3      	ldrh	r3, [r4, #12]
 800c8dc:	f043 0308 	orr.w	r3, r3, #8
 800c8e0:	81a3      	strh	r3, [r4, #12]
 800c8e2:	6923      	ldr	r3, [r4, #16]
 800c8e4:	b94b      	cbnz	r3, 800c8fa <__swsetup_r+0x7a>
 800c8e6:	89a3      	ldrh	r3, [r4, #12]
 800c8e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c8ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c8f0:	d003      	beq.n	800c8fa <__swsetup_r+0x7a>
 800c8f2:	4621      	mov	r1, r4
 800c8f4:	4628      	mov	r0, r5
 800c8f6:	f001 fce7 	bl	800e2c8 <__smakebuf_r>
 800c8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c8fe:	f013 0201 	ands.w	r2, r3, #1
 800c902:	d00a      	beq.n	800c91a <__swsetup_r+0x9a>
 800c904:	2200      	movs	r2, #0
 800c906:	60a2      	str	r2, [r4, #8]
 800c908:	6962      	ldr	r2, [r4, #20]
 800c90a:	4252      	negs	r2, r2
 800c90c:	61a2      	str	r2, [r4, #24]
 800c90e:	6922      	ldr	r2, [r4, #16]
 800c910:	b942      	cbnz	r2, 800c924 <__swsetup_r+0xa4>
 800c912:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c916:	d1c5      	bne.n	800c8a4 <__swsetup_r+0x24>
 800c918:	bd38      	pop	{r3, r4, r5, pc}
 800c91a:	0799      	lsls	r1, r3, #30
 800c91c:	bf58      	it	pl
 800c91e:	6962      	ldrpl	r2, [r4, #20]
 800c920:	60a2      	str	r2, [r4, #8]
 800c922:	e7f4      	b.n	800c90e <__swsetup_r+0x8e>
 800c924:	2000      	movs	r0, #0
 800c926:	e7f7      	b.n	800c918 <__swsetup_r+0x98>
 800c928:	20000024 	.word	0x20000024

0800c92c <memset>:
 800c92c:	4402      	add	r2, r0
 800c92e:	4603      	mov	r3, r0
 800c930:	4293      	cmp	r3, r2
 800c932:	d100      	bne.n	800c936 <memset+0xa>
 800c934:	4770      	bx	lr
 800c936:	f803 1b01 	strb.w	r1, [r3], #1
 800c93a:	e7f9      	b.n	800c930 <memset+0x4>

0800c93c <_localeconv_r>:
 800c93c:	4800      	ldr	r0, [pc, #0]	@ (800c940 <_localeconv_r+0x4>)
 800c93e:	4770      	bx	lr
 800c940:	20000164 	.word	0x20000164

0800c944 <_close_r>:
 800c944:	b538      	push	{r3, r4, r5, lr}
 800c946:	4d06      	ldr	r5, [pc, #24]	@ (800c960 <_close_r+0x1c>)
 800c948:	2300      	movs	r3, #0
 800c94a:	4604      	mov	r4, r0
 800c94c:	4608      	mov	r0, r1
 800c94e:	602b      	str	r3, [r5, #0]
 800c950:	f7f6 ff64 	bl	800381c <_close>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <_close_r+0x1a>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	b103      	cbz	r3, 800c95e <_close_r+0x1a>
 800c95c:	6023      	str	r3, [r4, #0]
 800c95e:	bd38      	pop	{r3, r4, r5, pc}
 800c960:	200266ec 	.word	0x200266ec

0800c964 <_lseek_r>:
 800c964:	b538      	push	{r3, r4, r5, lr}
 800c966:	4d07      	ldr	r5, [pc, #28]	@ (800c984 <_lseek_r+0x20>)
 800c968:	4604      	mov	r4, r0
 800c96a:	4608      	mov	r0, r1
 800c96c:	4611      	mov	r1, r2
 800c96e:	2200      	movs	r2, #0
 800c970:	602a      	str	r2, [r5, #0]
 800c972:	461a      	mov	r2, r3
 800c974:	f7f6 ff79 	bl	800386a <_lseek>
 800c978:	1c43      	adds	r3, r0, #1
 800c97a:	d102      	bne.n	800c982 <_lseek_r+0x1e>
 800c97c:	682b      	ldr	r3, [r5, #0]
 800c97e:	b103      	cbz	r3, 800c982 <_lseek_r+0x1e>
 800c980:	6023      	str	r3, [r4, #0]
 800c982:	bd38      	pop	{r3, r4, r5, pc}
 800c984:	200266ec 	.word	0x200266ec

0800c988 <_read_r>:
 800c988:	b538      	push	{r3, r4, r5, lr}
 800c98a:	4d07      	ldr	r5, [pc, #28]	@ (800c9a8 <_read_r+0x20>)
 800c98c:	4604      	mov	r4, r0
 800c98e:	4608      	mov	r0, r1
 800c990:	4611      	mov	r1, r2
 800c992:	2200      	movs	r2, #0
 800c994:	602a      	str	r2, [r5, #0]
 800c996:	461a      	mov	r2, r3
 800c998:	f7f6 ff23 	bl	80037e2 <_read>
 800c99c:	1c43      	adds	r3, r0, #1
 800c99e:	d102      	bne.n	800c9a6 <_read_r+0x1e>
 800c9a0:	682b      	ldr	r3, [r5, #0]
 800c9a2:	b103      	cbz	r3, 800c9a6 <_read_r+0x1e>
 800c9a4:	6023      	str	r3, [r4, #0]
 800c9a6:	bd38      	pop	{r3, r4, r5, pc}
 800c9a8:	200266ec 	.word	0x200266ec

0800c9ac <_sbrk_r>:
 800c9ac:	b538      	push	{r3, r4, r5, lr}
 800c9ae:	4d06      	ldr	r5, [pc, #24]	@ (800c9c8 <_sbrk_r+0x1c>)
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	4604      	mov	r4, r0
 800c9b4:	4608      	mov	r0, r1
 800c9b6:	602b      	str	r3, [r5, #0]
 800c9b8:	f7f6 ff64 	bl	8003884 <_sbrk>
 800c9bc:	1c43      	adds	r3, r0, #1
 800c9be:	d102      	bne.n	800c9c6 <_sbrk_r+0x1a>
 800c9c0:	682b      	ldr	r3, [r5, #0]
 800c9c2:	b103      	cbz	r3, 800c9c6 <_sbrk_r+0x1a>
 800c9c4:	6023      	str	r3, [r4, #0]
 800c9c6:	bd38      	pop	{r3, r4, r5, pc}
 800c9c8:	200266ec 	.word	0x200266ec

0800c9cc <_write_r>:
 800c9cc:	b538      	push	{r3, r4, r5, lr}
 800c9ce:	4d07      	ldr	r5, [pc, #28]	@ (800c9ec <_write_r+0x20>)
 800c9d0:	4604      	mov	r4, r0
 800c9d2:	4608      	mov	r0, r1
 800c9d4:	4611      	mov	r1, r2
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	602a      	str	r2, [r5, #0]
 800c9da:	461a      	mov	r2, r3
 800c9dc:	f7f4 ff96 	bl	800190c <_write>
 800c9e0:	1c43      	adds	r3, r0, #1
 800c9e2:	d102      	bne.n	800c9ea <_write_r+0x1e>
 800c9e4:	682b      	ldr	r3, [r5, #0]
 800c9e6:	b103      	cbz	r3, 800c9ea <_write_r+0x1e>
 800c9e8:	6023      	str	r3, [r4, #0]
 800c9ea:	bd38      	pop	{r3, r4, r5, pc}
 800c9ec:	200266ec 	.word	0x200266ec

0800c9f0 <__errno>:
 800c9f0:	4b01      	ldr	r3, [pc, #4]	@ (800c9f8 <__errno+0x8>)
 800c9f2:	6818      	ldr	r0, [r3, #0]
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	20000024 	.word	0x20000024

0800c9fc <__libc_init_array>:
 800c9fc:	b570      	push	{r4, r5, r6, lr}
 800c9fe:	4d0d      	ldr	r5, [pc, #52]	@ (800ca34 <__libc_init_array+0x38>)
 800ca00:	4c0d      	ldr	r4, [pc, #52]	@ (800ca38 <__libc_init_array+0x3c>)
 800ca02:	1b64      	subs	r4, r4, r5
 800ca04:	10a4      	asrs	r4, r4, #2
 800ca06:	2600      	movs	r6, #0
 800ca08:	42a6      	cmp	r6, r4
 800ca0a:	d109      	bne.n	800ca20 <__libc_init_array+0x24>
 800ca0c:	4d0b      	ldr	r5, [pc, #44]	@ (800ca3c <__libc_init_array+0x40>)
 800ca0e:	4c0c      	ldr	r4, [pc, #48]	@ (800ca40 <__libc_init_array+0x44>)
 800ca10:	f001 fd68 	bl	800e4e4 <_init>
 800ca14:	1b64      	subs	r4, r4, r5
 800ca16:	10a4      	asrs	r4, r4, #2
 800ca18:	2600      	movs	r6, #0
 800ca1a:	42a6      	cmp	r6, r4
 800ca1c:	d105      	bne.n	800ca2a <__libc_init_array+0x2e>
 800ca1e:	bd70      	pop	{r4, r5, r6, pc}
 800ca20:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca24:	4798      	blx	r3
 800ca26:	3601      	adds	r6, #1
 800ca28:	e7ee      	b.n	800ca08 <__libc_init_array+0xc>
 800ca2a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca2e:	4798      	blx	r3
 800ca30:	3601      	adds	r6, #1
 800ca32:	e7f2      	b.n	800ca1a <__libc_init_array+0x1e>
 800ca34:	0800ede4 	.word	0x0800ede4
 800ca38:	0800ede4 	.word	0x0800ede4
 800ca3c:	0800ede4 	.word	0x0800ede4
 800ca40:	0800ede8 	.word	0x0800ede8

0800ca44 <__retarget_lock_init_recursive>:
 800ca44:	4770      	bx	lr

0800ca46 <__retarget_lock_acquire_recursive>:
 800ca46:	4770      	bx	lr

0800ca48 <__retarget_lock_release_recursive>:
 800ca48:	4770      	bx	lr

0800ca4a <memcpy>:
 800ca4a:	440a      	add	r2, r1
 800ca4c:	4291      	cmp	r1, r2
 800ca4e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ca52:	d100      	bne.n	800ca56 <memcpy+0xc>
 800ca54:	4770      	bx	lr
 800ca56:	b510      	push	{r4, lr}
 800ca58:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca60:	4291      	cmp	r1, r2
 800ca62:	d1f9      	bne.n	800ca58 <memcpy+0xe>
 800ca64:	bd10      	pop	{r4, pc}

0800ca66 <quorem>:
 800ca66:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6a:	6903      	ldr	r3, [r0, #16]
 800ca6c:	690c      	ldr	r4, [r1, #16]
 800ca6e:	42a3      	cmp	r3, r4
 800ca70:	4607      	mov	r7, r0
 800ca72:	db7e      	blt.n	800cb72 <quorem+0x10c>
 800ca74:	3c01      	subs	r4, #1
 800ca76:	f101 0814 	add.w	r8, r1, #20
 800ca7a:	00a3      	lsls	r3, r4, #2
 800ca7c:	f100 0514 	add.w	r5, r0, #20
 800ca80:	9300      	str	r3, [sp, #0]
 800ca82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca86:	9301      	str	r3, [sp, #4]
 800ca88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ca8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca90:	3301      	adds	r3, #1
 800ca92:	429a      	cmp	r2, r3
 800ca94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ca98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ca9c:	d32e      	bcc.n	800cafc <quorem+0x96>
 800ca9e:	f04f 0a00 	mov.w	sl, #0
 800caa2:	46c4      	mov	ip, r8
 800caa4:	46ae      	mov	lr, r5
 800caa6:	46d3      	mov	fp, sl
 800caa8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800caac:	b298      	uxth	r0, r3
 800caae:	fb06 a000 	mla	r0, r6, r0, sl
 800cab2:	0c02      	lsrs	r2, r0, #16
 800cab4:	0c1b      	lsrs	r3, r3, #16
 800cab6:	fb06 2303 	mla	r3, r6, r3, r2
 800caba:	f8de 2000 	ldr.w	r2, [lr]
 800cabe:	b280      	uxth	r0, r0
 800cac0:	b292      	uxth	r2, r2
 800cac2:	1a12      	subs	r2, r2, r0
 800cac4:	445a      	add	r2, fp
 800cac6:	f8de 0000 	ldr.w	r0, [lr]
 800caca:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cace:	b29b      	uxth	r3, r3
 800cad0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cad4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cad8:	b292      	uxth	r2, r2
 800cada:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800cade:	45e1      	cmp	r9, ip
 800cae0:	f84e 2b04 	str.w	r2, [lr], #4
 800cae4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cae8:	d2de      	bcs.n	800caa8 <quorem+0x42>
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	58eb      	ldr	r3, [r5, r3]
 800caee:	b92b      	cbnz	r3, 800cafc <quorem+0x96>
 800caf0:	9b01      	ldr	r3, [sp, #4]
 800caf2:	3b04      	subs	r3, #4
 800caf4:	429d      	cmp	r5, r3
 800caf6:	461a      	mov	r2, r3
 800caf8:	d32f      	bcc.n	800cb5a <quorem+0xf4>
 800cafa:	613c      	str	r4, [r7, #16]
 800cafc:	4638      	mov	r0, r7
 800cafe:	f001 f8c7 	bl	800dc90 <__mcmp>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	db25      	blt.n	800cb52 <quorem+0xec>
 800cb06:	4629      	mov	r1, r5
 800cb08:	2000      	movs	r0, #0
 800cb0a:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb0e:	f8d1 c000 	ldr.w	ip, [r1]
 800cb12:	fa1f fe82 	uxth.w	lr, r2
 800cb16:	fa1f f38c 	uxth.w	r3, ip
 800cb1a:	eba3 030e 	sub.w	r3, r3, lr
 800cb1e:	4403      	add	r3, r0
 800cb20:	0c12      	lsrs	r2, r2, #16
 800cb22:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cb26:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb30:	45c1      	cmp	r9, r8
 800cb32:	f841 3b04 	str.w	r3, [r1], #4
 800cb36:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cb3a:	d2e6      	bcs.n	800cb0a <quorem+0xa4>
 800cb3c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb40:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb44:	b922      	cbnz	r2, 800cb50 <quorem+0xea>
 800cb46:	3b04      	subs	r3, #4
 800cb48:	429d      	cmp	r5, r3
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	d30b      	bcc.n	800cb66 <quorem+0x100>
 800cb4e:	613c      	str	r4, [r7, #16]
 800cb50:	3601      	adds	r6, #1
 800cb52:	4630      	mov	r0, r6
 800cb54:	b003      	add	sp, #12
 800cb56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb5a:	6812      	ldr	r2, [r2, #0]
 800cb5c:	3b04      	subs	r3, #4
 800cb5e:	2a00      	cmp	r2, #0
 800cb60:	d1cb      	bne.n	800cafa <quorem+0x94>
 800cb62:	3c01      	subs	r4, #1
 800cb64:	e7c6      	b.n	800caf4 <quorem+0x8e>
 800cb66:	6812      	ldr	r2, [r2, #0]
 800cb68:	3b04      	subs	r3, #4
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	d1ef      	bne.n	800cb4e <quorem+0xe8>
 800cb6e:	3c01      	subs	r4, #1
 800cb70:	e7ea      	b.n	800cb48 <quorem+0xe2>
 800cb72:	2000      	movs	r0, #0
 800cb74:	e7ee      	b.n	800cb54 <quorem+0xee>
	...

0800cb78 <_dtoa_r>:
 800cb78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	69c7      	ldr	r7, [r0, #28]
 800cb7e:	b097      	sub	sp, #92	@ 0x5c
 800cb80:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cb84:	ec55 4b10 	vmov	r4, r5, d0
 800cb88:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cb8a:	9107      	str	r1, [sp, #28]
 800cb8c:	4681      	mov	r9, r0
 800cb8e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cb90:	9311      	str	r3, [sp, #68]	@ 0x44
 800cb92:	b97f      	cbnz	r7, 800cbb4 <_dtoa_r+0x3c>
 800cb94:	2010      	movs	r0, #16
 800cb96:	f7fe ffb3 	bl	800bb00 <malloc>
 800cb9a:	4602      	mov	r2, r0
 800cb9c:	f8c9 001c 	str.w	r0, [r9, #28]
 800cba0:	b920      	cbnz	r0, 800cbac <_dtoa_r+0x34>
 800cba2:	4ba9      	ldr	r3, [pc, #676]	@ (800ce48 <_dtoa_r+0x2d0>)
 800cba4:	21ef      	movs	r1, #239	@ 0xef
 800cba6:	48a9      	ldr	r0, [pc, #676]	@ (800ce4c <_dtoa_r+0x2d4>)
 800cba8:	f001 fbec 	bl	800e384 <__assert_func>
 800cbac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cbb0:	6007      	str	r7, [r0, #0]
 800cbb2:	60c7      	str	r7, [r0, #12]
 800cbb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cbb8:	6819      	ldr	r1, [r3, #0]
 800cbba:	b159      	cbz	r1, 800cbd4 <_dtoa_r+0x5c>
 800cbbc:	685a      	ldr	r2, [r3, #4]
 800cbbe:	604a      	str	r2, [r1, #4]
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	4093      	lsls	r3, r2
 800cbc4:	608b      	str	r3, [r1, #8]
 800cbc6:	4648      	mov	r0, r9
 800cbc8:	f000 fe30 	bl	800d82c <_Bfree>
 800cbcc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	601a      	str	r2, [r3, #0]
 800cbd4:	1e2b      	subs	r3, r5, #0
 800cbd6:	bfb9      	ittee	lt
 800cbd8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cbdc:	9305      	strlt	r3, [sp, #20]
 800cbde:	2300      	movge	r3, #0
 800cbe0:	6033      	strge	r3, [r6, #0]
 800cbe2:	9f05      	ldr	r7, [sp, #20]
 800cbe4:	4b9a      	ldr	r3, [pc, #616]	@ (800ce50 <_dtoa_r+0x2d8>)
 800cbe6:	bfbc      	itt	lt
 800cbe8:	2201      	movlt	r2, #1
 800cbea:	6032      	strlt	r2, [r6, #0]
 800cbec:	43bb      	bics	r3, r7
 800cbee:	d112      	bne.n	800cc16 <_dtoa_r+0x9e>
 800cbf0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cbf2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cbf6:	6013      	str	r3, [r2, #0]
 800cbf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cbfc:	4323      	orrs	r3, r4
 800cbfe:	f000 855a 	beq.w	800d6b6 <_dtoa_r+0xb3e>
 800cc02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc04:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ce64 <_dtoa_r+0x2ec>
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 855c 	beq.w	800d6c6 <_dtoa_r+0xb4e>
 800cc0e:	f10a 0303 	add.w	r3, sl, #3
 800cc12:	f000 bd56 	b.w	800d6c2 <_dtoa_r+0xb4a>
 800cc16:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	ec51 0b17 	vmov	r0, r1, d7
 800cc20:	2300      	movs	r3, #0
 800cc22:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cc26:	f7f3 ff5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800cc2a:	4680      	mov	r8, r0
 800cc2c:	b158      	cbz	r0, 800cc46 <_dtoa_r+0xce>
 800cc2e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cc30:	2301      	movs	r3, #1
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cc36:	b113      	cbz	r3, 800cc3e <_dtoa_r+0xc6>
 800cc38:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800cc3a:	4b86      	ldr	r3, [pc, #536]	@ (800ce54 <_dtoa_r+0x2dc>)
 800cc3c:	6013      	str	r3, [r2, #0]
 800cc3e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ce68 <_dtoa_r+0x2f0>
 800cc42:	f000 bd40 	b.w	800d6c6 <_dtoa_r+0xb4e>
 800cc46:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800cc4a:	aa14      	add	r2, sp, #80	@ 0x50
 800cc4c:	a915      	add	r1, sp, #84	@ 0x54
 800cc4e:	4648      	mov	r0, r9
 800cc50:	f001 f8ce 	bl	800ddf0 <__d2b>
 800cc54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cc58:	9002      	str	r0, [sp, #8]
 800cc5a:	2e00      	cmp	r6, #0
 800cc5c:	d078      	beq.n	800cd50 <_dtoa_r+0x1d8>
 800cc5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cc60:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800cc64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cc6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cc70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cc74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cc78:	4619      	mov	r1, r3
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	4b76      	ldr	r3, [pc, #472]	@ (800ce58 <_dtoa_r+0x2e0>)
 800cc7e:	f7f3 fb13 	bl	80002a8 <__aeabi_dsub>
 800cc82:	a36b      	add	r3, pc, #428	@ (adr r3, 800ce30 <_dtoa_r+0x2b8>)
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	f7f3 fcc6 	bl	8000618 <__aeabi_dmul>
 800cc8c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ce38 <_dtoa_r+0x2c0>)
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	f7f3 fb0b 	bl	80002ac <__adddf3>
 800cc96:	4604      	mov	r4, r0
 800cc98:	4630      	mov	r0, r6
 800cc9a:	460d      	mov	r5, r1
 800cc9c:	f7f3 fc52 	bl	8000544 <__aeabi_i2d>
 800cca0:	a367      	add	r3, pc, #412	@ (adr r3, 800ce40 <_dtoa_r+0x2c8>)
 800cca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca6:	f7f3 fcb7 	bl	8000618 <__aeabi_dmul>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4620      	mov	r0, r4
 800ccb0:	4629      	mov	r1, r5
 800ccb2:	f7f3 fafb 	bl	80002ac <__adddf3>
 800ccb6:	4604      	mov	r4, r0
 800ccb8:	460d      	mov	r5, r1
 800ccba:	f7f3 ff5d 	bl	8000b78 <__aeabi_d2iz>
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	f7f3 ff18 	bl	8000afc <__aeabi_dcmplt>
 800cccc:	b140      	cbz	r0, 800cce0 <_dtoa_r+0x168>
 800ccce:	4638      	mov	r0, r7
 800ccd0:	f7f3 fc38 	bl	8000544 <__aeabi_i2d>
 800ccd4:	4622      	mov	r2, r4
 800ccd6:	462b      	mov	r3, r5
 800ccd8:	f7f3 ff06 	bl	8000ae8 <__aeabi_dcmpeq>
 800ccdc:	b900      	cbnz	r0, 800cce0 <_dtoa_r+0x168>
 800ccde:	3f01      	subs	r7, #1
 800cce0:	2f16      	cmp	r7, #22
 800cce2:	d852      	bhi.n	800cd8a <_dtoa_r+0x212>
 800cce4:	4b5d      	ldr	r3, [pc, #372]	@ (800ce5c <_dtoa_r+0x2e4>)
 800cce6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ccf2:	f7f3 ff03 	bl	8000afc <__aeabi_dcmplt>
 800ccf6:	2800      	cmp	r0, #0
 800ccf8:	d049      	beq.n	800cd8e <_dtoa_r+0x216>
 800ccfa:	3f01      	subs	r7, #1
 800ccfc:	2300      	movs	r3, #0
 800ccfe:	9310      	str	r3, [sp, #64]	@ 0x40
 800cd00:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800cd02:	1b9b      	subs	r3, r3, r6
 800cd04:	1e5a      	subs	r2, r3, #1
 800cd06:	bf45      	ittet	mi
 800cd08:	f1c3 0301 	rsbmi	r3, r3, #1
 800cd0c:	9300      	strmi	r3, [sp, #0]
 800cd0e:	2300      	movpl	r3, #0
 800cd10:	2300      	movmi	r3, #0
 800cd12:	9206      	str	r2, [sp, #24]
 800cd14:	bf54      	ite	pl
 800cd16:	9300      	strpl	r3, [sp, #0]
 800cd18:	9306      	strmi	r3, [sp, #24]
 800cd1a:	2f00      	cmp	r7, #0
 800cd1c:	db39      	blt.n	800cd92 <_dtoa_r+0x21a>
 800cd1e:	9b06      	ldr	r3, [sp, #24]
 800cd20:	970d      	str	r7, [sp, #52]	@ 0x34
 800cd22:	443b      	add	r3, r7
 800cd24:	9306      	str	r3, [sp, #24]
 800cd26:	2300      	movs	r3, #0
 800cd28:	9308      	str	r3, [sp, #32]
 800cd2a:	9b07      	ldr	r3, [sp, #28]
 800cd2c:	2b09      	cmp	r3, #9
 800cd2e:	d863      	bhi.n	800cdf8 <_dtoa_r+0x280>
 800cd30:	2b05      	cmp	r3, #5
 800cd32:	bfc4      	itt	gt
 800cd34:	3b04      	subgt	r3, #4
 800cd36:	9307      	strgt	r3, [sp, #28]
 800cd38:	9b07      	ldr	r3, [sp, #28]
 800cd3a:	f1a3 0302 	sub.w	r3, r3, #2
 800cd3e:	bfcc      	ite	gt
 800cd40:	2400      	movgt	r4, #0
 800cd42:	2401      	movle	r4, #1
 800cd44:	2b03      	cmp	r3, #3
 800cd46:	d863      	bhi.n	800ce10 <_dtoa_r+0x298>
 800cd48:	e8df f003 	tbb	[pc, r3]
 800cd4c:	2b375452 	.word	0x2b375452
 800cd50:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800cd54:	441e      	add	r6, r3
 800cd56:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cd5a:	2b20      	cmp	r3, #32
 800cd5c:	bfc1      	itttt	gt
 800cd5e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cd62:	409f      	lslgt	r7, r3
 800cd64:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cd68:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cd6c:	bfd6      	itet	le
 800cd6e:	f1c3 0320 	rsble	r3, r3, #32
 800cd72:	ea47 0003 	orrgt.w	r0, r7, r3
 800cd76:	fa04 f003 	lslle.w	r0, r4, r3
 800cd7a:	f7f3 fbd3 	bl	8000524 <__aeabi_ui2d>
 800cd7e:	2201      	movs	r2, #1
 800cd80:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cd84:	3e01      	subs	r6, #1
 800cd86:	9212      	str	r2, [sp, #72]	@ 0x48
 800cd88:	e776      	b.n	800cc78 <_dtoa_r+0x100>
 800cd8a:	2301      	movs	r3, #1
 800cd8c:	e7b7      	b.n	800ccfe <_dtoa_r+0x186>
 800cd8e:	9010      	str	r0, [sp, #64]	@ 0x40
 800cd90:	e7b6      	b.n	800cd00 <_dtoa_r+0x188>
 800cd92:	9b00      	ldr	r3, [sp, #0]
 800cd94:	1bdb      	subs	r3, r3, r7
 800cd96:	9300      	str	r3, [sp, #0]
 800cd98:	427b      	negs	r3, r7
 800cd9a:	9308      	str	r3, [sp, #32]
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	930d      	str	r3, [sp, #52]	@ 0x34
 800cda0:	e7c3      	b.n	800cd2a <_dtoa_r+0x1b2>
 800cda2:	2301      	movs	r3, #1
 800cda4:	9309      	str	r3, [sp, #36]	@ 0x24
 800cda6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cda8:	eb07 0b03 	add.w	fp, r7, r3
 800cdac:	f10b 0301 	add.w	r3, fp, #1
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	9303      	str	r3, [sp, #12]
 800cdb4:	bfb8      	it	lt
 800cdb6:	2301      	movlt	r3, #1
 800cdb8:	e006      	b.n	800cdc8 <_dtoa_r+0x250>
 800cdba:	2301      	movs	r3, #1
 800cdbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cdbe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	dd28      	ble.n	800ce16 <_dtoa_r+0x29e>
 800cdc4:	469b      	mov	fp, r3
 800cdc6:	9303      	str	r3, [sp, #12]
 800cdc8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800cdcc:	2100      	movs	r1, #0
 800cdce:	2204      	movs	r2, #4
 800cdd0:	f102 0514 	add.w	r5, r2, #20
 800cdd4:	429d      	cmp	r5, r3
 800cdd6:	d926      	bls.n	800ce26 <_dtoa_r+0x2ae>
 800cdd8:	6041      	str	r1, [r0, #4]
 800cdda:	4648      	mov	r0, r9
 800cddc:	f000 fce6 	bl	800d7ac <_Balloc>
 800cde0:	4682      	mov	sl, r0
 800cde2:	2800      	cmp	r0, #0
 800cde4:	d142      	bne.n	800ce6c <_dtoa_r+0x2f4>
 800cde6:	4b1e      	ldr	r3, [pc, #120]	@ (800ce60 <_dtoa_r+0x2e8>)
 800cde8:	4602      	mov	r2, r0
 800cdea:	f240 11af 	movw	r1, #431	@ 0x1af
 800cdee:	e6da      	b.n	800cba6 <_dtoa_r+0x2e>
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	e7e3      	b.n	800cdbc <_dtoa_r+0x244>
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	e7d5      	b.n	800cda4 <_dtoa_r+0x22c>
 800cdf8:	2401      	movs	r4, #1
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	9307      	str	r3, [sp, #28]
 800cdfe:	9409      	str	r4, [sp, #36]	@ 0x24
 800ce00:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800ce04:	2200      	movs	r2, #0
 800ce06:	f8cd b00c 	str.w	fp, [sp, #12]
 800ce0a:	2312      	movs	r3, #18
 800ce0c:	920c      	str	r2, [sp, #48]	@ 0x30
 800ce0e:	e7db      	b.n	800cdc8 <_dtoa_r+0x250>
 800ce10:	2301      	movs	r3, #1
 800ce12:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce14:	e7f4      	b.n	800ce00 <_dtoa_r+0x288>
 800ce16:	f04f 0b01 	mov.w	fp, #1
 800ce1a:	f8cd b00c 	str.w	fp, [sp, #12]
 800ce1e:	465b      	mov	r3, fp
 800ce20:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800ce24:	e7d0      	b.n	800cdc8 <_dtoa_r+0x250>
 800ce26:	3101      	adds	r1, #1
 800ce28:	0052      	lsls	r2, r2, #1
 800ce2a:	e7d1      	b.n	800cdd0 <_dtoa_r+0x258>
 800ce2c:	f3af 8000 	nop.w
 800ce30:	636f4361 	.word	0x636f4361
 800ce34:	3fd287a7 	.word	0x3fd287a7
 800ce38:	8b60c8b3 	.word	0x8b60c8b3
 800ce3c:	3fc68a28 	.word	0x3fc68a28
 800ce40:	509f79fb 	.word	0x509f79fb
 800ce44:	3fd34413 	.word	0x3fd34413
 800ce48:	0800eaa9 	.word	0x0800eaa9
 800ce4c:	0800eac0 	.word	0x0800eac0
 800ce50:	7ff00000 	.word	0x7ff00000
 800ce54:	0800ea79 	.word	0x0800ea79
 800ce58:	3ff80000 	.word	0x3ff80000
 800ce5c:	0800ec10 	.word	0x0800ec10
 800ce60:	0800eb18 	.word	0x0800eb18
 800ce64:	0800eaa5 	.word	0x0800eaa5
 800ce68:	0800ea78 	.word	0x0800ea78
 800ce6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ce70:	6018      	str	r0, [r3, #0]
 800ce72:	9b03      	ldr	r3, [sp, #12]
 800ce74:	2b0e      	cmp	r3, #14
 800ce76:	f200 80a1 	bhi.w	800cfbc <_dtoa_r+0x444>
 800ce7a:	2c00      	cmp	r4, #0
 800ce7c:	f000 809e 	beq.w	800cfbc <_dtoa_r+0x444>
 800ce80:	2f00      	cmp	r7, #0
 800ce82:	dd33      	ble.n	800ceec <_dtoa_r+0x374>
 800ce84:	4b9c      	ldr	r3, [pc, #624]	@ (800d0f8 <_dtoa_r+0x580>)
 800ce86:	f007 020f 	and.w	r2, r7, #15
 800ce8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce8e:	ed93 7b00 	vldr	d7, [r3]
 800ce92:	05f8      	lsls	r0, r7, #23
 800ce94:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ce98:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ce9c:	d516      	bpl.n	800cecc <_dtoa_r+0x354>
 800ce9e:	4b97      	ldr	r3, [pc, #604]	@ (800d0fc <_dtoa_r+0x584>)
 800cea0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cea4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cea8:	f7f3 fce0 	bl	800086c <__aeabi_ddiv>
 800ceac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ceb0:	f004 040f 	and.w	r4, r4, #15
 800ceb4:	2603      	movs	r6, #3
 800ceb6:	4d91      	ldr	r5, [pc, #580]	@ (800d0fc <_dtoa_r+0x584>)
 800ceb8:	b954      	cbnz	r4, 800ced0 <_dtoa_r+0x358>
 800ceba:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800cebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cec2:	f7f3 fcd3 	bl	800086c <__aeabi_ddiv>
 800cec6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ceca:	e028      	b.n	800cf1e <_dtoa_r+0x3a6>
 800cecc:	2602      	movs	r6, #2
 800cece:	e7f2      	b.n	800ceb6 <_dtoa_r+0x33e>
 800ced0:	07e1      	lsls	r1, r4, #31
 800ced2:	d508      	bpl.n	800cee6 <_dtoa_r+0x36e>
 800ced4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ced8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800cedc:	f7f3 fb9c 	bl	8000618 <__aeabi_dmul>
 800cee0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800cee4:	3601      	adds	r6, #1
 800cee6:	1064      	asrs	r4, r4, #1
 800cee8:	3508      	adds	r5, #8
 800ceea:	e7e5      	b.n	800ceb8 <_dtoa_r+0x340>
 800ceec:	f000 80af 	beq.w	800d04e <_dtoa_r+0x4d6>
 800cef0:	427c      	negs	r4, r7
 800cef2:	4b81      	ldr	r3, [pc, #516]	@ (800d0f8 <_dtoa_r+0x580>)
 800cef4:	4d81      	ldr	r5, [pc, #516]	@ (800d0fc <_dtoa_r+0x584>)
 800cef6:	f004 020f 	and.w	r2, r4, #15
 800cefa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf02:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800cf06:	f7f3 fb87 	bl	8000618 <__aeabi_dmul>
 800cf0a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf0e:	1124      	asrs	r4, r4, #4
 800cf10:	2300      	movs	r3, #0
 800cf12:	2602      	movs	r6, #2
 800cf14:	2c00      	cmp	r4, #0
 800cf16:	f040 808f 	bne.w	800d038 <_dtoa_r+0x4c0>
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d1d3      	bne.n	800cec6 <_dtoa_r+0x34e>
 800cf1e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800cf20:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	f000 8094 	beq.w	800d052 <_dtoa_r+0x4da>
 800cf2a:	4b75      	ldr	r3, [pc, #468]	@ (800d100 <_dtoa_r+0x588>)
 800cf2c:	2200      	movs	r2, #0
 800cf2e:	4620      	mov	r0, r4
 800cf30:	4629      	mov	r1, r5
 800cf32:	f7f3 fde3 	bl	8000afc <__aeabi_dcmplt>
 800cf36:	2800      	cmp	r0, #0
 800cf38:	f000 808b 	beq.w	800d052 <_dtoa_r+0x4da>
 800cf3c:	9b03      	ldr	r3, [sp, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	f000 8087 	beq.w	800d052 <_dtoa_r+0x4da>
 800cf44:	f1bb 0f00 	cmp.w	fp, #0
 800cf48:	dd34      	ble.n	800cfb4 <_dtoa_r+0x43c>
 800cf4a:	4620      	mov	r0, r4
 800cf4c:	4b6d      	ldr	r3, [pc, #436]	@ (800d104 <_dtoa_r+0x58c>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	4629      	mov	r1, r5
 800cf52:	f7f3 fb61 	bl	8000618 <__aeabi_dmul>
 800cf56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cf5a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800cf5e:	3601      	adds	r6, #1
 800cf60:	465c      	mov	r4, fp
 800cf62:	4630      	mov	r0, r6
 800cf64:	f7f3 faee 	bl	8000544 <__aeabi_i2d>
 800cf68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf6c:	f7f3 fb54 	bl	8000618 <__aeabi_dmul>
 800cf70:	4b65      	ldr	r3, [pc, #404]	@ (800d108 <_dtoa_r+0x590>)
 800cf72:	2200      	movs	r2, #0
 800cf74:	f7f3 f99a 	bl	80002ac <__adddf3>
 800cf78:	4605      	mov	r5, r0
 800cf7a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cf7e:	2c00      	cmp	r4, #0
 800cf80:	d16a      	bne.n	800d058 <_dtoa_r+0x4e0>
 800cf82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cf86:	4b61      	ldr	r3, [pc, #388]	@ (800d10c <_dtoa_r+0x594>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f7f3 f98d 	bl	80002a8 <__aeabi_dsub>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	460b      	mov	r3, r1
 800cf92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800cf96:	462a      	mov	r2, r5
 800cf98:	4633      	mov	r3, r6
 800cf9a:	f7f3 fdcd 	bl	8000b38 <__aeabi_dcmpgt>
 800cf9e:	2800      	cmp	r0, #0
 800cfa0:	f040 8298 	bne.w	800d4d4 <_dtoa_r+0x95c>
 800cfa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cfa8:	462a      	mov	r2, r5
 800cfaa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cfae:	f7f3 fda5 	bl	8000afc <__aeabi_dcmplt>
 800cfb2:	bb38      	cbnz	r0, 800d004 <_dtoa_r+0x48c>
 800cfb4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800cfb8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800cfbc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	f2c0 8157 	blt.w	800d272 <_dtoa_r+0x6fa>
 800cfc4:	2f0e      	cmp	r7, #14
 800cfc6:	f300 8154 	bgt.w	800d272 <_dtoa_r+0x6fa>
 800cfca:	4b4b      	ldr	r3, [pc, #300]	@ (800d0f8 <_dtoa_r+0x580>)
 800cfcc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cfd0:	ed93 7b00 	vldr	d7, [r3]
 800cfd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	ed8d 7b00 	vstr	d7, [sp]
 800cfdc:	f280 80e5 	bge.w	800d1aa <_dtoa_r+0x632>
 800cfe0:	9b03      	ldr	r3, [sp, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	f300 80e1 	bgt.w	800d1aa <_dtoa_r+0x632>
 800cfe8:	d10c      	bne.n	800d004 <_dtoa_r+0x48c>
 800cfea:	4b48      	ldr	r3, [pc, #288]	@ (800d10c <_dtoa_r+0x594>)
 800cfec:	2200      	movs	r2, #0
 800cfee:	ec51 0b17 	vmov	r0, r1, d7
 800cff2:	f7f3 fb11 	bl	8000618 <__aeabi_dmul>
 800cff6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cffa:	f7f3 fd93 	bl	8000b24 <__aeabi_dcmpge>
 800cffe:	2800      	cmp	r0, #0
 800d000:	f000 8266 	beq.w	800d4d0 <_dtoa_r+0x958>
 800d004:	2400      	movs	r4, #0
 800d006:	4625      	mov	r5, r4
 800d008:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d00a:	4656      	mov	r6, sl
 800d00c:	ea6f 0803 	mvn.w	r8, r3
 800d010:	2700      	movs	r7, #0
 800d012:	4621      	mov	r1, r4
 800d014:	4648      	mov	r0, r9
 800d016:	f000 fc09 	bl	800d82c <_Bfree>
 800d01a:	2d00      	cmp	r5, #0
 800d01c:	f000 80bd 	beq.w	800d19a <_dtoa_r+0x622>
 800d020:	b12f      	cbz	r7, 800d02e <_dtoa_r+0x4b6>
 800d022:	42af      	cmp	r7, r5
 800d024:	d003      	beq.n	800d02e <_dtoa_r+0x4b6>
 800d026:	4639      	mov	r1, r7
 800d028:	4648      	mov	r0, r9
 800d02a:	f000 fbff 	bl	800d82c <_Bfree>
 800d02e:	4629      	mov	r1, r5
 800d030:	4648      	mov	r0, r9
 800d032:	f000 fbfb 	bl	800d82c <_Bfree>
 800d036:	e0b0      	b.n	800d19a <_dtoa_r+0x622>
 800d038:	07e2      	lsls	r2, r4, #31
 800d03a:	d505      	bpl.n	800d048 <_dtoa_r+0x4d0>
 800d03c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d040:	f7f3 faea 	bl	8000618 <__aeabi_dmul>
 800d044:	3601      	adds	r6, #1
 800d046:	2301      	movs	r3, #1
 800d048:	1064      	asrs	r4, r4, #1
 800d04a:	3508      	adds	r5, #8
 800d04c:	e762      	b.n	800cf14 <_dtoa_r+0x39c>
 800d04e:	2602      	movs	r6, #2
 800d050:	e765      	b.n	800cf1e <_dtoa_r+0x3a6>
 800d052:	9c03      	ldr	r4, [sp, #12]
 800d054:	46b8      	mov	r8, r7
 800d056:	e784      	b.n	800cf62 <_dtoa_r+0x3ea>
 800d058:	4b27      	ldr	r3, [pc, #156]	@ (800d0f8 <_dtoa_r+0x580>)
 800d05a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d05c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d060:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d064:	4454      	add	r4, sl
 800d066:	2900      	cmp	r1, #0
 800d068:	d054      	beq.n	800d114 <_dtoa_r+0x59c>
 800d06a:	4929      	ldr	r1, [pc, #164]	@ (800d110 <_dtoa_r+0x598>)
 800d06c:	2000      	movs	r0, #0
 800d06e:	f7f3 fbfd 	bl	800086c <__aeabi_ddiv>
 800d072:	4633      	mov	r3, r6
 800d074:	462a      	mov	r2, r5
 800d076:	f7f3 f917 	bl	80002a8 <__aeabi_dsub>
 800d07a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d07e:	4656      	mov	r6, sl
 800d080:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d084:	f7f3 fd78 	bl	8000b78 <__aeabi_d2iz>
 800d088:	4605      	mov	r5, r0
 800d08a:	f7f3 fa5b 	bl	8000544 <__aeabi_i2d>
 800d08e:	4602      	mov	r2, r0
 800d090:	460b      	mov	r3, r1
 800d092:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d096:	f7f3 f907 	bl	80002a8 <__aeabi_dsub>
 800d09a:	3530      	adds	r5, #48	@ 0x30
 800d09c:	4602      	mov	r2, r0
 800d09e:	460b      	mov	r3, r1
 800d0a0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d0a4:	f806 5b01 	strb.w	r5, [r6], #1
 800d0a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d0ac:	f7f3 fd26 	bl	8000afc <__aeabi_dcmplt>
 800d0b0:	2800      	cmp	r0, #0
 800d0b2:	d172      	bne.n	800d19a <_dtoa_r+0x622>
 800d0b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0b8:	4911      	ldr	r1, [pc, #68]	@ (800d100 <_dtoa_r+0x588>)
 800d0ba:	2000      	movs	r0, #0
 800d0bc:	f7f3 f8f4 	bl	80002a8 <__aeabi_dsub>
 800d0c0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d0c4:	f7f3 fd1a 	bl	8000afc <__aeabi_dcmplt>
 800d0c8:	2800      	cmp	r0, #0
 800d0ca:	f040 80b4 	bne.w	800d236 <_dtoa_r+0x6be>
 800d0ce:	42a6      	cmp	r6, r4
 800d0d0:	f43f af70 	beq.w	800cfb4 <_dtoa_r+0x43c>
 800d0d4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d0d8:	4b0a      	ldr	r3, [pc, #40]	@ (800d104 <_dtoa_r+0x58c>)
 800d0da:	2200      	movs	r2, #0
 800d0dc:	f7f3 fa9c 	bl	8000618 <__aeabi_dmul>
 800d0e0:	4b08      	ldr	r3, [pc, #32]	@ (800d104 <_dtoa_r+0x58c>)
 800d0e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d0ec:	f7f3 fa94 	bl	8000618 <__aeabi_dmul>
 800d0f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d0f4:	e7c4      	b.n	800d080 <_dtoa_r+0x508>
 800d0f6:	bf00      	nop
 800d0f8:	0800ec10 	.word	0x0800ec10
 800d0fc:	0800ebe8 	.word	0x0800ebe8
 800d100:	3ff00000 	.word	0x3ff00000
 800d104:	40240000 	.word	0x40240000
 800d108:	401c0000 	.word	0x401c0000
 800d10c:	40140000 	.word	0x40140000
 800d110:	3fe00000 	.word	0x3fe00000
 800d114:	4631      	mov	r1, r6
 800d116:	4628      	mov	r0, r5
 800d118:	f7f3 fa7e 	bl	8000618 <__aeabi_dmul>
 800d11c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d120:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d122:	4656      	mov	r6, sl
 800d124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d128:	f7f3 fd26 	bl	8000b78 <__aeabi_d2iz>
 800d12c:	4605      	mov	r5, r0
 800d12e:	f7f3 fa09 	bl	8000544 <__aeabi_i2d>
 800d132:	4602      	mov	r2, r0
 800d134:	460b      	mov	r3, r1
 800d136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d13a:	f7f3 f8b5 	bl	80002a8 <__aeabi_dsub>
 800d13e:	3530      	adds	r5, #48	@ 0x30
 800d140:	f806 5b01 	strb.w	r5, [r6], #1
 800d144:	4602      	mov	r2, r0
 800d146:	460b      	mov	r3, r1
 800d148:	42a6      	cmp	r6, r4
 800d14a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d14e:	f04f 0200 	mov.w	r2, #0
 800d152:	d124      	bne.n	800d19e <_dtoa_r+0x626>
 800d154:	4baf      	ldr	r3, [pc, #700]	@ (800d414 <_dtoa_r+0x89c>)
 800d156:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d15a:	f7f3 f8a7 	bl	80002ac <__adddf3>
 800d15e:	4602      	mov	r2, r0
 800d160:	460b      	mov	r3, r1
 800d162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d166:	f7f3 fce7 	bl	8000b38 <__aeabi_dcmpgt>
 800d16a:	2800      	cmp	r0, #0
 800d16c:	d163      	bne.n	800d236 <_dtoa_r+0x6be>
 800d16e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d172:	49a8      	ldr	r1, [pc, #672]	@ (800d414 <_dtoa_r+0x89c>)
 800d174:	2000      	movs	r0, #0
 800d176:	f7f3 f897 	bl	80002a8 <__aeabi_dsub>
 800d17a:	4602      	mov	r2, r0
 800d17c:	460b      	mov	r3, r1
 800d17e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d182:	f7f3 fcbb 	bl	8000afc <__aeabi_dcmplt>
 800d186:	2800      	cmp	r0, #0
 800d188:	f43f af14 	beq.w	800cfb4 <_dtoa_r+0x43c>
 800d18c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d18e:	1e73      	subs	r3, r6, #1
 800d190:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d192:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d196:	2b30      	cmp	r3, #48	@ 0x30
 800d198:	d0f8      	beq.n	800d18c <_dtoa_r+0x614>
 800d19a:	4647      	mov	r7, r8
 800d19c:	e03b      	b.n	800d216 <_dtoa_r+0x69e>
 800d19e:	4b9e      	ldr	r3, [pc, #632]	@ (800d418 <_dtoa_r+0x8a0>)
 800d1a0:	f7f3 fa3a 	bl	8000618 <__aeabi_dmul>
 800d1a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d1a8:	e7bc      	b.n	800d124 <_dtoa_r+0x5ac>
 800d1aa:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d1ae:	4656      	mov	r6, sl
 800d1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1b4:	4620      	mov	r0, r4
 800d1b6:	4629      	mov	r1, r5
 800d1b8:	f7f3 fb58 	bl	800086c <__aeabi_ddiv>
 800d1bc:	f7f3 fcdc 	bl	8000b78 <__aeabi_d2iz>
 800d1c0:	4680      	mov	r8, r0
 800d1c2:	f7f3 f9bf 	bl	8000544 <__aeabi_i2d>
 800d1c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1ca:	f7f3 fa25 	bl	8000618 <__aeabi_dmul>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	4629      	mov	r1, r5
 800d1d6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d1da:	f7f3 f865 	bl	80002a8 <__aeabi_dsub>
 800d1de:	f806 4b01 	strb.w	r4, [r6], #1
 800d1e2:	9d03      	ldr	r5, [sp, #12]
 800d1e4:	eba6 040a 	sub.w	r4, r6, sl
 800d1e8:	42a5      	cmp	r5, r4
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	d133      	bne.n	800d258 <_dtoa_r+0x6e0>
 800d1f0:	f7f3 f85c 	bl	80002ac <__adddf3>
 800d1f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d1f8:	4604      	mov	r4, r0
 800d1fa:	460d      	mov	r5, r1
 800d1fc:	f7f3 fc9c 	bl	8000b38 <__aeabi_dcmpgt>
 800d200:	b9c0      	cbnz	r0, 800d234 <_dtoa_r+0x6bc>
 800d202:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d206:	4620      	mov	r0, r4
 800d208:	4629      	mov	r1, r5
 800d20a:	f7f3 fc6d 	bl	8000ae8 <__aeabi_dcmpeq>
 800d20e:	b110      	cbz	r0, 800d216 <_dtoa_r+0x69e>
 800d210:	f018 0f01 	tst.w	r8, #1
 800d214:	d10e      	bne.n	800d234 <_dtoa_r+0x6bc>
 800d216:	9902      	ldr	r1, [sp, #8]
 800d218:	4648      	mov	r0, r9
 800d21a:	f000 fb07 	bl	800d82c <_Bfree>
 800d21e:	2300      	movs	r3, #0
 800d220:	7033      	strb	r3, [r6, #0]
 800d222:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d224:	3701      	adds	r7, #1
 800d226:	601f      	str	r7, [r3, #0]
 800d228:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	f000 824b 	beq.w	800d6c6 <_dtoa_r+0xb4e>
 800d230:	601e      	str	r6, [r3, #0]
 800d232:	e248      	b.n	800d6c6 <_dtoa_r+0xb4e>
 800d234:	46b8      	mov	r8, r7
 800d236:	4633      	mov	r3, r6
 800d238:	461e      	mov	r6, r3
 800d23a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d23e:	2a39      	cmp	r2, #57	@ 0x39
 800d240:	d106      	bne.n	800d250 <_dtoa_r+0x6d8>
 800d242:	459a      	cmp	sl, r3
 800d244:	d1f8      	bne.n	800d238 <_dtoa_r+0x6c0>
 800d246:	2230      	movs	r2, #48	@ 0x30
 800d248:	f108 0801 	add.w	r8, r8, #1
 800d24c:	f88a 2000 	strb.w	r2, [sl]
 800d250:	781a      	ldrb	r2, [r3, #0]
 800d252:	3201      	adds	r2, #1
 800d254:	701a      	strb	r2, [r3, #0]
 800d256:	e7a0      	b.n	800d19a <_dtoa_r+0x622>
 800d258:	4b6f      	ldr	r3, [pc, #444]	@ (800d418 <_dtoa_r+0x8a0>)
 800d25a:	2200      	movs	r2, #0
 800d25c:	f7f3 f9dc 	bl	8000618 <__aeabi_dmul>
 800d260:	2200      	movs	r2, #0
 800d262:	2300      	movs	r3, #0
 800d264:	4604      	mov	r4, r0
 800d266:	460d      	mov	r5, r1
 800d268:	f7f3 fc3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800d26c:	2800      	cmp	r0, #0
 800d26e:	d09f      	beq.n	800d1b0 <_dtoa_r+0x638>
 800d270:	e7d1      	b.n	800d216 <_dtoa_r+0x69e>
 800d272:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d274:	2a00      	cmp	r2, #0
 800d276:	f000 80ea 	beq.w	800d44e <_dtoa_r+0x8d6>
 800d27a:	9a07      	ldr	r2, [sp, #28]
 800d27c:	2a01      	cmp	r2, #1
 800d27e:	f300 80cd 	bgt.w	800d41c <_dtoa_r+0x8a4>
 800d282:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d284:	2a00      	cmp	r2, #0
 800d286:	f000 80c1 	beq.w	800d40c <_dtoa_r+0x894>
 800d28a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d28e:	9c08      	ldr	r4, [sp, #32]
 800d290:	9e00      	ldr	r6, [sp, #0]
 800d292:	9a00      	ldr	r2, [sp, #0]
 800d294:	441a      	add	r2, r3
 800d296:	9200      	str	r2, [sp, #0]
 800d298:	9a06      	ldr	r2, [sp, #24]
 800d29a:	2101      	movs	r1, #1
 800d29c:	441a      	add	r2, r3
 800d29e:	4648      	mov	r0, r9
 800d2a0:	9206      	str	r2, [sp, #24]
 800d2a2:	f000 fb77 	bl	800d994 <__i2b>
 800d2a6:	4605      	mov	r5, r0
 800d2a8:	b166      	cbz	r6, 800d2c4 <_dtoa_r+0x74c>
 800d2aa:	9b06      	ldr	r3, [sp, #24]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	dd09      	ble.n	800d2c4 <_dtoa_r+0x74c>
 800d2b0:	42b3      	cmp	r3, r6
 800d2b2:	9a00      	ldr	r2, [sp, #0]
 800d2b4:	bfa8      	it	ge
 800d2b6:	4633      	movge	r3, r6
 800d2b8:	1ad2      	subs	r2, r2, r3
 800d2ba:	9200      	str	r2, [sp, #0]
 800d2bc:	9a06      	ldr	r2, [sp, #24]
 800d2be:	1af6      	subs	r6, r6, r3
 800d2c0:	1ad3      	subs	r3, r2, r3
 800d2c2:	9306      	str	r3, [sp, #24]
 800d2c4:	9b08      	ldr	r3, [sp, #32]
 800d2c6:	b30b      	cbz	r3, 800d30c <_dtoa_r+0x794>
 800d2c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	f000 80c6 	beq.w	800d45c <_dtoa_r+0x8e4>
 800d2d0:	2c00      	cmp	r4, #0
 800d2d2:	f000 80c0 	beq.w	800d456 <_dtoa_r+0x8de>
 800d2d6:	4629      	mov	r1, r5
 800d2d8:	4622      	mov	r2, r4
 800d2da:	4648      	mov	r0, r9
 800d2dc:	f000 fc12 	bl	800db04 <__pow5mult>
 800d2e0:	9a02      	ldr	r2, [sp, #8]
 800d2e2:	4601      	mov	r1, r0
 800d2e4:	4605      	mov	r5, r0
 800d2e6:	4648      	mov	r0, r9
 800d2e8:	f000 fb6a 	bl	800d9c0 <__multiply>
 800d2ec:	9902      	ldr	r1, [sp, #8]
 800d2ee:	4680      	mov	r8, r0
 800d2f0:	4648      	mov	r0, r9
 800d2f2:	f000 fa9b 	bl	800d82c <_Bfree>
 800d2f6:	9b08      	ldr	r3, [sp, #32]
 800d2f8:	1b1b      	subs	r3, r3, r4
 800d2fa:	9308      	str	r3, [sp, #32]
 800d2fc:	f000 80b1 	beq.w	800d462 <_dtoa_r+0x8ea>
 800d300:	9a08      	ldr	r2, [sp, #32]
 800d302:	4641      	mov	r1, r8
 800d304:	4648      	mov	r0, r9
 800d306:	f000 fbfd 	bl	800db04 <__pow5mult>
 800d30a:	9002      	str	r0, [sp, #8]
 800d30c:	2101      	movs	r1, #1
 800d30e:	4648      	mov	r0, r9
 800d310:	f000 fb40 	bl	800d994 <__i2b>
 800d314:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d316:	4604      	mov	r4, r0
 800d318:	2b00      	cmp	r3, #0
 800d31a:	f000 81d8 	beq.w	800d6ce <_dtoa_r+0xb56>
 800d31e:	461a      	mov	r2, r3
 800d320:	4601      	mov	r1, r0
 800d322:	4648      	mov	r0, r9
 800d324:	f000 fbee 	bl	800db04 <__pow5mult>
 800d328:	9b07      	ldr	r3, [sp, #28]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	4604      	mov	r4, r0
 800d32e:	f300 809f 	bgt.w	800d470 <_dtoa_r+0x8f8>
 800d332:	9b04      	ldr	r3, [sp, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	f040 8097 	bne.w	800d468 <_dtoa_r+0x8f0>
 800d33a:	9b05      	ldr	r3, [sp, #20]
 800d33c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d340:	2b00      	cmp	r3, #0
 800d342:	f040 8093 	bne.w	800d46c <_dtoa_r+0x8f4>
 800d346:	9b05      	ldr	r3, [sp, #20]
 800d348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d34c:	0d1b      	lsrs	r3, r3, #20
 800d34e:	051b      	lsls	r3, r3, #20
 800d350:	b133      	cbz	r3, 800d360 <_dtoa_r+0x7e8>
 800d352:	9b00      	ldr	r3, [sp, #0]
 800d354:	3301      	adds	r3, #1
 800d356:	9300      	str	r3, [sp, #0]
 800d358:	9b06      	ldr	r3, [sp, #24]
 800d35a:	3301      	adds	r3, #1
 800d35c:	9306      	str	r3, [sp, #24]
 800d35e:	2301      	movs	r3, #1
 800d360:	9308      	str	r3, [sp, #32]
 800d362:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d364:	2b00      	cmp	r3, #0
 800d366:	f000 81b8 	beq.w	800d6da <_dtoa_r+0xb62>
 800d36a:	6923      	ldr	r3, [r4, #16]
 800d36c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d370:	6918      	ldr	r0, [r3, #16]
 800d372:	f000 fac3 	bl	800d8fc <__hi0bits>
 800d376:	f1c0 0020 	rsb	r0, r0, #32
 800d37a:	9b06      	ldr	r3, [sp, #24]
 800d37c:	4418      	add	r0, r3
 800d37e:	f010 001f 	ands.w	r0, r0, #31
 800d382:	f000 8082 	beq.w	800d48a <_dtoa_r+0x912>
 800d386:	f1c0 0320 	rsb	r3, r0, #32
 800d38a:	2b04      	cmp	r3, #4
 800d38c:	dd73      	ble.n	800d476 <_dtoa_r+0x8fe>
 800d38e:	9b00      	ldr	r3, [sp, #0]
 800d390:	f1c0 001c 	rsb	r0, r0, #28
 800d394:	4403      	add	r3, r0
 800d396:	9300      	str	r3, [sp, #0]
 800d398:	9b06      	ldr	r3, [sp, #24]
 800d39a:	4403      	add	r3, r0
 800d39c:	4406      	add	r6, r0
 800d39e:	9306      	str	r3, [sp, #24]
 800d3a0:	9b00      	ldr	r3, [sp, #0]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	dd05      	ble.n	800d3b2 <_dtoa_r+0x83a>
 800d3a6:	9902      	ldr	r1, [sp, #8]
 800d3a8:	461a      	mov	r2, r3
 800d3aa:	4648      	mov	r0, r9
 800d3ac:	f000 fc04 	bl	800dbb8 <__lshift>
 800d3b0:	9002      	str	r0, [sp, #8]
 800d3b2:	9b06      	ldr	r3, [sp, #24]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	dd05      	ble.n	800d3c4 <_dtoa_r+0x84c>
 800d3b8:	4621      	mov	r1, r4
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	4648      	mov	r0, r9
 800d3be:	f000 fbfb 	bl	800dbb8 <__lshift>
 800d3c2:	4604      	mov	r4, r0
 800d3c4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d061      	beq.n	800d48e <_dtoa_r+0x916>
 800d3ca:	9802      	ldr	r0, [sp, #8]
 800d3cc:	4621      	mov	r1, r4
 800d3ce:	f000 fc5f 	bl	800dc90 <__mcmp>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	da5b      	bge.n	800d48e <_dtoa_r+0x916>
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	9902      	ldr	r1, [sp, #8]
 800d3da:	220a      	movs	r2, #10
 800d3dc:	4648      	mov	r0, r9
 800d3de:	f000 fa47 	bl	800d870 <__multadd>
 800d3e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d3e4:	9002      	str	r0, [sp, #8]
 800d3e6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	f000 8177 	beq.w	800d6de <_dtoa_r+0xb66>
 800d3f0:	4629      	mov	r1, r5
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	220a      	movs	r2, #10
 800d3f6:	4648      	mov	r0, r9
 800d3f8:	f000 fa3a 	bl	800d870 <__multadd>
 800d3fc:	f1bb 0f00 	cmp.w	fp, #0
 800d400:	4605      	mov	r5, r0
 800d402:	dc6f      	bgt.n	800d4e4 <_dtoa_r+0x96c>
 800d404:	9b07      	ldr	r3, [sp, #28]
 800d406:	2b02      	cmp	r3, #2
 800d408:	dc49      	bgt.n	800d49e <_dtoa_r+0x926>
 800d40a:	e06b      	b.n	800d4e4 <_dtoa_r+0x96c>
 800d40c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d40e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d412:	e73c      	b.n	800d28e <_dtoa_r+0x716>
 800d414:	3fe00000 	.word	0x3fe00000
 800d418:	40240000 	.word	0x40240000
 800d41c:	9b03      	ldr	r3, [sp, #12]
 800d41e:	1e5c      	subs	r4, r3, #1
 800d420:	9b08      	ldr	r3, [sp, #32]
 800d422:	42a3      	cmp	r3, r4
 800d424:	db09      	blt.n	800d43a <_dtoa_r+0x8c2>
 800d426:	1b1c      	subs	r4, r3, r4
 800d428:	9b03      	ldr	r3, [sp, #12]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	f6bf af30 	bge.w	800d290 <_dtoa_r+0x718>
 800d430:	9b00      	ldr	r3, [sp, #0]
 800d432:	9a03      	ldr	r2, [sp, #12]
 800d434:	1a9e      	subs	r6, r3, r2
 800d436:	2300      	movs	r3, #0
 800d438:	e72b      	b.n	800d292 <_dtoa_r+0x71a>
 800d43a:	9b08      	ldr	r3, [sp, #32]
 800d43c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d43e:	9408      	str	r4, [sp, #32]
 800d440:	1ae3      	subs	r3, r4, r3
 800d442:	441a      	add	r2, r3
 800d444:	9e00      	ldr	r6, [sp, #0]
 800d446:	9b03      	ldr	r3, [sp, #12]
 800d448:	920d      	str	r2, [sp, #52]	@ 0x34
 800d44a:	2400      	movs	r4, #0
 800d44c:	e721      	b.n	800d292 <_dtoa_r+0x71a>
 800d44e:	9c08      	ldr	r4, [sp, #32]
 800d450:	9e00      	ldr	r6, [sp, #0]
 800d452:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d454:	e728      	b.n	800d2a8 <_dtoa_r+0x730>
 800d456:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d45a:	e751      	b.n	800d300 <_dtoa_r+0x788>
 800d45c:	9a08      	ldr	r2, [sp, #32]
 800d45e:	9902      	ldr	r1, [sp, #8]
 800d460:	e750      	b.n	800d304 <_dtoa_r+0x78c>
 800d462:	f8cd 8008 	str.w	r8, [sp, #8]
 800d466:	e751      	b.n	800d30c <_dtoa_r+0x794>
 800d468:	2300      	movs	r3, #0
 800d46a:	e779      	b.n	800d360 <_dtoa_r+0x7e8>
 800d46c:	9b04      	ldr	r3, [sp, #16]
 800d46e:	e777      	b.n	800d360 <_dtoa_r+0x7e8>
 800d470:	2300      	movs	r3, #0
 800d472:	9308      	str	r3, [sp, #32]
 800d474:	e779      	b.n	800d36a <_dtoa_r+0x7f2>
 800d476:	d093      	beq.n	800d3a0 <_dtoa_r+0x828>
 800d478:	9a00      	ldr	r2, [sp, #0]
 800d47a:	331c      	adds	r3, #28
 800d47c:	441a      	add	r2, r3
 800d47e:	9200      	str	r2, [sp, #0]
 800d480:	9a06      	ldr	r2, [sp, #24]
 800d482:	441a      	add	r2, r3
 800d484:	441e      	add	r6, r3
 800d486:	9206      	str	r2, [sp, #24]
 800d488:	e78a      	b.n	800d3a0 <_dtoa_r+0x828>
 800d48a:	4603      	mov	r3, r0
 800d48c:	e7f4      	b.n	800d478 <_dtoa_r+0x900>
 800d48e:	9b03      	ldr	r3, [sp, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	46b8      	mov	r8, r7
 800d494:	dc20      	bgt.n	800d4d8 <_dtoa_r+0x960>
 800d496:	469b      	mov	fp, r3
 800d498:	9b07      	ldr	r3, [sp, #28]
 800d49a:	2b02      	cmp	r3, #2
 800d49c:	dd1e      	ble.n	800d4dc <_dtoa_r+0x964>
 800d49e:	f1bb 0f00 	cmp.w	fp, #0
 800d4a2:	f47f adb1 	bne.w	800d008 <_dtoa_r+0x490>
 800d4a6:	4621      	mov	r1, r4
 800d4a8:	465b      	mov	r3, fp
 800d4aa:	2205      	movs	r2, #5
 800d4ac:	4648      	mov	r0, r9
 800d4ae:	f000 f9df 	bl	800d870 <__multadd>
 800d4b2:	4601      	mov	r1, r0
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	9802      	ldr	r0, [sp, #8]
 800d4b8:	f000 fbea 	bl	800dc90 <__mcmp>
 800d4bc:	2800      	cmp	r0, #0
 800d4be:	f77f ada3 	ble.w	800d008 <_dtoa_r+0x490>
 800d4c2:	4656      	mov	r6, sl
 800d4c4:	2331      	movs	r3, #49	@ 0x31
 800d4c6:	f806 3b01 	strb.w	r3, [r6], #1
 800d4ca:	f108 0801 	add.w	r8, r8, #1
 800d4ce:	e59f      	b.n	800d010 <_dtoa_r+0x498>
 800d4d0:	9c03      	ldr	r4, [sp, #12]
 800d4d2:	46b8      	mov	r8, r7
 800d4d4:	4625      	mov	r5, r4
 800d4d6:	e7f4      	b.n	800d4c2 <_dtoa_r+0x94a>
 800d4d8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d4dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	f000 8101 	beq.w	800d6e6 <_dtoa_r+0xb6e>
 800d4e4:	2e00      	cmp	r6, #0
 800d4e6:	dd05      	ble.n	800d4f4 <_dtoa_r+0x97c>
 800d4e8:	4629      	mov	r1, r5
 800d4ea:	4632      	mov	r2, r6
 800d4ec:	4648      	mov	r0, r9
 800d4ee:	f000 fb63 	bl	800dbb8 <__lshift>
 800d4f2:	4605      	mov	r5, r0
 800d4f4:	9b08      	ldr	r3, [sp, #32]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d05c      	beq.n	800d5b4 <_dtoa_r+0xa3c>
 800d4fa:	6869      	ldr	r1, [r5, #4]
 800d4fc:	4648      	mov	r0, r9
 800d4fe:	f000 f955 	bl	800d7ac <_Balloc>
 800d502:	4606      	mov	r6, r0
 800d504:	b928      	cbnz	r0, 800d512 <_dtoa_r+0x99a>
 800d506:	4b82      	ldr	r3, [pc, #520]	@ (800d710 <_dtoa_r+0xb98>)
 800d508:	4602      	mov	r2, r0
 800d50a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d50e:	f7ff bb4a 	b.w	800cba6 <_dtoa_r+0x2e>
 800d512:	692a      	ldr	r2, [r5, #16]
 800d514:	3202      	adds	r2, #2
 800d516:	0092      	lsls	r2, r2, #2
 800d518:	f105 010c 	add.w	r1, r5, #12
 800d51c:	300c      	adds	r0, #12
 800d51e:	f7ff fa94 	bl	800ca4a <memcpy>
 800d522:	2201      	movs	r2, #1
 800d524:	4631      	mov	r1, r6
 800d526:	4648      	mov	r0, r9
 800d528:	f000 fb46 	bl	800dbb8 <__lshift>
 800d52c:	f10a 0301 	add.w	r3, sl, #1
 800d530:	9300      	str	r3, [sp, #0]
 800d532:	eb0a 030b 	add.w	r3, sl, fp
 800d536:	9308      	str	r3, [sp, #32]
 800d538:	9b04      	ldr	r3, [sp, #16]
 800d53a:	f003 0301 	and.w	r3, r3, #1
 800d53e:	462f      	mov	r7, r5
 800d540:	9306      	str	r3, [sp, #24]
 800d542:	4605      	mov	r5, r0
 800d544:	9b00      	ldr	r3, [sp, #0]
 800d546:	9802      	ldr	r0, [sp, #8]
 800d548:	4621      	mov	r1, r4
 800d54a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800d54e:	f7ff fa8a 	bl	800ca66 <quorem>
 800d552:	4603      	mov	r3, r0
 800d554:	3330      	adds	r3, #48	@ 0x30
 800d556:	9003      	str	r0, [sp, #12]
 800d558:	4639      	mov	r1, r7
 800d55a:	9802      	ldr	r0, [sp, #8]
 800d55c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d55e:	f000 fb97 	bl	800dc90 <__mcmp>
 800d562:	462a      	mov	r2, r5
 800d564:	9004      	str	r0, [sp, #16]
 800d566:	4621      	mov	r1, r4
 800d568:	4648      	mov	r0, r9
 800d56a:	f000 fbad 	bl	800dcc8 <__mdiff>
 800d56e:	68c2      	ldr	r2, [r0, #12]
 800d570:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d572:	4606      	mov	r6, r0
 800d574:	bb02      	cbnz	r2, 800d5b8 <_dtoa_r+0xa40>
 800d576:	4601      	mov	r1, r0
 800d578:	9802      	ldr	r0, [sp, #8]
 800d57a:	f000 fb89 	bl	800dc90 <__mcmp>
 800d57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d580:	4602      	mov	r2, r0
 800d582:	4631      	mov	r1, r6
 800d584:	4648      	mov	r0, r9
 800d586:	920c      	str	r2, [sp, #48]	@ 0x30
 800d588:	9309      	str	r3, [sp, #36]	@ 0x24
 800d58a:	f000 f94f 	bl	800d82c <_Bfree>
 800d58e:	9b07      	ldr	r3, [sp, #28]
 800d590:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d592:	9e00      	ldr	r6, [sp, #0]
 800d594:	ea42 0103 	orr.w	r1, r2, r3
 800d598:	9b06      	ldr	r3, [sp, #24]
 800d59a:	4319      	orrs	r1, r3
 800d59c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d59e:	d10d      	bne.n	800d5bc <_dtoa_r+0xa44>
 800d5a0:	2b39      	cmp	r3, #57	@ 0x39
 800d5a2:	d027      	beq.n	800d5f4 <_dtoa_r+0xa7c>
 800d5a4:	9a04      	ldr	r2, [sp, #16]
 800d5a6:	2a00      	cmp	r2, #0
 800d5a8:	dd01      	ble.n	800d5ae <_dtoa_r+0xa36>
 800d5aa:	9b03      	ldr	r3, [sp, #12]
 800d5ac:	3331      	adds	r3, #49	@ 0x31
 800d5ae:	f88b 3000 	strb.w	r3, [fp]
 800d5b2:	e52e      	b.n	800d012 <_dtoa_r+0x49a>
 800d5b4:	4628      	mov	r0, r5
 800d5b6:	e7b9      	b.n	800d52c <_dtoa_r+0x9b4>
 800d5b8:	2201      	movs	r2, #1
 800d5ba:	e7e2      	b.n	800d582 <_dtoa_r+0xa0a>
 800d5bc:	9904      	ldr	r1, [sp, #16]
 800d5be:	2900      	cmp	r1, #0
 800d5c0:	db04      	blt.n	800d5cc <_dtoa_r+0xa54>
 800d5c2:	9807      	ldr	r0, [sp, #28]
 800d5c4:	4301      	orrs	r1, r0
 800d5c6:	9806      	ldr	r0, [sp, #24]
 800d5c8:	4301      	orrs	r1, r0
 800d5ca:	d120      	bne.n	800d60e <_dtoa_r+0xa96>
 800d5cc:	2a00      	cmp	r2, #0
 800d5ce:	ddee      	ble.n	800d5ae <_dtoa_r+0xa36>
 800d5d0:	9902      	ldr	r1, [sp, #8]
 800d5d2:	9300      	str	r3, [sp, #0]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	4648      	mov	r0, r9
 800d5d8:	f000 faee 	bl	800dbb8 <__lshift>
 800d5dc:	4621      	mov	r1, r4
 800d5de:	9002      	str	r0, [sp, #8]
 800d5e0:	f000 fb56 	bl	800dc90 <__mcmp>
 800d5e4:	2800      	cmp	r0, #0
 800d5e6:	9b00      	ldr	r3, [sp, #0]
 800d5e8:	dc02      	bgt.n	800d5f0 <_dtoa_r+0xa78>
 800d5ea:	d1e0      	bne.n	800d5ae <_dtoa_r+0xa36>
 800d5ec:	07da      	lsls	r2, r3, #31
 800d5ee:	d5de      	bpl.n	800d5ae <_dtoa_r+0xa36>
 800d5f0:	2b39      	cmp	r3, #57	@ 0x39
 800d5f2:	d1da      	bne.n	800d5aa <_dtoa_r+0xa32>
 800d5f4:	2339      	movs	r3, #57	@ 0x39
 800d5f6:	f88b 3000 	strb.w	r3, [fp]
 800d5fa:	4633      	mov	r3, r6
 800d5fc:	461e      	mov	r6, r3
 800d5fe:	3b01      	subs	r3, #1
 800d600:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d604:	2a39      	cmp	r2, #57	@ 0x39
 800d606:	d04e      	beq.n	800d6a6 <_dtoa_r+0xb2e>
 800d608:	3201      	adds	r2, #1
 800d60a:	701a      	strb	r2, [r3, #0]
 800d60c:	e501      	b.n	800d012 <_dtoa_r+0x49a>
 800d60e:	2a00      	cmp	r2, #0
 800d610:	dd03      	ble.n	800d61a <_dtoa_r+0xaa2>
 800d612:	2b39      	cmp	r3, #57	@ 0x39
 800d614:	d0ee      	beq.n	800d5f4 <_dtoa_r+0xa7c>
 800d616:	3301      	adds	r3, #1
 800d618:	e7c9      	b.n	800d5ae <_dtoa_r+0xa36>
 800d61a:	9a00      	ldr	r2, [sp, #0]
 800d61c:	9908      	ldr	r1, [sp, #32]
 800d61e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d622:	428a      	cmp	r2, r1
 800d624:	d028      	beq.n	800d678 <_dtoa_r+0xb00>
 800d626:	9902      	ldr	r1, [sp, #8]
 800d628:	2300      	movs	r3, #0
 800d62a:	220a      	movs	r2, #10
 800d62c:	4648      	mov	r0, r9
 800d62e:	f000 f91f 	bl	800d870 <__multadd>
 800d632:	42af      	cmp	r7, r5
 800d634:	9002      	str	r0, [sp, #8]
 800d636:	f04f 0300 	mov.w	r3, #0
 800d63a:	f04f 020a 	mov.w	r2, #10
 800d63e:	4639      	mov	r1, r7
 800d640:	4648      	mov	r0, r9
 800d642:	d107      	bne.n	800d654 <_dtoa_r+0xadc>
 800d644:	f000 f914 	bl	800d870 <__multadd>
 800d648:	4607      	mov	r7, r0
 800d64a:	4605      	mov	r5, r0
 800d64c:	9b00      	ldr	r3, [sp, #0]
 800d64e:	3301      	adds	r3, #1
 800d650:	9300      	str	r3, [sp, #0]
 800d652:	e777      	b.n	800d544 <_dtoa_r+0x9cc>
 800d654:	f000 f90c 	bl	800d870 <__multadd>
 800d658:	4629      	mov	r1, r5
 800d65a:	4607      	mov	r7, r0
 800d65c:	2300      	movs	r3, #0
 800d65e:	220a      	movs	r2, #10
 800d660:	4648      	mov	r0, r9
 800d662:	f000 f905 	bl	800d870 <__multadd>
 800d666:	4605      	mov	r5, r0
 800d668:	e7f0      	b.n	800d64c <_dtoa_r+0xad4>
 800d66a:	f1bb 0f00 	cmp.w	fp, #0
 800d66e:	bfcc      	ite	gt
 800d670:	465e      	movgt	r6, fp
 800d672:	2601      	movle	r6, #1
 800d674:	4456      	add	r6, sl
 800d676:	2700      	movs	r7, #0
 800d678:	9902      	ldr	r1, [sp, #8]
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	2201      	movs	r2, #1
 800d67e:	4648      	mov	r0, r9
 800d680:	f000 fa9a 	bl	800dbb8 <__lshift>
 800d684:	4621      	mov	r1, r4
 800d686:	9002      	str	r0, [sp, #8]
 800d688:	f000 fb02 	bl	800dc90 <__mcmp>
 800d68c:	2800      	cmp	r0, #0
 800d68e:	dcb4      	bgt.n	800d5fa <_dtoa_r+0xa82>
 800d690:	d102      	bne.n	800d698 <_dtoa_r+0xb20>
 800d692:	9b00      	ldr	r3, [sp, #0]
 800d694:	07db      	lsls	r3, r3, #31
 800d696:	d4b0      	bmi.n	800d5fa <_dtoa_r+0xa82>
 800d698:	4633      	mov	r3, r6
 800d69a:	461e      	mov	r6, r3
 800d69c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d6a0:	2a30      	cmp	r2, #48	@ 0x30
 800d6a2:	d0fa      	beq.n	800d69a <_dtoa_r+0xb22>
 800d6a4:	e4b5      	b.n	800d012 <_dtoa_r+0x49a>
 800d6a6:	459a      	cmp	sl, r3
 800d6a8:	d1a8      	bne.n	800d5fc <_dtoa_r+0xa84>
 800d6aa:	2331      	movs	r3, #49	@ 0x31
 800d6ac:	f108 0801 	add.w	r8, r8, #1
 800d6b0:	f88a 3000 	strb.w	r3, [sl]
 800d6b4:	e4ad      	b.n	800d012 <_dtoa_r+0x49a>
 800d6b6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d6b8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800d714 <_dtoa_r+0xb9c>
 800d6bc:	b11b      	cbz	r3, 800d6c6 <_dtoa_r+0xb4e>
 800d6be:	f10a 0308 	add.w	r3, sl, #8
 800d6c2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d6c4:	6013      	str	r3, [r2, #0]
 800d6c6:	4650      	mov	r0, sl
 800d6c8:	b017      	add	sp, #92	@ 0x5c
 800d6ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6ce:	9b07      	ldr	r3, [sp, #28]
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	f77f ae2e 	ble.w	800d332 <_dtoa_r+0x7ba>
 800d6d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6d8:	9308      	str	r3, [sp, #32]
 800d6da:	2001      	movs	r0, #1
 800d6dc:	e64d      	b.n	800d37a <_dtoa_r+0x802>
 800d6de:	f1bb 0f00 	cmp.w	fp, #0
 800d6e2:	f77f aed9 	ble.w	800d498 <_dtoa_r+0x920>
 800d6e6:	4656      	mov	r6, sl
 800d6e8:	9802      	ldr	r0, [sp, #8]
 800d6ea:	4621      	mov	r1, r4
 800d6ec:	f7ff f9bb 	bl	800ca66 <quorem>
 800d6f0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800d6f4:	f806 3b01 	strb.w	r3, [r6], #1
 800d6f8:	eba6 020a 	sub.w	r2, r6, sl
 800d6fc:	4593      	cmp	fp, r2
 800d6fe:	ddb4      	ble.n	800d66a <_dtoa_r+0xaf2>
 800d700:	9902      	ldr	r1, [sp, #8]
 800d702:	2300      	movs	r3, #0
 800d704:	220a      	movs	r2, #10
 800d706:	4648      	mov	r0, r9
 800d708:	f000 f8b2 	bl	800d870 <__multadd>
 800d70c:	9002      	str	r0, [sp, #8]
 800d70e:	e7eb      	b.n	800d6e8 <_dtoa_r+0xb70>
 800d710:	0800eb18 	.word	0x0800eb18
 800d714:	0800ea9c 	.word	0x0800ea9c

0800d718 <_free_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4605      	mov	r5, r0
 800d71c:	2900      	cmp	r1, #0
 800d71e:	d041      	beq.n	800d7a4 <_free_r+0x8c>
 800d720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d724:	1f0c      	subs	r4, r1, #4
 800d726:	2b00      	cmp	r3, #0
 800d728:	bfb8      	it	lt
 800d72a:	18e4      	addlt	r4, r4, r3
 800d72c:	f7fe fa92 	bl	800bc54 <__malloc_lock>
 800d730:	4a1d      	ldr	r2, [pc, #116]	@ (800d7a8 <_free_r+0x90>)
 800d732:	6813      	ldr	r3, [r2, #0]
 800d734:	b933      	cbnz	r3, 800d744 <_free_r+0x2c>
 800d736:	6063      	str	r3, [r4, #4]
 800d738:	6014      	str	r4, [r2, #0]
 800d73a:	4628      	mov	r0, r5
 800d73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d740:	f7fe ba8e 	b.w	800bc60 <__malloc_unlock>
 800d744:	42a3      	cmp	r3, r4
 800d746:	d908      	bls.n	800d75a <_free_r+0x42>
 800d748:	6820      	ldr	r0, [r4, #0]
 800d74a:	1821      	adds	r1, r4, r0
 800d74c:	428b      	cmp	r3, r1
 800d74e:	bf01      	itttt	eq
 800d750:	6819      	ldreq	r1, [r3, #0]
 800d752:	685b      	ldreq	r3, [r3, #4]
 800d754:	1809      	addeq	r1, r1, r0
 800d756:	6021      	streq	r1, [r4, #0]
 800d758:	e7ed      	b.n	800d736 <_free_r+0x1e>
 800d75a:	461a      	mov	r2, r3
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	b10b      	cbz	r3, 800d764 <_free_r+0x4c>
 800d760:	42a3      	cmp	r3, r4
 800d762:	d9fa      	bls.n	800d75a <_free_r+0x42>
 800d764:	6811      	ldr	r1, [r2, #0]
 800d766:	1850      	adds	r0, r2, r1
 800d768:	42a0      	cmp	r0, r4
 800d76a:	d10b      	bne.n	800d784 <_free_r+0x6c>
 800d76c:	6820      	ldr	r0, [r4, #0]
 800d76e:	4401      	add	r1, r0
 800d770:	1850      	adds	r0, r2, r1
 800d772:	4283      	cmp	r3, r0
 800d774:	6011      	str	r1, [r2, #0]
 800d776:	d1e0      	bne.n	800d73a <_free_r+0x22>
 800d778:	6818      	ldr	r0, [r3, #0]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	6053      	str	r3, [r2, #4]
 800d77e:	4408      	add	r0, r1
 800d780:	6010      	str	r0, [r2, #0]
 800d782:	e7da      	b.n	800d73a <_free_r+0x22>
 800d784:	d902      	bls.n	800d78c <_free_r+0x74>
 800d786:	230c      	movs	r3, #12
 800d788:	602b      	str	r3, [r5, #0]
 800d78a:	e7d6      	b.n	800d73a <_free_r+0x22>
 800d78c:	6820      	ldr	r0, [r4, #0]
 800d78e:	1821      	adds	r1, r4, r0
 800d790:	428b      	cmp	r3, r1
 800d792:	bf04      	itt	eq
 800d794:	6819      	ldreq	r1, [r3, #0]
 800d796:	685b      	ldreq	r3, [r3, #4]
 800d798:	6063      	str	r3, [r4, #4]
 800d79a:	bf04      	itt	eq
 800d79c:	1809      	addeq	r1, r1, r0
 800d79e:	6021      	streq	r1, [r4, #0]
 800d7a0:	6054      	str	r4, [r2, #4]
 800d7a2:	e7ca      	b.n	800d73a <_free_r+0x22>
 800d7a4:	bd38      	pop	{r3, r4, r5, pc}
 800d7a6:	bf00      	nop
 800d7a8:	200265ac 	.word	0x200265ac

0800d7ac <_Balloc>:
 800d7ac:	b570      	push	{r4, r5, r6, lr}
 800d7ae:	69c6      	ldr	r6, [r0, #28]
 800d7b0:	4604      	mov	r4, r0
 800d7b2:	460d      	mov	r5, r1
 800d7b4:	b976      	cbnz	r6, 800d7d4 <_Balloc+0x28>
 800d7b6:	2010      	movs	r0, #16
 800d7b8:	f7fe f9a2 	bl	800bb00 <malloc>
 800d7bc:	4602      	mov	r2, r0
 800d7be:	61e0      	str	r0, [r4, #28]
 800d7c0:	b920      	cbnz	r0, 800d7cc <_Balloc+0x20>
 800d7c2:	4b18      	ldr	r3, [pc, #96]	@ (800d824 <_Balloc+0x78>)
 800d7c4:	4818      	ldr	r0, [pc, #96]	@ (800d828 <_Balloc+0x7c>)
 800d7c6:	216b      	movs	r1, #107	@ 0x6b
 800d7c8:	f000 fddc 	bl	800e384 <__assert_func>
 800d7cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7d0:	6006      	str	r6, [r0, #0]
 800d7d2:	60c6      	str	r6, [r0, #12]
 800d7d4:	69e6      	ldr	r6, [r4, #28]
 800d7d6:	68f3      	ldr	r3, [r6, #12]
 800d7d8:	b183      	cbz	r3, 800d7fc <_Balloc+0x50>
 800d7da:	69e3      	ldr	r3, [r4, #28]
 800d7dc:	68db      	ldr	r3, [r3, #12]
 800d7de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d7e2:	b9b8      	cbnz	r0, 800d814 <_Balloc+0x68>
 800d7e4:	2101      	movs	r1, #1
 800d7e6:	fa01 f605 	lsl.w	r6, r1, r5
 800d7ea:	1d72      	adds	r2, r6, #5
 800d7ec:	0092      	lsls	r2, r2, #2
 800d7ee:	4620      	mov	r0, r4
 800d7f0:	f000 fde6 	bl	800e3c0 <_calloc_r>
 800d7f4:	b160      	cbz	r0, 800d810 <_Balloc+0x64>
 800d7f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d7fa:	e00e      	b.n	800d81a <_Balloc+0x6e>
 800d7fc:	2221      	movs	r2, #33	@ 0x21
 800d7fe:	2104      	movs	r1, #4
 800d800:	4620      	mov	r0, r4
 800d802:	f000 fddd 	bl	800e3c0 <_calloc_r>
 800d806:	69e3      	ldr	r3, [r4, #28]
 800d808:	60f0      	str	r0, [r6, #12]
 800d80a:	68db      	ldr	r3, [r3, #12]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1e4      	bne.n	800d7da <_Balloc+0x2e>
 800d810:	2000      	movs	r0, #0
 800d812:	bd70      	pop	{r4, r5, r6, pc}
 800d814:	6802      	ldr	r2, [r0, #0]
 800d816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d81a:	2300      	movs	r3, #0
 800d81c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d820:	e7f7      	b.n	800d812 <_Balloc+0x66>
 800d822:	bf00      	nop
 800d824:	0800eaa9 	.word	0x0800eaa9
 800d828:	0800eb29 	.word	0x0800eb29

0800d82c <_Bfree>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	69c6      	ldr	r6, [r0, #28]
 800d830:	4605      	mov	r5, r0
 800d832:	460c      	mov	r4, r1
 800d834:	b976      	cbnz	r6, 800d854 <_Bfree+0x28>
 800d836:	2010      	movs	r0, #16
 800d838:	f7fe f962 	bl	800bb00 <malloc>
 800d83c:	4602      	mov	r2, r0
 800d83e:	61e8      	str	r0, [r5, #28]
 800d840:	b920      	cbnz	r0, 800d84c <_Bfree+0x20>
 800d842:	4b09      	ldr	r3, [pc, #36]	@ (800d868 <_Bfree+0x3c>)
 800d844:	4809      	ldr	r0, [pc, #36]	@ (800d86c <_Bfree+0x40>)
 800d846:	218f      	movs	r1, #143	@ 0x8f
 800d848:	f000 fd9c 	bl	800e384 <__assert_func>
 800d84c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d850:	6006      	str	r6, [r0, #0]
 800d852:	60c6      	str	r6, [r0, #12]
 800d854:	b13c      	cbz	r4, 800d866 <_Bfree+0x3a>
 800d856:	69eb      	ldr	r3, [r5, #28]
 800d858:	6862      	ldr	r2, [r4, #4]
 800d85a:	68db      	ldr	r3, [r3, #12]
 800d85c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d860:	6021      	str	r1, [r4, #0]
 800d862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d866:	bd70      	pop	{r4, r5, r6, pc}
 800d868:	0800eaa9 	.word	0x0800eaa9
 800d86c:	0800eb29 	.word	0x0800eb29

0800d870 <__multadd>:
 800d870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d874:	690d      	ldr	r5, [r1, #16]
 800d876:	4607      	mov	r7, r0
 800d878:	460c      	mov	r4, r1
 800d87a:	461e      	mov	r6, r3
 800d87c:	f101 0c14 	add.w	ip, r1, #20
 800d880:	2000      	movs	r0, #0
 800d882:	f8dc 3000 	ldr.w	r3, [ip]
 800d886:	b299      	uxth	r1, r3
 800d888:	fb02 6101 	mla	r1, r2, r1, r6
 800d88c:	0c1e      	lsrs	r6, r3, #16
 800d88e:	0c0b      	lsrs	r3, r1, #16
 800d890:	fb02 3306 	mla	r3, r2, r6, r3
 800d894:	b289      	uxth	r1, r1
 800d896:	3001      	adds	r0, #1
 800d898:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d89c:	4285      	cmp	r5, r0
 800d89e:	f84c 1b04 	str.w	r1, [ip], #4
 800d8a2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d8a6:	dcec      	bgt.n	800d882 <__multadd+0x12>
 800d8a8:	b30e      	cbz	r6, 800d8ee <__multadd+0x7e>
 800d8aa:	68a3      	ldr	r3, [r4, #8]
 800d8ac:	42ab      	cmp	r3, r5
 800d8ae:	dc19      	bgt.n	800d8e4 <__multadd+0x74>
 800d8b0:	6861      	ldr	r1, [r4, #4]
 800d8b2:	4638      	mov	r0, r7
 800d8b4:	3101      	adds	r1, #1
 800d8b6:	f7ff ff79 	bl	800d7ac <_Balloc>
 800d8ba:	4680      	mov	r8, r0
 800d8bc:	b928      	cbnz	r0, 800d8ca <__multadd+0x5a>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	4b0c      	ldr	r3, [pc, #48]	@ (800d8f4 <__multadd+0x84>)
 800d8c2:	480d      	ldr	r0, [pc, #52]	@ (800d8f8 <__multadd+0x88>)
 800d8c4:	21ba      	movs	r1, #186	@ 0xba
 800d8c6:	f000 fd5d 	bl	800e384 <__assert_func>
 800d8ca:	6922      	ldr	r2, [r4, #16]
 800d8cc:	3202      	adds	r2, #2
 800d8ce:	f104 010c 	add.w	r1, r4, #12
 800d8d2:	0092      	lsls	r2, r2, #2
 800d8d4:	300c      	adds	r0, #12
 800d8d6:	f7ff f8b8 	bl	800ca4a <memcpy>
 800d8da:	4621      	mov	r1, r4
 800d8dc:	4638      	mov	r0, r7
 800d8de:	f7ff ffa5 	bl	800d82c <_Bfree>
 800d8e2:	4644      	mov	r4, r8
 800d8e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d8e8:	3501      	adds	r5, #1
 800d8ea:	615e      	str	r6, [r3, #20]
 800d8ec:	6125      	str	r5, [r4, #16]
 800d8ee:	4620      	mov	r0, r4
 800d8f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8f4:	0800eb18 	.word	0x0800eb18
 800d8f8:	0800eb29 	.word	0x0800eb29

0800d8fc <__hi0bits>:
 800d8fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d900:	4603      	mov	r3, r0
 800d902:	bf36      	itet	cc
 800d904:	0403      	lslcc	r3, r0, #16
 800d906:	2000      	movcs	r0, #0
 800d908:	2010      	movcc	r0, #16
 800d90a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d90e:	bf3c      	itt	cc
 800d910:	021b      	lslcc	r3, r3, #8
 800d912:	3008      	addcc	r0, #8
 800d914:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d918:	bf3c      	itt	cc
 800d91a:	011b      	lslcc	r3, r3, #4
 800d91c:	3004      	addcc	r0, #4
 800d91e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d922:	bf3c      	itt	cc
 800d924:	009b      	lslcc	r3, r3, #2
 800d926:	3002      	addcc	r0, #2
 800d928:	2b00      	cmp	r3, #0
 800d92a:	db05      	blt.n	800d938 <__hi0bits+0x3c>
 800d92c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d930:	f100 0001 	add.w	r0, r0, #1
 800d934:	bf08      	it	eq
 800d936:	2020      	moveq	r0, #32
 800d938:	4770      	bx	lr

0800d93a <__lo0bits>:
 800d93a:	6803      	ldr	r3, [r0, #0]
 800d93c:	4602      	mov	r2, r0
 800d93e:	f013 0007 	ands.w	r0, r3, #7
 800d942:	d00b      	beq.n	800d95c <__lo0bits+0x22>
 800d944:	07d9      	lsls	r1, r3, #31
 800d946:	d421      	bmi.n	800d98c <__lo0bits+0x52>
 800d948:	0798      	lsls	r0, r3, #30
 800d94a:	bf49      	itett	mi
 800d94c:	085b      	lsrmi	r3, r3, #1
 800d94e:	089b      	lsrpl	r3, r3, #2
 800d950:	2001      	movmi	r0, #1
 800d952:	6013      	strmi	r3, [r2, #0]
 800d954:	bf5c      	itt	pl
 800d956:	6013      	strpl	r3, [r2, #0]
 800d958:	2002      	movpl	r0, #2
 800d95a:	4770      	bx	lr
 800d95c:	b299      	uxth	r1, r3
 800d95e:	b909      	cbnz	r1, 800d964 <__lo0bits+0x2a>
 800d960:	0c1b      	lsrs	r3, r3, #16
 800d962:	2010      	movs	r0, #16
 800d964:	b2d9      	uxtb	r1, r3
 800d966:	b909      	cbnz	r1, 800d96c <__lo0bits+0x32>
 800d968:	3008      	adds	r0, #8
 800d96a:	0a1b      	lsrs	r3, r3, #8
 800d96c:	0719      	lsls	r1, r3, #28
 800d96e:	bf04      	itt	eq
 800d970:	091b      	lsreq	r3, r3, #4
 800d972:	3004      	addeq	r0, #4
 800d974:	0799      	lsls	r1, r3, #30
 800d976:	bf04      	itt	eq
 800d978:	089b      	lsreq	r3, r3, #2
 800d97a:	3002      	addeq	r0, #2
 800d97c:	07d9      	lsls	r1, r3, #31
 800d97e:	d403      	bmi.n	800d988 <__lo0bits+0x4e>
 800d980:	085b      	lsrs	r3, r3, #1
 800d982:	f100 0001 	add.w	r0, r0, #1
 800d986:	d003      	beq.n	800d990 <__lo0bits+0x56>
 800d988:	6013      	str	r3, [r2, #0]
 800d98a:	4770      	bx	lr
 800d98c:	2000      	movs	r0, #0
 800d98e:	4770      	bx	lr
 800d990:	2020      	movs	r0, #32
 800d992:	4770      	bx	lr

0800d994 <__i2b>:
 800d994:	b510      	push	{r4, lr}
 800d996:	460c      	mov	r4, r1
 800d998:	2101      	movs	r1, #1
 800d99a:	f7ff ff07 	bl	800d7ac <_Balloc>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	b928      	cbnz	r0, 800d9ae <__i2b+0x1a>
 800d9a2:	4b05      	ldr	r3, [pc, #20]	@ (800d9b8 <__i2b+0x24>)
 800d9a4:	4805      	ldr	r0, [pc, #20]	@ (800d9bc <__i2b+0x28>)
 800d9a6:	f240 1145 	movw	r1, #325	@ 0x145
 800d9aa:	f000 fceb 	bl	800e384 <__assert_func>
 800d9ae:	2301      	movs	r3, #1
 800d9b0:	6144      	str	r4, [r0, #20]
 800d9b2:	6103      	str	r3, [r0, #16]
 800d9b4:	bd10      	pop	{r4, pc}
 800d9b6:	bf00      	nop
 800d9b8:	0800eb18 	.word	0x0800eb18
 800d9bc:	0800eb29 	.word	0x0800eb29

0800d9c0 <__multiply>:
 800d9c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9c4:	4617      	mov	r7, r2
 800d9c6:	690a      	ldr	r2, [r1, #16]
 800d9c8:	693b      	ldr	r3, [r7, #16]
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	bfa8      	it	ge
 800d9ce:	463b      	movge	r3, r7
 800d9d0:	4689      	mov	r9, r1
 800d9d2:	bfa4      	itt	ge
 800d9d4:	460f      	movge	r7, r1
 800d9d6:	4699      	movge	r9, r3
 800d9d8:	693d      	ldr	r5, [r7, #16]
 800d9da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d9de:	68bb      	ldr	r3, [r7, #8]
 800d9e0:	6879      	ldr	r1, [r7, #4]
 800d9e2:	eb05 060a 	add.w	r6, r5, sl
 800d9e6:	42b3      	cmp	r3, r6
 800d9e8:	b085      	sub	sp, #20
 800d9ea:	bfb8      	it	lt
 800d9ec:	3101      	addlt	r1, #1
 800d9ee:	f7ff fedd 	bl	800d7ac <_Balloc>
 800d9f2:	b930      	cbnz	r0, 800da02 <__multiply+0x42>
 800d9f4:	4602      	mov	r2, r0
 800d9f6:	4b41      	ldr	r3, [pc, #260]	@ (800dafc <__multiply+0x13c>)
 800d9f8:	4841      	ldr	r0, [pc, #260]	@ (800db00 <__multiply+0x140>)
 800d9fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d9fe:	f000 fcc1 	bl	800e384 <__assert_func>
 800da02:	f100 0414 	add.w	r4, r0, #20
 800da06:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800da0a:	4623      	mov	r3, r4
 800da0c:	2200      	movs	r2, #0
 800da0e:	4573      	cmp	r3, lr
 800da10:	d320      	bcc.n	800da54 <__multiply+0x94>
 800da12:	f107 0814 	add.w	r8, r7, #20
 800da16:	f109 0114 	add.w	r1, r9, #20
 800da1a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800da1e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800da22:	9302      	str	r3, [sp, #8]
 800da24:	1beb      	subs	r3, r5, r7
 800da26:	3b15      	subs	r3, #21
 800da28:	f023 0303 	bic.w	r3, r3, #3
 800da2c:	3304      	adds	r3, #4
 800da2e:	3715      	adds	r7, #21
 800da30:	42bd      	cmp	r5, r7
 800da32:	bf38      	it	cc
 800da34:	2304      	movcc	r3, #4
 800da36:	9301      	str	r3, [sp, #4]
 800da38:	9b02      	ldr	r3, [sp, #8]
 800da3a:	9103      	str	r1, [sp, #12]
 800da3c:	428b      	cmp	r3, r1
 800da3e:	d80c      	bhi.n	800da5a <__multiply+0x9a>
 800da40:	2e00      	cmp	r6, #0
 800da42:	dd03      	ble.n	800da4c <__multiply+0x8c>
 800da44:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d055      	beq.n	800daf8 <__multiply+0x138>
 800da4c:	6106      	str	r6, [r0, #16]
 800da4e:	b005      	add	sp, #20
 800da50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da54:	f843 2b04 	str.w	r2, [r3], #4
 800da58:	e7d9      	b.n	800da0e <__multiply+0x4e>
 800da5a:	f8b1 a000 	ldrh.w	sl, [r1]
 800da5e:	f1ba 0f00 	cmp.w	sl, #0
 800da62:	d01f      	beq.n	800daa4 <__multiply+0xe4>
 800da64:	46c4      	mov	ip, r8
 800da66:	46a1      	mov	r9, r4
 800da68:	2700      	movs	r7, #0
 800da6a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800da6e:	f8d9 3000 	ldr.w	r3, [r9]
 800da72:	fa1f fb82 	uxth.w	fp, r2
 800da76:	b29b      	uxth	r3, r3
 800da78:	fb0a 330b 	mla	r3, sl, fp, r3
 800da7c:	443b      	add	r3, r7
 800da7e:	f8d9 7000 	ldr.w	r7, [r9]
 800da82:	0c12      	lsrs	r2, r2, #16
 800da84:	0c3f      	lsrs	r7, r7, #16
 800da86:	fb0a 7202 	mla	r2, sl, r2, r7
 800da8a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800da8e:	b29b      	uxth	r3, r3
 800da90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800da94:	4565      	cmp	r5, ip
 800da96:	f849 3b04 	str.w	r3, [r9], #4
 800da9a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800da9e:	d8e4      	bhi.n	800da6a <__multiply+0xaa>
 800daa0:	9b01      	ldr	r3, [sp, #4]
 800daa2:	50e7      	str	r7, [r4, r3]
 800daa4:	9b03      	ldr	r3, [sp, #12]
 800daa6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800daaa:	3104      	adds	r1, #4
 800daac:	f1b9 0f00 	cmp.w	r9, #0
 800dab0:	d020      	beq.n	800daf4 <__multiply+0x134>
 800dab2:	6823      	ldr	r3, [r4, #0]
 800dab4:	4647      	mov	r7, r8
 800dab6:	46a4      	mov	ip, r4
 800dab8:	f04f 0a00 	mov.w	sl, #0
 800dabc:	f8b7 b000 	ldrh.w	fp, [r7]
 800dac0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800dac4:	fb09 220b 	mla	r2, r9, fp, r2
 800dac8:	4452      	add	r2, sl
 800daca:	b29b      	uxth	r3, r3
 800dacc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dad0:	f84c 3b04 	str.w	r3, [ip], #4
 800dad4:	f857 3b04 	ldr.w	r3, [r7], #4
 800dad8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dadc:	f8bc 3000 	ldrh.w	r3, [ip]
 800dae0:	fb09 330a 	mla	r3, r9, sl, r3
 800dae4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800dae8:	42bd      	cmp	r5, r7
 800daea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800daee:	d8e5      	bhi.n	800dabc <__multiply+0xfc>
 800daf0:	9a01      	ldr	r2, [sp, #4]
 800daf2:	50a3      	str	r3, [r4, r2]
 800daf4:	3404      	adds	r4, #4
 800daf6:	e79f      	b.n	800da38 <__multiply+0x78>
 800daf8:	3e01      	subs	r6, #1
 800dafa:	e7a1      	b.n	800da40 <__multiply+0x80>
 800dafc:	0800eb18 	.word	0x0800eb18
 800db00:	0800eb29 	.word	0x0800eb29

0800db04 <__pow5mult>:
 800db04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db08:	4615      	mov	r5, r2
 800db0a:	f012 0203 	ands.w	r2, r2, #3
 800db0e:	4607      	mov	r7, r0
 800db10:	460e      	mov	r6, r1
 800db12:	d007      	beq.n	800db24 <__pow5mult+0x20>
 800db14:	4c25      	ldr	r4, [pc, #148]	@ (800dbac <__pow5mult+0xa8>)
 800db16:	3a01      	subs	r2, #1
 800db18:	2300      	movs	r3, #0
 800db1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800db1e:	f7ff fea7 	bl	800d870 <__multadd>
 800db22:	4606      	mov	r6, r0
 800db24:	10ad      	asrs	r5, r5, #2
 800db26:	d03d      	beq.n	800dba4 <__pow5mult+0xa0>
 800db28:	69fc      	ldr	r4, [r7, #28]
 800db2a:	b97c      	cbnz	r4, 800db4c <__pow5mult+0x48>
 800db2c:	2010      	movs	r0, #16
 800db2e:	f7fd ffe7 	bl	800bb00 <malloc>
 800db32:	4602      	mov	r2, r0
 800db34:	61f8      	str	r0, [r7, #28]
 800db36:	b928      	cbnz	r0, 800db44 <__pow5mult+0x40>
 800db38:	4b1d      	ldr	r3, [pc, #116]	@ (800dbb0 <__pow5mult+0xac>)
 800db3a:	481e      	ldr	r0, [pc, #120]	@ (800dbb4 <__pow5mult+0xb0>)
 800db3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800db40:	f000 fc20 	bl	800e384 <__assert_func>
 800db44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db48:	6004      	str	r4, [r0, #0]
 800db4a:	60c4      	str	r4, [r0, #12]
 800db4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800db50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800db54:	b94c      	cbnz	r4, 800db6a <__pow5mult+0x66>
 800db56:	f240 2171 	movw	r1, #625	@ 0x271
 800db5a:	4638      	mov	r0, r7
 800db5c:	f7ff ff1a 	bl	800d994 <__i2b>
 800db60:	2300      	movs	r3, #0
 800db62:	f8c8 0008 	str.w	r0, [r8, #8]
 800db66:	4604      	mov	r4, r0
 800db68:	6003      	str	r3, [r0, #0]
 800db6a:	f04f 0900 	mov.w	r9, #0
 800db6e:	07eb      	lsls	r3, r5, #31
 800db70:	d50a      	bpl.n	800db88 <__pow5mult+0x84>
 800db72:	4631      	mov	r1, r6
 800db74:	4622      	mov	r2, r4
 800db76:	4638      	mov	r0, r7
 800db78:	f7ff ff22 	bl	800d9c0 <__multiply>
 800db7c:	4631      	mov	r1, r6
 800db7e:	4680      	mov	r8, r0
 800db80:	4638      	mov	r0, r7
 800db82:	f7ff fe53 	bl	800d82c <_Bfree>
 800db86:	4646      	mov	r6, r8
 800db88:	106d      	asrs	r5, r5, #1
 800db8a:	d00b      	beq.n	800dba4 <__pow5mult+0xa0>
 800db8c:	6820      	ldr	r0, [r4, #0]
 800db8e:	b938      	cbnz	r0, 800dba0 <__pow5mult+0x9c>
 800db90:	4622      	mov	r2, r4
 800db92:	4621      	mov	r1, r4
 800db94:	4638      	mov	r0, r7
 800db96:	f7ff ff13 	bl	800d9c0 <__multiply>
 800db9a:	6020      	str	r0, [r4, #0]
 800db9c:	f8c0 9000 	str.w	r9, [r0]
 800dba0:	4604      	mov	r4, r0
 800dba2:	e7e4      	b.n	800db6e <__pow5mult+0x6a>
 800dba4:	4630      	mov	r0, r6
 800dba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbaa:	bf00      	nop
 800dbac:	0800ebdc 	.word	0x0800ebdc
 800dbb0:	0800eaa9 	.word	0x0800eaa9
 800dbb4:	0800eb29 	.word	0x0800eb29

0800dbb8 <__lshift>:
 800dbb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbbc:	460c      	mov	r4, r1
 800dbbe:	6849      	ldr	r1, [r1, #4]
 800dbc0:	6923      	ldr	r3, [r4, #16]
 800dbc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dbc6:	68a3      	ldr	r3, [r4, #8]
 800dbc8:	4607      	mov	r7, r0
 800dbca:	4691      	mov	r9, r2
 800dbcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dbd0:	f108 0601 	add.w	r6, r8, #1
 800dbd4:	42b3      	cmp	r3, r6
 800dbd6:	db0b      	blt.n	800dbf0 <__lshift+0x38>
 800dbd8:	4638      	mov	r0, r7
 800dbda:	f7ff fde7 	bl	800d7ac <_Balloc>
 800dbde:	4605      	mov	r5, r0
 800dbe0:	b948      	cbnz	r0, 800dbf6 <__lshift+0x3e>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	4b28      	ldr	r3, [pc, #160]	@ (800dc88 <__lshift+0xd0>)
 800dbe6:	4829      	ldr	r0, [pc, #164]	@ (800dc8c <__lshift+0xd4>)
 800dbe8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dbec:	f000 fbca 	bl	800e384 <__assert_func>
 800dbf0:	3101      	adds	r1, #1
 800dbf2:	005b      	lsls	r3, r3, #1
 800dbf4:	e7ee      	b.n	800dbd4 <__lshift+0x1c>
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	f100 0114 	add.w	r1, r0, #20
 800dbfc:	f100 0210 	add.w	r2, r0, #16
 800dc00:	4618      	mov	r0, r3
 800dc02:	4553      	cmp	r3, sl
 800dc04:	db33      	blt.n	800dc6e <__lshift+0xb6>
 800dc06:	6920      	ldr	r0, [r4, #16]
 800dc08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc0c:	f104 0314 	add.w	r3, r4, #20
 800dc10:	f019 091f 	ands.w	r9, r9, #31
 800dc14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dc18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dc1c:	d02b      	beq.n	800dc76 <__lshift+0xbe>
 800dc1e:	f1c9 0e20 	rsb	lr, r9, #32
 800dc22:	468a      	mov	sl, r1
 800dc24:	2200      	movs	r2, #0
 800dc26:	6818      	ldr	r0, [r3, #0]
 800dc28:	fa00 f009 	lsl.w	r0, r0, r9
 800dc2c:	4310      	orrs	r0, r2
 800dc2e:	f84a 0b04 	str.w	r0, [sl], #4
 800dc32:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc36:	459c      	cmp	ip, r3
 800dc38:	fa22 f20e 	lsr.w	r2, r2, lr
 800dc3c:	d8f3      	bhi.n	800dc26 <__lshift+0x6e>
 800dc3e:	ebac 0304 	sub.w	r3, ip, r4
 800dc42:	3b15      	subs	r3, #21
 800dc44:	f023 0303 	bic.w	r3, r3, #3
 800dc48:	3304      	adds	r3, #4
 800dc4a:	f104 0015 	add.w	r0, r4, #21
 800dc4e:	4560      	cmp	r0, ip
 800dc50:	bf88      	it	hi
 800dc52:	2304      	movhi	r3, #4
 800dc54:	50ca      	str	r2, [r1, r3]
 800dc56:	b10a      	cbz	r2, 800dc5c <__lshift+0xa4>
 800dc58:	f108 0602 	add.w	r6, r8, #2
 800dc5c:	3e01      	subs	r6, #1
 800dc5e:	4638      	mov	r0, r7
 800dc60:	612e      	str	r6, [r5, #16]
 800dc62:	4621      	mov	r1, r4
 800dc64:	f7ff fde2 	bl	800d82c <_Bfree>
 800dc68:	4628      	mov	r0, r5
 800dc6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc6e:	f842 0f04 	str.w	r0, [r2, #4]!
 800dc72:	3301      	adds	r3, #1
 800dc74:	e7c5      	b.n	800dc02 <__lshift+0x4a>
 800dc76:	3904      	subs	r1, #4
 800dc78:	f853 2b04 	ldr.w	r2, [r3], #4
 800dc7c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dc80:	459c      	cmp	ip, r3
 800dc82:	d8f9      	bhi.n	800dc78 <__lshift+0xc0>
 800dc84:	e7ea      	b.n	800dc5c <__lshift+0xa4>
 800dc86:	bf00      	nop
 800dc88:	0800eb18 	.word	0x0800eb18
 800dc8c:	0800eb29 	.word	0x0800eb29

0800dc90 <__mcmp>:
 800dc90:	690a      	ldr	r2, [r1, #16]
 800dc92:	4603      	mov	r3, r0
 800dc94:	6900      	ldr	r0, [r0, #16]
 800dc96:	1a80      	subs	r0, r0, r2
 800dc98:	b530      	push	{r4, r5, lr}
 800dc9a:	d10e      	bne.n	800dcba <__mcmp+0x2a>
 800dc9c:	3314      	adds	r3, #20
 800dc9e:	3114      	adds	r1, #20
 800dca0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dca4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dca8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dcac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dcb0:	4295      	cmp	r5, r2
 800dcb2:	d003      	beq.n	800dcbc <__mcmp+0x2c>
 800dcb4:	d205      	bcs.n	800dcc2 <__mcmp+0x32>
 800dcb6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dcba:	bd30      	pop	{r4, r5, pc}
 800dcbc:	42a3      	cmp	r3, r4
 800dcbe:	d3f3      	bcc.n	800dca8 <__mcmp+0x18>
 800dcc0:	e7fb      	b.n	800dcba <__mcmp+0x2a>
 800dcc2:	2001      	movs	r0, #1
 800dcc4:	e7f9      	b.n	800dcba <__mcmp+0x2a>
	...

0800dcc8 <__mdiff>:
 800dcc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dccc:	4689      	mov	r9, r1
 800dcce:	4606      	mov	r6, r0
 800dcd0:	4611      	mov	r1, r2
 800dcd2:	4648      	mov	r0, r9
 800dcd4:	4614      	mov	r4, r2
 800dcd6:	f7ff ffdb 	bl	800dc90 <__mcmp>
 800dcda:	1e05      	subs	r5, r0, #0
 800dcdc:	d112      	bne.n	800dd04 <__mdiff+0x3c>
 800dcde:	4629      	mov	r1, r5
 800dce0:	4630      	mov	r0, r6
 800dce2:	f7ff fd63 	bl	800d7ac <_Balloc>
 800dce6:	4602      	mov	r2, r0
 800dce8:	b928      	cbnz	r0, 800dcf6 <__mdiff+0x2e>
 800dcea:	4b3f      	ldr	r3, [pc, #252]	@ (800dde8 <__mdiff+0x120>)
 800dcec:	f240 2137 	movw	r1, #567	@ 0x237
 800dcf0:	483e      	ldr	r0, [pc, #248]	@ (800ddec <__mdiff+0x124>)
 800dcf2:	f000 fb47 	bl	800e384 <__assert_func>
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dcfc:	4610      	mov	r0, r2
 800dcfe:	b003      	add	sp, #12
 800dd00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd04:	bfbc      	itt	lt
 800dd06:	464b      	movlt	r3, r9
 800dd08:	46a1      	movlt	r9, r4
 800dd0a:	4630      	mov	r0, r6
 800dd0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dd10:	bfba      	itte	lt
 800dd12:	461c      	movlt	r4, r3
 800dd14:	2501      	movlt	r5, #1
 800dd16:	2500      	movge	r5, #0
 800dd18:	f7ff fd48 	bl	800d7ac <_Balloc>
 800dd1c:	4602      	mov	r2, r0
 800dd1e:	b918      	cbnz	r0, 800dd28 <__mdiff+0x60>
 800dd20:	4b31      	ldr	r3, [pc, #196]	@ (800dde8 <__mdiff+0x120>)
 800dd22:	f240 2145 	movw	r1, #581	@ 0x245
 800dd26:	e7e3      	b.n	800dcf0 <__mdiff+0x28>
 800dd28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dd2c:	6926      	ldr	r6, [r4, #16]
 800dd2e:	60c5      	str	r5, [r0, #12]
 800dd30:	f109 0310 	add.w	r3, r9, #16
 800dd34:	f109 0514 	add.w	r5, r9, #20
 800dd38:	f104 0e14 	add.w	lr, r4, #20
 800dd3c:	f100 0b14 	add.w	fp, r0, #20
 800dd40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dd44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dd48:	9301      	str	r3, [sp, #4]
 800dd4a:	46d9      	mov	r9, fp
 800dd4c:	f04f 0c00 	mov.w	ip, #0
 800dd50:	9b01      	ldr	r3, [sp, #4]
 800dd52:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dd56:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dd5a:	9301      	str	r3, [sp, #4]
 800dd5c:	fa1f f38a 	uxth.w	r3, sl
 800dd60:	4619      	mov	r1, r3
 800dd62:	b283      	uxth	r3, r0
 800dd64:	1acb      	subs	r3, r1, r3
 800dd66:	0c00      	lsrs	r0, r0, #16
 800dd68:	4463      	add	r3, ip
 800dd6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dd6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dd72:	b29b      	uxth	r3, r3
 800dd74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dd78:	4576      	cmp	r6, lr
 800dd7a:	f849 3b04 	str.w	r3, [r9], #4
 800dd7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd82:	d8e5      	bhi.n	800dd50 <__mdiff+0x88>
 800dd84:	1b33      	subs	r3, r6, r4
 800dd86:	3b15      	subs	r3, #21
 800dd88:	f023 0303 	bic.w	r3, r3, #3
 800dd8c:	3415      	adds	r4, #21
 800dd8e:	3304      	adds	r3, #4
 800dd90:	42a6      	cmp	r6, r4
 800dd92:	bf38      	it	cc
 800dd94:	2304      	movcc	r3, #4
 800dd96:	441d      	add	r5, r3
 800dd98:	445b      	add	r3, fp
 800dd9a:	461e      	mov	r6, r3
 800dd9c:	462c      	mov	r4, r5
 800dd9e:	4544      	cmp	r4, r8
 800dda0:	d30e      	bcc.n	800ddc0 <__mdiff+0xf8>
 800dda2:	f108 0103 	add.w	r1, r8, #3
 800dda6:	1b49      	subs	r1, r1, r5
 800dda8:	f021 0103 	bic.w	r1, r1, #3
 800ddac:	3d03      	subs	r5, #3
 800ddae:	45a8      	cmp	r8, r5
 800ddb0:	bf38      	it	cc
 800ddb2:	2100      	movcc	r1, #0
 800ddb4:	440b      	add	r3, r1
 800ddb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ddba:	b191      	cbz	r1, 800dde2 <__mdiff+0x11a>
 800ddbc:	6117      	str	r7, [r2, #16]
 800ddbe:	e79d      	b.n	800dcfc <__mdiff+0x34>
 800ddc0:	f854 1b04 	ldr.w	r1, [r4], #4
 800ddc4:	46e6      	mov	lr, ip
 800ddc6:	0c08      	lsrs	r0, r1, #16
 800ddc8:	fa1c fc81 	uxtah	ip, ip, r1
 800ddcc:	4471      	add	r1, lr
 800ddce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ddd2:	b289      	uxth	r1, r1
 800ddd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ddd8:	f846 1b04 	str.w	r1, [r6], #4
 800dddc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dde0:	e7dd      	b.n	800dd9e <__mdiff+0xd6>
 800dde2:	3f01      	subs	r7, #1
 800dde4:	e7e7      	b.n	800ddb6 <__mdiff+0xee>
 800dde6:	bf00      	nop
 800dde8:	0800eb18 	.word	0x0800eb18
 800ddec:	0800eb29 	.word	0x0800eb29

0800ddf0 <__d2b>:
 800ddf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ddf4:	460f      	mov	r7, r1
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	ec59 8b10 	vmov	r8, r9, d0
 800ddfc:	4616      	mov	r6, r2
 800ddfe:	f7ff fcd5 	bl	800d7ac <_Balloc>
 800de02:	4604      	mov	r4, r0
 800de04:	b930      	cbnz	r0, 800de14 <__d2b+0x24>
 800de06:	4602      	mov	r2, r0
 800de08:	4b23      	ldr	r3, [pc, #140]	@ (800de98 <__d2b+0xa8>)
 800de0a:	4824      	ldr	r0, [pc, #144]	@ (800de9c <__d2b+0xac>)
 800de0c:	f240 310f 	movw	r1, #783	@ 0x30f
 800de10:	f000 fab8 	bl	800e384 <__assert_func>
 800de14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800de18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800de1c:	b10d      	cbz	r5, 800de22 <__d2b+0x32>
 800de1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800de22:	9301      	str	r3, [sp, #4]
 800de24:	f1b8 0300 	subs.w	r3, r8, #0
 800de28:	d023      	beq.n	800de72 <__d2b+0x82>
 800de2a:	4668      	mov	r0, sp
 800de2c:	9300      	str	r3, [sp, #0]
 800de2e:	f7ff fd84 	bl	800d93a <__lo0bits>
 800de32:	e9dd 1200 	ldrd	r1, r2, [sp]
 800de36:	b1d0      	cbz	r0, 800de6e <__d2b+0x7e>
 800de38:	f1c0 0320 	rsb	r3, r0, #32
 800de3c:	fa02 f303 	lsl.w	r3, r2, r3
 800de40:	430b      	orrs	r3, r1
 800de42:	40c2      	lsrs	r2, r0
 800de44:	6163      	str	r3, [r4, #20]
 800de46:	9201      	str	r2, [sp, #4]
 800de48:	9b01      	ldr	r3, [sp, #4]
 800de4a:	61a3      	str	r3, [r4, #24]
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	bf0c      	ite	eq
 800de50:	2201      	moveq	r2, #1
 800de52:	2202      	movne	r2, #2
 800de54:	6122      	str	r2, [r4, #16]
 800de56:	b1a5      	cbz	r5, 800de82 <__d2b+0x92>
 800de58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800de5c:	4405      	add	r5, r0
 800de5e:	603d      	str	r5, [r7, #0]
 800de60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800de64:	6030      	str	r0, [r6, #0]
 800de66:	4620      	mov	r0, r4
 800de68:	b003      	add	sp, #12
 800de6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800de6e:	6161      	str	r1, [r4, #20]
 800de70:	e7ea      	b.n	800de48 <__d2b+0x58>
 800de72:	a801      	add	r0, sp, #4
 800de74:	f7ff fd61 	bl	800d93a <__lo0bits>
 800de78:	9b01      	ldr	r3, [sp, #4]
 800de7a:	6163      	str	r3, [r4, #20]
 800de7c:	3020      	adds	r0, #32
 800de7e:	2201      	movs	r2, #1
 800de80:	e7e8      	b.n	800de54 <__d2b+0x64>
 800de82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800de86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800de8a:	6038      	str	r0, [r7, #0]
 800de8c:	6918      	ldr	r0, [r3, #16]
 800de8e:	f7ff fd35 	bl	800d8fc <__hi0bits>
 800de92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800de96:	e7e5      	b.n	800de64 <__d2b+0x74>
 800de98:	0800eb18 	.word	0x0800eb18
 800de9c:	0800eb29 	.word	0x0800eb29

0800dea0 <__sfputc_r>:
 800dea0:	6893      	ldr	r3, [r2, #8]
 800dea2:	3b01      	subs	r3, #1
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	b410      	push	{r4}
 800dea8:	6093      	str	r3, [r2, #8]
 800deaa:	da08      	bge.n	800debe <__sfputc_r+0x1e>
 800deac:	6994      	ldr	r4, [r2, #24]
 800deae:	42a3      	cmp	r3, r4
 800deb0:	db01      	blt.n	800deb6 <__sfputc_r+0x16>
 800deb2:	290a      	cmp	r1, #10
 800deb4:	d103      	bne.n	800debe <__sfputc_r+0x1e>
 800deb6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800deba:	f7fe bca2 	b.w	800c802 <__swbuf_r>
 800debe:	6813      	ldr	r3, [r2, #0]
 800dec0:	1c58      	adds	r0, r3, #1
 800dec2:	6010      	str	r0, [r2, #0]
 800dec4:	7019      	strb	r1, [r3, #0]
 800dec6:	4608      	mov	r0, r1
 800dec8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800decc:	4770      	bx	lr

0800dece <__sfputs_r>:
 800dece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ded0:	4606      	mov	r6, r0
 800ded2:	460f      	mov	r7, r1
 800ded4:	4614      	mov	r4, r2
 800ded6:	18d5      	adds	r5, r2, r3
 800ded8:	42ac      	cmp	r4, r5
 800deda:	d101      	bne.n	800dee0 <__sfputs_r+0x12>
 800dedc:	2000      	movs	r0, #0
 800dede:	e007      	b.n	800def0 <__sfputs_r+0x22>
 800dee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dee4:	463a      	mov	r2, r7
 800dee6:	4630      	mov	r0, r6
 800dee8:	f7ff ffda 	bl	800dea0 <__sfputc_r>
 800deec:	1c43      	adds	r3, r0, #1
 800deee:	d1f3      	bne.n	800ded8 <__sfputs_r+0xa>
 800def0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800def4 <_vfiprintf_r>:
 800def4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800def8:	460d      	mov	r5, r1
 800defa:	b09d      	sub	sp, #116	@ 0x74
 800defc:	4614      	mov	r4, r2
 800defe:	4698      	mov	r8, r3
 800df00:	4606      	mov	r6, r0
 800df02:	b118      	cbz	r0, 800df0c <_vfiprintf_r+0x18>
 800df04:	6a03      	ldr	r3, [r0, #32]
 800df06:	b90b      	cbnz	r3, 800df0c <_vfiprintf_r+0x18>
 800df08:	f7fe fb92 	bl	800c630 <__sinit>
 800df0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df0e:	07d9      	lsls	r1, r3, #31
 800df10:	d405      	bmi.n	800df1e <_vfiprintf_r+0x2a>
 800df12:	89ab      	ldrh	r3, [r5, #12]
 800df14:	059a      	lsls	r2, r3, #22
 800df16:	d402      	bmi.n	800df1e <_vfiprintf_r+0x2a>
 800df18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df1a:	f7fe fd94 	bl	800ca46 <__retarget_lock_acquire_recursive>
 800df1e:	89ab      	ldrh	r3, [r5, #12]
 800df20:	071b      	lsls	r3, r3, #28
 800df22:	d501      	bpl.n	800df28 <_vfiprintf_r+0x34>
 800df24:	692b      	ldr	r3, [r5, #16]
 800df26:	b99b      	cbnz	r3, 800df50 <_vfiprintf_r+0x5c>
 800df28:	4629      	mov	r1, r5
 800df2a:	4630      	mov	r0, r6
 800df2c:	f7fe fca8 	bl	800c880 <__swsetup_r>
 800df30:	b170      	cbz	r0, 800df50 <_vfiprintf_r+0x5c>
 800df32:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800df34:	07dc      	lsls	r4, r3, #31
 800df36:	d504      	bpl.n	800df42 <_vfiprintf_r+0x4e>
 800df38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df3c:	b01d      	add	sp, #116	@ 0x74
 800df3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df42:	89ab      	ldrh	r3, [r5, #12]
 800df44:	0598      	lsls	r0, r3, #22
 800df46:	d4f7      	bmi.n	800df38 <_vfiprintf_r+0x44>
 800df48:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800df4a:	f7fe fd7d 	bl	800ca48 <__retarget_lock_release_recursive>
 800df4e:	e7f3      	b.n	800df38 <_vfiprintf_r+0x44>
 800df50:	2300      	movs	r3, #0
 800df52:	9309      	str	r3, [sp, #36]	@ 0x24
 800df54:	2320      	movs	r3, #32
 800df56:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800df5a:	f8cd 800c 	str.w	r8, [sp, #12]
 800df5e:	2330      	movs	r3, #48	@ 0x30
 800df60:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e110 <_vfiprintf_r+0x21c>
 800df64:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df68:	f04f 0901 	mov.w	r9, #1
 800df6c:	4623      	mov	r3, r4
 800df6e:	469a      	mov	sl, r3
 800df70:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df74:	b10a      	cbz	r2, 800df7a <_vfiprintf_r+0x86>
 800df76:	2a25      	cmp	r2, #37	@ 0x25
 800df78:	d1f9      	bne.n	800df6e <_vfiprintf_r+0x7a>
 800df7a:	ebba 0b04 	subs.w	fp, sl, r4
 800df7e:	d00b      	beq.n	800df98 <_vfiprintf_r+0xa4>
 800df80:	465b      	mov	r3, fp
 800df82:	4622      	mov	r2, r4
 800df84:	4629      	mov	r1, r5
 800df86:	4630      	mov	r0, r6
 800df88:	f7ff ffa1 	bl	800dece <__sfputs_r>
 800df8c:	3001      	adds	r0, #1
 800df8e:	f000 80a7 	beq.w	800e0e0 <_vfiprintf_r+0x1ec>
 800df92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df94:	445a      	add	r2, fp
 800df96:	9209      	str	r2, [sp, #36]	@ 0x24
 800df98:	f89a 3000 	ldrb.w	r3, [sl]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	f000 809f 	beq.w	800e0e0 <_vfiprintf_r+0x1ec>
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfa8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dfac:	f10a 0a01 	add.w	sl, sl, #1
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	9307      	str	r3, [sp, #28]
 800dfb4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800dfb8:	931a      	str	r3, [sp, #104]	@ 0x68
 800dfba:	4654      	mov	r4, sl
 800dfbc:	2205      	movs	r2, #5
 800dfbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dfc2:	4853      	ldr	r0, [pc, #332]	@ (800e110 <_vfiprintf_r+0x21c>)
 800dfc4:	f7f2 f914 	bl	80001f0 <memchr>
 800dfc8:	9a04      	ldr	r2, [sp, #16]
 800dfca:	b9d8      	cbnz	r0, 800e004 <_vfiprintf_r+0x110>
 800dfcc:	06d1      	lsls	r1, r2, #27
 800dfce:	bf44      	itt	mi
 800dfd0:	2320      	movmi	r3, #32
 800dfd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfd6:	0713      	lsls	r3, r2, #28
 800dfd8:	bf44      	itt	mi
 800dfda:	232b      	movmi	r3, #43	@ 0x2b
 800dfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800dfe0:	f89a 3000 	ldrb.w	r3, [sl]
 800dfe4:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfe6:	d015      	beq.n	800e014 <_vfiprintf_r+0x120>
 800dfe8:	9a07      	ldr	r2, [sp, #28]
 800dfea:	4654      	mov	r4, sl
 800dfec:	2000      	movs	r0, #0
 800dfee:	f04f 0c0a 	mov.w	ip, #10
 800dff2:	4621      	mov	r1, r4
 800dff4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dff8:	3b30      	subs	r3, #48	@ 0x30
 800dffa:	2b09      	cmp	r3, #9
 800dffc:	d94b      	bls.n	800e096 <_vfiprintf_r+0x1a2>
 800dffe:	b1b0      	cbz	r0, 800e02e <_vfiprintf_r+0x13a>
 800e000:	9207      	str	r2, [sp, #28]
 800e002:	e014      	b.n	800e02e <_vfiprintf_r+0x13a>
 800e004:	eba0 0308 	sub.w	r3, r0, r8
 800e008:	fa09 f303 	lsl.w	r3, r9, r3
 800e00c:	4313      	orrs	r3, r2
 800e00e:	9304      	str	r3, [sp, #16]
 800e010:	46a2      	mov	sl, r4
 800e012:	e7d2      	b.n	800dfba <_vfiprintf_r+0xc6>
 800e014:	9b03      	ldr	r3, [sp, #12]
 800e016:	1d19      	adds	r1, r3, #4
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	9103      	str	r1, [sp, #12]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	bfbb      	ittet	lt
 800e020:	425b      	neglt	r3, r3
 800e022:	f042 0202 	orrlt.w	r2, r2, #2
 800e026:	9307      	strge	r3, [sp, #28]
 800e028:	9307      	strlt	r3, [sp, #28]
 800e02a:	bfb8      	it	lt
 800e02c:	9204      	strlt	r2, [sp, #16]
 800e02e:	7823      	ldrb	r3, [r4, #0]
 800e030:	2b2e      	cmp	r3, #46	@ 0x2e
 800e032:	d10a      	bne.n	800e04a <_vfiprintf_r+0x156>
 800e034:	7863      	ldrb	r3, [r4, #1]
 800e036:	2b2a      	cmp	r3, #42	@ 0x2a
 800e038:	d132      	bne.n	800e0a0 <_vfiprintf_r+0x1ac>
 800e03a:	9b03      	ldr	r3, [sp, #12]
 800e03c:	1d1a      	adds	r2, r3, #4
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	9203      	str	r2, [sp, #12]
 800e042:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e046:	3402      	adds	r4, #2
 800e048:	9305      	str	r3, [sp, #20]
 800e04a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e120 <_vfiprintf_r+0x22c>
 800e04e:	7821      	ldrb	r1, [r4, #0]
 800e050:	2203      	movs	r2, #3
 800e052:	4650      	mov	r0, sl
 800e054:	f7f2 f8cc 	bl	80001f0 <memchr>
 800e058:	b138      	cbz	r0, 800e06a <_vfiprintf_r+0x176>
 800e05a:	9b04      	ldr	r3, [sp, #16]
 800e05c:	eba0 000a 	sub.w	r0, r0, sl
 800e060:	2240      	movs	r2, #64	@ 0x40
 800e062:	4082      	lsls	r2, r0
 800e064:	4313      	orrs	r3, r2
 800e066:	3401      	adds	r4, #1
 800e068:	9304      	str	r3, [sp, #16]
 800e06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e06e:	4829      	ldr	r0, [pc, #164]	@ (800e114 <_vfiprintf_r+0x220>)
 800e070:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e074:	2206      	movs	r2, #6
 800e076:	f7f2 f8bb 	bl	80001f0 <memchr>
 800e07a:	2800      	cmp	r0, #0
 800e07c:	d03f      	beq.n	800e0fe <_vfiprintf_r+0x20a>
 800e07e:	4b26      	ldr	r3, [pc, #152]	@ (800e118 <_vfiprintf_r+0x224>)
 800e080:	bb1b      	cbnz	r3, 800e0ca <_vfiprintf_r+0x1d6>
 800e082:	9b03      	ldr	r3, [sp, #12]
 800e084:	3307      	adds	r3, #7
 800e086:	f023 0307 	bic.w	r3, r3, #7
 800e08a:	3308      	adds	r3, #8
 800e08c:	9303      	str	r3, [sp, #12]
 800e08e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e090:	443b      	add	r3, r7
 800e092:	9309      	str	r3, [sp, #36]	@ 0x24
 800e094:	e76a      	b.n	800df6c <_vfiprintf_r+0x78>
 800e096:	fb0c 3202 	mla	r2, ip, r2, r3
 800e09a:	460c      	mov	r4, r1
 800e09c:	2001      	movs	r0, #1
 800e09e:	e7a8      	b.n	800dff2 <_vfiprintf_r+0xfe>
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	3401      	adds	r4, #1
 800e0a4:	9305      	str	r3, [sp, #20]
 800e0a6:	4619      	mov	r1, r3
 800e0a8:	f04f 0c0a 	mov.w	ip, #10
 800e0ac:	4620      	mov	r0, r4
 800e0ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0b2:	3a30      	subs	r2, #48	@ 0x30
 800e0b4:	2a09      	cmp	r2, #9
 800e0b6:	d903      	bls.n	800e0c0 <_vfiprintf_r+0x1cc>
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d0c6      	beq.n	800e04a <_vfiprintf_r+0x156>
 800e0bc:	9105      	str	r1, [sp, #20]
 800e0be:	e7c4      	b.n	800e04a <_vfiprintf_r+0x156>
 800e0c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e0c4:	4604      	mov	r4, r0
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	e7f0      	b.n	800e0ac <_vfiprintf_r+0x1b8>
 800e0ca:	ab03      	add	r3, sp, #12
 800e0cc:	9300      	str	r3, [sp, #0]
 800e0ce:	462a      	mov	r2, r5
 800e0d0:	4b12      	ldr	r3, [pc, #72]	@ (800e11c <_vfiprintf_r+0x228>)
 800e0d2:	a904      	add	r1, sp, #16
 800e0d4:	4630      	mov	r0, r6
 800e0d6:	f7fd fe69 	bl	800bdac <_printf_float>
 800e0da:	4607      	mov	r7, r0
 800e0dc:	1c78      	adds	r0, r7, #1
 800e0de:	d1d6      	bne.n	800e08e <_vfiprintf_r+0x19a>
 800e0e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e0e2:	07d9      	lsls	r1, r3, #31
 800e0e4:	d405      	bmi.n	800e0f2 <_vfiprintf_r+0x1fe>
 800e0e6:	89ab      	ldrh	r3, [r5, #12]
 800e0e8:	059a      	lsls	r2, r3, #22
 800e0ea:	d402      	bmi.n	800e0f2 <_vfiprintf_r+0x1fe>
 800e0ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e0ee:	f7fe fcab 	bl	800ca48 <__retarget_lock_release_recursive>
 800e0f2:	89ab      	ldrh	r3, [r5, #12]
 800e0f4:	065b      	lsls	r3, r3, #25
 800e0f6:	f53f af1f 	bmi.w	800df38 <_vfiprintf_r+0x44>
 800e0fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e0fc:	e71e      	b.n	800df3c <_vfiprintf_r+0x48>
 800e0fe:	ab03      	add	r3, sp, #12
 800e100:	9300      	str	r3, [sp, #0]
 800e102:	462a      	mov	r2, r5
 800e104:	4b05      	ldr	r3, [pc, #20]	@ (800e11c <_vfiprintf_r+0x228>)
 800e106:	a904      	add	r1, sp, #16
 800e108:	4630      	mov	r0, r6
 800e10a:	f7fe f8e7 	bl	800c2dc <_printf_i>
 800e10e:	e7e4      	b.n	800e0da <_vfiprintf_r+0x1e6>
 800e110:	0800eb82 	.word	0x0800eb82
 800e114:	0800eb8c 	.word	0x0800eb8c
 800e118:	0800bdad 	.word	0x0800bdad
 800e11c:	0800decf 	.word	0x0800decf
 800e120:	0800eb88 	.word	0x0800eb88

0800e124 <__sflush_r>:
 800e124:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e12c:	0716      	lsls	r6, r2, #28
 800e12e:	4605      	mov	r5, r0
 800e130:	460c      	mov	r4, r1
 800e132:	d454      	bmi.n	800e1de <__sflush_r+0xba>
 800e134:	684b      	ldr	r3, [r1, #4]
 800e136:	2b00      	cmp	r3, #0
 800e138:	dc02      	bgt.n	800e140 <__sflush_r+0x1c>
 800e13a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	dd48      	ble.n	800e1d2 <__sflush_r+0xae>
 800e140:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e142:	2e00      	cmp	r6, #0
 800e144:	d045      	beq.n	800e1d2 <__sflush_r+0xae>
 800e146:	2300      	movs	r3, #0
 800e148:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e14c:	682f      	ldr	r7, [r5, #0]
 800e14e:	6a21      	ldr	r1, [r4, #32]
 800e150:	602b      	str	r3, [r5, #0]
 800e152:	d030      	beq.n	800e1b6 <__sflush_r+0x92>
 800e154:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e156:	89a3      	ldrh	r3, [r4, #12]
 800e158:	0759      	lsls	r1, r3, #29
 800e15a:	d505      	bpl.n	800e168 <__sflush_r+0x44>
 800e15c:	6863      	ldr	r3, [r4, #4]
 800e15e:	1ad2      	subs	r2, r2, r3
 800e160:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e162:	b10b      	cbz	r3, 800e168 <__sflush_r+0x44>
 800e164:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e166:	1ad2      	subs	r2, r2, r3
 800e168:	2300      	movs	r3, #0
 800e16a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e16c:	6a21      	ldr	r1, [r4, #32]
 800e16e:	4628      	mov	r0, r5
 800e170:	47b0      	blx	r6
 800e172:	1c43      	adds	r3, r0, #1
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	d106      	bne.n	800e186 <__sflush_r+0x62>
 800e178:	6829      	ldr	r1, [r5, #0]
 800e17a:	291d      	cmp	r1, #29
 800e17c:	d82b      	bhi.n	800e1d6 <__sflush_r+0xb2>
 800e17e:	4a2a      	ldr	r2, [pc, #168]	@ (800e228 <__sflush_r+0x104>)
 800e180:	40ca      	lsrs	r2, r1
 800e182:	07d6      	lsls	r6, r2, #31
 800e184:	d527      	bpl.n	800e1d6 <__sflush_r+0xb2>
 800e186:	2200      	movs	r2, #0
 800e188:	6062      	str	r2, [r4, #4]
 800e18a:	04d9      	lsls	r1, r3, #19
 800e18c:	6922      	ldr	r2, [r4, #16]
 800e18e:	6022      	str	r2, [r4, #0]
 800e190:	d504      	bpl.n	800e19c <__sflush_r+0x78>
 800e192:	1c42      	adds	r2, r0, #1
 800e194:	d101      	bne.n	800e19a <__sflush_r+0x76>
 800e196:	682b      	ldr	r3, [r5, #0]
 800e198:	b903      	cbnz	r3, 800e19c <__sflush_r+0x78>
 800e19a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e19c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e19e:	602f      	str	r7, [r5, #0]
 800e1a0:	b1b9      	cbz	r1, 800e1d2 <__sflush_r+0xae>
 800e1a2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e1a6:	4299      	cmp	r1, r3
 800e1a8:	d002      	beq.n	800e1b0 <__sflush_r+0x8c>
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	f7ff fab4 	bl	800d718 <_free_r>
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	6363      	str	r3, [r4, #52]	@ 0x34
 800e1b4:	e00d      	b.n	800e1d2 <__sflush_r+0xae>
 800e1b6:	2301      	movs	r3, #1
 800e1b8:	4628      	mov	r0, r5
 800e1ba:	47b0      	blx	r6
 800e1bc:	4602      	mov	r2, r0
 800e1be:	1c50      	adds	r0, r2, #1
 800e1c0:	d1c9      	bne.n	800e156 <__sflush_r+0x32>
 800e1c2:	682b      	ldr	r3, [r5, #0]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d0c6      	beq.n	800e156 <__sflush_r+0x32>
 800e1c8:	2b1d      	cmp	r3, #29
 800e1ca:	d001      	beq.n	800e1d0 <__sflush_r+0xac>
 800e1cc:	2b16      	cmp	r3, #22
 800e1ce:	d11e      	bne.n	800e20e <__sflush_r+0xea>
 800e1d0:	602f      	str	r7, [r5, #0]
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	e022      	b.n	800e21c <__sflush_r+0xf8>
 800e1d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1da:	b21b      	sxth	r3, r3
 800e1dc:	e01b      	b.n	800e216 <__sflush_r+0xf2>
 800e1de:	690f      	ldr	r7, [r1, #16]
 800e1e0:	2f00      	cmp	r7, #0
 800e1e2:	d0f6      	beq.n	800e1d2 <__sflush_r+0xae>
 800e1e4:	0793      	lsls	r3, r2, #30
 800e1e6:	680e      	ldr	r6, [r1, #0]
 800e1e8:	bf08      	it	eq
 800e1ea:	694b      	ldreq	r3, [r1, #20]
 800e1ec:	600f      	str	r7, [r1, #0]
 800e1ee:	bf18      	it	ne
 800e1f0:	2300      	movne	r3, #0
 800e1f2:	eba6 0807 	sub.w	r8, r6, r7
 800e1f6:	608b      	str	r3, [r1, #8]
 800e1f8:	f1b8 0f00 	cmp.w	r8, #0
 800e1fc:	dde9      	ble.n	800e1d2 <__sflush_r+0xae>
 800e1fe:	6a21      	ldr	r1, [r4, #32]
 800e200:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e202:	4643      	mov	r3, r8
 800e204:	463a      	mov	r2, r7
 800e206:	4628      	mov	r0, r5
 800e208:	47b0      	blx	r6
 800e20a:	2800      	cmp	r0, #0
 800e20c:	dc08      	bgt.n	800e220 <__sflush_r+0xfc>
 800e20e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e212:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e216:	81a3      	strh	r3, [r4, #12]
 800e218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e220:	4407      	add	r7, r0
 800e222:	eba8 0800 	sub.w	r8, r8, r0
 800e226:	e7e7      	b.n	800e1f8 <__sflush_r+0xd4>
 800e228:	20400001 	.word	0x20400001

0800e22c <_fflush_r>:
 800e22c:	b538      	push	{r3, r4, r5, lr}
 800e22e:	690b      	ldr	r3, [r1, #16]
 800e230:	4605      	mov	r5, r0
 800e232:	460c      	mov	r4, r1
 800e234:	b913      	cbnz	r3, 800e23c <_fflush_r+0x10>
 800e236:	2500      	movs	r5, #0
 800e238:	4628      	mov	r0, r5
 800e23a:	bd38      	pop	{r3, r4, r5, pc}
 800e23c:	b118      	cbz	r0, 800e246 <_fflush_r+0x1a>
 800e23e:	6a03      	ldr	r3, [r0, #32]
 800e240:	b90b      	cbnz	r3, 800e246 <_fflush_r+0x1a>
 800e242:	f7fe f9f5 	bl	800c630 <__sinit>
 800e246:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d0f3      	beq.n	800e236 <_fflush_r+0xa>
 800e24e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e250:	07d0      	lsls	r0, r2, #31
 800e252:	d404      	bmi.n	800e25e <_fflush_r+0x32>
 800e254:	0599      	lsls	r1, r3, #22
 800e256:	d402      	bmi.n	800e25e <_fflush_r+0x32>
 800e258:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e25a:	f7fe fbf4 	bl	800ca46 <__retarget_lock_acquire_recursive>
 800e25e:	4628      	mov	r0, r5
 800e260:	4621      	mov	r1, r4
 800e262:	f7ff ff5f 	bl	800e124 <__sflush_r>
 800e266:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e268:	07da      	lsls	r2, r3, #31
 800e26a:	4605      	mov	r5, r0
 800e26c:	d4e4      	bmi.n	800e238 <_fflush_r+0xc>
 800e26e:	89a3      	ldrh	r3, [r4, #12]
 800e270:	059b      	lsls	r3, r3, #22
 800e272:	d4e1      	bmi.n	800e238 <_fflush_r+0xc>
 800e274:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e276:	f7fe fbe7 	bl	800ca48 <__retarget_lock_release_recursive>
 800e27a:	e7dd      	b.n	800e238 <_fflush_r+0xc>

0800e27c <__swhatbuf_r>:
 800e27c:	b570      	push	{r4, r5, r6, lr}
 800e27e:	460c      	mov	r4, r1
 800e280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e284:	2900      	cmp	r1, #0
 800e286:	b096      	sub	sp, #88	@ 0x58
 800e288:	4615      	mov	r5, r2
 800e28a:	461e      	mov	r6, r3
 800e28c:	da0d      	bge.n	800e2aa <__swhatbuf_r+0x2e>
 800e28e:	89a3      	ldrh	r3, [r4, #12]
 800e290:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e294:	f04f 0100 	mov.w	r1, #0
 800e298:	bf14      	ite	ne
 800e29a:	2340      	movne	r3, #64	@ 0x40
 800e29c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e2a0:	2000      	movs	r0, #0
 800e2a2:	6031      	str	r1, [r6, #0]
 800e2a4:	602b      	str	r3, [r5, #0]
 800e2a6:	b016      	add	sp, #88	@ 0x58
 800e2a8:	bd70      	pop	{r4, r5, r6, pc}
 800e2aa:	466a      	mov	r2, sp
 800e2ac:	f000 f848 	bl	800e340 <_fstat_r>
 800e2b0:	2800      	cmp	r0, #0
 800e2b2:	dbec      	blt.n	800e28e <__swhatbuf_r+0x12>
 800e2b4:	9901      	ldr	r1, [sp, #4]
 800e2b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e2ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e2be:	4259      	negs	r1, r3
 800e2c0:	4159      	adcs	r1, r3
 800e2c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e2c6:	e7eb      	b.n	800e2a0 <__swhatbuf_r+0x24>

0800e2c8 <__smakebuf_r>:
 800e2c8:	898b      	ldrh	r3, [r1, #12]
 800e2ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e2cc:	079d      	lsls	r5, r3, #30
 800e2ce:	4606      	mov	r6, r0
 800e2d0:	460c      	mov	r4, r1
 800e2d2:	d507      	bpl.n	800e2e4 <__smakebuf_r+0x1c>
 800e2d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e2d8:	6023      	str	r3, [r4, #0]
 800e2da:	6123      	str	r3, [r4, #16]
 800e2dc:	2301      	movs	r3, #1
 800e2de:	6163      	str	r3, [r4, #20]
 800e2e0:	b003      	add	sp, #12
 800e2e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e2e4:	ab01      	add	r3, sp, #4
 800e2e6:	466a      	mov	r2, sp
 800e2e8:	f7ff ffc8 	bl	800e27c <__swhatbuf_r>
 800e2ec:	9f00      	ldr	r7, [sp, #0]
 800e2ee:	4605      	mov	r5, r0
 800e2f0:	4639      	mov	r1, r7
 800e2f2:	4630      	mov	r0, r6
 800e2f4:	f7fd fc2e 	bl	800bb54 <_malloc_r>
 800e2f8:	b948      	cbnz	r0, 800e30e <__smakebuf_r+0x46>
 800e2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2fe:	059a      	lsls	r2, r3, #22
 800e300:	d4ee      	bmi.n	800e2e0 <__smakebuf_r+0x18>
 800e302:	f023 0303 	bic.w	r3, r3, #3
 800e306:	f043 0302 	orr.w	r3, r3, #2
 800e30a:	81a3      	strh	r3, [r4, #12]
 800e30c:	e7e2      	b.n	800e2d4 <__smakebuf_r+0xc>
 800e30e:	89a3      	ldrh	r3, [r4, #12]
 800e310:	6020      	str	r0, [r4, #0]
 800e312:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e316:	81a3      	strh	r3, [r4, #12]
 800e318:	9b01      	ldr	r3, [sp, #4]
 800e31a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e31e:	b15b      	cbz	r3, 800e338 <__smakebuf_r+0x70>
 800e320:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e324:	4630      	mov	r0, r6
 800e326:	f000 f81d 	bl	800e364 <_isatty_r>
 800e32a:	b128      	cbz	r0, 800e338 <__smakebuf_r+0x70>
 800e32c:	89a3      	ldrh	r3, [r4, #12]
 800e32e:	f023 0303 	bic.w	r3, r3, #3
 800e332:	f043 0301 	orr.w	r3, r3, #1
 800e336:	81a3      	strh	r3, [r4, #12]
 800e338:	89a3      	ldrh	r3, [r4, #12]
 800e33a:	431d      	orrs	r5, r3
 800e33c:	81a5      	strh	r5, [r4, #12]
 800e33e:	e7cf      	b.n	800e2e0 <__smakebuf_r+0x18>

0800e340 <_fstat_r>:
 800e340:	b538      	push	{r3, r4, r5, lr}
 800e342:	4d07      	ldr	r5, [pc, #28]	@ (800e360 <_fstat_r+0x20>)
 800e344:	2300      	movs	r3, #0
 800e346:	4604      	mov	r4, r0
 800e348:	4608      	mov	r0, r1
 800e34a:	4611      	mov	r1, r2
 800e34c:	602b      	str	r3, [r5, #0]
 800e34e:	f7f5 fa71 	bl	8003834 <_fstat>
 800e352:	1c43      	adds	r3, r0, #1
 800e354:	d102      	bne.n	800e35c <_fstat_r+0x1c>
 800e356:	682b      	ldr	r3, [r5, #0]
 800e358:	b103      	cbz	r3, 800e35c <_fstat_r+0x1c>
 800e35a:	6023      	str	r3, [r4, #0]
 800e35c:	bd38      	pop	{r3, r4, r5, pc}
 800e35e:	bf00      	nop
 800e360:	200266ec 	.word	0x200266ec

0800e364 <_isatty_r>:
 800e364:	b538      	push	{r3, r4, r5, lr}
 800e366:	4d06      	ldr	r5, [pc, #24]	@ (800e380 <_isatty_r+0x1c>)
 800e368:	2300      	movs	r3, #0
 800e36a:	4604      	mov	r4, r0
 800e36c:	4608      	mov	r0, r1
 800e36e:	602b      	str	r3, [r5, #0]
 800e370:	f7f5 fa70 	bl	8003854 <_isatty>
 800e374:	1c43      	adds	r3, r0, #1
 800e376:	d102      	bne.n	800e37e <_isatty_r+0x1a>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	b103      	cbz	r3, 800e37e <_isatty_r+0x1a>
 800e37c:	6023      	str	r3, [r4, #0]
 800e37e:	bd38      	pop	{r3, r4, r5, pc}
 800e380:	200266ec 	.word	0x200266ec

0800e384 <__assert_func>:
 800e384:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e386:	4614      	mov	r4, r2
 800e388:	461a      	mov	r2, r3
 800e38a:	4b09      	ldr	r3, [pc, #36]	@ (800e3b0 <__assert_func+0x2c>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4605      	mov	r5, r0
 800e390:	68d8      	ldr	r0, [r3, #12]
 800e392:	b14c      	cbz	r4, 800e3a8 <__assert_func+0x24>
 800e394:	4b07      	ldr	r3, [pc, #28]	@ (800e3b4 <__assert_func+0x30>)
 800e396:	9100      	str	r1, [sp, #0]
 800e398:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e39c:	4906      	ldr	r1, [pc, #24]	@ (800e3b8 <__assert_func+0x34>)
 800e39e:	462b      	mov	r3, r5
 800e3a0:	f000 f842 	bl	800e428 <fiprintf>
 800e3a4:	f000 f852 	bl	800e44c <abort>
 800e3a8:	4b04      	ldr	r3, [pc, #16]	@ (800e3bc <__assert_func+0x38>)
 800e3aa:	461c      	mov	r4, r3
 800e3ac:	e7f3      	b.n	800e396 <__assert_func+0x12>
 800e3ae:	bf00      	nop
 800e3b0:	20000024 	.word	0x20000024
 800e3b4:	0800eb9d 	.word	0x0800eb9d
 800e3b8:	0800ebaa 	.word	0x0800ebaa
 800e3bc:	0800ebd8 	.word	0x0800ebd8

0800e3c0 <_calloc_r>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	fba1 5402 	umull	r5, r4, r1, r2
 800e3c6:	b934      	cbnz	r4, 800e3d6 <_calloc_r+0x16>
 800e3c8:	4629      	mov	r1, r5
 800e3ca:	f7fd fbc3 	bl	800bb54 <_malloc_r>
 800e3ce:	4606      	mov	r6, r0
 800e3d0:	b928      	cbnz	r0, 800e3de <_calloc_r+0x1e>
 800e3d2:	4630      	mov	r0, r6
 800e3d4:	bd70      	pop	{r4, r5, r6, pc}
 800e3d6:	220c      	movs	r2, #12
 800e3d8:	6002      	str	r2, [r0, #0]
 800e3da:	2600      	movs	r6, #0
 800e3dc:	e7f9      	b.n	800e3d2 <_calloc_r+0x12>
 800e3de:	462a      	mov	r2, r5
 800e3e0:	4621      	mov	r1, r4
 800e3e2:	f7fe faa3 	bl	800c92c <memset>
 800e3e6:	e7f4      	b.n	800e3d2 <_calloc_r+0x12>

0800e3e8 <__ascii_mbtowc>:
 800e3e8:	b082      	sub	sp, #8
 800e3ea:	b901      	cbnz	r1, 800e3ee <__ascii_mbtowc+0x6>
 800e3ec:	a901      	add	r1, sp, #4
 800e3ee:	b142      	cbz	r2, 800e402 <__ascii_mbtowc+0x1a>
 800e3f0:	b14b      	cbz	r3, 800e406 <__ascii_mbtowc+0x1e>
 800e3f2:	7813      	ldrb	r3, [r2, #0]
 800e3f4:	600b      	str	r3, [r1, #0]
 800e3f6:	7812      	ldrb	r2, [r2, #0]
 800e3f8:	1e10      	subs	r0, r2, #0
 800e3fa:	bf18      	it	ne
 800e3fc:	2001      	movne	r0, #1
 800e3fe:	b002      	add	sp, #8
 800e400:	4770      	bx	lr
 800e402:	4610      	mov	r0, r2
 800e404:	e7fb      	b.n	800e3fe <__ascii_mbtowc+0x16>
 800e406:	f06f 0001 	mvn.w	r0, #1
 800e40a:	e7f8      	b.n	800e3fe <__ascii_mbtowc+0x16>

0800e40c <__ascii_wctomb>:
 800e40c:	4603      	mov	r3, r0
 800e40e:	4608      	mov	r0, r1
 800e410:	b141      	cbz	r1, 800e424 <__ascii_wctomb+0x18>
 800e412:	2aff      	cmp	r2, #255	@ 0xff
 800e414:	d904      	bls.n	800e420 <__ascii_wctomb+0x14>
 800e416:	228a      	movs	r2, #138	@ 0x8a
 800e418:	601a      	str	r2, [r3, #0]
 800e41a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e41e:	4770      	bx	lr
 800e420:	700a      	strb	r2, [r1, #0]
 800e422:	2001      	movs	r0, #1
 800e424:	4770      	bx	lr
	...

0800e428 <fiprintf>:
 800e428:	b40e      	push	{r1, r2, r3}
 800e42a:	b503      	push	{r0, r1, lr}
 800e42c:	4601      	mov	r1, r0
 800e42e:	ab03      	add	r3, sp, #12
 800e430:	4805      	ldr	r0, [pc, #20]	@ (800e448 <fiprintf+0x20>)
 800e432:	f853 2b04 	ldr.w	r2, [r3], #4
 800e436:	6800      	ldr	r0, [r0, #0]
 800e438:	9301      	str	r3, [sp, #4]
 800e43a:	f7ff fd5b 	bl	800def4 <_vfiprintf_r>
 800e43e:	b002      	add	sp, #8
 800e440:	f85d eb04 	ldr.w	lr, [sp], #4
 800e444:	b003      	add	sp, #12
 800e446:	4770      	bx	lr
 800e448:	20000024 	.word	0x20000024

0800e44c <abort>:
 800e44c:	b508      	push	{r3, lr}
 800e44e:	2006      	movs	r0, #6
 800e450:	f000 f82c 	bl	800e4ac <raise>
 800e454:	2001      	movs	r0, #1
 800e456:	f7f5 f9b9 	bl	80037cc <_exit>

0800e45a <_raise_r>:
 800e45a:	291f      	cmp	r1, #31
 800e45c:	b538      	push	{r3, r4, r5, lr}
 800e45e:	4605      	mov	r5, r0
 800e460:	460c      	mov	r4, r1
 800e462:	d904      	bls.n	800e46e <_raise_r+0x14>
 800e464:	2316      	movs	r3, #22
 800e466:	6003      	str	r3, [r0, #0]
 800e468:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e46c:	bd38      	pop	{r3, r4, r5, pc}
 800e46e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e470:	b112      	cbz	r2, 800e478 <_raise_r+0x1e>
 800e472:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e476:	b94b      	cbnz	r3, 800e48c <_raise_r+0x32>
 800e478:	4628      	mov	r0, r5
 800e47a:	f000 f831 	bl	800e4e0 <_getpid_r>
 800e47e:	4622      	mov	r2, r4
 800e480:	4601      	mov	r1, r0
 800e482:	4628      	mov	r0, r5
 800e484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e488:	f000 b818 	b.w	800e4bc <_kill_r>
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d00a      	beq.n	800e4a6 <_raise_r+0x4c>
 800e490:	1c59      	adds	r1, r3, #1
 800e492:	d103      	bne.n	800e49c <_raise_r+0x42>
 800e494:	2316      	movs	r3, #22
 800e496:	6003      	str	r3, [r0, #0]
 800e498:	2001      	movs	r0, #1
 800e49a:	e7e7      	b.n	800e46c <_raise_r+0x12>
 800e49c:	2100      	movs	r1, #0
 800e49e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e4a2:	4620      	mov	r0, r4
 800e4a4:	4798      	blx	r3
 800e4a6:	2000      	movs	r0, #0
 800e4a8:	e7e0      	b.n	800e46c <_raise_r+0x12>
	...

0800e4ac <raise>:
 800e4ac:	4b02      	ldr	r3, [pc, #8]	@ (800e4b8 <raise+0xc>)
 800e4ae:	4601      	mov	r1, r0
 800e4b0:	6818      	ldr	r0, [r3, #0]
 800e4b2:	f7ff bfd2 	b.w	800e45a <_raise_r>
 800e4b6:	bf00      	nop
 800e4b8:	20000024 	.word	0x20000024

0800e4bc <_kill_r>:
 800e4bc:	b538      	push	{r3, r4, r5, lr}
 800e4be:	4d07      	ldr	r5, [pc, #28]	@ (800e4dc <_kill_r+0x20>)
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	4604      	mov	r4, r0
 800e4c4:	4608      	mov	r0, r1
 800e4c6:	4611      	mov	r1, r2
 800e4c8:	602b      	str	r3, [r5, #0]
 800e4ca:	f7f5 f96f 	bl	80037ac <_kill>
 800e4ce:	1c43      	adds	r3, r0, #1
 800e4d0:	d102      	bne.n	800e4d8 <_kill_r+0x1c>
 800e4d2:	682b      	ldr	r3, [r5, #0]
 800e4d4:	b103      	cbz	r3, 800e4d8 <_kill_r+0x1c>
 800e4d6:	6023      	str	r3, [r4, #0]
 800e4d8:	bd38      	pop	{r3, r4, r5, pc}
 800e4da:	bf00      	nop
 800e4dc:	200266ec 	.word	0x200266ec

0800e4e0 <_getpid_r>:
 800e4e0:	f7f5 b95c 	b.w	800379c <_getpid>

0800e4e4 <_init>:
 800e4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e6:	bf00      	nop
 800e4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ea:	bc08      	pop	{r3}
 800e4ec:	469e      	mov	lr, r3
 800e4ee:	4770      	bx	lr

0800e4f0 <_fini>:
 800e4f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4f2:	bf00      	nop
 800e4f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4f6:	bc08      	pop	{r3}
 800e4f8:	469e      	mov	lr, r3
 800e4fa:	4770      	bx	lr
