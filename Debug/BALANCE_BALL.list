
BALANCE_BALL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1a4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800d354  0800d354  0000e354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3d8  0800d3d8  0000f080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d3d8  0800d3d8  0000e3d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3e0  0800d3e0  0000f080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3e0  0800d3e0  0000e3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3e4  0800d3e4  0000e3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800d3e8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f080  2**0
                  CONTENTS
 10 .bss          00008f90  20000080  20000080  0000f080  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20009010  20009010  0000f080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002b048  00000000  00000000  0000f0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006bf1  00000000  00000000  0003a0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000023b0  00000000  00000000  00040cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b72  00000000  00000000  000430a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c942  00000000  00000000  00044c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002dfe0  00000000  00000000  00071554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f57c7  00000000  00000000  0009f534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00194cfb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009818  00000000  00000000  00194d40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0019e558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000080 	.word	0x20000080
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800d33c 	.word	0x0800d33c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000084 	.word	0x20000084
 80001ec:	0800d33c 	.word	0x0800d33c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000520:	4b06      	ldr	r3, [pc, #24]	@ (800053c <MX_CRC_Init+0x20>)
 8000522:	4a07      	ldr	r2, [pc, #28]	@ (8000540 <MX_CRC_Init+0x24>)
 8000524:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000526:	4805      	ldr	r0, [pc, #20]	@ (800053c <MX_CRC_Init+0x20>)
 8000528:	f001 f9fc 	bl	8001924 <HAL_CRC_Init>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000532:	f000 fde9 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	2000009c 	.word	0x2000009c
 8000540:	40023000 	.word	0x40023000

08000544 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a0b      	ldr	r2, [pc, #44]	@ (8000580 <HAL_CRC_MspInit+0x3c>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d10d      	bne.n	8000572 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	4b0a      	ldr	r3, [pc, #40]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a09      	ldr	r2, [pc, #36]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000560:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
 8000566:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <HAL_CRC_MspInit+0x40>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800056a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000572:	bf00      	nop
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40023000 	.word	0x40023000
 8000584:	40023800 	.word	0x40023800

08000588 <MX_DMA2D_Init>:

DMA2D_HandleTypeDef hdma2d;

/* DMA2D init function */
void MX_DMA2D_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800058c:	4b15      	ldr	r3, [pc, #84]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA2D_Init+0x60>)
 8000590:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000592:	4b14      	ldr	r3, [pc, #80]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 8000594:	2200      	movs	r2, #0
 8000596:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000598:	4b12      	ldr	r3, [pc, #72]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800059e:	4b11      	ldr	r3, [pc, #68]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80005a4:	4b0f      	ldr	r3, [pc, #60]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80005aa:	4b0e      	ldr	r3, [pc, #56]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80005b0:	4b0c      	ldr	r3, [pc, #48]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005be:	f001 f9cd 	bl	800195c <HAL_DMA2D_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80005c8:	f000 fd9e 	bl	8001108 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80005cc:	2101      	movs	r1, #1
 80005ce:	4805      	ldr	r0, [pc, #20]	@ (80005e4 <MX_DMA2D_Init+0x5c>)
 80005d0:	f001 fb1e 	bl	8001c10 <HAL_DMA2D_ConfigLayer>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80005da:	f000 fd95 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80005de:	bf00      	nop
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	200000a4 	.word	0x200000a4
 80005e8:	4002b000 	.word	0x4002b000

080005ec <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]

  if(dma2dHandle->Instance==DMA2D)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a0e      	ldr	r2, [pc, #56]	@ (8000634 <HAL_DMA2D_MspInit+0x48>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d115      	bne.n	800062a <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000608:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <HAL_DMA2D_MspInit+0x4c>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800061a:	2200      	movs	r2, #0
 800061c:	2105      	movs	r1, #5
 800061e:	205a      	movs	r0, #90	@ 0x5a
 8000620:	f001 f956 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000624:	205a      	movs	r0, #90	@ 0x5a
 8000626:	f001 f96f 	bl	8001908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 800062a:	bf00      	nop
 800062c:	3710      	adds	r7, #16
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	4002b000 	.word	0x4002b000
 8000638:	40023800 	.word	0x40023800

0800063c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]
 800064e:	611a      	str	r2, [r3, #16]
 8000650:	615a      	str	r2, [r3, #20]
 8000652:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000654:	4b1f      	ldr	r3, [pc, #124]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000656:	4a20      	ldr	r2, [pc, #128]	@ (80006d8 <MX_FMC_Init+0x9c>)
 8000658:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800065a:	4b1e      	ldr	r3, [pc, #120]	@ (80006d4 <MX_FMC_Init+0x98>)
 800065c:	2201      	movs	r2, #1
 800065e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000668:	2204      	movs	r2, #4
 800066a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <MX_FMC_Init+0x98>)
 800066e:	2210      	movs	r2, #16
 8000670:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000672:	4b18      	ldr	r3, [pc, #96]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000674:	2240      	movs	r2, #64	@ 0x40
 8000676:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000678:	4b16      	ldr	r3, [pc, #88]	@ (80006d4 <MX_FMC_Init+0x98>)
 800067a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800067e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000688:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800068c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_FMC_Init+0x98>)
 8000696:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800069a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 80006a0:	2307      	movs	r3, #7
 80006a2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 80006a4:	2304      	movs	r3, #4
 80006a6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 80006a8:	2307      	movs	r3, #7
 80006aa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 80006b0:	2302      	movs	r3, #2
 80006b2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 80006b4:	2302      	movs	r3, #2
 80006b6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_FMC_Init+0x98>)
 80006be:	f005 f9ff 	bl	8005ac0 <HAL_SDRAM_Init>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 80006c8:	f000 fd1e 	bl	8001108 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80006cc:	bf00      	nop
 80006ce:	3720      	adds	r7, #32
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000e4 	.word	0x200000e4
 80006d8:	a0000140 	.word	0xa0000140

080006dc <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80006f0:	4b3b      	ldr	r3, [pc, #236]	@ (80007e0 <HAL_FMC_MspInit+0x104>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d16f      	bne.n	80007d8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80006f8:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <HAL_FMC_MspInit+0x104>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	603b      	str	r3, [r7, #0]
 8000702:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000704:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000706:	4a37      	ldr	r2, [pc, #220]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6393      	str	r3, [r2, #56]	@ 0x38
 800070e:	4b35      	ldr	r3, [pc, #212]	@ (80007e4 <HAL_FMC_MspInit+0x108>)
 8000710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	603b      	str	r3, [r7, #0]
 8000718:	683b      	ldr	r3, [r7, #0]
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800071a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800071e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000720:	2302      	movs	r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000728:	2303      	movs	r3, #3
 800072a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800072c:	230c      	movs	r3, #12
 800072e:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000730:	1d3b      	adds	r3, r7, #4
 8000732:	4619      	mov	r1, r3
 8000734:	482c      	ldr	r0, [pc, #176]	@ (80007e8 <HAL_FMC_MspInit+0x10c>)
 8000736:	f001 fafd 	bl	8001d34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800073a:	2301      	movs	r3, #1
 800073c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073e:	2302      	movs	r3, #2
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000746:	2303      	movs	r3, #3
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800074a:	230c      	movs	r3, #12
 800074c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	4826      	ldr	r0, [pc, #152]	@ (80007ec <HAL_FMC_MspInit+0x110>)
 8000754:	f001 faee 	bl	8001d34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000758:	f248 1333 	movw	r3, #33075	@ 0x8133
 800075c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075e:	2302      	movs	r3, #2
 8000760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000766:	2303      	movs	r3, #3
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800076a:	230c      	movs	r3, #12
 800076c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	4619      	mov	r1, r3
 8000772:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <HAL_FMC_MspInit+0x114>)
 8000774:	f001 fade 	bl	8001d34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000778:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800077c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000786:	2303      	movs	r3, #3
 8000788:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800078a:	230c      	movs	r3, #12
 800078c:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	4619      	mov	r1, r3
 8000792:	4818      	ldr	r0, [pc, #96]	@ (80007f4 <HAL_FMC_MspInit+0x118>)
 8000794:	f001 face 	bl	8001d34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000798:	f24c 7303 	movw	r3, #50947	@ 0xc703
 800079c:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007aa:	230c      	movs	r3, #12
 80007ac:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4619      	mov	r1, r3
 80007b2:	4811      	ldr	r0, [pc, #68]	@ (80007f8 <HAL_FMC_MspInit+0x11c>)
 80007b4:	f001 fabe 	bl	8001d34 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80007b8:	2360      	movs	r3, #96	@ 0x60
 80007ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c4:	2303      	movs	r3, #3
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007c8:	230c      	movs	r3, #12
 80007ca:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	4619      	mov	r1, r3
 80007d0:	480a      	ldr	r0, [pc, #40]	@ (80007fc <HAL_FMC_MspInit+0x120>)
 80007d2:	f001 faaf 	bl	8001d34 <HAL_GPIO_Init>
 80007d6:	e000      	b.n	80007da <HAL_FMC_MspInit+0xfe>
    return;
 80007d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	20000118 	.word	0x20000118
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40021400 	.word	0x40021400
 80007ec:	40020800 	.word	0x40020800
 80007f0:	40021800 	.word	0x40021800
 80007f4:	40021000 	.word	0x40021000
 80007f8:	40020c00 	.word	0x40020c00
 80007fc:	40020400 	.word	0x40020400

08000800 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000808:	f7ff ff68 	bl	80006dc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}

08000814 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000818:	bf00      	nop
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr

08000822 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000822:	b480      	push	{r7}
 8000824:	b083      	sub	sp, #12
 8000826:	af00      	add	r7, sp, #0
 8000828:	6078      	str	r0, [r7, #4]
 800082a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800082c:	bf00      	nop
 800082e:	370c      	adds	r7, #12
 8000830:	46bd      	mov	sp, r7
 8000832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000836:	4770      	bx	lr

08000838 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
	...

08000848 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000848:	b480      	push	{r7}
 800084a:	b085      	sub	sp, #20
 800084c:	af00      	add	r7, sp, #0
 800084e:	60f8      	str	r0, [r7, #12]
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <vApplicationGetIdleTaskMemory+0x2c>)
 8000858:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800085a:	68bb      	ldr	r3, [r7, #8]
 800085c:	4a06      	ldr	r2, [pc, #24]	@ (8000878 <vApplicationGetIdleTaskMemory+0x30>)
 800085e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2280      	movs	r2, #128	@ 0x80
 8000864:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	20000120 	.word	0x20000120
 8000878:	20000178 	.word	0x20000178

0800087c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800087c:	b5b0      	push	{r4, r5, r7, lr}
 800087e:	b088      	sub	sp, #32
 8000880:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000882:	4b0a      	ldr	r3, [pc, #40]	@ (80008ac <MX_FREERTOS_Init+0x30>)
 8000884:	1d3c      	adds	r4, r7, #4
 8000886:	461d      	mov	r5, r3
 8000888:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000890:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f009 fe4a 	bl	800a532 <osThreadCreate>
 800089e:	4603      	mov	r3, r0
 80008a0:	4a03      	ldr	r2, [pc, #12]	@ (80008b0 <MX_FREERTOS_Init+0x34>)
 80008a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80008a4:	bf00      	nop
 80008a6:	3720      	adds	r7, #32
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bdb0      	pop	{r4, r5, r7, pc}
 80008ac:	0800d360 	.word	0x0800d360
 80008b0:	2000011c 	.word	0x2000011c

080008b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b082      	sub	sp, #8
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80008bc:	f00c f8da 	bl	800ca74 <MX_USB_HOST_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008c0:	2001      	movs	r0, #1
 80008c2:	f009 fe82 	bl	800a5ca <osDelay>
 80008c6:	e7fb      	b.n	80008c0 <StartDefaultTask+0xc>

080008c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	@ 0x38
 80008cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
 80008e2:	4b7b      	ldr	r3, [pc, #492]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e6:	4a7a      	ldr	r2, [pc, #488]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ee:	4b78      	ldr	r3, [pc, #480]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	f003 0304 	and.w	r3, r3, #4
 80008f6:	623b      	str	r3, [r7, #32]
 80008f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
 80008fe:	4b74      	ldr	r3, [pc, #464]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000902:	4a73      	ldr	r2, [pc, #460]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000904:	f043 0320 	orr.w	r3, r3, #32
 8000908:	6313      	str	r3, [r2, #48]	@ 0x30
 800090a:	4b71      	ldr	r3, [pc, #452]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	f003 0320 	and.w	r3, r3, #32
 8000912:	61fb      	str	r3, [r7, #28]
 8000914:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	61bb      	str	r3, [r7, #24]
 800091a:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091e:	4a6c      	ldr	r2, [pc, #432]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000924:	6313      	str	r3, [r2, #48]	@ 0x30
 8000926:	4b6a      	ldr	r3, [pc, #424]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
 8000936:	4b66      	ldr	r3, [pc, #408]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800093a:	4a65      	ldr	r2, [pc, #404]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800093c:	f043 0301 	orr.w	r3, r3, #1
 8000940:	6313      	str	r3, [r2, #48]	@ 0x30
 8000942:	4b63      	ldr	r3, [pc, #396]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	f003 0301 	and.w	r3, r3, #1
 800094a:	617b      	str	r3, [r7, #20]
 800094c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	4b5f      	ldr	r3, [pc, #380]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000956:	4a5e      	ldr	r2, [pc, #376]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000958:	f043 0302 	orr.w	r3, r3, #2
 800095c:	6313      	str	r3, [r2, #48]	@ 0x30
 800095e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000962:	f003 0302 	and.w	r3, r3, #2
 8000966:	613b      	str	r3, [r7, #16]
 8000968:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60fb      	str	r3, [r7, #12]
 800096e:	4b58      	ldr	r3, [pc, #352]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000972:	4a57      	ldr	r2, [pc, #348]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000974:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000978:	6313      	str	r3, [r2, #48]	@ 0x30
 800097a:	4b55      	ldr	r3, [pc, #340]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	60bb      	str	r3, [r7, #8]
 800098a:	4b51      	ldr	r3, [pc, #324]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098e:	4a50      	ldr	r2, [pc, #320]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000990:	f043 0310 	orr.w	r3, r3, #16
 8000994:	6313      	str	r3, [r2, #48]	@ 0x30
 8000996:	4b4e      	ldr	r3, [pc, #312]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099a:	f003 0310 	and.w	r3, r3, #16
 800099e:	60bb      	str	r3, [r7, #8]
 80009a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b4a      	ldr	r3, [pc, #296]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a49      	ldr	r2, [pc, #292]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80009ac:	f043 0308 	orr.w	r3, r3, #8
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b47      	ldr	r3, [pc, #284]	@ (8000ad0 <MX_GPIO_Init+0x208>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0308 	and.w	r3, r3, #8
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2116      	movs	r1, #22
 80009c2:	4844      	ldr	r0, [pc, #272]	@ (8000ad4 <MX_GPIO_Init+0x20c>)
 80009c4:	f001 fb62 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2180      	movs	r1, #128	@ 0x80
 80009cc:	4842      	ldr	r0, [pc, #264]	@ (8000ad8 <MX_GPIO_Init+0x210>)
 80009ce:	f001 fb5d 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80009d8:	4840      	ldr	r0, [pc, #256]	@ (8000adc <MX_GPIO_Init+0x214>)
 80009da:	f001 fb57 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80009e4:	483e      	ldr	r0, [pc, #248]	@ (8000ae0 <MX_GPIO_Init+0x218>)
 80009e6:	f001 fb51 	bl	800208c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80009ea:	2316      	movs	r3, #22
 80009ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009fe:	4619      	mov	r1, r3
 8000a00:	4834      	ldr	r0, [pc, #208]	@ (8000ad4 <MX_GPIO_Init+0x20c>)
 8000a02:	f001 f997 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000a06:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a0c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	482e      	ldr	r0, [pc, #184]	@ (8000ad8 <MX_GPIO_Init+0x210>)
 8000a1e:	f001 f989 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000a22:	2380      	movs	r3, #128	@ 0x80
 8000a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	4827      	ldr	r0, [pc, #156]	@ (8000ad8 <MX_GPIO_Init+0x210>)
 8000a3a:	f001 f97b 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a42:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a50:	4619      	mov	r1, r3
 8000a52:	4820      	ldr	r0, [pc, #128]	@ (8000ad4 <MX_GPIO_Init+0x20c>)
 8000a54:	f001 f96e 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a68:	4619      	mov	r1, r3
 8000a6a:	481e      	ldr	r0, [pc, #120]	@ (8000ae4 <MX_GPIO_Init+0x21c>)
 8000a6c:	f001 f962 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000a70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	@ (8000adc <MX_GPIO_Init+0x214>)
 8000a86:	f001 f955 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000a8a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000a8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	480e      	ldr	r0, [pc, #56]	@ (8000adc <MX_GPIO_Init+0x214>)
 8000aa4:	f001 f946 	bl	8001d34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000aa8:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4807      	ldr	r0, [pc, #28]	@ (8000ae0 <MX_GPIO_Init+0x218>)
 8000ac2:	f001 f937 	bl	8001d34 <HAL_GPIO_Init>

}
 8000ac6:	bf00      	nop
 8000ac8:	3738      	adds	r7, #56	@ 0x38
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020000 	.word	0x40020000
 8000adc:	40020c00 	.word	0x40020c00
 8000ae0:	40021800 	.word	0x40021800
 8000ae4:	40020400 	.word	0x40020400

08000ae8 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	@ (8000b60 <MX_I2C3_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b64 <MX_I2C3_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000af8:	4b18      	ldr	r3, [pc, #96]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000afe:	4b17      	ldr	r3, [pc, #92]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b04:	4b15      	ldr	r3, [pc, #84]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b06:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b0a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b0c:	4b13      	ldr	r3, [pc, #76]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b12:	4b12      	ldr	r3, [pc, #72]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b18:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b24:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b26:	f003 fc19 	bl	800435c <HAL_I2C_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b30:	f000 faea 	bl	8001108 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4809      	ldr	r0, [pc, #36]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b38:	f003 fd54 	bl	80045e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000b42:	f000 fae1 	bl	8001108 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000b46:	2100      	movs	r1, #0
 8000b48:	4804      	ldr	r0, [pc, #16]	@ (8000b5c <MX_I2C3_Init+0x74>)
 8000b4a:	f003 fd87 	bl	800465c <HAL_I2CEx_ConfigDigitalFilter>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000b54:	f000 fad8 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	20000378 	.word	0x20000378
 8000b60:	40005c00 	.word	0x40005c00
 8000b64:	000186a0 	.word	0x000186a0

08000b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	@ 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a29      	ldr	r2, [pc, #164]	@ (8000c2c <HAL_I2C_MspInit+0xc4>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d14b      	bne.n	8000c22 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b28      	ldr	r3, [pc, #160]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b92:	4a27      	ldr	r2, [pc, #156]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b9a:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b21      	ldr	r3, [pc, #132]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bae:	4a20      	ldr	r2, [pc, #128]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bb0:	f043 0301 	orr.w	r3, r3, #1
 8000bb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bba:	f003 0301 	and.w	r3, r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000bc2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bc8:	2312      	movs	r3, #18
 8000bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bd4:	2304      	movs	r3, #4
 8000bd6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4815      	ldr	r0, [pc, #84]	@ (8000c34 <HAL_I2C_MspInit+0xcc>)
 8000be0:	f001 f8a8 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000be4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000be8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bea:	2312      	movs	r3, #18
 8000bec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	480d      	ldr	r0, [pc, #52]	@ (8000c38 <HAL_I2C_MspInit+0xd0>)
 8000c02:	f001 f897 	bl	8001d34 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c0e:	4a08      	ldr	r2, [pc, #32]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c10:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c16:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <HAL_I2C_MspInit+0xc8>)
 8000c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000c22:	bf00      	nop
 8000c24:	3728      	adds	r7, #40	@ 0x28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40005c00 	.word	0x40005c00
 8000c30:	40023800 	.word	0x40023800
 8000c34:	40020800 	.word	0x40020800
 8000c38:	40020000 	.word	0x40020000

08000c3c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	@ 0x38
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2234      	movs	r2, #52	@ 0x34
 8000c46:	2100      	movs	r1, #0
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f00c fadb 	bl	800d204 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000c4e:	4b39      	ldr	r3, [pc, #228]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c50:	4a39      	ldr	r2, [pc, #228]	@ (8000d38 <MX_LTDC_Init+0xfc>)
 8000c52:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000c54:	4b37      	ldr	r3, [pc, #220]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000c5a:	4b36      	ldr	r3, [pc, #216]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000c60:	4b34      	ldr	r3, [pc, #208]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000c66:	4b33      	ldr	r3, [pc, #204]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000c6c:	4b31      	ldr	r3, [pc, #196]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c6e:	2209      	movs	r2, #9
 8000c70:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000c72:	4b30      	ldr	r3, [pc, #192]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000c78:	4b2e      	ldr	r3, [pc, #184]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c7a:	221d      	movs	r2, #29
 8000c7c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000c7e:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c80:	2203      	movs	r2, #3
 8000c82:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000c84:	4b2b      	ldr	r3, [pc, #172]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c86:	f240 120d 	movw	r2, #269	@ 0x10d
 8000c8a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000c8c:	4b29      	ldr	r3, [pc, #164]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c8e:	f240 1243 	movw	r2, #323	@ 0x143
 8000c92:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c96:	f240 1217 	movw	r2, #279	@ 0x117
 8000c9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000c9c:	4b25      	ldr	r3, [pc, #148]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000c9e:	f240 1247 	movw	r2, #327	@ 0x147
 8000ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000cac:	4b21      	ldr	r3, [pc, #132]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000cb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000cbc:	481d      	ldr	r0, [pc, #116]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000cbe:	f003 fd0d 	bl	80046dc <HAL_LTDC_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000cc8:	f000 fa1e 	bl	8001108 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000cd0:	23f0      	movs	r3, #240	@ 0xf0
 8000cd2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000cd8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000cdc:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ce2:	23ff      	movs	r3, #255	@ 0xff
 8000ce4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000cea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000cee:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000cf0:	2307      	movs	r3, #7
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000cf4:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000cf8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000cfa:	23f0      	movs	r3, #240	@ 0xf0
 8000cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000cfe:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_LTDC_Init+0xf8>)
 8000d1e:	f003 fe6f 	bl	8004a00 <HAL_LTDC_ConfigLayer>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000d28:	f000 f9ee 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000d2c:	bf00      	nop
 8000d2e:	3738      	adds	r7, #56	@ 0x38
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200003cc 	.word	0x200003cc
 8000d38:	40016800 	.word	0x40016800

08000d3c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b09a      	sub	sp, #104	@ 0x68
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d44:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	605a      	str	r2, [r3, #4]
 8000d4e:	609a      	str	r2, [r3, #8]
 8000d50:	60da      	str	r2, [r3, #12]
 8000d52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d58:	2230      	movs	r2, #48	@ 0x30
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f00c fa51 	bl	800d204 <memset>
  if(ltdcHandle->Instance==LTDC)
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a85      	ldr	r2, [pc, #532]	@ (8000f7c <HAL_LTDC_MspInit+0x240>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	f040 8102 	bne.w	8000f72 <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d6e:	2308      	movs	r3, #8
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000d72:	2332      	movs	r3, #50	@ 0x32
 8000d74:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d76:	2302      	movs	r3, #2
 8000d78:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d82:	4618      	mov	r0, r3
 8000d84:	f004 fcdc 	bl	8005740 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000d8e:	f000 f9bb 	bl	8001108 <Error_Handler>
    }

    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	623b      	str	r3, [r7, #32]
 8000d96:	4b7a      	ldr	r3, [pc, #488]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d9a:	4a79      	ldr	r2, [pc, #484]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000d9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000da0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000da2:	4b77      	ldr	r3, [pc, #476]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000da6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000daa:	623b      	str	r3, [r7, #32]
 8000dac:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	4b73      	ldr	r3, [pc, #460]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	4a72      	ldr	r2, [pc, #456]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000db8:	f043 0320 	orr.w	r3, r3, #32
 8000dbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dbe:	4b70      	ldr	r3, [pc, #448]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	f003 0320 	and.w	r3, r3, #32
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
 8000dce:	4b6c      	ldr	r3, [pc, #432]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	4a6b      	ldr	r2, [pc, #428]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dda:	4b69      	ldr	r3, [pc, #420]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	61bb      	str	r3, [r7, #24]
 8000de4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	617b      	str	r3, [r7, #20]
 8000dea:	4b65      	ldr	r3, [pc, #404]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	4a64      	ldr	r2, [pc, #400]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000df0:	f043 0302 	orr.w	r3, r3, #2
 8000df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df6:	4b62      	ldr	r3, [pc, #392]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
 8000e06:	4b5e      	ldr	r3, [pc, #376]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0a:	4a5d      	ldr	r2, [pc, #372]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e0c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e12:	4b5b      	ldr	r3, [pc, #364]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	4b57      	ldr	r3, [pc, #348]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e26:	4a56      	ldr	r2, [pc, #344]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e2e:	4b54      	ldr	r3, [pc, #336]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60fb      	str	r3, [r7, #12]
 8000e38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60bb      	str	r3, [r7, #8]
 8000e3e:	4b50      	ldr	r3, [pc, #320]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a4f      	ldr	r2, [pc, #316]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b4d      	ldr	r3, [pc, #308]	@ (8000f80 <HAL_LTDC_MspInit+0x244>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0308 	and.w	r3, r3, #8
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000e56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e5a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e68:	230e      	movs	r3, #14
 8000e6a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e70:	4619      	mov	r1, r3
 8000e72:	4844      	ldr	r0, [pc, #272]	@ (8000f84 <HAL_LTDC_MspInit+0x248>)
 8000e74:	f000 ff5e 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000e78:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000e7c:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e8a:	230e      	movs	r3, #14
 8000e8c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e92:	4619      	mov	r1, r3
 8000e94:	483c      	ldr	r0, [pc, #240]	@ (8000f88 <HAL_LTDC_MspInit+0x24c>)
 8000e96:	f000 ff4d 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000eaa:	2309      	movs	r3, #9
 8000eac:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4835      	ldr	r0, [pc, #212]	@ (8000f8c <HAL_LTDC_MspInit+0x250>)
 8000eb6:	f000 ff3d 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000eba:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000ebe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	482d      	ldr	r0, [pc, #180]	@ (8000f8c <HAL_LTDC_MspInit+0x250>)
 8000ed8:	f000 ff2c 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000edc:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ee0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eee:	230e      	movs	r3, #14
 8000ef0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4825      	ldr	r0, [pc, #148]	@ (8000f90 <HAL_LTDC_MspInit+0x254>)
 8000efa:	f000 ff1b 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000efe:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000f02:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f10:	230e      	movs	r3, #14
 8000f12:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f14:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f18:	4619      	mov	r1, r3
 8000f1a:	481e      	ldr	r0, [pc, #120]	@ (8000f94 <HAL_LTDC_MspInit+0x258>)
 8000f1c:	f000 ff0a 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000f20:	2348      	movs	r3, #72	@ 0x48
 8000f22:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f30:	230e      	movs	r3, #14
 8000f32:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f34:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4817      	ldr	r0, [pc, #92]	@ (8000f98 <HAL_LTDC_MspInit+0x25c>)
 8000f3c:	f000 fefa 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000f40:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000f44:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f46:	2302      	movs	r3, #2
 8000f48:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f52:	2309      	movs	r3, #9
 8000f54:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f56:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <HAL_LTDC_MspInit+0x254>)
 8000f5e:	f000 fee9 	bl	8001d34 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2105      	movs	r1, #5
 8000f66:	2058      	movs	r0, #88	@ 0x58
 8000f68:	f000 fcb2 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8000f6c:	2058      	movs	r0, #88	@ 0x58
 8000f6e:	f000 fccb 	bl	8001908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8000f72:	bf00      	nop
 8000f74:	3768      	adds	r7, #104	@ 0x68
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop
 8000f7c:	40016800 	.word	0x40016800
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40021400 	.word	0x40021400
 8000f88:	40020000 	.word	0x40020000
 8000f8c:	40020400 	.word	0x40020400
 8000f90:	40021800 	.word	0x40021800
 8000f94:	40020800 	.word	0x40020800
 8000f98:	40020c00 	.word	0x40020c00

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa0:	f000 fb78 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa4:	f000 f834 	bl	8001010 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa8:	f7ff fc8e 	bl	80008c8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000fac:	f7ff fab6 	bl	800051c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000fb0:	f7ff faea 	bl	8000588 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000fb4:	f7ff fb42 	bl	800063c <MX_FMC_Init>
  MX_I2C3_Init();
 8000fb8:	f7ff fd96 	bl	8000ae8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000fbc:	f7ff fe3e 	bl	8000c3c <MX_LTDC_Init>
  MX_SPI5_Init();
 8000fc0:	f000 f8a8 	bl	8001114 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000fc4:	f000 fa58 	bl	8001478 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000fc8:	f000 fac8 	bl	800155c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fcc:	f7ff fc56 	bl	800087c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fd0:	f009 faa8 	bl	800a524 <osKernelStart>
//  lcd_put_rectangle(0, 48, 160, 16, YELLOW);
//  lcd_put_rectangle(0, 64, 160, 16, MAGENTA);
//  lcd_put_rectangle(0, 80, 160, 16, CYAN);
//  lcd_put_rectangle(0, 96, 160, 16, WHITE);
//  lcd_put_rectangle(0, 112, 160, 16, BLACK);
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fda:	480c      	ldr	r0, [pc, #48]	@ (800100c <main+0x70>)
 8000fdc:	f001 f856 	bl	800208c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000fe6:	4809      	ldr	r0, [pc, #36]	@ (800100c <main+0x70>)
 8000fe8:	f001 f850 	bl	800208c <HAL_GPIO_WritePin>
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8000fec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff0:	4806      	ldr	r0, [pc, #24]	@ (800100c <main+0x70>)
 8000ff2:	f001 f864 	bl	80020be <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 8000ff6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ffa:	4804      	ldr	r0, [pc, #16]	@ (800100c <main+0x70>)
 8000ffc:	f001 f85f 	bl	80020be <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8001000:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001004:	f000 fb88 	bl	8001718 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 8001008:	bf00      	nop
 800100a:	e7ef      	b.n	8000fec <main+0x50>
 800100c:	40021800 	.word	0x40021800

08001010 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b094      	sub	sp, #80	@ 0x50
 8001014:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2230      	movs	r2, #48	@ 0x30
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f00c f8f0 	bl	800d204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001024:	f107 030c 	add.w	r3, r7, #12
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	4b28      	ldr	r3, [pc, #160]	@ (80010dc <SystemClock_Config+0xcc>)
 800103a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103c:	4a27      	ldr	r2, [pc, #156]	@ (80010dc <SystemClock_Config+0xcc>)
 800103e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001042:	6413      	str	r3, [r2, #64]	@ 0x40
 8001044:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <SystemClock_Config+0xcc>)
 8001046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001048:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <SystemClock_Config+0xd0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800105c:	4a20      	ldr	r2, [pc, #128]	@ (80010e0 <SystemClock_Config+0xd0>)
 800105e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001062:	6013      	str	r3, [r2, #0]
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <SystemClock_Config+0xd0>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800106c:	607b      	str	r3, [r7, #4]
 800106e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001070:	2301      	movs	r3, #1
 8001072:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001074:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001078:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107a:	2302      	movs	r3, #2
 800107c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800107e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001084:	2304      	movs	r3, #4
 8001086:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001088:	2348      	movs	r3, #72	@ 0x48
 800108a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800108c:	2302      	movs	r3, #2
 800108e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001090:	2303      	movs	r3, #3
 8001092:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001094:	f107 0320 	add.w	r3, r7, #32
 8001098:	4618      	mov	r0, r3
 800109a:	f003 fe87 	bl	8004dac <HAL_RCC_OscConfig>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80010a4:	f000 f830 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a8:	230f      	movs	r3, #15
 80010aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ac:	2302      	movs	r3, #2
 80010ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	2102      	movs	r1, #2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f004 f8e9 	bl	800529c <HAL_RCC_ClockConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010d0:	f000 f81a 	bl	8001108 <Error_Handler>
  }
}
 80010d4:	bf00      	nop
 80010d6:	3750      	adds	r7, #80	@ 0x50
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	40007000 	.word	0x40007000

080010e4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a04      	ldr	r2, [pc, #16]	@ (8001104 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d101      	bne.n	80010fa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010f6:	f000 faef 	bl	80016d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40001000 	.word	0x40001000

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	bf00      	nop
 8001112:	e7fd      	b.n	8001110 <Error_Handler+0x8>

08001114 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001118:	4b17      	ldr	r3, [pc, #92]	@ (8001178 <MX_SPI5_Init+0x64>)
 800111a:	4a18      	ldr	r2, [pc, #96]	@ (800117c <MX_SPI5_Init+0x68>)
 800111c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800111e:	4b16      	ldr	r3, [pc, #88]	@ (8001178 <MX_SPI5_Init+0x64>)
 8001120:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001124:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001126:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_SPI5_Init+0x64>)
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <MX_SPI5_Init+0x64>)
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_SPI5_Init+0x64>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_SPI5_Init+0x64>)
 800113a:	2200      	movs	r2, #0
 800113c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_SPI5_Init+0x64>)
 8001140:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001144:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001146:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_SPI5_Init+0x64>)
 8001148:	2218      	movs	r2, #24
 800114a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800114c:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <MX_SPI5_Init+0x64>)
 800114e:	2200      	movs	r2, #0
 8001150:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_SPI5_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <MX_SPI5_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_SPI5_Init+0x64>)
 8001160:	220a      	movs	r2, #10
 8001162:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001164:	4804      	ldr	r0, [pc, #16]	@ (8001178 <MX_SPI5_Init+0x64>)
 8001166:	f004 fcdf 	bl	8005b28 <HAL_SPI_Init>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001170:	f7ff ffca 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20000474 	.word	0x20000474
 800117c:	40015000 	.word	0x40015000

08001180 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	@ 0x28
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a19      	ldr	r2, [pc, #100]	@ (8001204 <HAL_SPI_MspInit+0x84>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d12c      	bne.n	80011fc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a17      	ldr	r2, [pc, #92]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ba:	613b      	str	r3, [r7, #16]
 80011bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	4a10      	ldr	r2, [pc, #64]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011c8:	f043 0320 	orr.w	r3, r3, #32
 80011cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001208 <HAL_SPI_MspInit+0x88>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80011da:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80011de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e0:	2302      	movs	r3, #2
 80011e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80011ec:	2305      	movs	r3, #5
 80011ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4619      	mov	r1, r3
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <HAL_SPI_MspInit+0x8c>)
 80011f8:	f000 fd9c 	bl	8001d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80011fc:	bf00      	nop
 80011fe:	3728      	adds	r7, #40	@ 0x28
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40015000 	.word	0x40015000
 8001208:	40023800 	.word	0x40023800
 800120c:	40021400 	.word	0x40021400

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <HAL_MspInit+0x54>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a11      	ldr	r2, [pc, #68]	@ (8001264 <HAL_MspInit+0x54>)
 8001220:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_MspInit+0x54>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	603b      	str	r3, [r7, #0]
 8001236:	4b0b      	ldr	r3, [pc, #44]	@ (8001264 <HAL_MspInit+0x54>)
 8001238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123a:	4a0a      	ldr	r2, [pc, #40]	@ (8001264 <HAL_MspInit+0x54>)
 800123c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001240:	6413      	str	r3, [r2, #64]	@ 0x40
 8001242:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <HAL_MspInit+0x54>)
 8001244:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001246:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800124a:	603b      	str	r3, [r7, #0]
 800124c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	210f      	movs	r1, #15
 8001252:	f06f 0001 	mvn.w	r0, #1
 8001256:	f000 fb3b 	bl	80018d0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800125a:	bf00      	nop
 800125c:	3708      	adds	r7, #8
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40023800 	.word	0x40023800

08001268 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	@ 0x38
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001274:	2300      	movs	r3, #0
 8001276:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	4b33      	ldr	r3, [pc, #204]	@ (800134c <HAL_InitTick+0xe4>)
 800127e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001280:	4a32      	ldr	r2, [pc, #200]	@ (800134c <HAL_InitTick+0xe4>)
 8001282:	f043 0310 	orr.w	r3, r3, #16
 8001286:	6413      	str	r3, [r2, #64]	@ 0x40
 8001288:	4b30      	ldr	r3, [pc, #192]	@ (800134c <HAL_InitTick+0xe4>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001294:	f107 0210 	add.w	r2, r7, #16
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4611      	mov	r1, r2
 800129e:	4618      	mov	r0, r3
 80012a0:	f004 fa1c 	bl	80056dc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012a4:	6a3b      	ldr	r3, [r7, #32]
 80012a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d103      	bne.n	80012b6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012ae:	f004 f9ed 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 80012b2:	6378      	str	r0, [r7, #52]	@ 0x34
 80012b4:	e004      	b.n	80012c0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012b6:	f004 f9e9 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 80012ba:	4603      	mov	r3, r0
 80012bc:	005b      	lsls	r3, r3, #1
 80012be:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012c2:	4a23      	ldr	r2, [pc, #140]	@ (8001350 <HAL_InitTick+0xe8>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9b      	lsrs	r3, r3, #18
 80012ca:	3b01      	subs	r3, #1
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ce:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <HAL_InitTick+0xec>)
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <HAL_InitTick+0xf0>)
 80012d2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001354 <HAL_InitTick+0xec>)
 80012d6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012da:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80012dc:	4a1d      	ldr	r2, [pc, #116]	@ (8001354 <HAL_InitTick+0xec>)
 80012de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80012e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <HAL_InitTick+0xec>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <HAL_InitTick+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <HAL_InitTick+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012f4:	4817      	ldr	r0, [pc, #92]	@ (8001354 <HAL_InitTick+0xec>)
 80012f6:	f004 fca0 	bl	8005c3a <HAL_TIM_Base_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001300:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001304:	2b00      	cmp	r3, #0
 8001306:	d11b      	bne.n	8001340 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001308:	4812      	ldr	r0, [pc, #72]	@ (8001354 <HAL_InitTick+0xec>)
 800130a:	f004 fce5 	bl	8005cd8 <HAL_TIM_Base_Start_IT>
 800130e:	4603      	mov	r3, r0
 8001310:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001314:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001318:	2b00      	cmp	r3, #0
 800131a:	d111      	bne.n	8001340 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800131c:	2036      	movs	r0, #54	@ 0x36
 800131e:	f000 faf3 	bl	8001908 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d808      	bhi.n	800133a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	2036      	movs	r0, #54	@ 0x36
 800132e:	f000 facf 	bl	80018d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001332:	4a0a      	ldr	r2, [pc, #40]	@ (800135c <HAL_InitTick+0xf4>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	e002      	b.n	8001340 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001340:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001344:	4618      	mov	r0, r3
 8001346:	3738      	adds	r7, #56	@ 0x38
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40023800 	.word	0x40023800
 8001350:	431bde83 	.word	0x431bde83
 8001354:	200004cc 	.word	0x200004cc
 8001358:	40001000 	.word	0x40001000
 800135c:	20000004 	.word	0x20000004

08001360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001364:	bf00      	nop
 8001366:	e7fd      	b.n	8001364 <NMI_Handler+0x4>

08001368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <HardFault_Handler+0x4>

08001370 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <MemManage_Handler+0x4>

08001378 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <BusFault_Handler+0x4>

08001380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <UsageFault_Handler+0x4>

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800139c:	4802      	ldr	r0, [pc, #8]	@ (80013a8 <TIM6_DAC_IRQHandler+0x10>)
 800139e:	f004 fd0b 	bl	8005db8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	200004cc 	.word	0x200004cc

080013ac <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80013b0:	4802      	ldr	r0, [pc, #8]	@ (80013bc <OTG_HS_IRQHandler+0x10>)
 80013b2:	f001 f97f 	bl	80026b4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	20008ae8 	.word	0x20008ae8

080013c0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80013c4:	4802      	ldr	r0, [pc, #8]	@ (80013d0 <LTDC_IRQHandler+0x10>)
 80013c6:	f003 fa59 	bl	800487c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	200003cc 	.word	0x200003cc

080013d4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <DMA2D_IRQHandler+0x10>)
 80013da:	f000 fb08 	bl	80019ee <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000a4 	.word	0x200000a4

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f00b ff0c 	bl	800d234 <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20030000 	.word	0x20030000
 8001448:	00000400 	.word	0x00000400
 800144c:	20000514 	.word	0x20000514
 8001450:	20009010 	.word	0x20009010

08001454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <SystemInit+0x20>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <SystemInit+0x20>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148c:	463b      	mov	r3, r7
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001494:	4b1e      	ldr	r3, [pc, #120]	@ (8001510 <MX_TIM1_Init+0x98>)
 8001496:	4a1f      	ldr	r2, [pc, #124]	@ (8001514 <MX_TIM1_Init+0x9c>)
 8001498:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800149a:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <MX_TIM1_Init+0x98>)
 800149c:	2200      	movs	r2, #0
 800149e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <MX_TIM1_Init+0x98>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <MX_TIM1_Init+0x98>)
 80014a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ae:	4b18      	ldr	r3, [pc, #96]	@ (8001510 <MX_TIM1_Init+0x98>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014b4:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <MX_TIM1_Init+0x98>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ba:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <MX_TIM1_Init+0x98>)
 80014bc:	2200      	movs	r2, #0
 80014be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014c0:	4813      	ldr	r0, [pc, #76]	@ (8001510 <MX_TIM1_Init+0x98>)
 80014c2:	f004 fbba 	bl	8005c3a <HAL_TIM_Base_Init>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80014cc:	f7ff fe1c 	bl	8001108 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4619      	mov	r1, r3
 80014dc:	480c      	ldr	r0, [pc, #48]	@ (8001510 <MX_TIM1_Init+0x98>)
 80014de:	f004 fd5b 	bl	8005f98 <HAL_TIM_ConfigClockSource>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80014e8:	f7ff fe0e 	bl	8001108 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ec:	2300      	movs	r3, #0
 80014ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014f0:	2300      	movs	r3, #0
 80014f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014f4:	463b      	mov	r3, r7
 80014f6:	4619      	mov	r1, r3
 80014f8:	4805      	ldr	r0, [pc, #20]	@ (8001510 <MX_TIM1_Init+0x98>)
 80014fa:	f004 ff83 	bl	8006404 <HAL_TIMEx_MasterConfigSynchronization>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001504:	f7ff fe00 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001508:	bf00      	nop
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000518 	.word	0x20000518
 8001514:	40010000 	.word	0x40010000

08001518 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0b      	ldr	r2, [pc, #44]	@ (8001554 <HAL_TIM_Base_MspInit+0x3c>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d10d      	bne.n	8001546 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001532:	4a09      	ldr	r2, [pc, #36]	@ (8001558 <HAL_TIM_Base_MspInit+0x40>)
 8001534:	f043 0301 	orr.w	r3, r3, #1
 8001538:	6453      	str	r3, [r2, #68]	@ 0x44
 800153a:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <HAL_TIM_Base_MspInit+0x40>)
 800153c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001546:	bf00      	nop
 8001548:	3714      	adds	r7, #20
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	40010000 	.word	0x40010000
 8001558:	40023800 	.word	0x40023800

0800155c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001562:	4a12      	ldr	r2, [pc, #72]	@ (80015ac <MX_USART1_UART_Init+0x50>)
 8001564:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001566:	4b10      	ldr	r3, [pc, #64]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001568:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800156c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156e:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001576:	2200      	movs	r2, #0
 8001578:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 800157c:	2200      	movs	r2, #0
 800157e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001580:	4b09      	ldr	r3, [pc, #36]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001582:	220c      	movs	r2, #12
 8001584:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001586:	4b08      	ldr	r3, [pc, #32]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001588:	2200      	movs	r2, #0
 800158a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800158c:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 800158e:	2200      	movs	r2, #0
 8001590:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001592:	4805      	ldr	r0, [pc, #20]	@ (80015a8 <MX_USART1_UART_Init+0x4c>)
 8001594:	f004 ffc6 	bl	8006524 <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800159e:	f7ff fdb3 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000560 	.word	0x20000560
 80015ac:	40011000 	.word	0x40011000

080015b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	@ 0x28
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b8:	f107 0314 	add.w	r3, r7, #20
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a19      	ldr	r2, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0x84>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d12c      	bne.n	800162c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d2:	2300      	movs	r3, #0
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	4b18      	ldr	r3, [pc, #96]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	4a17      	ldr	r2, [pc, #92]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <HAL_UART_MspInit+0x88>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001638 <HAL_UART_MspInit+0x88>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
 8001608:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800160a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800160e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001618:	2303      	movs	r3, #3
 800161a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800161c:	2307      	movs	r3, #7
 800161e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	4619      	mov	r1, r3
 8001626:	4805      	ldr	r0, [pc, #20]	@ (800163c <HAL_UART_MspInit+0x8c>)
 8001628:	f000 fb84 	bl	8001d34 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	@ 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40011000 	.word	0x40011000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020000 	.word	0x40020000

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001644:	f7ff ff06 	bl	8001454 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800166e:	f00b fde7 	bl	800d240 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7ff fc93 	bl	8000f9c <main>
  bx  lr    
 8001676:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001678:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001684:	0800d3e8 	.word	0x0800d3e8
  ldr r2, =_sbss
 8001688:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800168c:	20009010 	.word	0x20009010

08001690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_Init+0x40>)
 800169e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_Init+0x40>)
 80016aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_Init+0x40>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f8fc 	bl	80018ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f7ff fdd0 	bl	8001268 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff fda2 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_IncTick+0x20>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_IncTick+0x24>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4413      	add	r3, r2
 80016e8:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <HAL_IncTick+0x24>)
 80016ea:	6013      	str	r3, [r2, #0]
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	200005a8 	.word	0x200005a8

08001700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return uwTick;
 8001704:	4b03      	ldr	r3, [pc, #12]	@ (8001714 <HAL_GetTick+0x14>)
 8001706:	681b      	ldr	r3, [r3, #0]
}
 8001708:	4618      	mov	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	200005a8 	.word	0x200005a8

08001718 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001720:	f7ff ffee 	bl	8001700 <HAL_GetTick>
 8001724:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001730:	d005      	beq.n	800173e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001732:	4b0a      	ldr	r3, [pc, #40]	@ (800175c <HAL_Delay+0x44>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	461a      	mov	r2, r3
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4413      	add	r3, r2
 800173c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800173e:	bf00      	nop
 8001740:	f7ff ffde 	bl	8001700 <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	429a      	cmp	r2, r3
 800174e:	d8f7      	bhi.n	8001740 <HAL_Delay+0x28>
  {
  }
}
 8001750:	bf00      	nop
 8001752:	bf00      	nop
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008

08001760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001770:	4b0c      	ldr	r3, [pc, #48]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001776:	68ba      	ldr	r2, [r7, #8]
 8001778:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800177c:	4013      	ands	r3, r2
 800177e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001788:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800178c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001792:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	60d3      	str	r3, [r2, #12]
}
 8001798:	bf00      	nop
 800179a:	3714      	adds	r7, #20
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ac:	4b04      	ldr	r3, [pc, #16]	@ (80017c0 <__NVIC_GetPriorityGrouping+0x18>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	0a1b      	lsrs	r3, r3, #8
 80017b2:	f003 0307 	and.w	r3, r3, #7
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	4603      	mov	r3, r0
 80017cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	db0b      	blt.n	80017ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	f003 021f 	and.w	r2, r3, #31
 80017dc:	4907      	ldr	r1, [pc, #28]	@ (80017fc <__NVIC_EnableIRQ+0x38>)
 80017de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e2:	095b      	lsrs	r3, r3, #5
 80017e4:	2001      	movs	r0, #1
 80017e6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	@ (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	@ (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	@ 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	@ 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b082      	sub	sp, #8
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff ff4c 	bl	8001760 <__NVIC_SetPriorityGrouping>
}
 80018c8:	bf00      	nop
 80018ca:	3708      	adds	r7, #8
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
 80018dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018e2:	f7ff ff61 	bl	80017a8 <__NVIC_GetPriorityGrouping>
 80018e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	68b9      	ldr	r1, [r7, #8]
 80018ec:	6978      	ldr	r0, [r7, #20]
 80018ee:	f7ff ffb1 	bl	8001854 <NVIC_EncodePriority>
 80018f2:	4602      	mov	r2, r0
 80018f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f8:	4611      	mov	r1, r2
 80018fa:	4618      	mov	r0, r3
 80018fc:	f7ff ff80 	bl	8001800 <__NVIC_SetPriority>
}
 8001900:	bf00      	nop
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff ff54 	bl	80017c4 <__NVIC_EnableIRQ>
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}

08001924 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d101      	bne.n	8001936 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e00e      	b.n	8001954 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	795b      	ldrb	r3, [r3, #5]
 800193a:	b2db      	uxtb	r3, r3
 800193c:	2b00      	cmp	r3, #0
 800193e:	d105      	bne.n	800194c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7fe fdfc 	bl	8000544 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d101      	bne.n	800196e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e03b      	b.n	80019e6 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001974:	b2db      	uxtb	r3, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	d106      	bne.n	8001988 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001982:	6878      	ldr	r0, [r7, #4]
 8001984:	f7fe fe32 	bl	80005ec <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2202      	movs	r2, #2
 800198c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ac:	f023 0107 	bic.w	r1, r3, #7
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80019c6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68d1      	ldr	r1, [r2, #12]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	430b      	orrs	r3, r1
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d026      	beq.n	8001a5e <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d021      	beq.n	8001a5e <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001a28:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2e:	f043 0201 	orr.w	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2204      	movs	r2, #4
 8001a42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d026      	beq.n	8001ab6 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d021      	beq.n	8001ab6 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a80:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2220      	movs	r2, #32
 8001a88:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a8e:	f043 0202 	orr.w	r2, r3, #2
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2204      	movs	r2, #4
 8001a9a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f003 0308 	and.w	r3, r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d026      	beq.n	8001b0e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d021      	beq.n	8001b0e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ad8:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2208      	movs	r2, #8
 8001ae0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae6:	f043 0204 	orr.w	r2, r3, #4
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2204      	movs	r2, #4
 8001af2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	695b      	ldr	r3, [r3, #20]
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d013      	beq.n	8001b40 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00e      	beq.n	8001b40 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b30:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 f853 	bl	8001be6 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d024      	beq.n	8001b94 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01f      	beq.n	8001b94 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001b62:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	691b      	ldr	r3, [r3, #16]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d01f      	beq.n	8001bde <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d01a      	beq.n	8001bde <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2210      	movs	r2, #16
 8001bbe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f80e 	bl	8001bfa <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
	...

08001c10 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d101      	bne.n	8001c30 <HAL_DMA2D_ConfigLayer+0x20>
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e079      	b.n	8001d24 <HAL_DMA2D_ConfigLayer+0x114>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	011b      	lsls	r3, r3, #4
 8001c44:	3318      	adds	r3, #24
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	4413      	add	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	685a      	ldr	r2, [r3, #4]
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	041b      	lsls	r3, r3, #16
 8001c56:	4313      	orrs	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c5a:	4b35      	ldr	r3, [pc, #212]	@ (8001d30 <HAL_DMA2D_ConfigLayer+0x120>)
 8001c5c:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	2b0a      	cmp	r3, #10
 8001c64:	d003      	beq.n	8001c6e <HAL_DMA2D_ConfigLayer+0x5e>
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	2b09      	cmp	r3, #9
 8001c6c:	d107      	bne.n	8001c7e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	e005      	b.n	8001c8a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	061b      	lsls	r3, r3, #24
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d120      	bne.n	8001cd2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	ea02 0103 	and.w	r1, r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b0a      	cmp	r3, #10
 8001cb8:	d003      	beq.n	8001cc2 <HAL_DMA2D_ConfigLayer+0xb2>
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b09      	cmp	r3, #9
 8001cc0:	d127      	bne.n	8001d12 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001cce:	629a      	str	r2, [r3, #40]	@ 0x28
 8001cd0:	e01f      	b.n	8001d12 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69da      	ldr	r2, [r3, #28]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	ea02 0103 	and.w	r1, r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	2b0a      	cmp	r3, #10
 8001cfa:	d003      	beq.n	8001d04 <HAL_DMA2D_ConfigLayer+0xf4>
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b09      	cmp	r3, #9
 8001d02:	d106      	bne.n	8001d12 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001d10:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	371c      	adds	r7, #28
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	ff03000f 	.word	0xff03000f

08001d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b089      	sub	sp, #36	@ 0x24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	61fb      	str	r3, [r7, #28]
 8001d4e:	e177      	b.n	8002040 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d50:	2201      	movs	r2, #1
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	fa02 f303 	lsl.w	r3, r2, r3
 8001d58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	697a      	ldr	r2, [r7, #20]
 8001d60:	4013      	ands	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	f040 8166 	bne.w	800203a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d005      	beq.n	8001d86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d130      	bne.n	8001de8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	2203      	movs	r2, #3
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	68da      	ldr	r2, [r3, #12]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 0201 	and.w	r2, r3, #1
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	2b03      	cmp	r3, #3
 8001df2:	d017      	beq.n	8001e24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	2203      	movs	r2, #3
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 0303 	and.w	r3, r3, #3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d123      	bne.n	8001e78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	08da      	lsrs	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3208      	adds	r2, #8
 8001e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	220f      	movs	r2, #15
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	691a      	ldr	r2, [r3, #16]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0307 	and.w	r3, r3, #7
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	08da      	lsrs	r2, r3, #3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3208      	adds	r2, #8
 8001e72:	69b9      	ldr	r1, [r7, #24]
 8001e74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	2203      	movs	r2, #3
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	69ba      	ldr	r2, [r7, #24]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0203 	and.w	r2, r3, #3
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69ba      	ldr	r2, [r7, #24]
 8001eaa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f000 80c0 	beq.w	800203a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b66      	ldr	r3, [pc, #408]	@ (8002058 <HAL_GPIO_Init+0x324>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec2:	4a65      	ldr	r2, [pc, #404]	@ (8002058 <HAL_GPIO_Init+0x324>)
 8001ec4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ec8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eca:	4b63      	ldr	r3, [pc, #396]	@ (8002058 <HAL_GPIO_Init+0x324>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed6:	4a61      	ldr	r2, [pc, #388]	@ (800205c <HAL_GPIO_Init+0x328>)
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	089b      	lsrs	r3, r3, #2
 8001edc:	3302      	adds	r3, #2
 8001ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	220f      	movs	r2, #15
 8001eee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4a58      	ldr	r2, [pc, #352]	@ (8002060 <HAL_GPIO_Init+0x32c>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d037      	beq.n	8001f72 <HAL_GPIO_Init+0x23e>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	4a57      	ldr	r2, [pc, #348]	@ (8002064 <HAL_GPIO_Init+0x330>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d031      	beq.n	8001f6e <HAL_GPIO_Init+0x23a>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	4a56      	ldr	r2, [pc, #344]	@ (8002068 <HAL_GPIO_Init+0x334>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d02b      	beq.n	8001f6a <HAL_GPIO_Init+0x236>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4a55      	ldr	r2, [pc, #340]	@ (800206c <HAL_GPIO_Init+0x338>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d025      	beq.n	8001f66 <HAL_GPIO_Init+0x232>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a54      	ldr	r2, [pc, #336]	@ (8002070 <HAL_GPIO_Init+0x33c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d01f      	beq.n	8001f62 <HAL_GPIO_Init+0x22e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a53      	ldr	r2, [pc, #332]	@ (8002074 <HAL_GPIO_Init+0x340>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d019      	beq.n	8001f5e <HAL_GPIO_Init+0x22a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4a52      	ldr	r2, [pc, #328]	@ (8002078 <HAL_GPIO_Init+0x344>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_GPIO_Init+0x226>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a51      	ldr	r2, [pc, #324]	@ (800207c <HAL_GPIO_Init+0x348>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d00d      	beq.n	8001f56 <HAL_GPIO_Init+0x222>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a50      	ldr	r2, [pc, #320]	@ (8002080 <HAL_GPIO_Init+0x34c>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d007      	beq.n	8001f52 <HAL_GPIO_Init+0x21e>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4a4f      	ldr	r2, [pc, #316]	@ (8002084 <HAL_GPIO_Init+0x350>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_GPIO_Init+0x21a>
 8001f4a:	2309      	movs	r3, #9
 8001f4c:	e012      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f4e:	230a      	movs	r3, #10
 8001f50:	e010      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f52:	2308      	movs	r3, #8
 8001f54:	e00e      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f56:	2307      	movs	r3, #7
 8001f58:	e00c      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f5a:	2306      	movs	r3, #6
 8001f5c:	e00a      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f5e:	2305      	movs	r3, #5
 8001f60:	e008      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f62:	2304      	movs	r3, #4
 8001f64:	e006      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f66:	2303      	movs	r3, #3
 8001f68:	e004      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	e002      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_GPIO_Init+0x240>
 8001f72:	2300      	movs	r3, #0
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	f002 0203 	and.w	r2, r2, #3
 8001f7a:	0092      	lsls	r2, r2, #2
 8001f7c:	4093      	lsls	r3, r2
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4313      	orrs	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f84:	4935      	ldr	r1, [pc, #212]	@ (800205c <HAL_GPIO_Init+0x328>)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	089b      	lsrs	r3, r3, #2
 8001f8a:	3302      	adds	r3, #2
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f92:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_GPIO_Init+0x354>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fb6:	4a34      	ldr	r2, [pc, #208]	@ (8002088 <HAL_GPIO_Init+0x354>)
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fbc:	4b32      	ldr	r3, [pc, #200]	@ (8002088 <HAL_GPIO_Init+0x354>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	43db      	mvns	r3, r3
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fe0:	4a29      	ldr	r2, [pc, #164]	@ (8002088 <HAL_GPIO_Init+0x354>)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001fe6:	4b28      	ldr	r3, [pc, #160]	@ (8002088 <HAL_GPIO_Init+0x354>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fec:	693b      	ldr	r3, [r7, #16]
 8001fee:	43db      	mvns	r3, r3
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	4313      	orrs	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800200a:	4a1f      	ldr	r2, [pc, #124]	@ (8002088 <HAL_GPIO_Init+0x354>)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002010:	4b1d      	ldr	r3, [pc, #116]	@ (8002088 <HAL_GPIO_Init+0x354>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	43db      	mvns	r3, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4013      	ands	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002034:	4a14      	ldr	r2, [pc, #80]	@ (8002088 <HAL_GPIO_Init+0x354>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	3301      	adds	r3, #1
 800203e:	61fb      	str	r3, [r7, #28]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	2b0f      	cmp	r3, #15
 8002044:	f67f ae84 	bls.w	8001d50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002048:	bf00      	nop
 800204a:	bf00      	nop
 800204c:	3724      	adds	r7, #36	@ 0x24
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40013800 	.word	0x40013800
 8002060:	40020000 	.word	0x40020000
 8002064:	40020400 	.word	0x40020400
 8002068:	40020800 	.word	0x40020800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40021000 	.word	0x40021000
 8002074:	40021400 	.word	0x40021400
 8002078:	40021800 	.word	0x40021800
 800207c:	40021c00 	.word	0x40021c00
 8002080:	40022000 	.word	0x40022000
 8002084:	40022400 	.word	0x40022400
 8002088:	40013c00 	.word	0x40013c00

0800208c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
 8002098:	4613      	mov	r3, r2
 800209a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800209c:	787b      	ldrb	r3, [r7, #1]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020a2:	887a      	ldrh	r2, [r7, #2]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020a8:	e003      	b.n	80020b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020aa:	887b      	ldrh	r3, [r7, #2]
 80020ac:	041a      	lsls	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	619a      	str	r2, [r3, #24]
}
 80020b2:	bf00      	nop
 80020b4:	370c      	adds	r7, #12
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020be:	b480      	push	{r7}
 80020c0:	b085      	sub	sp, #20
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4013      	ands	r3, r2
 80020d6:	041a      	lsls	r2, r3, #16
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	43d9      	mvns	r1, r3
 80020dc:	887b      	ldrh	r3, [r7, #2]
 80020de:	400b      	ands	r3, r1
 80020e0:	431a      	orrs	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	619a      	str	r2, [r3, #24]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	b086      	sub	sp, #24
 80020f6:	af02      	add	r7, sp, #8
 80020f8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d101      	bne.n	8002104 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e059      	b.n	80021b8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002110:	b2db      	uxtb	r3, r3
 8002112:	2b00      	cmp	r3, #0
 8002114:	d106      	bne.n	8002124 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f00a fcfc 	bl	800cb1c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2203      	movs	r2, #3
 8002128:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002132:	d102      	bne.n	800213a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4618      	mov	r0, r3
 8002140:	f004 fdef 	bl	8006d22 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6818      	ldr	r0, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	7c1a      	ldrb	r2, [r3, #16]
 800214c:	f88d 2000 	strb.w	r2, [sp]
 8002150:	3304      	adds	r3, #4
 8002152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002154:	f004 fd70 	bl	8006c38 <USB_CoreInit>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d005      	beq.n	800216a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2202      	movs	r2, #2
 8002162:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e026      	b.n	80021b8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2101      	movs	r1, #1
 8002170:	4618      	mov	r0, r3
 8002172:	f004 fde7 	bl	8006d44 <USB_SetCurrentMode>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2202      	movs	r2, #2
 8002180:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e017      	b.n	80021b8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6818      	ldr	r0, [r3, #0]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	7c1a      	ldrb	r2, [r3, #16]
 8002190:	f88d 2000 	strb.w	r2, [sp]
 8002194:	3304      	adds	r3, #4
 8002196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002198:	f004 ff8a 	bl	80070b0 <USB_HostInit>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d005      	beq.n	80021ae <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2202      	movs	r2, #2
 80021a6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e004      	b.n	80021b8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80021b6:	2300      	movs	r3, #0
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b08b      	sub	sp, #44	@ 0x2c
 80021c4:	af04      	add	r7, sp, #16
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	4608      	mov	r0, r1
 80021ca:	4611      	mov	r1, r2
 80021cc:	461a      	mov	r2, r3
 80021ce:	4603      	mov	r3, r0
 80021d0:	70fb      	strb	r3, [r7, #3]
 80021d2:	460b      	mov	r3, r1
 80021d4:	70bb      	strb	r3, [r7, #2]
 80021d6:	4613      	mov	r3, r2
 80021d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80021da:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80021dc:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d101      	bne.n	80021ec <HAL_HCD_HC_Init+0x2c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	e09d      	b.n	8002328 <HAL_HCD_HC_Init+0x168>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80021f4:	78fa      	ldrb	r2, [r7, #3]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	1a9b      	subs	r3, r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3319      	adds	r3, #25
 8002204:	2200      	movs	r2, #0
 8002206:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002208:	78fa      	ldrb	r2, [r7, #3]
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	1a9b      	subs	r3, r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	440b      	add	r3, r1
 8002216:	3314      	adds	r3, #20
 8002218:	787a      	ldrb	r2, [r7, #1]
 800221a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	011b      	lsls	r3, r3, #4
 8002224:	1a9b      	subs	r3, r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	440b      	add	r3, r1
 800222a:	3315      	adds	r3, #21
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002230:	78fa      	ldrb	r2, [r7, #3]
 8002232:	6879      	ldr	r1, [r7, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	1a9b      	subs	r3, r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	440b      	add	r3, r1
 800223e:	3326      	adds	r3, #38	@ 0x26
 8002240:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002244:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	78bb      	ldrb	r3, [r7, #2]
 800224a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800224e:	b2d8      	uxtb	r0, r3
 8002250:	6879      	ldr	r1, [r7, #4]
 8002252:	4613      	mov	r3, r2
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	1a9b      	subs	r3, r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	440b      	add	r3, r1
 800225c:	3316      	adds	r3, #22
 800225e:	4602      	mov	r2, r0
 8002260:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 fbc8 	bl	80029fc <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800226c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002270:	2b00      	cmp	r3, #0
 8002272:	da0a      	bge.n	800228a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002274:	78fa      	ldrb	r2, [r7, #3]
 8002276:	6879      	ldr	r1, [r7, #4]
 8002278:	4613      	mov	r3, r2
 800227a:	011b      	lsls	r3, r3, #4
 800227c:	1a9b      	subs	r3, r3, r2
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	440b      	add	r3, r1
 8002282:	3317      	adds	r3, #23
 8002284:	2201      	movs	r2, #1
 8002286:	701a      	strb	r2, [r3, #0]
 8002288:	e009      	b.n	800229e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800228a:	78fa      	ldrb	r2, [r7, #3]
 800228c:	6879      	ldr	r1, [r7, #4]
 800228e:	4613      	mov	r3, r2
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	1a9b      	subs	r3, r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	440b      	add	r3, r1
 8002298:	3317      	adds	r3, #23
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f005 f868 	bl	8007378 <USB_GetHostSpeed>
 80022a8:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80022aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d10b      	bne.n	80022ca <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80022b2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d107      	bne.n	80022ca <HAL_HCD_HC_Init+0x10a>
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d104      	bne.n	80022ca <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	2bbc      	cmp	r3, #188	@ 0xbc
 80022c4:	d901      	bls.n	80022ca <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80022c6:	23bc      	movs	r3, #188	@ 0xbc
 80022c8:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80022ca:	78fa      	ldrb	r2, [r7, #3]
 80022cc:	6879      	ldr	r1, [r7, #4]
 80022ce:	4613      	mov	r3, r2
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	1a9b      	subs	r3, r3, r2
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	440b      	add	r3, r1
 80022d8:	3318      	adds	r3, #24
 80022da:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80022de:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80022e0:	78fa      	ldrb	r2, [r7, #3]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	b298      	uxth	r0, r3
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	3328      	adds	r3, #40	@ 0x28
 80022f4:	4602      	mov	r2, r0
 80022f6:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	787c      	ldrb	r4, [r7, #1]
 8002302:	78ba      	ldrb	r2, [r7, #2]
 8002304:	78f9      	ldrb	r1, [r7, #3]
 8002306:	9302      	str	r3, [sp, #8]
 8002308:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800230c:	9301      	str	r3, [sp, #4]
 800230e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4623      	mov	r3, r4
 8002316:	f005 f857 	bl	80073c8 <USB_HC_Init>
 800231a:	4603      	mov	r3, r0
 800231c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2200      	movs	r2, #0
 8002322:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bd90      	pop	{r4, r7, pc}

08002330 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_HCD_HC_Halt+0x1e>
 800234a:	2302      	movs	r3, #2
 800234c:	e00f      	b.n	800236e <HAL_HCD_HC_Halt+0x3e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	78fa      	ldrb	r2, [r7, #3]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f005 fbe9 	bl	8007b36 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4603      	mov	r3, r0
 8002388:	70fb      	strb	r3, [r7, #3]
 800238a:	460b      	mov	r3, r1
 800238c:	70bb      	strb	r3, [r7, #2]
 800238e:	4613      	mov	r3, r2
 8002390:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	3317      	adds	r3, #23
 80023a2:	78ba      	ldrb	r2, [r7, #2]
 80023a4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80023a6:	78fa      	ldrb	r2, [r7, #3]
 80023a8:	6879      	ldr	r1, [r7, #4]
 80023aa:	4613      	mov	r3, r2
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	1a9b      	subs	r3, r3, r2
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	440b      	add	r3, r1
 80023b4:	3326      	adds	r3, #38	@ 0x26
 80023b6:	787a      	ldrb	r2, [r7, #1]
 80023b8:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80023ba:	7c3b      	ldrb	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d114      	bne.n	80023ea <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	6879      	ldr	r1, [r7, #4]
 80023c4:	4613      	mov	r3, r2
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	332a      	adds	r3, #42	@ 0x2a
 80023d0:	2203      	movs	r2, #3
 80023d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	3319      	adds	r3, #25
 80023e4:	7f3a      	ldrb	r2, [r7, #28]
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e009      	b.n	80023fe <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	332a      	adds	r3, #42	@ 0x2a
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80023fe:	787b      	ldrb	r3, [r7, #1]
 8002400:	2b03      	cmp	r3, #3
 8002402:	f200 8102 	bhi.w	800260a <HAL_HCD_HC_SubmitRequest+0x292>
 8002406:	a201      	add	r2, pc, #4	@ (adr r2, 800240c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800240c:	0800241d 	.word	0x0800241d
 8002410:	080025f5 	.word	0x080025f5
 8002414:	080024e1 	.word	0x080024e1
 8002418:	0800256b 	.word	0x0800256b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800241c:	7c3b      	ldrb	r3, [r7, #16]
 800241e:	2b01      	cmp	r3, #1
 8002420:	f040 80f5 	bne.w	800260e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002424:	78bb      	ldrb	r3, [r7, #2]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d12d      	bne.n	8002486 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800242a:	8b3b      	ldrh	r3, [r7, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d109      	bne.n	8002444 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002430:	78fa      	ldrb	r2, [r7, #3]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4613      	mov	r3, r2
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	1a9b      	subs	r3, r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	333d      	adds	r3, #61	@ 0x3d
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	333d      	adds	r3, #61	@ 0x3d
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d10a      	bne.n	8002470 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	332a      	adds	r3, #42	@ 0x2a
 800246a:	2200      	movs	r2, #0
 800246c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800246e:	e0ce      	b.n	800260e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	332a      	adds	r3, #42	@ 0x2a
 8002480:	2202      	movs	r2, #2
 8002482:	701a      	strb	r2, [r3, #0]
      break;
 8002484:	e0c3      	b.n	800260e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	331a      	adds	r3, #26
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	f040 80b8 	bne.w	800260e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	333c      	adds	r3, #60	@ 0x3c
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10a      	bne.n	80024ca <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024b4:	78fa      	ldrb	r2, [r7, #3]
 80024b6:	6879      	ldr	r1, [r7, #4]
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	332a      	adds	r3, #42	@ 0x2a
 80024c4:	2200      	movs	r2, #0
 80024c6:	701a      	strb	r2, [r3, #0]
      break;
 80024c8:	e0a1      	b.n	800260e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024ca:	78fa      	ldrb	r2, [r7, #3]
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	4613      	mov	r3, r2
 80024d0:	011b      	lsls	r3, r3, #4
 80024d2:	1a9b      	subs	r3, r3, r2
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	440b      	add	r3, r1
 80024d8:	332a      	adds	r3, #42	@ 0x2a
 80024da:	2202      	movs	r2, #2
 80024dc:	701a      	strb	r2, [r3, #0]
      break;
 80024de:	e096      	b.n	800260e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80024e0:	78bb      	ldrb	r3, [r7, #2]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d120      	bne.n	8002528 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	6879      	ldr	r1, [r7, #4]
 80024ea:	4613      	mov	r3, r2
 80024ec:	011b      	lsls	r3, r3, #4
 80024ee:	1a9b      	subs	r3, r3, r2
 80024f0:	009b      	lsls	r3, r3, #2
 80024f2:	440b      	add	r3, r1
 80024f4:	333d      	adds	r3, #61	@ 0x3d
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10a      	bne.n	8002512 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	4613      	mov	r3, r2
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	1a9b      	subs	r3, r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	332a      	adds	r3, #42	@ 0x2a
 800250c:	2200      	movs	r2, #0
 800250e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002510:	e07e      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002512:	78fa      	ldrb	r2, [r7, #3]
 8002514:	6879      	ldr	r1, [r7, #4]
 8002516:	4613      	mov	r3, r2
 8002518:	011b      	lsls	r3, r3, #4
 800251a:	1a9b      	subs	r3, r3, r2
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	440b      	add	r3, r1
 8002520:	332a      	adds	r3, #42	@ 0x2a
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
      break;
 8002526:	e073      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	333c      	adds	r3, #60	@ 0x3c
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d10a      	bne.n	8002554 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	6879      	ldr	r1, [r7, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	1a9b      	subs	r3, r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	440b      	add	r3, r1
 800254c:	332a      	adds	r3, #42	@ 0x2a
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
      break;
 8002552:	e05d      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002554:	78fa      	ldrb	r2, [r7, #3]
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	4613      	mov	r3, r2
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	1a9b      	subs	r3, r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	332a      	adds	r3, #42	@ 0x2a
 8002564:	2202      	movs	r2, #2
 8002566:	701a      	strb	r2, [r3, #0]
      break;
 8002568:	e052      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800256a:	78bb      	ldrb	r3, [r7, #2]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d120      	bne.n	80025b2 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	333d      	adds	r3, #61	@ 0x3d
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10a      	bne.n	800259c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002586:	78fa      	ldrb	r2, [r7, #3]
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4613      	mov	r3, r2
 800258c:	011b      	lsls	r3, r3, #4
 800258e:	1a9b      	subs	r3, r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	440b      	add	r3, r1
 8002594:	332a      	adds	r3, #42	@ 0x2a
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800259a:	e039      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800259c:	78fa      	ldrb	r2, [r7, #3]
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	4613      	mov	r3, r2
 80025a2:	011b      	lsls	r3, r3, #4
 80025a4:	1a9b      	subs	r3, r3, r2
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	440b      	add	r3, r1
 80025aa:	332a      	adds	r3, #42	@ 0x2a
 80025ac:	2202      	movs	r2, #2
 80025ae:	701a      	strb	r2, [r3, #0]
      break;
 80025b0:	e02e      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80025b2:	78fa      	ldrb	r2, [r7, #3]
 80025b4:	6879      	ldr	r1, [r7, #4]
 80025b6:	4613      	mov	r3, r2
 80025b8:	011b      	lsls	r3, r3, #4
 80025ba:	1a9b      	subs	r3, r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	440b      	add	r3, r1
 80025c0:	333c      	adds	r3, #60	@ 0x3c
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025c8:	78fa      	ldrb	r2, [r7, #3]
 80025ca:	6879      	ldr	r1, [r7, #4]
 80025cc:	4613      	mov	r3, r2
 80025ce:	011b      	lsls	r3, r3, #4
 80025d0:	1a9b      	subs	r3, r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	332a      	adds	r3, #42	@ 0x2a
 80025d8:	2200      	movs	r2, #0
 80025da:	701a      	strb	r2, [r3, #0]
      break;
 80025dc:	e018      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	332a      	adds	r3, #42	@ 0x2a
 80025ee:	2202      	movs	r2, #2
 80025f0:	701a      	strb	r2, [r3, #0]
      break;
 80025f2:	e00d      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	332a      	adds	r3, #42	@ 0x2a
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
      break;
 8002608:	e002      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800260a:	bf00      	nop
 800260c:	e000      	b.n	8002610 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800260e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002610:	78fa      	ldrb	r2, [r7, #3]
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	4613      	mov	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	1a9b      	subs	r3, r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	332c      	adds	r3, #44	@ 0x2c
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002624:	78fa      	ldrb	r2, [r7, #3]
 8002626:	8b39      	ldrh	r1, [r7, #24]
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	011b      	lsls	r3, r3, #4
 800262e:	1a9b      	subs	r3, r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4403      	add	r3, r0
 8002634:	3334      	adds	r3, #52	@ 0x34
 8002636:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002638:	78fa      	ldrb	r2, [r7, #3]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	011b      	lsls	r3, r3, #4
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	334c      	adds	r3, #76	@ 0x4c
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	3338      	adds	r3, #56	@ 0x38
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	6879      	ldr	r1, [r7, #4]
 8002664:	4613      	mov	r3, r2
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	1a9b      	subs	r3, r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	3315      	adds	r3, #21
 8002670:	78fa      	ldrb	r2, [r7, #3]
 8002672:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	6879      	ldr	r1, [r7, #4]
 8002678:	4613      	mov	r3, r2
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	1a9b      	subs	r3, r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	440b      	add	r3, r1
 8002682:	334d      	adds	r3, #77	@ 0x4d
 8002684:	2200      	movs	r2, #0
 8002686:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	78fa      	ldrb	r2, [r7, #3]
 800268e:	4613      	mov	r3, r2
 8002690:	011b      	lsls	r3, r3, #4
 8002692:	1a9b      	subs	r3, r3, r2
 8002694:	009b      	lsls	r3, r3, #2
 8002696:	3310      	adds	r3, #16
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	4413      	add	r3, r2
 800269c:	1d19      	adds	r1, r3, #4
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	799b      	ldrb	r3, [r3, #6]
 80026a2:	461a      	mov	r2, r3
 80026a4:	f004 ffbc 	bl	8007620 <USB_HC_StartXfer>
 80026a8:	4603      	mov	r3, r0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop

080026b4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4618      	mov	r0, r3
 80026cc:	f004 fcb0 	bl	8007030 <USB_GetMode>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	f040 80fb 	bne.w	80028ce <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4618      	mov	r0, r3
 80026de:	f004 fc73 	bl	8006fc8 <USB_ReadInterrupts>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 80f1 	beq.w	80028cc <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4618      	mov	r0, r3
 80026f0:	f004 fc6a 	bl	8006fc8 <USB_ReadInterrupts>
 80026f4:	4603      	mov	r3, r0
 80026f6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80026fe:	d104      	bne.n	800270a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002708:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4618      	mov	r0, r3
 8002710:	f004 fc5a 	bl	8006fc8 <USB_ReadInterrupts>
 8002714:	4603      	mov	r3, r0
 8002716:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800271a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800271e:	d104      	bne.n	800272a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002728:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f004 fc4a 	bl	8006fc8 <USB_ReadInterrupts>
 8002734:	4603      	mov	r3, r0
 8002736:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800273a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800273e:	d104      	bne.n	800274a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002748:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4618      	mov	r0, r3
 8002750:	f004 fc3a 	bl	8006fc8 <USB_ReadInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f003 0302 	and.w	r3, r3, #2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d103      	bne.n	8002766 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f004 fc2c 	bl	8006fc8 <USB_ReadInterrupts>
 8002770:	4603      	mov	r3, r0
 8002772:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002776:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800277a:	d120      	bne.n	80027be <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002784:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d113      	bne.n	80027be <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002796:	2110      	movs	r1, #16
 8002798:	6938      	ldr	r0, [r7, #16]
 800279a:	f004 fb1f 	bl	8006ddc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800279e:	6938      	ldr	r0, [r7, #16]
 80027a0:	f004 fb4e 	bl	8006e40 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7a5b      	ldrb	r3, [r3, #9]
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d105      	bne.n	80027b8 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2101      	movs	r1, #1
 80027b2:	4618      	mov	r0, r3
 80027b4:	f004 fd40 	bl	8007238 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f00a fa29 	bl	800cc10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f004 fc00 	bl	8006fc8 <USB_ReadInterrupts>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027d2:	d102      	bne.n	80027da <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80027d4:	6878      	ldr	r0, [r7, #4]
 80027d6:	f001 fd4d 	bl	8004274 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f004 fbf2 	bl	8006fc8 <USB_ReadInterrupts>
 80027e4:	4603      	mov	r3, r0
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d106      	bne.n	80027fc <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f00a f9f2 	bl	800cbd8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2208      	movs	r2, #8
 80027fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f004 fbe1 	bl	8006fc8 <USB_ReadInterrupts>
 8002806:	4603      	mov	r3, r0
 8002808:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800280c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002810:	d139      	bne.n	8002886 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4618      	mov	r0, r3
 8002818:	f005 f97c 	bl	8007b14 <USB_HC_ReadInterrupt>
 800281c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
 8002822:	e025      	b.n	8002870 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 030f 	and.w	r3, r3, #15
 800282a:	68ba      	ldr	r2, [r7, #8]
 800282c:	fa22 f303 	lsr.w	r3, r2, r3
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d018      	beq.n	800286a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	015a      	lsls	r2, r3, #5
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800284a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800284e:	d106      	bne.n	800285e <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	b2db      	uxtb	r3, r3
 8002854:	4619      	mov	r1, r3
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f905 	bl	8002a66 <HCD_HC_IN_IRQHandler>
 800285c:	e005      	b.n	800286a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	4619      	mov	r1, r3
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 ff67 	bl	8003738 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	3301      	adds	r3, #1
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	795b      	ldrb	r3, [r3, #5]
 8002874:	461a      	mov	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	4293      	cmp	r3, r2
 800287a:	d3d3      	bcc.n	8002824 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002884:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fb9c 	bl	8006fc8 <USB_ReadInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b10      	cmp	r3, #16
 8002898:	d101      	bne.n	800289e <HAL_HCD_IRQHandler+0x1ea>
 800289a:	2301      	movs	r3, #1
 800289c:	e000      	b.n	80028a0 <HAL_HCD_IRQHandler+0x1ec>
 800289e:	2300      	movs	r3, #0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d014      	beq.n	80028ce <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	699a      	ldr	r2, [r3, #24]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 0210 	bic.w	r2, r2, #16
 80028b2:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f001 fbfe 	bl	80040b6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	699a      	ldr	r2, [r3, #24]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f042 0210 	orr.w	r2, r2, #16
 80028c8:	619a      	str	r2, [r3, #24]
 80028ca:	e000      	b.n	80028ce <HAL_HCD_IRQHandler+0x21a>
      return;
 80028cc:	bf00      	nop
    }
  }
}
 80028ce:	3718      	adds	r7, #24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_HCD_Start+0x16>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e013      	b.n	8002912 <HAL_HCD_Start+0x3e>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2101      	movs	r1, #1
 80028f8:	4618      	mov	r0, r3
 80028fa:	f004 fd04 	bl	8007306 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f004 f9fc 	bl	8006d00 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}

0800291a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800291a:	b580      	push	{r7, lr}
 800291c:	b082      	sub	sp, #8
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002928:	2b01      	cmp	r3, #1
 800292a:	d101      	bne.n	8002930 <HAL_HCD_Stop+0x16>
 800292c:	2302      	movs	r3, #2
 800292e:	e00d      	b.n	800294c <HAL_HCD_Stop+0x32>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	f005 fa57 	bl	8007df0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800294a:	2300      	movs	r3, #0
}
 800294c:	4618      	mov	r0, r3
 800294e:	3708      	adds	r7, #8
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b082      	sub	sp, #8
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f004 fca6 	bl	80072b2 <USB_ResetPort>
 8002966:	4603      	mov	r3, r0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	460b      	mov	r3, r1
 800297a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800297c:	78fa      	ldrb	r2, [r7, #3]
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	4613      	mov	r3, r2
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	334c      	adds	r3, #76	@ 0x4c
 800298c:	781b      	ldrb	r3, [r3, #0]
}
 800298e:	4618      	mov	r0, r3
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
 80029a2:	460b      	mov	r3, r1
 80029a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3338      	adds	r3, #56	@ 0x38
 80029b6:	681b      	ldr	r3, [r3, #0]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f004 fce8 	bl	80073a6 <USB_GetCurrentFrame>
 80029d6:	4603      	mov	r3, r0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3708      	adds	r7, #8
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f004 fcc3 	bl	8007378 <USB_GetHostSpeed>
 80029f2:	4603      	mov	r3, r0
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	460b      	mov	r3, r1
 8002a06:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002a08:	78fa      	ldrb	r2, [r7, #3]
 8002a0a:	6879      	ldr	r1, [r7, #4]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	011b      	lsls	r3, r3, #4
 8002a10:	1a9b      	subs	r3, r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	440b      	add	r3, r1
 8002a16:	331a      	adds	r3, #26
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002a1c:	78fa      	ldrb	r2, [r7, #3]
 8002a1e:	6879      	ldr	r1, [r7, #4]
 8002a20:	4613      	mov	r3, r2
 8002a22:	011b      	lsls	r3, r3, #4
 8002a24:	1a9b      	subs	r3, r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	331b      	adds	r3, #27
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	3325      	adds	r3, #37	@ 0x25
 8002a40:	2200      	movs	r2, #0
 8002a42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002a44:	78fa      	ldrb	r2, [r7, #3]
 8002a46:	6879      	ldr	r1, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	1a9b      	subs	r3, r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3324      	adds	r3, #36	@ 0x24
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002a58:	2300      	movs	r3, #0
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr

08002a66 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a66:	b580      	push	{r7, lr}
 8002a68:	b086      	sub	sp, #24
 8002a6a:	af00      	add	r7, sp, #0
 8002a6c:	6078      	str	r0, [r7, #4]
 8002a6e:	460b      	mov	r3, r1
 8002a70:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	78fa      	ldrb	r2, [r7, #3]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f004 fab2 	bl	8006fee <USB_ReadChInterrupts>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	f003 0304 	and.w	r3, r3, #4
 8002a90:	2b04      	cmp	r3, #4
 8002a92:	d11a      	bne.n	8002aca <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	015a      	lsls	r2, r3, #5
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	2304      	movs	r3, #4
 8002aa4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	6879      	ldr	r1, [r7, #4]
 8002aaa:	4613      	mov	r3, r2
 8002aac:	011b      	lsls	r3, r3, #4
 8002aae:	1a9b      	subs	r3, r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	440b      	add	r3, r1
 8002ab4:	334d      	adds	r3, #77	@ 0x4d
 8002ab6:	2207      	movs	r2, #7
 8002ab8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	4611      	mov	r1, r2
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f005 f837 	bl	8007b36 <USB_HC_Halt>
 8002ac8:	e09e      	b.n	8002c08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	78fa      	ldrb	r2, [r7, #3]
 8002ad0:	4611      	mov	r1, r2
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f004 fa8b 	bl	8006fee <USB_ReadChInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ade:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ae2:	d11b      	bne.n	8002b1c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002ae4:	78fb      	ldrb	r3, [r7, #3]
 8002ae6:	015a      	lsls	r2, r3, #5
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4413      	add	r3, r2
 8002aec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002af0:	461a      	mov	r2, r3
 8002af2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002af6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	4613      	mov	r3, r2
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	1a9b      	subs	r3, r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	440b      	add	r3, r1
 8002b06:	334d      	adds	r3, #77	@ 0x4d
 8002b08:	2208      	movs	r2, #8
 8002b0a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f005 f80e 	bl	8007b36 <USB_HC_Halt>
 8002b1a:	e075      	b.n	8002c08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	78fa      	ldrb	r2, [r7, #3]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f004 fa62 	bl	8006fee <USB_ReadChInterrupts>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d11a      	bne.n	8002b6a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002b34:	78fb      	ldrb	r3, [r7, #3]
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b40:	461a      	mov	r2, r3
 8002b42:	2308      	movs	r3, #8
 8002b44:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	334d      	adds	r3, #77	@ 0x4d
 8002b56:	2206      	movs	r2, #6
 8002b58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f004 ffe7 	bl	8007b36 <USB_HC_Halt>
 8002b68:	e04e      	b.n	8002c08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 fa3b 	bl	8006fee <USB_ReadChInterrupts>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b82:	d11b      	bne.n	8002bbc <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002b84:	78fb      	ldrb	r3, [r7, #3]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b90:	461a      	mov	r2, r3
 8002b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002b96:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002b98:	78fa      	ldrb	r2, [r7, #3]
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	011b      	lsls	r3, r3, #4
 8002ba0:	1a9b      	subs	r3, r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	334d      	adds	r3, #77	@ 0x4d
 8002ba8:	2209      	movs	r2, #9
 8002baa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	78fa      	ldrb	r2, [r7, #3]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f004 ffbe 	bl	8007b36 <USB_HC_Halt>
 8002bba:	e025      	b.n	8002c08 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	78fa      	ldrb	r2, [r7, #3]
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f004 fa12 	bl	8006fee <USB_ReadChInterrupts>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bd0:	2b80      	cmp	r3, #128	@ 0x80
 8002bd2:	d119      	bne.n	8002c08 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002bd4:	78fb      	ldrb	r3, [r7, #3]
 8002bd6:	015a      	lsls	r2, r3, #5
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	4413      	add	r3, r2
 8002bdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be0:	461a      	mov	r2, r3
 8002be2:	2380      	movs	r3, #128	@ 0x80
 8002be4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	6879      	ldr	r1, [r7, #4]
 8002bea:	4613      	mov	r3, r2
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	1a9b      	subs	r3, r3, r2
 8002bf0:	009b      	lsls	r3, r3, #2
 8002bf2:	440b      	add	r3, r1
 8002bf4:	334d      	adds	r3, #77	@ 0x4d
 8002bf6:	2207      	movs	r2, #7
 8002bf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	4611      	mov	r1, r2
 8002c02:	4618      	mov	r0, r3
 8002c04:	f004 ff97 	bl	8007b36 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f004 f9ec 	bl	8006fee <USB_ReadChInterrupts>
 8002c16:	4603      	mov	r3, r0
 8002c18:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c20:	d112      	bne.n	8002c48 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f004 ff83 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002c42:	6093      	str	r3, [r2, #8]
 8002c44:	f000 bd75 	b.w	8003732 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	78fa      	ldrb	r2, [r7, #3]
 8002c4e:	4611      	mov	r1, r2
 8002c50:	4618      	mov	r0, r3
 8002c52:	f004 f9cc 	bl	8006fee <USB_ReadChInterrupts>
 8002c56:	4603      	mov	r3, r0
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	f040 8128 	bne.w	8002eb2 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002c62:	78fb      	ldrb	r3, [r7, #3]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2320      	movs	r3, #32
 8002c72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	331b      	adds	r3, #27
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d119      	bne.n	8002cbe <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	331b      	adds	r3, #27
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002c9e:	78fb      	ldrb	r3, [r7, #3]
 8002ca0:	015a      	lsls	r2, r3, #5
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	0151      	lsls	r1, r2, #5
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	440a      	add	r2, r1
 8002cb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cbc:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	799b      	ldrb	r3, [r3, #6]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d01b      	beq.n	8002cfe <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	3330      	adds	r3, #48	@ 0x30
 8002cd6:	6819      	ldr	r1, [r3, #0]
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	015a      	lsls	r2, r3, #5
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	4413      	add	r3, r2
 8002ce0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce4:	691b      	ldr	r3, [r3, #16]
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	1ac9      	subs	r1, r1, r3
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4403      	add	r3, r0
 8002cfa:	3338      	adds	r3, #56	@ 0x38
 8002cfc:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	011b      	lsls	r3, r3, #4
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	334d      	adds	r3, #77	@ 0x4d
 8002d0e:	2201      	movs	r2, #1
 8002d10:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3344      	adds	r3, #68	@ 0x44
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002d26:	78fb      	ldrb	r3, [r7, #3]
 8002d28:	015a      	lsls	r2, r3, #5
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d32:	461a      	mov	r2, r3
 8002d34:	2301      	movs	r3, #1
 8002d36:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d38:	78fa      	ldrb	r2, [r7, #3]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	011b      	lsls	r3, r3, #4
 8002d40:	1a9b      	subs	r3, r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3326      	adds	r3, #38	@ 0x26
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d4e:	78fa      	ldrb	r2, [r7, #3]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3326      	adds	r3, #38	@ 0x26
 8002d5e:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	d110      	bne.n	8002d86 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f004 fee2 	bl	8007b36 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7e:	461a      	mov	r2, r3
 8002d80:	2310      	movs	r3, #16
 8002d82:	6093      	str	r3, [r2, #8]
 8002d84:	e03d      	b.n	8002e02 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	3326      	adds	r3, #38	@ 0x26
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d00a      	beq.n	8002db2 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	011b      	lsls	r3, r3, #4
 8002da4:	1a9b      	subs	r3, r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	3326      	adds	r3, #38	@ 0x26
 8002dac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d127      	bne.n	8002e02 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002db2:	78fb      	ldrb	r3, [r7, #3]
 8002db4:	015a      	lsls	r2, r3, #5
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	78fa      	ldrb	r2, [r7, #3]
 8002dc2:	0151      	lsls	r1, r2, #5
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	440a      	add	r2, r1
 8002dc8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dcc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002dd0:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	334c      	adds	r3, #76	@ 0x4c
 8002de2:	2201      	movs	r2, #1
 8002de4:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	334c      	adds	r3, #76	@ 0x4c
 8002df6:	781a      	ldrb	r2, [r3, #0]
 8002df8:	78fb      	ldrb	r3, [r7, #3]
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f009 ff15 	bl	800cc2c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	799b      	ldrb	r3, [r3, #6]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d13b      	bne.n	8002e82 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3338      	adds	r3, #56	@ 0x38
 8002e1a:	6819      	ldr	r1, [r3, #0]
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4403      	add	r3, r0
 8002e2a:	3328      	adds	r3, #40	@ 0x28
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	440b      	add	r3, r1
 8002e30:	1e59      	subs	r1, r3, #1
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	1a9b      	subs	r3, r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4403      	add	r3, r0
 8002e40:	3328      	adds	r3, #40	@ 0x28
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f000 8470 	beq.w	8003732 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4613      	mov	r3, r2
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	1a9b      	subs	r3, r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	333c      	adds	r3, #60	@ 0x3c
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	78fa      	ldrb	r2, [r7, #3]
 8002e66:	f083 0301 	eor.w	r3, r3, #1
 8002e6a:	b2d8      	uxtb	r0, r3
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	011b      	lsls	r3, r3, #4
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	333c      	adds	r3, #60	@ 0x3c
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	701a      	strb	r2, [r3, #0]
 8002e7e:	f000 bc58 	b.w	8003732 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002e82:	78fa      	ldrb	r2, [r7, #3]
 8002e84:	6879      	ldr	r1, [r7, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	011b      	lsls	r3, r3, #4
 8002e8a:	1a9b      	subs	r3, r3, r2
 8002e8c:	009b      	lsls	r3, r3, #2
 8002e8e:	440b      	add	r3, r1
 8002e90:	333c      	adds	r3, #60	@ 0x3c
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	f083 0301 	eor.w	r3, r3, #1
 8002e9a:	b2d8      	uxtb	r0, r3
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	011b      	lsls	r3, r3, #4
 8002ea2:	1a9b      	subs	r3, r3, r2
 8002ea4:	009b      	lsls	r3, r3, #2
 8002ea6:	440b      	add	r3, r1
 8002ea8:	333c      	adds	r3, #60	@ 0x3c
 8002eaa:	4602      	mov	r2, r0
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	f000 bc40 	b.w	8003732 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	4611      	mov	r1, r2
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f004 f897 	bl	8006fee <USB_ReadChInterrupts>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d131      	bne.n	8002f2e <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002eca:	78fb      	ldrb	r3, [r7, #3]
 8002ecc:	015a      	lsls	r2, r3, #5
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	2320      	movs	r3, #32
 8002eda:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002edc:	78fa      	ldrb	r2, [r7, #3]
 8002ede:	6879      	ldr	r1, [r7, #4]
 8002ee0:	4613      	mov	r3, r2
 8002ee2:	011b      	lsls	r3, r3, #4
 8002ee4:	1a9b      	subs	r3, r3, r2
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	331a      	adds	r3, #26
 8002eec:	781b      	ldrb	r3, [r3, #0]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	f040 841f 	bne.w	8003732 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002ef4:	78fa      	ldrb	r2, [r7, #3]
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	1a9b      	subs	r3, r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	331b      	adds	r3, #27
 8002f04:	2201      	movs	r2, #1
 8002f06:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	334d      	adds	r3, #77	@ 0x4d
 8002f18:	2203      	movs	r2, #3
 8002f1a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f004 fe06 	bl	8007b36 <USB_HC_Halt>
 8002f2a:	f000 bc02 	b.w	8003732 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	78fa      	ldrb	r2, [r7, #3]
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f004 f859 	bl	8006fee <USB_ReadChInterrupts>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	f040 8305 	bne.w	8003552 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002f48:	78fb      	ldrb	r3, [r7, #3]
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f54:	461a      	mov	r2, r3
 8002f56:	2302      	movs	r3, #2
 8002f58:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	334d      	adds	r3, #77	@ 0x4d
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d114      	bne.n	8002f9a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	334d      	adds	r3, #77	@ 0x4d
 8002f80:	2202      	movs	r2, #2
 8002f82:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	011b      	lsls	r3, r3, #4
 8002f8c:	1a9b      	subs	r3, r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	440b      	add	r3, r1
 8002f92:	334c      	adds	r3, #76	@ 0x4c
 8002f94:	2201      	movs	r2, #1
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e2cc      	b.n	8003534 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	011b      	lsls	r3, r3, #4
 8002fa2:	1a9b      	subs	r3, r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	440b      	add	r3, r1
 8002fa8:	334d      	adds	r3, #77	@ 0x4d
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	2b06      	cmp	r3, #6
 8002fae:	d114      	bne.n	8002fda <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fb0:	78fa      	ldrb	r2, [r7, #3]
 8002fb2:	6879      	ldr	r1, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	011b      	lsls	r3, r3, #4
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	334d      	adds	r3, #77	@ 0x4d
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002fc4:	78fa      	ldrb	r2, [r7, #3]
 8002fc6:	6879      	ldr	r1, [r7, #4]
 8002fc8:	4613      	mov	r3, r2
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	1a9b      	subs	r3, r3, r2
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	440b      	add	r3, r1
 8002fd2:	334c      	adds	r3, #76	@ 0x4c
 8002fd4:	2205      	movs	r2, #5
 8002fd6:	701a      	strb	r2, [r3, #0]
 8002fd8:	e2ac      	b.n	8003534 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002fda:	78fa      	ldrb	r2, [r7, #3]
 8002fdc:	6879      	ldr	r1, [r7, #4]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	1a9b      	subs	r3, r3, r2
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	334d      	adds	r3, #77	@ 0x4d
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b07      	cmp	r3, #7
 8002fee:	d00b      	beq.n	8003008 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002ff0:	78fa      	ldrb	r2, [r7, #3]
 8002ff2:	6879      	ldr	r1, [r7, #4]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	1a9b      	subs	r3, r3, r2
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	334d      	adds	r3, #77	@ 0x4d
 8003000:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003002:	2b09      	cmp	r3, #9
 8003004:	f040 80a6 	bne.w	8003154 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	334d      	adds	r3, #77	@ 0x4d
 8003018:	2202      	movs	r2, #2
 800301a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	3344      	adds	r3, #68	@ 0x44
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	1c59      	adds	r1, r3, #1
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	4403      	add	r3, r0
 800303c:	3344      	adds	r3, #68	@ 0x44
 800303e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003040:	78fa      	ldrb	r2, [r7, #3]
 8003042:	6879      	ldr	r1, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	440b      	add	r3, r1
 800304e:	3344      	adds	r3, #68	@ 0x44
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b02      	cmp	r3, #2
 8003054:	d943      	bls.n	80030de <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	3344      	adds	r3, #68	@ 0x44
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	331a      	adds	r3, #26
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d123      	bne.n	80030c8 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	331b      	adds	r3, #27
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	331c      	adds	r3, #28
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030a8:	78fb      	ldrb	r3, [r7, #3]
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c6:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	334c      	adds	r3, #76	@ 0x4c
 80030d8:	2204      	movs	r2, #4
 80030da:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80030dc:	e229      	b.n	8003532 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	011b      	lsls	r3, r3, #4
 80030e6:	1a9b      	subs	r3, r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	334c      	adds	r3, #76	@ 0x4c
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3326      	adds	r3, #38	@ 0x26
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d00b      	beq.n	8003120 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	3326      	adds	r3, #38	@ 0x26
 8003118:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800311a:	2b02      	cmp	r3, #2
 800311c:	f040 8209 	bne.w	8003532 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	015a      	lsls	r2, r3, #5
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	4413      	add	r3, r2
 8003128:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003136:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800313e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	015a      	lsls	r2, r3, #5
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	4413      	add	r3, r2
 8003148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800314c:	461a      	mov	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003152:	e1ee      	b.n	8003532 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334d      	adds	r3, #77	@ 0x4d
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b05      	cmp	r3, #5
 8003168:	f040 80c8 	bne.w	80032fc <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	2202      	movs	r2, #2
 800317e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	1a9b      	subs	r3, r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	331b      	adds	r3, #27
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b01      	cmp	r3, #1
 8003194:	f040 81ce 	bne.w	8003534 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003198:	78fa      	ldrb	r2, [r7, #3]
 800319a:	6879      	ldr	r1, [r7, #4]
 800319c:	4613      	mov	r3, r2
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	3326      	adds	r3, #38	@ 0x26
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d16b      	bne.n	8003286 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	3348      	adds	r3, #72	@ 0x48
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	1c59      	adds	r1, r3, #1
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	4403      	add	r3, r0
 80031ce:	3348      	adds	r3, #72	@ 0x48
 80031d0:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	3348      	adds	r3, #72	@ 0x48
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d943      	bls.n	8003270 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	3348      	adds	r3, #72	@ 0x48
 80031f8:	2200      	movs	r2, #0
 80031fa:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	331b      	adds	r3, #27
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003210:	78fa      	ldrb	r2, [r7, #3]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	3344      	adds	r3, #68	@ 0x44
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d809      	bhi.n	800323a <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	331c      	adds	r3, #28
 8003236:	2201      	movs	r2, #1
 8003238:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	015a      	lsls	r2, r3, #5
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4413      	add	r3, r2
 8003242:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	0151      	lsls	r1, r2, #5
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	440a      	add	r2, r1
 8003250:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003258:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	334c      	adds	r3, #76	@ 0x4c
 800326a:	2204      	movs	r2, #4
 800326c:	701a      	strb	r2, [r3, #0]
 800326e:	e014      	b.n	800329a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	334c      	adds	r3, #76	@ 0x4c
 8003280:	2202      	movs	r2, #2
 8003282:	701a      	strb	r2, [r3, #0]
 8003284:	e009      	b.n	800329a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003286:	78fa      	ldrb	r2, [r7, #3]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	1a9b      	subs	r3, r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	334c      	adds	r3, #76	@ 0x4c
 8003296:	2202      	movs	r2, #2
 8003298:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800329a:	78fa      	ldrb	r2, [r7, #3]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	011b      	lsls	r3, r3, #4
 80032a2:	1a9b      	subs	r3, r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	3326      	adds	r3, #38	@ 0x26
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00b      	beq.n	80032c8 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032b0:	78fa      	ldrb	r2, [r7, #3]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	011b      	lsls	r3, r3, #4
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	3326      	adds	r3, #38	@ 0x26
 80032c0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	f040 8136 	bne.w	8003534 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80032de:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80032e6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80032e8:	78fb      	ldrb	r3, [r7, #3]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032f4:	461a      	mov	r2, r3
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6013      	str	r3, [r2, #0]
 80032fa:	e11b      	b.n	8003534 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	334d      	adds	r3, #77	@ 0x4d
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b03      	cmp	r3, #3
 8003310:	f040 8081 	bne.w	8003416 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003314:	78fa      	ldrb	r2, [r7, #3]
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	1a9b      	subs	r3, r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	440b      	add	r3, r1
 8003322:	334d      	adds	r3, #77	@ 0x4d
 8003324:	2202      	movs	r2, #2
 8003326:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	331b      	adds	r3, #27
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	f040 80fa 	bne.w	8003534 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	334c      	adds	r3, #76	@ 0x4c
 8003350:	2202      	movs	r2, #2
 8003352:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	0151      	lsls	r1, r2, #5
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	440a      	add	r2, r1
 800336a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800336e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003372:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003374:	78fb      	ldrb	r3, [r7, #3]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	0151      	lsls	r1, r2, #5
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	440a      	add	r2, r1
 800338a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800338e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003392:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003394:	78fb      	ldrb	r3, [r7, #3]
 8003396:	015a      	lsls	r2, r3, #5
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	4413      	add	r3, r2
 800339c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	0151      	lsls	r1, r2, #5
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	440a      	add	r2, r1
 80033aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033ae:	f023 0320 	bic.w	r3, r3, #32
 80033b2:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	3326      	adds	r3, #38	@ 0x26
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00b      	beq.n	80033e2 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033ca:	78fa      	ldrb	r2, [r7, #3]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	1a9b      	subs	r3, r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	3326      	adds	r3, #38	@ 0x26
 80033da:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033dc:	2b02      	cmp	r3, #2
 80033de:	f040 80a9 	bne.w	8003534 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	015a      	lsls	r2, r3, #5
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4413      	add	r3, r2
 80033ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033f8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003400:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003402:	78fb      	ldrb	r3, [r7, #3]
 8003404:	015a      	lsls	r2, r3, #5
 8003406:	693b      	ldr	r3, [r7, #16]
 8003408:	4413      	add	r3, r2
 800340a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6013      	str	r3, [r2, #0]
 8003414:	e08e      	b.n	8003534 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003416:	78fa      	ldrb	r2, [r7, #3]
 8003418:	6879      	ldr	r1, [r7, #4]
 800341a:	4613      	mov	r3, r2
 800341c:	011b      	lsls	r3, r3, #4
 800341e:	1a9b      	subs	r3, r3, r2
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	440b      	add	r3, r1
 8003424:	334d      	adds	r3, #77	@ 0x4d
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b04      	cmp	r3, #4
 800342a:	d143      	bne.n	80034b4 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800342c:	78fa      	ldrb	r2, [r7, #3]
 800342e:	6879      	ldr	r1, [r7, #4]
 8003430:	4613      	mov	r3, r2
 8003432:	011b      	lsls	r3, r3, #4
 8003434:	1a9b      	subs	r3, r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	334d      	adds	r3, #77	@ 0x4d
 800343c:	2202      	movs	r2, #2
 800343e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003440:	78fa      	ldrb	r2, [r7, #3]
 8003442:	6879      	ldr	r1, [r7, #4]
 8003444:	4613      	mov	r3, r2
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	1a9b      	subs	r3, r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	334c      	adds	r3, #76	@ 0x4c
 8003450:	2202      	movs	r2, #2
 8003452:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	4613      	mov	r3, r2
 800345a:	011b      	lsls	r3, r3, #4
 800345c:	1a9b      	subs	r3, r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	440b      	add	r3, r1
 8003462:	3326      	adds	r3, #38	@ 0x26
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800346a:	78fa      	ldrb	r2, [r7, #3]
 800346c:	6879      	ldr	r1, [r7, #4]
 800346e:	4613      	mov	r3, r2
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	1a9b      	subs	r3, r3, r2
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	440b      	add	r3, r1
 8003478:	3326      	adds	r3, #38	@ 0x26
 800347a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800347c:	2b02      	cmp	r3, #2
 800347e:	d159      	bne.n	8003534 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003496:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800349e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ac:	461a      	mov	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6013      	str	r3, [r2, #0]
 80034b2:	e03f      	b.n	8003534 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80034b4:	78fa      	ldrb	r2, [r7, #3]
 80034b6:	6879      	ldr	r1, [r7, #4]
 80034b8:	4613      	mov	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	1a9b      	subs	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	334d      	adds	r3, #77	@ 0x4d
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	2b08      	cmp	r3, #8
 80034c8:	d126      	bne.n	8003518 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	6879      	ldr	r1, [r7, #4]
 80034ce:	4613      	mov	r3, r2
 80034d0:	011b      	lsls	r3, r3, #4
 80034d2:	1a9b      	subs	r3, r3, r2
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	440b      	add	r3, r1
 80034d8:	334d      	adds	r3, #77	@ 0x4d
 80034da:	2202      	movs	r2, #2
 80034dc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3344      	adds	r3, #68	@ 0x44
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	1c59      	adds	r1, r3, #1
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4403      	add	r3, r0
 80034fe:	3344      	adds	r3, #68	@ 0x44
 8003500:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003502:	78fa      	ldrb	r2, [r7, #3]
 8003504:	6879      	ldr	r1, [r7, #4]
 8003506:	4613      	mov	r3, r2
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	1a9b      	subs	r3, r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	334c      	adds	r3, #76	@ 0x4c
 8003512:	2204      	movs	r2, #4
 8003514:	701a      	strb	r2, [r3, #0]
 8003516:	e00d      	b.n	8003534 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003518:	78fa      	ldrb	r2, [r7, #3]
 800351a:	6879      	ldr	r1, [r7, #4]
 800351c:	4613      	mov	r3, r2
 800351e:	011b      	lsls	r3, r3, #4
 8003520:	1a9b      	subs	r3, r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	334d      	adds	r3, #77	@ 0x4d
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b02      	cmp	r3, #2
 800352c:	f000 8100 	beq.w	8003730 <HCD_HC_IN_IRQHandler+0xcca>
 8003530:	e000      	b.n	8003534 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003532:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334c      	adds	r3, #76	@ 0x4c
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	4619      	mov	r1, r3
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f009 fb6e 	bl	800cc2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003550:	e0ef      	b.n	8003732 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	4611      	mov	r1, r2
 800355a:	4618      	mov	r0, r3
 800355c:	f003 fd47 	bl	8006fee <USB_ReadChInterrupts>
 8003560:	4603      	mov	r3, r0
 8003562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003566:	2b40      	cmp	r3, #64	@ 0x40
 8003568:	d12f      	bne.n	80035ca <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800356a:	78fb      	ldrb	r3, [r7, #3]
 800356c:	015a      	lsls	r2, r3, #5
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4413      	add	r3, r2
 8003572:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003576:	461a      	mov	r2, r3
 8003578:	2340      	movs	r3, #64	@ 0x40
 800357a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800357c:	78fa      	ldrb	r2, [r7, #3]
 800357e:	6879      	ldr	r1, [r7, #4]
 8003580:	4613      	mov	r3, r2
 8003582:	011b      	lsls	r3, r3, #4
 8003584:	1a9b      	subs	r3, r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	440b      	add	r3, r1
 800358a:	334d      	adds	r3, #77	@ 0x4d
 800358c:	2205      	movs	r2, #5
 800358e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	331a      	adds	r3, #26
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d109      	bne.n	80035ba <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3344      	adds	r3, #68	@ 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	4611      	mov	r1, r2
 80035c2:	4618      	mov	r0, r3
 80035c4:	f004 fab7 	bl	8007b36 <USB_HC_Halt>
 80035c8:	e0b3      	b.n	8003732 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	4611      	mov	r1, r2
 80035d2:	4618      	mov	r0, r3
 80035d4:	f003 fd0b 	bl	8006fee <USB_ReadChInterrupts>
 80035d8:	4603      	mov	r3, r0
 80035da:	f003 0310 	and.w	r3, r3, #16
 80035de:	2b10      	cmp	r3, #16
 80035e0:	f040 80a7 	bne.w	8003732 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	3326      	adds	r3, #38	@ 0x26
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b03      	cmp	r3, #3
 80035f8:	d11b      	bne.n	8003632 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	3344      	adds	r3, #68	@ 0x44
 800360a:	2200      	movs	r2, #0
 800360c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	334d      	adds	r3, #77	@ 0x4d
 800361e:	2204      	movs	r2, #4
 8003620:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f004 fa83 	bl	8007b36 <USB_HC_Halt>
 8003630:	e03f      	b.n	80036b2 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	011b      	lsls	r3, r3, #4
 800363a:	1a9b      	subs	r3, r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	3326      	adds	r3, #38	@ 0x26
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00a      	beq.n	800365e <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	1a9b      	subs	r3, r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	3326      	adds	r3, #38	@ 0x26
 8003658:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800365a:	2b02      	cmp	r3, #2
 800365c:	d129      	bne.n	80036b2 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800365e:	78fa      	ldrb	r2, [r7, #3]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	1a9b      	subs	r3, r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	3344      	adds	r3, #68	@ 0x44
 800366e:	2200      	movs	r2, #0
 8003670:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	799b      	ldrb	r3, [r3, #6]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00a      	beq.n	8003690 <HCD_HC_IN_IRQHandler+0xc2a>
 800367a:	78fa      	ldrb	r2, [r7, #3]
 800367c:	6879      	ldr	r1, [r7, #4]
 800367e:	4613      	mov	r3, r2
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	1a9b      	subs	r3, r3, r2
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	331b      	adds	r3, #27
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d110      	bne.n	80036b2 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	334d      	adds	r3, #77	@ 0x4d
 80036a0:	2204      	movs	r2, #4
 80036a2:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 fa42 	bl	8007b36 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	331b      	adds	r3, #27
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d129      	bne.n	800371c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	331b      	adds	r3, #27
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036dc:	78fb      	ldrb	r3, [r7, #3]
 80036de:	015a      	lsls	r2, r3, #5
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	4413      	add	r3, r2
 80036e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	0151      	lsls	r1, r2, #5
 80036ee:	693a      	ldr	r2, [r7, #16]
 80036f0:	440a      	add	r2, r1
 80036f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036fa:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80036fc:	78fb      	ldrb	r3, [r7, #3]
 80036fe:	015a      	lsls	r2, r3, #5
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4413      	add	r3, r2
 8003704:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	0151      	lsls	r1, r2, #5
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	440a      	add	r2, r1
 8003712:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003716:	f043 0320 	orr.w	r3, r3, #32
 800371a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800371c:	78fb      	ldrb	r3, [r7, #3]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003728:	461a      	mov	r2, r3
 800372a:	2310      	movs	r3, #16
 800372c:	6093      	str	r3, [r2, #8]
 800372e:	e000      	b.n	8003732 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003730:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003732:	3718      	adds	r7, #24
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	78fa      	ldrb	r2, [r7, #3]
 8003754:	4611      	mov	r1, r2
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fc49 	bl	8006fee <USB_ReadChInterrupts>
 800375c:	4603      	mov	r3, r0
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b04      	cmp	r3, #4
 8003764:	d11b      	bne.n	800379e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003766:	78fb      	ldrb	r3, [r7, #3]
 8003768:	015a      	lsls	r2, r3, #5
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4413      	add	r3, r2
 800376e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003772:	461a      	mov	r2, r3
 8003774:	2304      	movs	r3, #4
 8003776:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	334d      	adds	r3, #77	@ 0x4d
 8003788:	2207      	movs	r2, #7
 800378a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	78fa      	ldrb	r2, [r7, #3]
 8003792:	4611      	mov	r1, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f004 f9ce 	bl	8007b36 <USB_HC_Halt>
 800379a:	f000 bc89 	b.w	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	4611      	mov	r1, r2
 80037a6:	4618      	mov	r0, r3
 80037a8:	f003 fc21 	bl	8006fee <USB_ReadChInterrupts>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	f040 8082 	bne.w	80038bc <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80037b8:	78fb      	ldrb	r3, [r7, #3]
 80037ba:	015a      	lsls	r2, r3, #5
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	4413      	add	r3, r2
 80037c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c4:	461a      	mov	r2, r3
 80037c6:	2320      	movs	r3, #32
 80037c8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80037ca:	78fa      	ldrb	r2, [r7, #3]
 80037cc:	6879      	ldr	r1, [r7, #4]
 80037ce:	4613      	mov	r3, r2
 80037d0:	011b      	lsls	r3, r3, #4
 80037d2:	1a9b      	subs	r3, r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	440b      	add	r3, r1
 80037d8:	3319      	adds	r3, #25
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d124      	bne.n	800382a <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80037e0:	78fa      	ldrb	r2, [r7, #3]
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	4613      	mov	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3319      	adds	r3, #25
 80037f0:	2200      	movs	r2, #0
 80037f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	334c      	adds	r3, #76	@ 0x4c
 8003804:	2202      	movs	r2, #2
 8003806:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	011b      	lsls	r3, r3, #4
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	334d      	adds	r3, #77	@ 0x4d
 8003818:	2203      	movs	r2, #3
 800381a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	4611      	mov	r1, r2
 8003824:	4618      	mov	r0, r3
 8003826:	f004 f986 	bl	8007b36 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	4613      	mov	r3, r2
 8003830:	011b      	lsls	r3, r3, #4
 8003832:	1a9b      	subs	r3, r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	331a      	adds	r3, #26
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b01      	cmp	r3, #1
 800383e:	f040 8437 	bne.w	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
 8003842:	78fa      	ldrb	r2, [r7, #3]
 8003844:	6879      	ldr	r1, [r7, #4]
 8003846:	4613      	mov	r3, r2
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	1a9b      	subs	r3, r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	331b      	adds	r3, #27
 8003852:	781b      	ldrb	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	f040 842b 	bne.w	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3326      	adds	r3, #38	@ 0x26
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	2b01      	cmp	r3, #1
 800386e:	d009      	beq.n	8003884 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	331b      	adds	r3, #27
 8003880:	2201      	movs	r2, #1
 8003882:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003884:	78fa      	ldrb	r2, [r7, #3]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	011b      	lsls	r3, r3, #4
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	334d      	adds	r3, #77	@ 0x4d
 8003894:	2203      	movs	r2, #3
 8003896:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	4611      	mov	r1, r2
 80038a0:	4618      	mov	r0, r3
 80038a2:	f004 f948 	bl	8007b36 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3344      	adds	r3, #68	@ 0x44
 80038b6:	2200      	movs	r2, #0
 80038b8:	601a      	str	r2, [r3, #0]
 80038ba:	e3f9      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f003 fb92 	bl	8006fee <USB_ReadChInterrupts>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80038d4:	d111      	bne.n	80038fa <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e2:	461a      	mov	r2, r3
 80038e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038e8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	78fa      	ldrb	r2, [r7, #3]
 80038f0:	4611      	mov	r1, r2
 80038f2:	4618      	mov	r0, r3
 80038f4:	f004 f91f 	bl	8007b36 <USB_HC_Halt>
 80038f8:	e3da      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f003 fb73 	bl	8006fee <USB_ReadChInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f003 0301 	and.w	r3, r3, #1
 800390e:	2b01      	cmp	r3, #1
 8003910:	d168      	bne.n	80039e4 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003912:	78fa      	ldrb	r2, [r7, #3]
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	011b      	lsls	r3, r3, #4
 800391a:	1a9b      	subs	r3, r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	440b      	add	r3, r1
 8003920:	3344      	adds	r3, #68	@ 0x44
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	4611      	mov	r1, r2
 800392e:	4618      	mov	r0, r3
 8003930:	f003 fb5d 	bl	8006fee <USB_ReadChInterrupts>
 8003934:	4603      	mov	r3, r0
 8003936:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800393a:	2b40      	cmp	r3, #64	@ 0x40
 800393c:	d112      	bne.n	8003964 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6879      	ldr	r1, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	440b      	add	r3, r1
 800394c:	3319      	adds	r3, #25
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	015a      	lsls	r2, r3, #5
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	4413      	add	r3, r2
 800395a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800395e:	461a      	mov	r2, r3
 8003960:	2340      	movs	r3, #64	@ 0x40
 8003962:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	331b      	adds	r3, #27
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d019      	beq.n	80039ae <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	331b      	adds	r3, #27
 800398a:	2200      	movs	r2, #0
 800398c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800398e:	78fb      	ldrb	r3, [r7, #3]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4413      	add	r3, r2
 8003996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	78fa      	ldrb	r2, [r7, #3]
 800399e:	0151      	lsls	r1, r2, #5
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	440a      	add	r2, r1
 80039a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80039a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039ac:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ba:	461a      	mov	r2, r3
 80039bc:	2301      	movs	r3, #1
 80039be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80039c0:	78fa      	ldrb	r2, [r7, #3]
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	334d      	adds	r3, #77	@ 0x4d
 80039d0:	2201      	movs	r2, #1
 80039d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	78fa      	ldrb	r2, [r7, #3]
 80039da:	4611      	mov	r1, r2
 80039dc:	4618      	mov	r0, r3
 80039de:	f004 f8aa 	bl	8007b36 <USB_HC_Halt>
 80039e2:	e365      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	4611      	mov	r1, r2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f003 fafe 	bl	8006fee <USB_ReadChInterrupts>
 80039f2:	4603      	mov	r3, r0
 80039f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039f8:	2b40      	cmp	r3, #64	@ 0x40
 80039fa:	d139      	bne.n	8003a70 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003a10:	78fa      	ldrb	r2, [r7, #3]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	331a      	adds	r3, #26
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d109      	bne.n	8003a3a <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3319      	adds	r3, #25
 8003a36:	2201      	movs	r2, #1
 8003a38:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003a3a:	78fa      	ldrb	r2, [r7, #3]
 8003a3c:	6879      	ldr	r1, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	3344      	adds	r3, #68	@ 0x44
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f004 f86d 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a68:	461a      	mov	r2, r3
 8003a6a:	2340      	movs	r3, #64	@ 0x40
 8003a6c:	6093      	str	r3, [r2, #8]
 8003a6e:	e31f      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	4611      	mov	r1, r2
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f003 fab8 	bl	8006fee <USB_ReadChInterrupts>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b08      	cmp	r3, #8
 8003a86:	d11a      	bne.n	8003abe <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	015a      	lsls	r2, r3, #5
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4413      	add	r3, r2
 8003a90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a94:	461a      	mov	r2, r3
 8003a96:	2308      	movs	r3, #8
 8003a98:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	334d      	adds	r3, #77	@ 0x4d
 8003aaa:	2206      	movs	r2, #6
 8003aac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	4611      	mov	r1, r2
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f004 f83d 	bl	8007b36 <USB_HC_Halt>
 8003abc:	e2f8      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	4611      	mov	r1, r2
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f003 fa91 	bl	8006fee <USB_ReadChInterrupts>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d144      	bne.n	8003b60 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003ad6:	78fa      	ldrb	r2, [r7, #3]
 8003ad8:	6879      	ldr	r1, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	011b      	lsls	r3, r3, #4
 8003ade:	1a9b      	subs	r3, r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	440b      	add	r3, r1
 8003ae4:	3344      	adds	r3, #68	@ 0x44
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	334d      	adds	r3, #77	@ 0x4d
 8003afa:	2204      	movs	r2, #4
 8003afc:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3319      	adds	r3, #25
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d114      	bne.n	8003b3e <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3318      	adds	r3, #24
 8003b24:	781b      	ldrb	r3, [r3, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d109      	bne.n	8003b3e <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003b2a:	78fa      	ldrb	r2, [r7, #3]
 8003b2c:	6879      	ldr	r1, [r7, #4]
 8003b2e:	4613      	mov	r3, r2
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	1a9b      	subs	r3, r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	440b      	add	r3, r1
 8003b38:	3319      	adds	r3, #25
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	78fa      	ldrb	r2, [r7, #3]
 8003b44:	4611      	mov	r1, r2
 8003b46:	4618      	mov	r0, r3
 8003b48:	f003 fff5 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b58:	461a      	mov	r2, r3
 8003b5a:	2310      	movs	r3, #16
 8003b5c:	6093      	str	r3, [r2, #8]
 8003b5e:	e2a7      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f003 fa40 	bl	8006fee <USB_ReadChInterrupts>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b74:	2b80      	cmp	r3, #128	@ 0x80
 8003b76:	f040 8083 	bne.w	8003c80 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	799b      	ldrb	r3, [r3, #6]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d111      	bne.n	8003ba6 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	334d      	adds	r3, #77	@ 0x4d
 8003b92:	2207      	movs	r2, #7
 8003b94:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	4611      	mov	r1, r2
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f003 ffc9 	bl	8007b36 <USB_HC_Halt>
 8003ba4:	e062      	b.n	8003c6c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003ba6:	78fa      	ldrb	r2, [r7, #3]
 8003ba8:	6879      	ldr	r1, [r7, #4]
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	1a9b      	subs	r3, r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3344      	adds	r3, #68	@ 0x44
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	011b      	lsls	r3, r3, #4
 8003bc0:	1a9b      	subs	r3, r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4403      	add	r3, r0
 8003bc6:	3344      	adds	r3, #68	@ 0x44
 8003bc8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bca:	78fa      	ldrb	r2, [r7, #3]
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	1a9b      	subs	r3, r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	3344      	adds	r3, #68	@ 0x44
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b02      	cmp	r3, #2
 8003bde:	d922      	bls.n	8003c26 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	3344      	adds	r3, #68	@ 0x44
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	334c      	adds	r3, #76	@ 0x4c
 8003c04:	2204      	movs	r2, #4
 8003c06:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	334c      	adds	r3, #76	@ 0x4c
 8003c18:	781a      	ldrb	r2, [r3, #0]
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f009 f804 	bl	800cc2c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003c24:	e022      	b.n	8003c6c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c26:	78fa      	ldrb	r2, [r7, #3]
 8003c28:	6879      	ldr	r1, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	334c      	adds	r3, #76	@ 0x4c
 8003c36:	2202      	movs	r2, #2
 8003c38:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	015a      	lsls	r2, r3, #5
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	4413      	add	r3, r2
 8003c42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c50:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c58:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c66:	461a      	mov	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	015a      	lsls	r2, r3, #5
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	4413      	add	r3, r2
 8003c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c78:	461a      	mov	r2, r3
 8003c7a:	2380      	movs	r3, #128	@ 0x80
 8003c7c:	6093      	str	r3, [r2, #8]
 8003c7e:	e217      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	78fa      	ldrb	r2, [r7, #3]
 8003c86:	4611      	mov	r1, r2
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f003 f9b0 	bl	8006fee <USB_ReadChInterrupts>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c98:	d11b      	bne.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	011b      	lsls	r3, r3, #4
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	334d      	adds	r3, #77	@ 0x4d
 8003caa:	2209      	movs	r2, #9
 8003cac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	78fa      	ldrb	r2, [r7, #3]
 8003cb4:	4611      	mov	r1, r2
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 ff3d 	bl	8007b36 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cc8:	461a      	mov	r2, r3
 8003cca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003cce:	6093      	str	r3, [r2, #8]
 8003cd0:	e1ee      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	78fa      	ldrb	r2, [r7, #3]
 8003cd8:	4611      	mov	r1, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f003 f987 	bl	8006fee <USB_ReadChInterrupts>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	f040 81df 	bne.w	80040aa <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003cec:	78fb      	ldrb	r3, [r7, #3]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334d      	adds	r3, #77	@ 0x4d
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	f040 8093 	bne.w	8003e3c <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d16:	78fa      	ldrb	r2, [r7, #3]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	334d      	adds	r3, #77	@ 0x4d
 8003d26:	2202      	movs	r2, #2
 8003d28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	334c      	adds	r3, #76	@ 0x4c
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	3326      	adds	r3, #38	@ 0x26
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d00b      	beq.n	8003d6c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003d54:	78fa      	ldrb	r2, [r7, #3]
 8003d56:	6879      	ldr	r1, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	011b      	lsls	r3, r3, #4
 8003d5c:	1a9b      	subs	r3, r3, r2
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	3326      	adds	r3, #38	@ 0x26
 8003d64:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003d66:	2b03      	cmp	r3, #3
 8003d68:	f040 8190 	bne.w	800408c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	799b      	ldrb	r3, [r3, #6]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d115      	bne.n	8003da0 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003d74:	78fa      	ldrb	r2, [r7, #3]
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	4613      	mov	r3, r2
 8003d7a:	011b      	lsls	r3, r3, #4
 8003d7c:	1a9b      	subs	r3, r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	333d      	adds	r3, #61	@ 0x3d
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	78fa      	ldrb	r2, [r7, #3]
 8003d88:	f083 0301 	eor.w	r3, r3, #1
 8003d8c:	b2d8      	uxtb	r0, r3
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	4613      	mov	r3, r2
 8003d92:	011b      	lsls	r3, r3, #4
 8003d94:	1a9b      	subs	r3, r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	333d      	adds	r3, #61	@ 0x3d
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	799b      	ldrb	r3, [r3, #6]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 8171 	bne.w	800408c <HCD_HC_OUT_IRQHandler+0x954>
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	6879      	ldr	r1, [r7, #4]
 8003dae:	4613      	mov	r3, r2
 8003db0:	011b      	lsls	r3, r3, #4
 8003db2:	1a9b      	subs	r3, r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	3334      	adds	r3, #52	@ 0x34
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f000 8165 	beq.w	800408c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003dc2:	78fa      	ldrb	r2, [r7, #3]
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	1a9b      	subs	r3, r3, r2
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	440b      	add	r3, r1
 8003dd0:	3334      	adds	r3, #52	@ 0x34
 8003dd2:	6819      	ldr	r1, [r3, #0]
 8003dd4:	78fa      	ldrb	r2, [r7, #3]
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	1a9b      	subs	r3, r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4403      	add	r3, r0
 8003de2:	3328      	adds	r3, #40	@ 0x28
 8003de4:	881b      	ldrh	r3, [r3, #0]
 8003de6:	440b      	add	r3, r1
 8003de8:	1e59      	subs	r1, r3, #1
 8003dea:	78fa      	ldrb	r2, [r7, #3]
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	1a9b      	subs	r3, r3, r2
 8003df4:	009b      	lsls	r3, r3, #2
 8003df6:	4403      	add	r3, r0
 8003df8:	3328      	adds	r3, #40	@ 0x28
 8003dfa:	881b      	ldrh	r3, [r3, #0]
 8003dfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e00:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	f003 0301 	and.w	r3, r3, #1
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 813f 	beq.w	800408c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	333d      	adds	r3, #61	@ 0x3d
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	f083 0301 	eor.w	r3, r3, #1
 8003e26:	b2d8      	uxtb	r0, r3
 8003e28:	6879      	ldr	r1, [r7, #4]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	440b      	add	r3, r1
 8003e34:	333d      	adds	r3, #61	@ 0x3d
 8003e36:	4602      	mov	r2, r0
 8003e38:	701a      	strb	r2, [r3, #0]
 8003e3a:	e127      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003e3c:	78fa      	ldrb	r2, [r7, #3]
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	4613      	mov	r3, r2
 8003e42:	011b      	lsls	r3, r3, #4
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	334d      	adds	r3, #77	@ 0x4d
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d120      	bne.n	8003e94 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e52:	78fa      	ldrb	r2, [r7, #3]
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	4613      	mov	r3, r2
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	1a9b      	subs	r3, r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	334d      	adds	r3, #77	@ 0x4d
 8003e62:	2202      	movs	r2, #2
 8003e64:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e66:	78fa      	ldrb	r2, [r7, #3]
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	4613      	mov	r3, r2
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	1a9b      	subs	r3, r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	440b      	add	r3, r1
 8003e74:	331b      	adds	r3, #27
 8003e76:	781b      	ldrb	r3, [r3, #0]
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 8107 	bne.w	800408c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	334c      	adds	r3, #76	@ 0x4c
 8003e8e:	2202      	movs	r2, #2
 8003e90:	701a      	strb	r2, [r3, #0]
 8003e92:	e0fb      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e94:	78fa      	ldrb	r2, [r7, #3]
 8003e96:	6879      	ldr	r1, [r7, #4]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	011b      	lsls	r3, r3, #4
 8003e9c:	1a9b      	subs	r3, r3, r2
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	334d      	adds	r3, #77	@ 0x4d
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	2b04      	cmp	r3, #4
 8003ea8:	d13a      	bne.n	8003f20 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003eaa:	78fa      	ldrb	r2, [r7, #3]
 8003eac:	6879      	ldr	r1, [r7, #4]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	011b      	lsls	r3, r3, #4
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	440b      	add	r3, r1
 8003eb8:	334d      	adds	r3, #77	@ 0x4d
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	334c      	adds	r3, #76	@ 0x4c
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	331b      	adds	r3, #27
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	f040 80d1 	bne.w	800408c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	331b      	adds	r3, #27
 8003efa:	2200      	movs	r2, #0
 8003efc:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003efe:	78fb      	ldrb	r3, [r7, #3]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	0151      	lsls	r1, r2, #5
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	440a      	add	r2, r1
 8003f14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003f18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f1c:	6053      	str	r3, [r2, #4]
 8003f1e:	e0b5      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003f20:	78fa      	ldrb	r2, [r7, #3]
 8003f22:	6879      	ldr	r1, [r7, #4]
 8003f24:	4613      	mov	r3, r2
 8003f26:	011b      	lsls	r3, r3, #4
 8003f28:	1a9b      	subs	r3, r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	440b      	add	r3, r1
 8003f2e:	334d      	adds	r3, #77	@ 0x4d
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	2b05      	cmp	r3, #5
 8003f34:	d114      	bne.n	8003f60 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	334d      	adds	r3, #77	@ 0x4d
 8003f46:	2202      	movs	r2, #2
 8003f48:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	334c      	adds	r3, #76	@ 0x4c
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	e095      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003f60:	78fa      	ldrb	r2, [r7, #3]
 8003f62:	6879      	ldr	r1, [r7, #4]
 8003f64:	4613      	mov	r3, r2
 8003f66:	011b      	lsls	r3, r3, #4
 8003f68:	1a9b      	subs	r3, r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	334d      	adds	r3, #77	@ 0x4d
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b06      	cmp	r3, #6
 8003f74:	d114      	bne.n	8003fa0 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	334d      	adds	r3, #77	@ 0x4d
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	334c      	adds	r3, #76	@ 0x4c
 8003f9a:	2205      	movs	r2, #5
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	e075      	b.n	800408c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003fa0:	78fa      	ldrb	r2, [r7, #3]
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	4613      	mov	r3, r2
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a9b      	subs	r3, r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	440b      	add	r3, r1
 8003fae:	334d      	adds	r3, #77	@ 0x4d
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b07      	cmp	r3, #7
 8003fb4:	d00a      	beq.n	8003fcc <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	334d      	adds	r3, #77	@ 0x4d
 8003fc6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d170      	bne.n	80040ae <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	334d      	adds	r3, #77	@ 0x4d
 8003fdc:	2202      	movs	r2, #2
 8003fde:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fe0:	78fa      	ldrb	r2, [r7, #3]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	011b      	lsls	r3, r3, #4
 8003fe8:	1a9b      	subs	r3, r3, r2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	3344      	adds	r3, #68	@ 0x44
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	1c59      	adds	r1, r3, #1
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	011b      	lsls	r3, r3, #4
 8003ffa:	1a9b      	subs	r3, r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4403      	add	r3, r0
 8004000:	3344      	adds	r3, #68	@ 0x44
 8004002:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	6879      	ldr	r1, [r7, #4]
 8004008:	4613      	mov	r3, r2
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	1a9b      	subs	r3, r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	440b      	add	r3, r1
 8004012:	3344      	adds	r3, #68	@ 0x44
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b02      	cmp	r3, #2
 8004018:	d914      	bls.n	8004044 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	3344      	adds	r3, #68	@ 0x44
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	334c      	adds	r3, #76	@ 0x4c
 800403e:	2204      	movs	r2, #4
 8004040:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004042:	e022      	b.n	800408a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004044:	78fa      	ldrb	r2, [r7, #3]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	011b      	lsls	r3, r3, #4
 800404c:	1a9b      	subs	r3, r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	334c      	adds	r3, #76	@ 0x4c
 8004054:	2202      	movs	r2, #2
 8004056:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004058:	78fb      	ldrb	r3, [r7, #3]
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	4413      	add	r3, r2
 8004060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800406e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004076:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004078:	78fb      	ldrb	r3, [r7, #3]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004084:	461a      	mov	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800408a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	6879      	ldr	r1, [r7, #4]
 8004090:	4613      	mov	r3, r2
 8004092:	011b      	lsls	r3, r3, #4
 8004094:	1a9b      	subs	r3, r3, r2
 8004096:	009b      	lsls	r3, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	334c      	adds	r3, #76	@ 0x4c
 800409c:	781a      	ldrb	r2, [r3, #0]
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	4619      	mov	r1, r3
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f008 fdc2 	bl	800cc2c <HAL_HCD_HC_NotifyURBChange_Callback>
 80040a8:	e002      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80040aa:	bf00      	nop
 80040ac:	e000      	b.n	80040b0 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80040ae:	bf00      	nop
  }
}
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b08a      	sub	sp, #40	@ 0x28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	0c5b      	lsrs	r3, r3, #17
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040e2:	69fb      	ldr	r3, [r7, #28]
 80040e4:	091b      	lsrs	r3, r3, #4
 80040e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040ea:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	2b02      	cmp	r3, #2
 80040f0:	d004      	beq.n	80040fc <HCD_RXQLVL_IRQHandler+0x46>
 80040f2:	697b      	ldr	r3, [r7, #20]
 80040f4:	2b05      	cmp	r3, #5
 80040f6:	f000 80b6 	beq.w	8004266 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80040fa:	e0b7      	b.n	800426c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	f000 80b3 	beq.w	800426a <HCD_RXQLVL_IRQHandler+0x1b4>
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	69ba      	ldr	r2, [r7, #24]
 8004108:	4613      	mov	r3, r2
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	440b      	add	r3, r1
 8004112:	332c      	adds	r3, #44	@ 0x2c
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 80a7 	beq.w	800426a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800411c:	6879      	ldr	r1, [r7, #4]
 800411e:	69ba      	ldr	r2, [r7, #24]
 8004120:	4613      	mov	r3, r2
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	1a9b      	subs	r3, r3, r2
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	440b      	add	r3, r1
 800412a:	3338      	adds	r3, #56	@ 0x38
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	18d1      	adds	r1, r2, r3
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4613      	mov	r3, r2
 8004138:	011b      	lsls	r3, r3, #4
 800413a:	1a9b      	subs	r3, r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4403      	add	r3, r0
 8004140:	3334      	adds	r3, #52	@ 0x34
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4299      	cmp	r1, r3
 8004146:	f200 8083 	bhi.w	8004250 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	4613      	mov	r3, r2
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	1a9b      	subs	r3, r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	332c      	adds	r3, #44	@ 0x2c
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	693a      	ldr	r2, [r7, #16]
 8004162:	b292      	uxth	r2, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f002 fed7 	bl	8006f18 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	332c      	adds	r3, #44	@ 0x2c
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	18d1      	adds	r1, r2, r3
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4613      	mov	r3, r2
 8004186:	011b      	lsls	r3, r3, #4
 8004188:	1a9b      	subs	r3, r3, r2
 800418a:	009b      	lsls	r3, r3, #2
 800418c:	4403      	add	r3, r0
 800418e:	332c      	adds	r3, #44	@ 0x2c
 8004190:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	4613      	mov	r3, r2
 8004198:	011b      	lsls	r3, r3, #4
 800419a:	1a9b      	subs	r3, r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	440b      	add	r3, r1
 80041a0:	3338      	adds	r3, #56	@ 0x38
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	18d1      	adds	r1, r2, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4613      	mov	r3, r2
 80041ae:	011b      	lsls	r3, r3, #4
 80041b0:	1a9b      	subs	r3, r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4403      	add	r3, r0
 80041b6:	3338      	adds	r3, #56	@ 0x38
 80041b8:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80041ba:	69bb      	ldr	r3, [r7, #24]
 80041bc:	015a      	lsls	r2, r3, #5
 80041be:	6a3b      	ldr	r3, [r7, #32]
 80041c0:	4413      	add	r3, r2
 80041c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	0cdb      	lsrs	r3, r3, #19
 80041ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ce:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80041d0:	6879      	ldr	r1, [r7, #4]
 80041d2:	69ba      	ldr	r2, [r7, #24]
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	440b      	add	r3, r1
 80041de:	3328      	adds	r3, #40	@ 0x28
 80041e0:	881b      	ldrh	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d13f      	bne.n	800426a <HCD_RXQLVL_IRQHandler+0x1b4>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d03c      	beq.n	800426a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004206:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800420e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	6a3b      	ldr	r3, [r7, #32]
 8004216:	4413      	add	r3, r2
 8004218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800421c:	461a      	mov	r2, r3
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004222:	6879      	ldr	r1, [r7, #4]
 8004224:	69ba      	ldr	r2, [r7, #24]
 8004226:	4613      	mov	r3, r2
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	1a9b      	subs	r3, r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	333c      	adds	r3, #60	@ 0x3c
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	f083 0301 	eor.w	r3, r3, #1
 8004238:	b2d8      	uxtb	r0, r3
 800423a:	6879      	ldr	r1, [r7, #4]
 800423c:	69ba      	ldr	r2, [r7, #24]
 800423e:	4613      	mov	r3, r2
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	1a9b      	subs	r3, r3, r2
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	440b      	add	r3, r1
 8004248:	333c      	adds	r3, #60	@ 0x3c
 800424a:	4602      	mov	r2, r0
 800424c:	701a      	strb	r2, [r3, #0]
      break;
 800424e:	e00c      	b.n	800426a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	4613      	mov	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	440b      	add	r3, r1
 800425e:	334c      	adds	r3, #76	@ 0x4c
 8004260:	2204      	movs	r2, #4
 8004262:	701a      	strb	r2, [r3, #0]
      break;
 8004264:	e001      	b.n	800426a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004266:	bf00      	nop
 8004268:	e000      	b.n	800426c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800426a:	bf00      	nop
  }
}
 800426c:	bf00      	nop
 800426e:	3728      	adds	r7, #40	@ 0x28
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80042a0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d10b      	bne.n	80042c4 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d102      	bne.n	80042bc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f008 fc9c 	bl	800cbf4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f043 0302 	orr.w	r3, r3, #2
 80042c2:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f003 0308 	and.w	r3, r3, #8
 80042ca:	2b08      	cmp	r3, #8
 80042cc:	d132      	bne.n	8004334 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f043 0308 	orr.w	r3, r3, #8
 80042d4:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f003 0304 	and.w	r3, r3, #4
 80042dc:	2b04      	cmp	r3, #4
 80042de:	d126      	bne.n	800432e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	7a5b      	ldrb	r3, [r3, #9]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d113      	bne.n	8004310 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80042ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042f2:	d106      	bne.n	8004302 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2102      	movs	r1, #2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f002 ff9c 	bl	8007238 <USB_InitFSLSPClkSel>
 8004300:	e011      	b.n	8004326 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2101      	movs	r1, #1
 8004308:	4618      	mov	r0, r3
 800430a:	f002 ff95 	bl	8007238 <USB_InitFSLSPClkSel>
 800430e:	e00a      	b.n	8004326 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	79db      	ldrb	r3, [r3, #7]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d106      	bne.n	8004326 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800431e:	461a      	mov	r2, r3
 8004320:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004324:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f008 fc92 	bl	800cc50 <HAL_HCD_PortEnabled_Callback>
 800432c:	e002      	b.n	8004334 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f008 fc9c 	bl	800cc6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0320 	and.w	r3, r3, #32
 800433a:	2b20      	cmp	r3, #32
 800433c:	d103      	bne.n	8004346 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f043 0320 	orr.w	r3, r3, #32
 8004344:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800434c:	461a      	mov	r2, r3
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	6013      	str	r3, [r2, #0]
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e12b      	b.n	80045c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004374:	b2db      	uxtb	r3, r3
 8004376:	2b00      	cmp	r3, #0
 8004378:	d106      	bne.n	8004388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f7fc fbf0 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2224      	movs	r2, #36	@ 0x24
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80043ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80043c0:	f001 f964 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 80043c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4a81      	ldr	r2, [pc, #516]	@ (80045d0 <HAL_I2C_Init+0x274>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d807      	bhi.n	80043e0 <HAL_I2C_Init+0x84>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a80      	ldr	r2, [pc, #512]	@ (80045d4 <HAL_I2C_Init+0x278>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	bf94      	ite	ls
 80043d8:	2301      	movls	r3, #1
 80043da:	2300      	movhi	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	e006      	b.n	80043ee <HAL_I2C_Init+0x92>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a7d      	ldr	r2, [pc, #500]	@ (80045d8 <HAL_I2C_Init+0x27c>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	bf94      	ite	ls
 80043e8:	2301      	movls	r3, #1
 80043ea:	2300      	movhi	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e0e7      	b.n	80045c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a78      	ldr	r2, [pc, #480]	@ (80045dc <HAL_I2C_Init+0x280>)
 80043fa:	fba2 2303 	umull	r2, r3, r2, r3
 80043fe:	0c9b      	lsrs	r3, r3, #18
 8004400:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	430a      	orrs	r2, r1
 8004414:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a6a      	ldr	r2, [pc, #424]	@ (80045d0 <HAL_I2C_Init+0x274>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d802      	bhi.n	8004430 <HAL_I2C_Init+0xd4>
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	3301      	adds	r3, #1
 800442e:	e009      	b.n	8004444 <HAL_I2C_Init+0xe8>
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004436:	fb02 f303 	mul.w	r3, r2, r3
 800443a:	4a69      	ldr	r2, [pc, #420]	@ (80045e0 <HAL_I2C_Init+0x284>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	3301      	adds	r3, #1
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	430b      	orrs	r3, r1
 800444a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004456:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	495c      	ldr	r1, [pc, #368]	@ (80045d0 <HAL_I2C_Init+0x274>)
 8004460:	428b      	cmp	r3, r1
 8004462:	d819      	bhi.n	8004498 <HAL_I2C_Init+0x13c>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e59      	subs	r1, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004478:	400b      	ands	r3, r1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00a      	beq.n	8004494 <HAL_I2C_Init+0x138>
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	1e59      	subs	r1, r3, #1
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	fbb1 f3f3 	udiv	r3, r1, r3
 800448c:	3301      	adds	r3, #1
 800448e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004492:	e051      	b.n	8004538 <HAL_I2C_Init+0x1dc>
 8004494:	2304      	movs	r3, #4
 8004496:	e04f      	b.n	8004538 <HAL_I2C_Init+0x1dc>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d111      	bne.n	80044c4 <HAL_I2C_Init+0x168>
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1e58      	subs	r0, r3, #1
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	005b      	lsls	r3, r3, #1
 80044ac:	440b      	add	r3, r1
 80044ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80044b2:	3301      	adds	r3, #1
 80044b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	e012      	b.n	80044ea <HAL_I2C_Init+0x18e>
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	1e58      	subs	r0, r3, #1
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	460b      	mov	r3, r1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	0099      	lsls	r1, r3, #2
 80044d4:	440b      	add	r3, r1
 80044d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80044da:	3301      	adds	r3, #1
 80044dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <HAL_I2C_Init+0x196>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e022      	b.n	8004538 <HAL_I2C_Init+0x1dc>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d10e      	bne.n	8004518 <HAL_I2C_Init+0x1bc>
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	1e58      	subs	r0, r3, #1
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6859      	ldr	r1, [r3, #4]
 8004502:	460b      	mov	r3, r1
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	440b      	add	r3, r1
 8004508:	fbb0 f3f3 	udiv	r3, r0, r3
 800450c:	3301      	adds	r3, #1
 800450e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004516:	e00f      	b.n	8004538 <HAL_I2C_Init+0x1dc>
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	1e58      	subs	r0, r3, #1
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	009b      	lsls	r3, r3, #2
 8004524:	440b      	add	r3, r1
 8004526:	0099      	lsls	r1, r3, #2
 8004528:	440b      	add	r3, r1
 800452a:	fbb0 f3f3 	udiv	r3, r0, r3
 800452e:	3301      	adds	r3, #1
 8004530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004534:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	6809      	ldr	r1, [r1, #0]
 800453c:	4313      	orrs	r3, r2
 800453e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	69da      	ldr	r2, [r3, #28]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004566:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6911      	ldr	r1, [r2, #16]
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	68d2      	ldr	r2, [r2, #12]
 8004572:	4311      	orrs	r1, r2
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	430b      	orrs	r3, r1
 800457a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695a      	ldr	r2, [r3, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	430a      	orrs	r2, r1
 8004596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2220      	movs	r2, #32
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	000186a0 	.word	0x000186a0
 80045d4:	001e847f 	.word	0x001e847f
 80045d8:	003d08ff 	.word	0x003d08ff
 80045dc:	431bde83 	.word	0x431bde83
 80045e0:	10624dd3 	.word	0x10624dd3

080045e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d129      	bne.n	800464e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2224      	movs	r2, #36	@ 0x24
 80045fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0201 	bic.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0210 	bic.w	r2, r2, #16
 8004620:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f042 0201 	orr.w	r2, r2, #1
 8004640:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2220      	movs	r2, #32
 8004646:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800464a:	2300      	movs	r3, #0
 800464c:	e000      	b.n	8004650 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800464e:	2302      	movs	r3, #2
  }
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004666:	2300      	movs	r3, #0
 8004668:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b20      	cmp	r3, #32
 8004674:	d12a      	bne.n	80046cc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2224      	movs	r2, #36	@ 0x24
 800467a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f022 0201 	bic.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004694:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004696:	89fb      	ldrh	r3, [r7, #14]
 8004698:	f023 030f 	bic.w	r3, r3, #15
 800469c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	89fb      	ldrh	r3, [r7, #14]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	89fa      	ldrh	r2, [r7, #14]
 80046ae:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2220      	movs	r2, #32
 80046c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	e000      	b.n	80046ce <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80046cc:	2302      	movs	r3, #2
  }
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
	...

080046dc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d101      	bne.n	80046ee <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e0bf      	b.n	800486e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004702:	6878      	ldr	r0, [r7, #4]
 8004704:	f7fc fb1a 	bl	8000d3c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2202      	movs	r2, #2
 800470c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	699a      	ldr	r2, [r3, #24]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800471e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6999      	ldr	r1, [r3, #24]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685a      	ldr	r2, [r3, #4]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004734:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6899      	ldr	r1, [r3, #8]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	4b4a      	ldr	r3, [pc, #296]	@ (8004878 <HAL_LTDC_Init+0x19c>)
 8004750:	400b      	ands	r3, r1
 8004752:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	041b      	lsls	r3, r3, #16
 800475a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6899      	ldr	r1, [r3, #8]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	430a      	orrs	r2, r1
 8004770:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	68d9      	ldr	r1, [r3, #12]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b3e      	ldr	r3, [pc, #248]	@ (8004878 <HAL_LTDC_Init+0x19c>)
 800477e:	400b      	ands	r3, r1
 8004780:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	041b      	lsls	r3, r3, #16
 8004788:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68d9      	ldr	r1, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1a      	ldr	r2, [r3, #32]
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	430a      	orrs	r2, r1
 800479e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	6919      	ldr	r1, [r3, #16]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b33      	ldr	r3, [pc, #204]	@ (8004878 <HAL_LTDC_Init+0x19c>)
 80047ac:	400b      	ands	r3, r1
 80047ae:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047b4:	041b      	lsls	r3, r3, #16
 80047b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6919      	ldr	r1, [r3, #16]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6959      	ldr	r1, [r3, #20]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	4b27      	ldr	r3, [pc, #156]	@ (8004878 <HAL_LTDC_Init+0x19c>)
 80047da:	400b      	ands	r3, r1
 80047dc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e2:	041b      	lsls	r3, r3, #16
 80047e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6959      	ldr	r1, [r3, #20]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	431a      	orrs	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	430a      	orrs	r2, r1
 80047fa:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004802:	021b      	lsls	r3, r3, #8
 8004804:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800480c:	041b      	lsls	r3, r3, #16
 800480e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800481e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0206 	orr.w	r2, r2, #6
 800484a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	f000f800 	.word	0xf000f800

0800487c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004892:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d023      	beq.n	80048e6 <HAL_LTDC_IRQHandler+0x6a>
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d01e      	beq.n	80048e6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f022 0204 	bic.w	r2, r2, #4
 80048b6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2204      	movs	r2, #4
 80048be:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80048c6:	f043 0201 	orr.w	r2, r3, #1
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2204      	movs	r2, #4
 80048d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f86f 	bl	80049c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d023      	beq.n	8004938 <HAL_LTDC_IRQHandler+0xbc>
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d01e      	beq.n	8004938 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0202 	bic.w	r2, r2, #2
 8004908:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2202      	movs	r2, #2
 8004910:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004918:	f043 0202 	orr.w	r2, r3, #2
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2204      	movs	r2, #4
 8004926:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f846 	bl	80049c4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d01b      	beq.n	800497a <HAL_LTDC_IRQHandler+0xfe>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d016      	beq.n	800497a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2201      	movs	r2, #1
 8004962:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f82f 	bl	80049d8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0308 	and.w	r3, r3, #8
 8004980:	2b00      	cmp	r3, #0
 8004982:	d01b      	beq.n	80049bc <HAL_LTDC_IRQHandler+0x140>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d016      	beq.n	80049bc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0208 	bic.w	r2, r2, #8
 800499c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2208      	movs	r2, #8
 80049a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f818 	bl	80049ec <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80049cc:	bf00      	nop
 80049ce:	370c      	adds	r7, #12
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a00:	b5b0      	push	{r4, r5, r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d101      	bne.n	8004a1a <HAL_LTDC_ConfigLayer+0x1a>
 8004a16:	2302      	movs	r3, #2
 8004a18:	e02c      	b.n	8004a74 <HAL_LTDC_ConfigLayer+0x74>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2201      	movs	r2, #1
 8004a1e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2202      	movs	r2, #2
 8004a26:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2134      	movs	r1, #52	@ 0x34
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	4413      	add	r3, r2
 8004a36:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	4614      	mov	r4, r2
 8004a3e:	461d      	mov	r5, r3
 8004a40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a48:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004a4c:	682b      	ldr	r3, [r5, #0]
 8004a4e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 f811 	bl	8004a7c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bdb0      	pop	{r4, r5, r7, pc}

08004a7c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b089      	sub	sp, #36	@ 0x24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	0c1b      	lsrs	r3, r3, #16
 8004a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a98:	4413      	add	r3, r2
 8004a9a:	041b      	lsls	r3, r3, #16
 8004a9c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	01db      	lsls	r3, r3, #7
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3384      	adds	r3, #132	@ 0x84
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	687a      	ldr	r2, [r7, #4]
 8004ab6:	01d2      	lsls	r2, r2, #7
 8004ab8:	440a      	add	r2, r1
 8004aba:	3284      	adds	r2, #132	@ 0x84
 8004abc:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004ac0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ad2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ad4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4619      	mov	r1, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	01db      	lsls	r3, r3, #7
 8004ae0:	440b      	add	r3, r1
 8004ae2:	3384      	adds	r3, #132	@ 0x84
 8004ae4:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004aea:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	68da      	ldr	r2, [r3, #12]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004afa:	4413      	add	r3, r2
 8004afc:	041b      	lsls	r3, r3, #16
 8004afe:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	461a      	mov	r2, r3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	01db      	lsls	r3, r3, #7
 8004b0a:	4413      	add	r3, r2
 8004b0c:	3384      	adds	r3, #132	@ 0x84
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	4611      	mov	r1, r2
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	01d2      	lsls	r2, r2, #7
 8004b1a:	440a      	add	r2, r1
 8004b1c:	3284      	adds	r2, #132	@ 0x84
 8004b1e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004b22:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	689a      	ldr	r2, [r3, #8]
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b32:	4413      	add	r3, r2
 8004b34:	1c5a      	adds	r2, r3, #1
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	01db      	lsls	r3, r3, #7
 8004b40:	440b      	add	r3, r1
 8004b42:	3384      	adds	r3, #132	@ 0x84
 8004b44:	4619      	mov	r1, r3
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	461a      	mov	r2, r3
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	01db      	lsls	r3, r3, #7
 8004b56:	4413      	add	r3, r2
 8004b58:	3384      	adds	r3, #132	@ 0x84
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	68fa      	ldr	r2, [r7, #12]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	4611      	mov	r1, r2
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	01d2      	lsls	r2, r2, #7
 8004b66:	440a      	add	r2, r1
 8004b68:	3284      	adds	r2, #132	@ 0x84
 8004b6a:	f023 0307 	bic.w	r3, r3, #7
 8004b6e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	461a      	mov	r2, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	01db      	lsls	r3, r3, #7
 8004b7a:	4413      	add	r3, r2
 8004b7c:	3384      	adds	r3, #132	@ 0x84
 8004b7e:	461a      	mov	r2, r3
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004b96:	041b      	lsls	r3, r3, #16
 8004b98:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	061b      	lsls	r3, r3, #24
 8004ba0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	01db      	lsls	r3, r3, #7
 8004bac:	4413      	add	r3, r2
 8004bae:	3384      	adds	r3, #132	@ 0x84
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	01db      	lsls	r3, r3, #7
 8004bbc:	4413      	add	r3, r2
 8004bbe:	3384      	adds	r3, #132	@ 0x84
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004bc6:	68bb      	ldr	r3, [r7, #8]
 8004bc8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004bcc:	461a      	mov	r2, r3
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	431a      	orrs	r2, r3
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4619      	mov	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	01db      	lsls	r3, r3, #7
 8004be0:	440b      	add	r3, r1
 8004be2:	3384      	adds	r3, #132	@ 0x84
 8004be4:	4619      	mov	r1, r3
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	01db      	lsls	r3, r3, #7
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3384      	adds	r3, #132	@ 0x84
 8004bfa:	695b      	ldr	r3, [r3, #20]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	6812      	ldr	r2, [r2, #0]
 8004c00:	4611      	mov	r1, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	01d2      	lsls	r2, r2, #7
 8004c06:	440a      	add	r2, r1
 8004c08:	3284      	adds	r2, #132	@ 0x84
 8004c0a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004c0e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	461a      	mov	r2, r3
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	01db      	lsls	r3, r3, #7
 8004c1a:	4413      	add	r3, r2
 8004c1c:	3384      	adds	r3, #132	@ 0x84
 8004c1e:	461a      	mov	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	01db      	lsls	r3, r3, #7
 8004c30:	4413      	add	r3, r2
 8004c32:	3384      	adds	r3, #132	@ 0x84
 8004c34:	69db      	ldr	r3, [r3, #28]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	01d2      	lsls	r2, r2, #7
 8004c40:	440a      	add	r2, r1
 8004c42:	3284      	adds	r2, #132	@ 0x84
 8004c44:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004c48:	f023 0307 	bic.w	r3, r3, #7
 8004c4c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6a1b      	ldr	r3, [r3, #32]
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	6809      	ldr	r1, [r1, #0]
 8004c5a:	4608      	mov	r0, r1
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	01c9      	lsls	r1, r1, #7
 8004c60:	4401      	add	r1, r0
 8004c62:	3184      	adds	r1, #132	@ 0x84
 8004c64:	4313      	orrs	r3, r2
 8004c66:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	01db      	lsls	r3, r3, #7
 8004c72:	4413      	add	r3, r2
 8004c74:	3384      	adds	r3, #132	@ 0x84
 8004c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	01db      	lsls	r3, r3, #7
 8004c82:	4413      	add	r3, r2
 8004c84:	3384      	adds	r3, #132	@ 0x84
 8004c86:	461a      	mov	r2, r3
 8004c88:	2300      	movs	r3, #0
 8004c8a:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	01db      	lsls	r3, r3, #7
 8004c96:	4413      	add	r3, r2
 8004c98:	3384      	adds	r3, #132	@ 0x84
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d102      	bne.n	8004cb0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004caa:	2304      	movs	r3, #4
 8004cac:	61fb      	str	r3, [r7, #28]
 8004cae:	e01b      	b.n	8004ce8 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	691b      	ldr	r3, [r3, #16]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d102      	bne.n	8004cbe <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	61fb      	str	r3, [r7, #28]
 8004cbc:	e014      	b.n	8004ce8 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	2b04      	cmp	r3, #4
 8004cc4:	d00b      	beq.n	8004cde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d007      	beq.n	8004cde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d003      	beq.n	8004cde <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004cda:	2b07      	cmp	r3, #7
 8004cdc:	d102      	bne.n	8004ce4 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004cde:	2302      	movs	r3, #2
 8004ce0:	61fb      	str	r3, [r7, #28]
 8004ce2:	e001      	b.n	8004ce8 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	01db      	lsls	r3, r3, #7
 8004cf2:	4413      	add	r3, r2
 8004cf4:	3384      	adds	r3, #132	@ 0x84
 8004cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	6812      	ldr	r2, [r2, #0]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	01d2      	lsls	r2, r2, #7
 8004d02:	440a      	add	r2, r1
 8004d04:	3284      	adds	r2, #132	@ 0x84
 8004d06:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004d0a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d10:	69fa      	ldr	r2, [r7, #28]
 8004d12:	fb02 f303 	mul.w	r3, r2, r3
 8004d16:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6859      	ldr	r1, [r3, #4]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	1acb      	subs	r3, r1, r3
 8004d22:	69f9      	ldr	r1, [r7, #28]
 8004d24:	fb01 f303 	mul.w	r3, r1, r3
 8004d28:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	6809      	ldr	r1, [r1, #0]
 8004d2e:	4608      	mov	r0, r1
 8004d30:	6879      	ldr	r1, [r7, #4]
 8004d32:	01c9      	lsls	r1, r1, #7
 8004d34:	4401      	add	r1, r0
 8004d36:	3184      	adds	r1, #132	@ 0x84
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	461a      	mov	r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	01db      	lsls	r3, r3, #7
 8004d46:	4413      	add	r3, r2
 8004d48:	3384      	adds	r3, #132	@ 0x84
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	6812      	ldr	r2, [r2, #0]
 8004d50:	4611      	mov	r1, r2
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	01d2      	lsls	r2, r2, #7
 8004d56:	440a      	add	r2, r1
 8004d58:	3284      	adds	r2, #132	@ 0x84
 8004d5a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004d5e:	f023 0307 	bic.w	r3, r3, #7
 8004d62:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	461a      	mov	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	01db      	lsls	r3, r3, #7
 8004d6e:	4413      	add	r3, r2
 8004d70:	3384      	adds	r3, #132	@ 0x84
 8004d72:	461a      	mov	r2, r3
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d78:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	01db      	lsls	r3, r3, #7
 8004d84:	4413      	add	r3, r2
 8004d86:	3384      	adds	r3, #132	@ 0x84
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	6812      	ldr	r2, [r2, #0]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	01d2      	lsls	r2, r2, #7
 8004d94:	440a      	add	r2, r1
 8004d96:	3284      	adds	r2, #132	@ 0x84
 8004d98:	f043 0301 	orr.w	r3, r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	3724      	adds	r7, #36	@ 0x24
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d101      	bne.n	8004dbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e267      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d075      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dca:	4b88      	ldr	r3, [pc, #544]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f003 030c 	and.w	r3, r3, #12
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d00c      	beq.n	8004df0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dd6:	4b85      	ldr	r3, [pc, #532]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004dd8:	689b      	ldr	r3, [r3, #8]
 8004dda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dde:	2b08      	cmp	r3, #8
 8004de0:	d112      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004de2:	4b82      	ldr	r3, [pc, #520]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004dee:	d10b      	bne.n	8004e08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004df0:	4b7e      	ldr	r3, [pc, #504]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d05b      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x108>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d157      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e04:	2301      	movs	r3, #1
 8004e06:	e242      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e10:	d106      	bne.n	8004e20 <HAL_RCC_OscConfig+0x74>
 8004e12:	4b76      	ldr	r3, [pc, #472]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4a75      	ldr	r2, [pc, #468]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e1c:	6013      	str	r3, [r2, #0]
 8004e1e:	e01d      	b.n	8004e5c <HAL_RCC_OscConfig+0xb0>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e28:	d10c      	bne.n	8004e44 <HAL_RCC_OscConfig+0x98>
 8004e2a:	4b70      	ldr	r3, [pc, #448]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6f      	ldr	r2, [pc, #444]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e34:	6013      	str	r3, [r2, #0]
 8004e36:	4b6d      	ldr	r3, [pc, #436]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a6c      	ldr	r2, [pc, #432]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	e00b      	b.n	8004e5c <HAL_RCC_OscConfig+0xb0>
 8004e44:	4b69      	ldr	r3, [pc, #420]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a68      	ldr	r2, [pc, #416]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e4e:	6013      	str	r3, [r2, #0]
 8004e50:	4b66      	ldr	r3, [pc, #408]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a65      	ldr	r2, [pc, #404]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d013      	beq.n	8004e8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e64:	f7fc fc4c 	bl	8001700 <HAL_GetTick>
 8004e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e6a:	e008      	b.n	8004e7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e6c:	f7fc fc48 	bl	8001700 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	1ad3      	subs	r3, r2, r3
 8004e76:	2b64      	cmp	r3, #100	@ 0x64
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e207      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d0f0      	beq.n	8004e6c <HAL_RCC_OscConfig+0xc0>
 8004e8a:	e014      	b.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e8c:	f7fc fc38 	bl	8001700 <HAL_GetTick>
 8004e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e92:	e008      	b.n	8004ea6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e94:	f7fc fc34 	bl	8001700 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b64      	cmp	r3, #100	@ 0x64
 8004ea0:	d901      	bls.n	8004ea6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e1f3      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ea6:	4b51      	ldr	r3, [pc, #324]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d1f0      	bne.n	8004e94 <HAL_RCC_OscConfig+0xe8>
 8004eb2:	e000      	b.n	8004eb6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0302 	and.w	r3, r3, #2
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d063      	beq.n	8004f8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00b      	beq.n	8004ee6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ece:	4b47      	ldr	r3, [pc, #284]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d11c      	bne.n	8004f14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eda:	4b44      	ldr	r3, [pc, #272]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d116      	bne.n	8004f14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ee6:	4b41      	ldr	r3, [pc, #260]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d005      	beq.n	8004efe <HAL_RCC_OscConfig+0x152>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d001      	beq.n	8004efe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e1c7      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004efe:	4b3b      	ldr	r3, [pc, #236]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	00db      	lsls	r3, r3, #3
 8004f0c:	4937      	ldr	r1, [pc, #220]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f12:	e03a      	b.n	8004f8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d020      	beq.n	8004f5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f1c:	4b34      	ldr	r3, [pc, #208]	@ (8004ff0 <HAL_RCC_OscConfig+0x244>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f22:	f7fc fbed 	bl	8001700 <HAL_GetTick>
 8004f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f28:	e008      	b.n	8004f3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f2a:	f7fc fbe9 	bl	8001700 <HAL_GetTick>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	2b02      	cmp	r3, #2
 8004f36:	d901      	bls.n	8004f3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f38:	2303      	movs	r3, #3
 8004f3a:	e1a8      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0302 	and.w	r3, r3, #2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d0f0      	beq.n	8004f2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f48:	4b28      	ldr	r3, [pc, #160]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	00db      	lsls	r3, r3, #3
 8004f56:	4925      	ldr	r1, [pc, #148]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	600b      	str	r3, [r1, #0]
 8004f5c:	e015      	b.n	8004f8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f5e:	4b24      	ldr	r3, [pc, #144]	@ (8004ff0 <HAL_RCC_OscConfig+0x244>)
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f64:	f7fc fbcc 	bl	8001700 <HAL_GetTick>
 8004f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f6a:	e008      	b.n	8004f7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f6c:	f7fc fbc8 	bl	8001700 <HAL_GetTick>
 8004f70:	4602      	mov	r2, r0
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	1ad3      	subs	r3, r2, r3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d901      	bls.n	8004f7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	e187      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1f0      	bne.n	8004f6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d036      	beq.n	8005004 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d016      	beq.n	8004fcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <HAL_RCC_OscConfig+0x248>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fa4:	f7fc fbac 	bl	8001700 <HAL_GetTick>
 8004fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004faa:	e008      	b.n	8004fbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fac:	f7fc fba8 	bl	8001700 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d901      	bls.n	8004fbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e167      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004fec <HAL_RCC_OscConfig+0x240>)
 8004fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fc2:	f003 0302 	and.w	r3, r3, #2
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d0f0      	beq.n	8004fac <HAL_RCC_OscConfig+0x200>
 8004fca:	e01b      	b.n	8005004 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fcc:	4b09      	ldr	r3, [pc, #36]	@ (8004ff4 <HAL_RCC_OscConfig+0x248>)
 8004fce:	2200      	movs	r2, #0
 8004fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fd2:	f7fc fb95 	bl	8001700 <HAL_GetTick>
 8004fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd8:	e00e      	b.n	8004ff8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fda:	f7fc fb91 	bl	8001700 <HAL_GetTick>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	1ad3      	subs	r3, r2, r3
 8004fe4:	2b02      	cmp	r3, #2
 8004fe6:	d907      	bls.n	8004ff8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e150      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
 8004fec:	40023800 	.word	0x40023800
 8004ff0:	42470000 	.word	0x42470000
 8004ff4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff8:	4b88      	ldr	r3, [pc, #544]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8004ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ffc:	f003 0302 	and.w	r3, r3, #2
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1ea      	bne.n	8004fda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0304 	and.w	r3, r3, #4
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8097 	beq.w	8005140 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005012:	2300      	movs	r3, #0
 8005014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005016:	4b81      	ldr	r3, [pc, #516]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800501a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10f      	bne.n	8005042 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60bb      	str	r3, [r7, #8]
 8005026:	4b7d      	ldr	r3, [pc, #500]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502a:	4a7c      	ldr	r2, [pc, #496]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800502c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005030:	6413      	str	r3, [r2, #64]	@ 0x40
 8005032:	4b7a      	ldr	r3, [pc, #488]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800503a:	60bb      	str	r3, [r7, #8]
 800503c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800503e:	2301      	movs	r3, #1
 8005040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005042:	4b77      	ldr	r3, [pc, #476]	@ (8005220 <HAL_RCC_OscConfig+0x474>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800504a:	2b00      	cmp	r3, #0
 800504c:	d118      	bne.n	8005080 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800504e:	4b74      	ldr	r3, [pc, #464]	@ (8005220 <HAL_RCC_OscConfig+0x474>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a73      	ldr	r2, [pc, #460]	@ (8005220 <HAL_RCC_OscConfig+0x474>)
 8005054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800505a:	f7fc fb51 	bl	8001700 <HAL_GetTick>
 800505e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005060:	e008      	b.n	8005074 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005062:	f7fc fb4d 	bl	8001700 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	2b02      	cmp	r3, #2
 800506e:	d901      	bls.n	8005074 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005070:	2303      	movs	r3, #3
 8005072:	e10c      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005074:	4b6a      	ldr	r3, [pc, #424]	@ (8005220 <HAL_RCC_OscConfig+0x474>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507c:	2b00      	cmp	r3, #0
 800507e:	d0f0      	beq.n	8005062 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d106      	bne.n	8005096 <HAL_RCC_OscConfig+0x2ea>
 8005088:	4b64      	ldr	r3, [pc, #400]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800508a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800508c:	4a63      	ldr	r2, [pc, #396]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800508e:	f043 0301 	orr.w	r3, r3, #1
 8005092:	6713      	str	r3, [r2, #112]	@ 0x70
 8005094:	e01c      	b.n	80050d0 <HAL_RCC_OscConfig+0x324>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	2b05      	cmp	r3, #5
 800509c:	d10c      	bne.n	80050b8 <HAL_RCC_OscConfig+0x30c>
 800509e:	4b5f      	ldr	r3, [pc, #380]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a2:	4a5e      	ldr	r2, [pc, #376]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050a4:	f043 0304 	orr.w	r3, r3, #4
 80050a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80050aa:	4b5c      	ldr	r3, [pc, #368]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050ae:	4a5b      	ldr	r2, [pc, #364]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80050b6:	e00b      	b.n	80050d0 <HAL_RCC_OscConfig+0x324>
 80050b8:	4b58      	ldr	r3, [pc, #352]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050bc:	4a57      	ldr	r2, [pc, #348]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050be:	f023 0301 	bic.w	r3, r3, #1
 80050c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80050c4:	4b55      	ldr	r3, [pc, #340]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c8:	4a54      	ldr	r2, [pc, #336]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050ca:	f023 0304 	bic.w	r3, r3, #4
 80050ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d015      	beq.n	8005104 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fc fb12 	bl	8001700 <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050de:	e00a      	b.n	80050f6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050e0:	f7fc fb0e 	bl	8001700 <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d901      	bls.n	80050f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e0cb      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050f6:	4b49      	ldr	r3, [pc, #292]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80050f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d0ee      	beq.n	80050e0 <HAL_RCC_OscConfig+0x334>
 8005102:	e014      	b.n	800512e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005104:	f7fc fafc 	bl	8001700 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800510a:	e00a      	b.n	8005122 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800510c:	f7fc faf8 	bl	8001700 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e0b5      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005122:	4b3e      	ldr	r3, [pc, #248]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005126:	f003 0302 	and.w	r3, r3, #2
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1ee      	bne.n	800510c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800512e:	7dfb      	ldrb	r3, [r7, #23]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d105      	bne.n	8005140 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005134:	4b39      	ldr	r3, [pc, #228]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	4a38      	ldr	r2, [pc, #224]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800513a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800513e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	f000 80a1 	beq.w	800528c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800514a:	4b34      	ldr	r3, [pc, #208]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 030c 	and.w	r3, r3, #12
 8005152:	2b08      	cmp	r3, #8
 8005154:	d05c      	beq.n	8005210 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	2b02      	cmp	r3, #2
 800515c:	d141      	bne.n	80051e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515e:	4b31      	ldr	r3, [pc, #196]	@ (8005224 <HAL_RCC_OscConfig+0x478>)
 8005160:	2200      	movs	r2, #0
 8005162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005164:	f7fc facc 	bl	8001700 <HAL_GetTick>
 8005168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800516a:	e008      	b.n	800517e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516c:	f7fc fac8 	bl	8001700 <HAL_GetTick>
 8005170:	4602      	mov	r2, r0
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	1ad3      	subs	r3, r2, r3
 8005176:	2b02      	cmp	r3, #2
 8005178:	d901      	bls.n	800517e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e087      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800517e:	4b27      	ldr	r3, [pc, #156]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1f0      	bne.n	800516c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	69da      	ldr	r2, [r3, #28]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005198:	019b      	lsls	r3, r3, #6
 800519a:	431a      	orrs	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	3b01      	subs	r3, #1
 80051a4:	041b      	lsls	r3, r3, #16
 80051a6:	431a      	orrs	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ac:	061b      	lsls	r3, r3, #24
 80051ae:	491b      	ldr	r1, [pc, #108]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051b4:	4b1b      	ldr	r3, [pc, #108]	@ (8005224 <HAL_RCC_OscConfig+0x478>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051ba:	f7fc faa1 	bl	8001700 <HAL_GetTick>
 80051be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051c0:	e008      	b.n	80051d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c2:	f7fc fa9d 	bl	8001700 <HAL_GetTick>
 80051c6:	4602      	mov	r2, r0
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	2b02      	cmp	r3, #2
 80051ce:	d901      	bls.n	80051d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051d0:	2303      	movs	r3, #3
 80051d2:	e05c      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051d4:	4b11      	ldr	r3, [pc, #68]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d0f0      	beq.n	80051c2 <HAL_RCC_OscConfig+0x416>
 80051e0:	e054      	b.n	800528c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <HAL_RCC_OscConfig+0x478>)
 80051e4:	2200      	movs	r2, #0
 80051e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e8:	f7fc fa8a 	bl	8001700 <HAL_GetTick>
 80051ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f0:	f7fc fa86 	bl	8001700 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b02      	cmp	r3, #2
 80051fc:	d901      	bls.n	8005202 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e045      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005202:	4b06      	ldr	r3, [pc, #24]	@ (800521c <HAL_RCC_OscConfig+0x470>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f0      	bne.n	80051f0 <HAL_RCC_OscConfig+0x444>
 800520e:	e03d      	b.n	800528c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d107      	bne.n	8005228 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e038      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
 800521c:	40023800 	.word	0x40023800
 8005220:	40007000 	.word	0x40007000
 8005224:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005228:	4b1b      	ldr	r3, [pc, #108]	@ (8005298 <HAL_RCC_OscConfig+0x4ec>)
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d028      	beq.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005240:	429a      	cmp	r2, r3
 8005242:	d121      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	429a      	cmp	r2, r3
 8005250:	d11a      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005252:	68fa      	ldr	r2, [r7, #12]
 8005254:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005258:	4013      	ands	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800525e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005260:	4293      	cmp	r3, r2
 8005262:	d111      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	3b01      	subs	r3, #1
 8005272:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005274:	429a      	cmp	r2, r3
 8005276:	d107      	bne.n	8005288 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005284:	429a      	cmp	r2, r3
 8005286:	d001      	beq.n	800528c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	e000      	b.n	800528e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40023800 	.word	0x40023800

0800529c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0cc      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b68      	ldr	r3, [pc, #416]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 030f 	and.w	r3, r3, #15
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90c      	bls.n	80052d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b65      	ldr	r3, [pc, #404]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	b2d2      	uxtb	r2, r2
 80052c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052c6:	4b63      	ldr	r3, [pc, #396]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d001      	beq.n	80052d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e0b8      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f003 0302 	and.w	r3, r3, #2
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d020      	beq.n	8005326 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0304 	and.w	r3, r3, #4
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052f0:	4b59      	ldr	r3, [pc, #356]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4a58      	ldr	r2, [pc, #352]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80052f6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052fa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	d005      	beq.n	8005314 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005308:	4b53      	ldr	r3, [pc, #332]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	4a52      	ldr	r2, [pc, #328]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005312:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005314:	4b50      	ldr	r3, [pc, #320]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	494d      	ldr	r1, [pc, #308]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	4313      	orrs	r3, r2
 8005324:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0301 	and.w	r3, r3, #1
 800532e:	2b00      	cmp	r3, #0
 8005330:	d044      	beq.n	80053bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b01      	cmp	r3, #1
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800533a:	4b47      	ldr	r3, [pc, #284]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d119      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e07f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b02      	cmp	r3, #2
 8005350:	d003      	beq.n	800535a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005356:	2b03      	cmp	r3, #3
 8005358:	d107      	bne.n	800536a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b3f      	ldr	r3, [pc, #252]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d109      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e06f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536a:	4b3b      	ldr	r3, [pc, #236]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d101      	bne.n	800537a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005376:	2301      	movs	r3, #1
 8005378:	e067      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800537a:	4b37      	ldr	r3, [pc, #220]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f023 0203 	bic.w	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4934      	ldr	r1, [pc, #208]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	4313      	orrs	r3, r2
 800538a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800538c:	f7fc f9b8 	bl	8001700 <HAL_GetTick>
 8005390:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005392:	e00a      	b.n	80053aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005394:	f7fc f9b4 	bl	8001700 <HAL_GetTick>
 8005398:	4602      	mov	r2, r0
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	1ad3      	subs	r3, r2, r3
 800539e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e04f      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053aa:	4b2b      	ldr	r3, [pc, #172]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 020c 	and.w	r2, r3, #12
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	685b      	ldr	r3, [r3, #4]
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d1eb      	bne.n	8005394 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053bc:	4b25      	ldr	r3, [pc, #148]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 030f 	and.w	r3, r3, #15
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d20c      	bcs.n	80053e4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ca:	4b22      	ldr	r3, [pc, #136]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053cc:	683a      	ldr	r2, [r7, #0]
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053d2:	4b20      	ldr	r3, [pc, #128]	@ (8005454 <HAL_RCC_ClockConfig+0x1b8>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	683a      	ldr	r2, [r7, #0]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d001      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	e032      	b.n	800544a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f003 0304 	and.w	r3, r3, #4
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d008      	beq.n	8005402 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053f0:	4b19      	ldr	r3, [pc, #100]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	4916      	ldr	r1, [pc, #88]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0308 	and.w	r3, r3, #8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800540e:	4b12      	ldr	r3, [pc, #72]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	490e      	ldr	r1, [pc, #56]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005422:	f000 f821 	bl	8005468 <HAL_RCC_GetSysClockFreq>
 8005426:	4602      	mov	r2, r0
 8005428:	4b0b      	ldr	r3, [pc, #44]	@ (8005458 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 030f 	and.w	r3, r3, #15
 8005432:	490a      	ldr	r1, [pc, #40]	@ (800545c <HAL_RCC_ClockConfig+0x1c0>)
 8005434:	5ccb      	ldrb	r3, [r1, r3]
 8005436:	fa22 f303 	lsr.w	r3, r2, r3
 800543a:	4a09      	ldr	r2, [pc, #36]	@ (8005460 <HAL_RCC_ClockConfig+0x1c4>)
 800543c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800543e:	4b09      	ldr	r3, [pc, #36]	@ (8005464 <HAL_RCC_ClockConfig+0x1c8>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f7fb ff10 	bl	8001268 <HAL_InitTick>

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	40023c00 	.word	0x40023c00
 8005458:	40023800 	.word	0x40023800
 800545c:	0800d3c0 	.word	0x0800d3c0
 8005460:	20000000 	.word	0x20000000
 8005464:	20000004 	.word	0x20000004

08005468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800546c:	b094      	sub	sp, #80	@ 0x50
 800546e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005478:	2300      	movs	r3, #0
 800547a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005480:	4b79      	ldr	r3, [pc, #484]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	f003 030c 	and.w	r3, r3, #12
 8005488:	2b08      	cmp	r3, #8
 800548a:	d00d      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x40>
 800548c:	2b08      	cmp	r3, #8
 800548e:	f200 80e1 	bhi.w	8005654 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_RCC_GetSysClockFreq+0x34>
 8005496:	2b04      	cmp	r3, #4
 8005498:	d003      	beq.n	80054a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800549a:	e0db      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800549c:	4b73      	ldr	r3, [pc, #460]	@ (800566c <HAL_RCC_GetSysClockFreq+0x204>)
 800549e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054a0:	e0db      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054a2:	4b73      	ldr	r3, [pc, #460]	@ (8005670 <HAL_RCC_GetSysClockFreq+0x208>)
 80054a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80054a6:	e0d8      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d063      	beq.n	8005586 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054be:	4b6a      	ldr	r3, [pc, #424]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	099b      	lsrs	r3, r3, #6
 80054c4:	2200      	movs	r2, #0
 80054c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054d2:	2300      	movs	r3, #0
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80054d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054da:	4622      	mov	r2, r4
 80054dc:	462b      	mov	r3, r5
 80054de:	f04f 0000 	mov.w	r0, #0
 80054e2:	f04f 0100 	mov.w	r1, #0
 80054e6:	0159      	lsls	r1, r3, #5
 80054e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054ec:	0150      	lsls	r0, r2, #5
 80054ee:	4602      	mov	r2, r0
 80054f0:	460b      	mov	r3, r1
 80054f2:	4621      	mov	r1, r4
 80054f4:	1a51      	subs	r1, r2, r1
 80054f6:	6139      	str	r1, [r7, #16]
 80054f8:	4629      	mov	r1, r5
 80054fa:	eb63 0301 	sbc.w	r3, r3, r1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800550c:	4659      	mov	r1, fp
 800550e:	018b      	lsls	r3, r1, #6
 8005510:	4651      	mov	r1, sl
 8005512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005516:	4651      	mov	r1, sl
 8005518:	018a      	lsls	r2, r1, #6
 800551a:	4651      	mov	r1, sl
 800551c:	ebb2 0801 	subs.w	r8, r2, r1
 8005520:	4659      	mov	r1, fp
 8005522:	eb63 0901 	sbc.w	r9, r3, r1
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800553a:	4690      	mov	r8, r2
 800553c:	4699      	mov	r9, r3
 800553e:	4623      	mov	r3, r4
 8005540:	eb18 0303 	adds.w	r3, r8, r3
 8005544:	60bb      	str	r3, [r7, #8]
 8005546:	462b      	mov	r3, r5
 8005548:	eb49 0303 	adc.w	r3, r9, r3
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	f04f 0200 	mov.w	r2, #0
 8005552:	f04f 0300 	mov.w	r3, #0
 8005556:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800555a:	4629      	mov	r1, r5
 800555c:	024b      	lsls	r3, r1, #9
 800555e:	4621      	mov	r1, r4
 8005560:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005564:	4621      	mov	r1, r4
 8005566:	024a      	lsls	r2, r1, #9
 8005568:	4610      	mov	r0, r2
 800556a:	4619      	mov	r1, r3
 800556c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800556e:	2200      	movs	r2, #0
 8005570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005572:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005574:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005578:	f7fa fe3a 	bl	80001f0 <__aeabi_uldivmod>
 800557c:	4602      	mov	r2, r0
 800557e:	460b      	mov	r3, r1
 8005580:	4613      	mov	r3, r2
 8005582:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005584:	e058      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005586:	4b38      	ldr	r3, [pc, #224]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	099b      	lsrs	r3, r3, #6
 800558c:	2200      	movs	r2, #0
 800558e:	4618      	mov	r0, r3
 8005590:	4611      	mov	r1, r2
 8005592:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005596:	623b      	str	r3, [r7, #32]
 8005598:	2300      	movs	r3, #0
 800559a:	627b      	str	r3, [r7, #36]	@ 0x24
 800559c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80055a0:	4642      	mov	r2, r8
 80055a2:	464b      	mov	r3, r9
 80055a4:	f04f 0000 	mov.w	r0, #0
 80055a8:	f04f 0100 	mov.w	r1, #0
 80055ac:	0159      	lsls	r1, r3, #5
 80055ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055b2:	0150      	lsls	r0, r2, #5
 80055b4:	4602      	mov	r2, r0
 80055b6:	460b      	mov	r3, r1
 80055b8:	4641      	mov	r1, r8
 80055ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80055be:	4649      	mov	r1, r9
 80055c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055d8:	ebb2 040a 	subs.w	r4, r2, sl
 80055dc:	eb63 050b 	sbc.w	r5, r3, fp
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	00eb      	lsls	r3, r5, #3
 80055ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055ee:	00e2      	lsls	r2, r4, #3
 80055f0:	4614      	mov	r4, r2
 80055f2:	461d      	mov	r5, r3
 80055f4:	4643      	mov	r3, r8
 80055f6:	18e3      	adds	r3, r4, r3
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	464b      	mov	r3, r9
 80055fc:	eb45 0303 	adc.w	r3, r5, r3
 8005600:	607b      	str	r3, [r7, #4]
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	f04f 0300 	mov.w	r3, #0
 800560a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800560e:	4629      	mov	r1, r5
 8005610:	028b      	lsls	r3, r1, #10
 8005612:	4621      	mov	r1, r4
 8005614:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005618:	4621      	mov	r1, r4
 800561a:	028a      	lsls	r2, r1, #10
 800561c:	4610      	mov	r0, r2
 800561e:	4619      	mov	r1, r3
 8005620:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005622:	2200      	movs	r2, #0
 8005624:	61bb      	str	r3, [r7, #24]
 8005626:	61fa      	str	r2, [r7, #28]
 8005628:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800562c:	f7fa fde0 	bl	80001f0 <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4613      	mov	r3, r2
 8005636:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005638:	4b0b      	ldr	r3, [pc, #44]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x200>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	0c1b      	lsrs	r3, r3, #16
 800563e:	f003 0303 	and.w	r3, r3, #3
 8005642:	3301      	adds	r3, #1
 8005644:	005b      	lsls	r3, r3, #1
 8005646:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005648:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800564a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005652:	e002      	b.n	800565a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005654:	4b05      	ldr	r3, [pc, #20]	@ (800566c <HAL_RCC_GetSysClockFreq+0x204>)
 8005656:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005658:	bf00      	nop
    }
  }
  return sysclockfreq;
 800565a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800565c:	4618      	mov	r0, r3
 800565e:	3750      	adds	r7, #80	@ 0x50
 8005660:	46bd      	mov	sp, r7
 8005662:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005666:	bf00      	nop
 8005668:	40023800 	.word	0x40023800
 800566c:	00f42400 	.word	0x00f42400
 8005670:	007a1200 	.word	0x007a1200

08005674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005674:	b480      	push	{r7}
 8005676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005678:	4b03      	ldr	r3, [pc, #12]	@ (8005688 <HAL_RCC_GetHCLKFreq+0x14>)
 800567a:	681b      	ldr	r3, [r3, #0]
}
 800567c:	4618      	mov	r0, r3
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
 8005686:	bf00      	nop
 8005688:	20000000 	.word	0x20000000

0800568c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005690:	f7ff fff0 	bl	8005674 <HAL_RCC_GetHCLKFreq>
 8005694:	4602      	mov	r2, r0
 8005696:	4b05      	ldr	r3, [pc, #20]	@ (80056ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	0a9b      	lsrs	r3, r3, #10
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	4903      	ldr	r1, [pc, #12]	@ (80056b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056a2:	5ccb      	ldrb	r3, [r1, r3]
 80056a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	bd80      	pop	{r7, pc}
 80056ac:	40023800 	.word	0x40023800
 80056b0:	0800d3d0 	.word	0x0800d3d0

080056b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80056b8:	f7ff ffdc 	bl	8005674 <HAL_RCC_GetHCLKFreq>
 80056bc:	4602      	mov	r2, r0
 80056be:	4b05      	ldr	r3, [pc, #20]	@ (80056d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	0b5b      	lsrs	r3, r3, #13
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	4903      	ldr	r1, [pc, #12]	@ (80056d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056ca:	5ccb      	ldrb	r3, [r1, r3]
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40023800 	.word	0x40023800
 80056d8:	0800d3d0 	.word	0x0800d3d0

080056dc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	220f      	movs	r2, #15
 80056ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80056ec:	4b12      	ldr	r3, [pc, #72]	@ (8005738 <HAL_RCC_GetClockConfig+0x5c>)
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	f003 0203 	and.w	r2, r3, #3
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80056f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005738 <HAL_RCC_GetClockConfig+0x5c>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005704:	4b0c      	ldr	r3, [pc, #48]	@ (8005738 <HAL_RCC_GetClockConfig+0x5c>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005710:	4b09      	ldr	r3, [pc, #36]	@ (8005738 <HAL_RCC_GetClockConfig+0x5c>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	08db      	lsrs	r3, r3, #3
 8005716:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800571e:	4b07      	ldr	r3, [pc, #28]	@ (800573c <HAL_RCC_GetClockConfig+0x60>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 020f 	and.w	r2, r3, #15
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	601a      	str	r2, [r3, #0]
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	40023800 	.word	0x40023800
 800573c:	40023c00 	.word	0x40023c00

08005740 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10b      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005764:	2b00      	cmp	r3, #0
 8005766:	d105      	bne.n	8005774 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005770:	2b00      	cmp	r3, #0
 8005772:	d075      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005774:	4b91      	ldr	r3, [pc, #580]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005776:	2200      	movs	r2, #0
 8005778:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800577a:	f7fb ffc1 	bl	8001700 <HAL_GetTick>
 800577e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005780:	e008      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005782:	f7fb ffbd 	bl	8001700 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d901      	bls.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005790:	2303      	movs	r3, #3
 8005792:	e189      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005794:	4b8a      	ldr	r3, [pc, #552]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1f0      	bne.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d009      	beq.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	019a      	lsls	r2, r3, #6
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	071b      	lsls	r3, r3, #28
 80057b8:	4981      	ldr	r1, [pc, #516]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f003 0302 	and.w	r3, r3, #2
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d01f      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057cc:	4b7c      	ldr	r3, [pc, #496]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80057d2:	0f1b      	lsrs	r3, r3, #28
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	019a      	lsls	r2, r3, #6
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	061b      	lsls	r3, r3, #24
 80057e6:	431a      	orrs	r2, r3
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	071b      	lsls	r3, r3, #28
 80057ec:	4974      	ldr	r1, [pc, #464]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80057f4:	4b72      	ldr	r3, [pc, #456]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80057fa:	f023 021f 	bic.w	r2, r3, #31
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	69db      	ldr	r3, [r3, #28]
 8005802:	3b01      	subs	r3, #1
 8005804:	496e      	ldr	r1, [pc, #440]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005806:	4313      	orrs	r3, r2
 8005808:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	019a      	lsls	r2, r3, #6
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	061b      	lsls	r3, r3, #24
 8005824:	431a      	orrs	r2, r3
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	071b      	lsls	r3, r3, #28
 800582c:	4964      	ldr	r1, [pc, #400]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005834:	4b61      	ldr	r3, [pc, #388]	@ (80059bc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005836:	2201      	movs	r2, #1
 8005838:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800583a:	f7fb ff61 	bl	8001700 <HAL_GetTick>
 800583e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005840:	e008      	b.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005842:	f7fb ff5d 	bl	8001700 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	2b02      	cmp	r3, #2
 800584e:	d901      	bls.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e129      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005854:	4b5a      	ldr	r3, [pc, #360]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0f0      	beq.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d105      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005874:	2b00      	cmp	r3, #0
 8005876:	d079      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005878:	4b52      	ldr	r3, [pc, #328]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800587a:	2200      	movs	r2, #0
 800587c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800587e:	f7fb ff3f 	bl	8001700 <HAL_GetTick>
 8005882:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005884:	e008      	b.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005886:	f7fb ff3b 	bl	8001700 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	2b02      	cmp	r3, #2
 8005892:	d901      	bls.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005894:	2303      	movs	r3, #3
 8005896:	e107      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005898:	4b49      	ldr	r3, [pc, #292]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058a4:	d0ef      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 0304 	and.w	r3, r3, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d020      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058b2:	4b43      	ldr	r3, [pc, #268]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b8:	0f1b      	lsrs	r3, r3, #28
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	019a      	lsls	r2, r3, #6
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	695b      	ldr	r3, [r3, #20]
 80058ca:	061b      	lsls	r3, r3, #24
 80058cc:	431a      	orrs	r2, r3
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	071b      	lsls	r3, r3, #28
 80058d2:	493b      	ldr	r1, [pc, #236]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058da:	4b39      	ldr	r3, [pc, #228]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058e0:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a1b      	ldr	r3, [r3, #32]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	4934      	ldr	r1, [pc, #208]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ee:	4313      	orrs	r3, r2
 80058f0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0308 	and.w	r3, r3, #8
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01e      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005900:	4b2f      	ldr	r3, [pc, #188]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005902:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005906:	0e1b      	lsrs	r3, r3, #24
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	019a      	lsls	r2, r3, #6
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	061b      	lsls	r3, r3, #24
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	071b      	lsls	r3, r3, #28
 8005920:	4927      	ldr	r1, [pc, #156]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005922:	4313      	orrs	r3, r2
 8005924:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005928:	4b25      	ldr	r3, [pc, #148]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800592a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800592e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005936:	4922      	ldr	r1, [pc, #136]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800593e:	4b21      	ldr	r3, [pc, #132]	@ (80059c4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005940:	2201      	movs	r2, #1
 8005942:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005944:	f7fb fedc 	bl	8001700 <HAL_GetTick>
 8005948:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800594a:	e008      	b.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800594c:	f7fb fed8 	bl	8001700 <HAL_GetTick>
 8005950:	4602      	mov	r2, r0
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	1ad3      	subs	r3, r2, r3
 8005956:	2b02      	cmp	r3, #2
 8005958:	d901      	bls.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e0a4      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800595e:	4b18      	ldr	r3, [pc, #96]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005966:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800596a:	d1ef      	bne.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0320 	and.w	r3, r3, #32
 8005974:	2b00      	cmp	r3, #0
 8005976:	f000 808b 	beq.w	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800597a:	2300      	movs	r3, #0
 800597c:	60fb      	str	r3, [r7, #12]
 800597e:	4b10      	ldr	r3, [pc, #64]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	4a0f      	ldr	r2, [pc, #60]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005988:	6413      	str	r3, [r2, #64]	@ 0x40
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800598c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800598e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005992:	60fb      	str	r3, [r7, #12]
 8005994:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005996:	4b0c      	ldr	r3, [pc, #48]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a0b      	ldr	r2, [pc, #44]	@ (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800599c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059a2:	f7fb fead 	bl	8001700 <HAL_GetTick>
 80059a6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059a8:	e010      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059aa:	f7fb fea9 	bl	8001700 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d909      	bls.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e075      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80059bc:	42470068 	.word	0x42470068
 80059c0:	40023800 	.word	0x40023800
 80059c4:	42470070 	.word	0x42470070
 80059c8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80059cc:	4b38      	ldr	r3, [pc, #224]	@ (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0e8      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80059d8:	4b36      	ldr	r3, [pc, #216]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059e0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d02f      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d028      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80059f6:	4b2f      	ldr	r3, [pc, #188]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80059fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059fe:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005a00:	4b2d      	ldr	r3, [pc, #180]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a02:	2201      	movs	r2, #1
 8005a04:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005a06:	4b2c      	ldr	r3, [pc, #176]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005a0c:	4a29      	ldr	r2, [pc, #164]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005a12:	4b28      	ldr	r3, [pc, #160]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a16:	f003 0301 	and.w	r3, r3, #1
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d114      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005a1e:	f7fb fe6f 	bl	8001700 <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a24:	e00a      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a26:	f7fb fe6b 	bl	8001700 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d901      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e035      	b.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a40:	f003 0302 	and.w	r3, r3, #2
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d0ee      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005a54:	d10d      	bne.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005a56:	4b17      	ldr	r3, [pc, #92]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a62:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005a66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a6a:	4912      	ldr	r1, [pc, #72]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	608b      	str	r3, [r1, #8]
 8005a70:	e005      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005a72:	4b10      	ldr	r3, [pc, #64]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a74:	689b      	ldr	r3, [r3, #8]
 8005a76:	4a0f      	ldr	r2, [pc, #60]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a78:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005a7c:	6093      	str	r3, [r2, #8]
 8005a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a80:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8a:	490a      	ldr	r1, [pc, #40]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0310 	and.w	r3, r3, #16
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005aa2:	4b06      	ldr	r3, [pc, #24]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005aa4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3718      	adds	r7, #24
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	40007000 	.word	0x40007000
 8005ab4:	40023800 	.word	0x40023800
 8005ab8:	42470e40 	.word	0x42470e40
 8005abc:	424711e0 	.word	0x424711e0

08005ac0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b082      	sub	sp, #8
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d101      	bne.n	8005ad4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e025      	b.n	8005b20 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d106      	bne.n	8005aee <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7fa fe89 	bl	8000800 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2202      	movs	r2, #2
 8005af2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	3304      	adds	r3, #4
 8005afe:	4619      	mov	r1, r3
 8005b00:	4610      	mov	r0, r2
 8005b02:	f000 ffd3 	bl	8006aac <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6818      	ldr	r0, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	6839      	ldr	r1, [r7, #0]
 8005b12:	f001 f828 	bl	8006b66 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d101      	bne.n	8005b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e07b      	b.n	8005c32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d108      	bne.n	8005b54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b4a:	d009      	beq.n	8005b60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	61da      	str	r2, [r3, #28]
 8005b52:	e005      	b.n	8005b60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7fb fb00 	bl	8001180 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005b96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	f003 0302 	and.w	r3, r3, #2
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	69db      	ldr	r3, [r3, #28]
 8005bd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6a1b      	ldr	r3, [r3, #32]
 8005be0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be4:	ea42 0103 	orr.w	r1, r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699b      	ldr	r3, [r3, #24]
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	f003 0104 	and.w	r1, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c06:	f003 0210 	and.w	r2, r3, #16
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	69da      	ldr	r2, [r3, #28]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005c30:	2300      	movs	r3, #0
}
 8005c32:	4618      	mov	r0, r3
 8005c34:	3708      	adds	r7, #8
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}

08005c3a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e041      	b.n	8005cd0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d106      	bne.n	8005c66 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f7fb fc59 	bl	8001518 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2202      	movs	r2, #2
 8005c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f000 fa7d 	bl	8006178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3708      	adds	r7, #8
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b085      	sub	sp, #20
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d001      	beq.n	8005cf0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e04e      	b.n	8005d8e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2202      	movs	r2, #2
 8005cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	68da      	ldr	r2, [r3, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0201 	orr.w	r2, r2, #1
 8005d06:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a23      	ldr	r2, [pc, #140]	@ (8005d9c <HAL_TIM_Base_Start_IT+0xc4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d022      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x80>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d1a:	d01d      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x80>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1f      	ldr	r2, [pc, #124]	@ (8005da0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d018      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x80>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	@ (8005da4 <HAL_TIM_Base_Start_IT+0xcc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d013      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x80>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1c      	ldr	r2, [pc, #112]	@ (8005da8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d00e      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x80>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dac <HAL_TIM_Base_Start_IT+0xd4>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d009      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x80>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a19      	ldr	r2, [pc, #100]	@ (8005db0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d004      	beq.n	8005d58 <HAL_TIM_Base_Start_IT+0x80>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a18      	ldr	r2, [pc, #96]	@ (8005db4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d111      	bne.n	8005d7c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	2b06      	cmp	r3, #6
 8005d68:	d010      	beq.n	8005d8c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f042 0201 	orr.w	r2, r2, #1
 8005d78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7a:	e007      	b.n	8005d8c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f042 0201 	orr.w	r2, r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3714      	adds	r7, #20
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40010000 	.word	0x40010000
 8005da0:	40000400 	.word	0x40000400
 8005da4:	40000800 	.word	0x40000800
 8005da8:	40000c00 	.word	0x40000c00
 8005dac:	40010400 	.word	0x40010400
 8005db0:	40014000 	.word	0x40014000
 8005db4:	40001800 	.word	0x40001800

08005db8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d020      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d01b      	beq.n	8005e1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f06f 0202 	mvn.w	r2, #2
 8005dec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699b      	ldr	r3, [r3, #24]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f999 	bl	800613a <HAL_TIM_IC_CaptureCallback>
 8005e08:	e005      	b.n	8005e16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 f98b 	bl	8006126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f99c 	bl	800614e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0304 	and.w	r3, r3, #4
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d020      	beq.n	8005e68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f003 0304 	and.w	r3, r3, #4
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0204 	mvn.w	r2, #4
 8005e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2202      	movs	r2, #2
 8005e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f973 	bl	800613a <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f965 	bl	8006126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f976 	bl	800614e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d020      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01b      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0208 	mvn.w	r2, #8
 8005e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2204      	movs	r2, #4
 8005e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	69db      	ldr	r3, [r3, #28]
 8005e92:	f003 0303 	and.w	r3, r3, #3
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f94d 	bl	800613a <HAL_TIM_IC_CaptureCallback>
 8005ea0:	e005      	b.n	8005eae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f93f 	bl	8006126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 f950 	bl	800614e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d020      	beq.n	8005f00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0310 	and.w	r3, r3, #16
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01b      	beq.n	8005f00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0210 	mvn.w	r2, #16
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f927 	bl	800613a <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f919 	bl	8006126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 f92a 	bl	800614e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d00c      	beq.n	8005f24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 0301 	and.w	r3, r3, #1
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d007      	beq.n	8005f24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0201 	mvn.w	r2, #1
 8005f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7fb f8e0 	bl	80010e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00c      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fae4 	bl	8006510 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00c      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d007      	beq.n	8005f6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 f8fb 	bl	8006162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f003 0320 	and.w	r3, r3, #32
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00c      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f003 0320 	and.w	r3, r3, #32
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d007      	beq.n	8005f90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	f06f 0220 	mvn.w	r2, #32
 8005f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fab6 	bl	80064fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f90:	bf00      	nop
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d101      	bne.n	8005fb4 <HAL_TIM_ConfigClockSource+0x1c>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e0b4      	b.n	800611e <HAL_TIM_ConfigClockSource+0x186>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2202      	movs	r2, #2
 8005fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005fda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005fec:	d03e      	beq.n	800606c <HAL_TIM_ConfigClockSource+0xd4>
 8005fee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ff2:	f200 8087 	bhi.w	8006104 <HAL_TIM_ConfigClockSource+0x16c>
 8005ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005ffa:	f000 8086 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x172>
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006002:	d87f      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x16c>
 8006004:	2b70      	cmp	r3, #112	@ 0x70
 8006006:	d01a      	beq.n	800603e <HAL_TIM_ConfigClockSource+0xa6>
 8006008:	2b70      	cmp	r3, #112	@ 0x70
 800600a:	d87b      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x16c>
 800600c:	2b60      	cmp	r3, #96	@ 0x60
 800600e:	d050      	beq.n	80060b2 <HAL_TIM_ConfigClockSource+0x11a>
 8006010:	2b60      	cmp	r3, #96	@ 0x60
 8006012:	d877      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x16c>
 8006014:	2b50      	cmp	r3, #80	@ 0x50
 8006016:	d03c      	beq.n	8006092 <HAL_TIM_ConfigClockSource+0xfa>
 8006018:	2b50      	cmp	r3, #80	@ 0x50
 800601a:	d873      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x16c>
 800601c:	2b40      	cmp	r3, #64	@ 0x40
 800601e:	d058      	beq.n	80060d2 <HAL_TIM_ConfigClockSource+0x13a>
 8006020:	2b40      	cmp	r3, #64	@ 0x40
 8006022:	d86f      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x16c>
 8006024:	2b30      	cmp	r3, #48	@ 0x30
 8006026:	d064      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006028:	2b30      	cmp	r3, #48	@ 0x30
 800602a:	d86b      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x16c>
 800602c:	2b20      	cmp	r3, #32
 800602e:	d060      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006030:	2b20      	cmp	r3, #32
 8006032:	d867      	bhi.n	8006104 <HAL_TIM_ConfigClockSource+0x16c>
 8006034:	2b00      	cmp	r3, #0
 8006036:	d05c      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x15a>
 8006038:	2b10      	cmp	r3, #16
 800603a:	d05a      	beq.n	80060f2 <HAL_TIM_ConfigClockSource+0x15a>
 800603c:	e062      	b.n	8006104 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800604e:	f000 f9b9 	bl	80063c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006060:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	609a      	str	r2, [r3, #8]
      break;
 800606a:	e04f      	b.n	800610c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800607c:	f000 f9a2 	bl	80063c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689a      	ldr	r2, [r3, #8]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800608e:	609a      	str	r2, [r3, #8]
      break;
 8006090:	e03c      	b.n	800610c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800609e:	461a      	mov	r2, r3
 80060a0:	f000 f916 	bl	80062d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2150      	movs	r1, #80	@ 0x50
 80060aa:	4618      	mov	r0, r3
 80060ac:	f000 f96f 	bl	800638e <TIM_ITRx_SetConfig>
      break;
 80060b0:	e02c      	b.n	800610c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060be:	461a      	mov	r2, r3
 80060c0:	f000 f935 	bl	800632e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	2160      	movs	r1, #96	@ 0x60
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 f95f 	bl	800638e <TIM_ITRx_SetConfig>
      break;
 80060d0:	e01c      	b.n	800610c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060de:	461a      	mov	r2, r3
 80060e0:	f000 f8f6 	bl	80062d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2140      	movs	r1, #64	@ 0x40
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 f94f 	bl	800638e <TIM_ITRx_SetConfig>
      break;
 80060f0:	e00c      	b.n	800610c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4619      	mov	r1, r3
 80060fc:	4610      	mov	r0, r2
 80060fe:	f000 f946 	bl	800638e <TIM_ITRx_SetConfig>
      break;
 8006102:	e003      	b.n	800610c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	73fb      	strb	r3, [r7, #15]
      break;
 8006108:	e000      	b.n	800610c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800610a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2201      	movs	r2, #1
 8006110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2200      	movs	r2, #0
 8006118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800611c:	7bfb      	ldrb	r3, [r7, #15]
}
 800611e:	4618      	mov	r0, r3
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}

08006126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006126:	b480      	push	{r7}
 8006128:	b083      	sub	sp, #12
 800612a:	af00      	add	r7, sp, #0
 800612c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800612e:	bf00      	nop
 8006130:	370c      	adds	r7, #12
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr

0800613a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800613a:	b480      	push	{r7}
 800613c:	b083      	sub	sp, #12
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006142:	bf00      	nop
 8006144:	370c      	adds	r7, #12
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr

0800614e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800614e:	b480      	push	{r7}
 8006150:	b083      	sub	sp, #12
 8006152:	af00      	add	r7, sp, #0
 8006154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006156:	bf00      	nop
 8006158:	370c      	adds	r7, #12
 800615a:	46bd      	mov	sp, r7
 800615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006160:	4770      	bx	lr

08006162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006162:	b480      	push	{r7}
 8006164:	b083      	sub	sp, #12
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800616a:	bf00      	nop
 800616c:	370c      	adds	r7, #12
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
	...

08006178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006178:	b480      	push	{r7}
 800617a:	b085      	sub	sp, #20
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	4a46      	ldr	r2, [pc, #280]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d013      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006196:	d00f      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4a43      	ldr	r2, [pc, #268]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d00b      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a42      	ldr	r2, [pc, #264]	@ (80062ac <TIM_Base_SetConfig+0x134>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d007      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a41      	ldr	r2, [pc, #260]	@ (80062b0 <TIM_Base_SetConfig+0x138>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0x40>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a40      	ldr	r2, [pc, #256]	@ (80062b4 <TIM_Base_SetConfig+0x13c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d108      	bne.n	80061ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80061be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a35      	ldr	r2, [pc, #212]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d02b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061d8:	d027      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a32      	ldr	r2, [pc, #200]	@ (80062a8 <TIM_Base_SetConfig+0x130>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d023      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a31      	ldr	r2, [pc, #196]	@ (80062ac <TIM_Base_SetConfig+0x134>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d01f      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a30      	ldr	r2, [pc, #192]	@ (80062b0 <TIM_Base_SetConfig+0x138>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d01b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a2f      	ldr	r2, [pc, #188]	@ (80062b4 <TIM_Base_SetConfig+0x13c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d017      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a2e      	ldr	r2, [pc, #184]	@ (80062b8 <TIM_Base_SetConfig+0x140>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d013      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a2d      	ldr	r2, [pc, #180]	@ (80062bc <TIM_Base_SetConfig+0x144>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d00f      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4a2c      	ldr	r2, [pc, #176]	@ (80062c0 <TIM_Base_SetConfig+0x148>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00b      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a2b      	ldr	r2, [pc, #172]	@ (80062c4 <TIM_Base_SetConfig+0x14c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d007      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a2a      	ldr	r2, [pc, #168]	@ (80062c8 <TIM_Base_SetConfig+0x150>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d003      	beq.n	800622a <TIM_Base_SetConfig+0xb2>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a29      	ldr	r2, [pc, #164]	@ (80062cc <TIM_Base_SetConfig+0x154>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d108      	bne.n	800623c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	695b      	ldr	r3, [r3, #20]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	68fa      	ldr	r2, [r7, #12]
 800624e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	689a      	ldr	r2, [r3, #8]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a10      	ldr	r2, [pc, #64]	@ (80062a4 <TIM_Base_SetConfig+0x12c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d003      	beq.n	8006270 <TIM_Base_SetConfig+0xf8>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	4a12      	ldr	r2, [pc, #72]	@ (80062b4 <TIM_Base_SetConfig+0x13c>)
 800626c:	4293      	cmp	r3, r2
 800626e:	d103      	bne.n	8006278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	691a      	ldr	r2, [r3, #16]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	f003 0301 	and.w	r3, r3, #1
 8006286:	2b01      	cmp	r3, #1
 8006288:	d105      	bne.n	8006296 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f023 0201 	bic.w	r2, r3, #1
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	611a      	str	r2, [r3, #16]
  }
}
 8006296:	bf00      	nop
 8006298:	3714      	adds	r7, #20
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	40010000 	.word	0x40010000
 80062a8:	40000400 	.word	0x40000400
 80062ac:	40000800 	.word	0x40000800
 80062b0:	40000c00 	.word	0x40000c00
 80062b4:	40010400 	.word	0x40010400
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400
 80062c0:	40014800 	.word	0x40014800
 80062c4:	40001800 	.word	0x40001800
 80062c8:	40001c00 	.word	0x40001c00
 80062cc:	40002000 	.word	0x40002000

080062d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b087      	sub	sp, #28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1b      	ldr	r3, [r3, #32]
 80062e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6a1b      	ldr	r3, [r3, #32]
 80062e6:	f023 0201 	bic.w	r2, r3, #1
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	011b      	lsls	r3, r3, #4
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	4313      	orrs	r3, r2
 8006304:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	f023 030a 	bic.w	r3, r3, #10
 800630c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	4313      	orrs	r3, r2
 8006314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	693a      	ldr	r2, [r7, #16]
 800631a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	697a      	ldr	r2, [r7, #20]
 8006320:	621a      	str	r2, [r3, #32]
}
 8006322:	bf00      	nop
 8006324:	371c      	adds	r7, #28
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800632e:	b480      	push	{r7}
 8006330:	b087      	sub	sp, #28
 8006332:	af00      	add	r7, sp, #0
 8006334:	60f8      	str	r0, [r7, #12]
 8006336:	60b9      	str	r1, [r7, #8]
 8006338:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a1b      	ldr	r3, [r3, #32]
 800633e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6a1b      	ldr	r3, [r3, #32]
 8006344:	f023 0210 	bic.w	r2, r3, #16
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	699b      	ldr	r3, [r3, #24]
 8006350:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006358:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	031b      	lsls	r3, r3, #12
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	4313      	orrs	r3, r2
 8006362:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800636a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	011b      	lsls	r3, r3, #4
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	697a      	ldr	r2, [r7, #20]
 8006380:	621a      	str	r2, [r3, #32]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800638e:	b480      	push	{r7}
 8006390:	b085      	sub	sp, #20
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80063a6:	683a      	ldr	r2, [r7, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	f043 0307 	orr.w	r3, r3, #7
 80063b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68fa      	ldr	r2, [r7, #12]
 80063b6:	609a      	str	r2, [r3, #8]
}
 80063b8:	bf00      	nop
 80063ba:	3714      	adds	r7, #20
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80063de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	021a      	lsls	r2, r3, #8
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	431a      	orrs	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	4313      	orrs	r3, r2
 80063f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	609a      	str	r2, [r3, #8]
}
 80063f8:	bf00      	nop
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006404:	b480      	push	{r7}
 8006406:	b085      	sub	sp, #20
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006414:	2b01      	cmp	r3, #1
 8006416:	d101      	bne.n	800641c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006418:	2302      	movs	r3, #2
 800641a:	e05a      	b.n	80064d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2201      	movs	r2, #1
 8006420:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2202      	movs	r2, #2
 8006428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	689b      	ldr	r3, [r3, #8]
 800643a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006442:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4313      	orrs	r3, r2
 800644c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	68fa      	ldr	r2, [r7, #12]
 8006454:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a21      	ldr	r2, [pc, #132]	@ (80064e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d022      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006468:	d01d      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a1d      	ldr	r2, [pc, #116]	@ (80064e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d018      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a1b      	ldr	r2, [pc, #108]	@ (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d013      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a1a      	ldr	r2, [pc, #104]	@ (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d00e      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a18      	ldr	r2, [pc, #96]	@ (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d009      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	4a17      	ldr	r2, [pc, #92]	@ (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d004      	beq.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	4a15      	ldr	r2, [pc, #84]	@ (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d10c      	bne.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80064ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3714      	adds	r7, #20
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	40010000 	.word	0x40010000
 80064e4:	40000400 	.word	0x40000400
 80064e8:	40000800 	.word	0x40000800
 80064ec:	40000c00 	.word	0x40000c00
 80064f0:	40010400 	.word	0x40010400
 80064f4:	40014000 	.word	0x40014000
 80064f8:	40001800 	.word	0x40001800

080064fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d101      	bne.n	8006536 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	e042      	b.n	80065bc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800653c:	b2db      	uxtb	r3, r3
 800653e:	2b00      	cmp	r3, #0
 8006540:	d106      	bne.n	8006550 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2200      	movs	r2, #0
 8006546:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fb f830 	bl	80015b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2224      	movs	r2, #36	@ 0x24
 8006554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006566:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f82b 	bl	80065c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800657c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800658c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68da      	ldr	r2, [r3, #12]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800659c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2220      	movs	r2, #32
 80065a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2220      	movs	r2, #32
 80065b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2200      	movs	r2, #0
 80065b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80065ba:	2300      	movs	r3, #0
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3708      	adds	r7, #8
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80065c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065c8:	b0c0      	sub	sp, #256	@ 0x100
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	691b      	ldr	r3, [r3, #16]
 80065d8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80065dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e0:	68d9      	ldr	r1, [r3, #12]
 80065e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	ea40 0301 	orr.w	r3, r0, r1
 80065ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80065ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f2:	689a      	ldr	r2, [r3, #8]
 80065f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	431a      	orrs	r2, r3
 80065fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006600:	695b      	ldr	r3, [r3, #20]
 8006602:	431a      	orrs	r2, r3
 8006604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006608:	69db      	ldr	r3, [r3, #28]
 800660a:	4313      	orrs	r3, r2
 800660c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68db      	ldr	r3, [r3, #12]
 8006618:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800661c:	f021 010c 	bic.w	r1, r1, #12
 8006620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006624:	681a      	ldr	r2, [r3, #0]
 8006626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800662a:	430b      	orrs	r3, r1
 800662c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800662e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800663a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800663e:	6999      	ldr	r1, [r3, #24]
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006644:	681a      	ldr	r2, [r3, #0]
 8006646:	ea40 0301 	orr.w	r3, r0, r1
 800664a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800664c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	4b8f      	ldr	r3, [pc, #572]	@ (8006890 <UART_SetConfig+0x2cc>)
 8006654:	429a      	cmp	r2, r3
 8006656:	d005      	beq.n	8006664 <UART_SetConfig+0xa0>
 8006658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	4b8d      	ldr	r3, [pc, #564]	@ (8006894 <UART_SetConfig+0x2d0>)
 8006660:	429a      	cmp	r2, r3
 8006662:	d104      	bne.n	800666e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006664:	f7ff f826 	bl	80056b4 <HAL_RCC_GetPCLK2Freq>
 8006668:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800666c:	e003      	b.n	8006676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800666e:	f7ff f80d 	bl	800568c <HAL_RCC_GetPCLK1Freq>
 8006672:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800667a:	69db      	ldr	r3, [r3, #28]
 800667c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006680:	f040 810c 	bne.w	800689c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006688:	2200      	movs	r2, #0
 800668a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800668e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006696:	4622      	mov	r2, r4
 8006698:	462b      	mov	r3, r5
 800669a:	1891      	adds	r1, r2, r2
 800669c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800669e:	415b      	adcs	r3, r3
 80066a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80066a6:	4621      	mov	r1, r4
 80066a8:	eb12 0801 	adds.w	r8, r2, r1
 80066ac:	4629      	mov	r1, r5
 80066ae:	eb43 0901 	adc.w	r9, r3, r1
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80066be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80066c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80066c6:	4690      	mov	r8, r2
 80066c8:	4699      	mov	r9, r3
 80066ca:	4623      	mov	r3, r4
 80066cc:	eb18 0303 	adds.w	r3, r8, r3
 80066d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80066d4:	462b      	mov	r3, r5
 80066d6:	eb49 0303 	adc.w	r3, r9, r3
 80066da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80066de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80066ea:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80066ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80066f2:	460b      	mov	r3, r1
 80066f4:	18db      	adds	r3, r3, r3
 80066f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80066f8:	4613      	mov	r3, r2
 80066fa:	eb42 0303 	adc.w	r3, r2, r3
 80066fe:	657b      	str	r3, [r7, #84]	@ 0x54
 8006700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006708:	f7f9 fd72 	bl	80001f0 <__aeabi_uldivmod>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4b61      	ldr	r3, [pc, #388]	@ (8006898 <UART_SetConfig+0x2d4>)
 8006712:	fba3 2302 	umull	r2, r3, r3, r2
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	011c      	lsls	r4, r3, #4
 800671a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800671e:	2200      	movs	r2, #0
 8006720:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006724:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800672c:	4642      	mov	r2, r8
 800672e:	464b      	mov	r3, r9
 8006730:	1891      	adds	r1, r2, r2
 8006732:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006734:	415b      	adcs	r3, r3
 8006736:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800673c:	4641      	mov	r1, r8
 800673e:	eb12 0a01 	adds.w	sl, r2, r1
 8006742:	4649      	mov	r1, r9
 8006744:	eb43 0b01 	adc.w	fp, r3, r1
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800675c:	4692      	mov	sl, r2
 800675e:	469b      	mov	fp, r3
 8006760:	4643      	mov	r3, r8
 8006762:	eb1a 0303 	adds.w	r3, sl, r3
 8006766:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800676a:	464b      	mov	r3, r9
 800676c:	eb4b 0303 	adc.w	r3, fp, r3
 8006770:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006780:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006788:	460b      	mov	r3, r1
 800678a:	18db      	adds	r3, r3, r3
 800678c:	643b      	str	r3, [r7, #64]	@ 0x40
 800678e:	4613      	mov	r3, r2
 8006790:	eb42 0303 	adc.w	r3, r2, r3
 8006794:	647b      	str	r3, [r7, #68]	@ 0x44
 8006796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800679a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800679e:	f7f9 fd27 	bl	80001f0 <__aeabi_uldivmod>
 80067a2:	4602      	mov	r2, r0
 80067a4:	460b      	mov	r3, r1
 80067a6:	4611      	mov	r1, r2
 80067a8:	4b3b      	ldr	r3, [pc, #236]	@ (8006898 <UART_SetConfig+0x2d4>)
 80067aa:	fba3 2301 	umull	r2, r3, r3, r1
 80067ae:	095b      	lsrs	r3, r3, #5
 80067b0:	2264      	movs	r2, #100	@ 0x64
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	1acb      	subs	r3, r1, r3
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80067be:	4b36      	ldr	r3, [pc, #216]	@ (8006898 <UART_SetConfig+0x2d4>)
 80067c0:	fba3 2302 	umull	r2, r3, r3, r2
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80067cc:	441c      	add	r4, r3
 80067ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80067d8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80067dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80067e0:	4642      	mov	r2, r8
 80067e2:	464b      	mov	r3, r9
 80067e4:	1891      	adds	r1, r2, r2
 80067e6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80067e8:	415b      	adcs	r3, r3
 80067ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80067f0:	4641      	mov	r1, r8
 80067f2:	1851      	adds	r1, r2, r1
 80067f4:	6339      	str	r1, [r7, #48]	@ 0x30
 80067f6:	4649      	mov	r1, r9
 80067f8:	414b      	adcs	r3, r1
 80067fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80067fc:	f04f 0200 	mov.w	r2, #0
 8006800:	f04f 0300 	mov.w	r3, #0
 8006804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006808:	4659      	mov	r1, fp
 800680a:	00cb      	lsls	r3, r1, #3
 800680c:	4651      	mov	r1, sl
 800680e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006812:	4651      	mov	r1, sl
 8006814:	00ca      	lsls	r2, r1, #3
 8006816:	4610      	mov	r0, r2
 8006818:	4619      	mov	r1, r3
 800681a:	4603      	mov	r3, r0
 800681c:	4642      	mov	r2, r8
 800681e:	189b      	adds	r3, r3, r2
 8006820:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006824:	464b      	mov	r3, r9
 8006826:	460a      	mov	r2, r1
 8006828:	eb42 0303 	adc.w	r3, r2, r3
 800682c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	2200      	movs	r2, #0
 8006838:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800683c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006844:	460b      	mov	r3, r1
 8006846:	18db      	adds	r3, r3, r3
 8006848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800684a:	4613      	mov	r3, r2
 800684c:	eb42 0303 	adc.w	r3, r2, r3
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800685a:	f7f9 fcc9 	bl	80001f0 <__aeabi_uldivmod>
 800685e:	4602      	mov	r2, r0
 8006860:	460b      	mov	r3, r1
 8006862:	4b0d      	ldr	r3, [pc, #52]	@ (8006898 <UART_SetConfig+0x2d4>)
 8006864:	fba3 1302 	umull	r1, r3, r3, r2
 8006868:	095b      	lsrs	r3, r3, #5
 800686a:	2164      	movs	r1, #100	@ 0x64
 800686c:	fb01 f303 	mul.w	r3, r1, r3
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	00db      	lsls	r3, r3, #3
 8006874:	3332      	adds	r3, #50	@ 0x32
 8006876:	4a08      	ldr	r2, [pc, #32]	@ (8006898 <UART_SetConfig+0x2d4>)
 8006878:	fba2 2303 	umull	r2, r3, r2, r3
 800687c:	095b      	lsrs	r3, r3, #5
 800687e:	f003 0207 	and.w	r2, r3, #7
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4422      	add	r2, r4
 800688a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800688c:	e106      	b.n	8006a9c <UART_SetConfig+0x4d8>
 800688e:	bf00      	nop
 8006890:	40011000 	.word	0x40011000
 8006894:	40011400 	.word	0x40011400
 8006898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800689c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a0:	2200      	movs	r2, #0
 80068a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80068a6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80068aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80068ae:	4642      	mov	r2, r8
 80068b0:	464b      	mov	r3, r9
 80068b2:	1891      	adds	r1, r2, r2
 80068b4:	6239      	str	r1, [r7, #32]
 80068b6:	415b      	adcs	r3, r3
 80068b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80068be:	4641      	mov	r1, r8
 80068c0:	1854      	adds	r4, r2, r1
 80068c2:	4649      	mov	r1, r9
 80068c4:	eb43 0501 	adc.w	r5, r3, r1
 80068c8:	f04f 0200 	mov.w	r2, #0
 80068cc:	f04f 0300 	mov.w	r3, #0
 80068d0:	00eb      	lsls	r3, r5, #3
 80068d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80068d6:	00e2      	lsls	r2, r4, #3
 80068d8:	4614      	mov	r4, r2
 80068da:	461d      	mov	r5, r3
 80068dc:	4643      	mov	r3, r8
 80068de:	18e3      	adds	r3, r4, r3
 80068e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80068e4:	464b      	mov	r3, r9
 80068e6:	eb45 0303 	adc.w	r3, r5, r3
 80068ea:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80068ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80068fa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800690a:	4629      	mov	r1, r5
 800690c:	008b      	lsls	r3, r1, #2
 800690e:	4621      	mov	r1, r4
 8006910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006914:	4621      	mov	r1, r4
 8006916:	008a      	lsls	r2, r1, #2
 8006918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800691c:	f7f9 fc68 	bl	80001f0 <__aeabi_uldivmod>
 8006920:	4602      	mov	r2, r0
 8006922:	460b      	mov	r3, r1
 8006924:	4b60      	ldr	r3, [pc, #384]	@ (8006aa8 <UART_SetConfig+0x4e4>)
 8006926:	fba3 2302 	umull	r2, r3, r3, r2
 800692a:	095b      	lsrs	r3, r3, #5
 800692c:	011c      	lsls	r4, r3, #4
 800692e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006932:	2200      	movs	r2, #0
 8006934:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006938:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800693c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006940:	4642      	mov	r2, r8
 8006942:	464b      	mov	r3, r9
 8006944:	1891      	adds	r1, r2, r2
 8006946:	61b9      	str	r1, [r7, #24]
 8006948:	415b      	adcs	r3, r3
 800694a:	61fb      	str	r3, [r7, #28]
 800694c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006950:	4641      	mov	r1, r8
 8006952:	1851      	adds	r1, r2, r1
 8006954:	6139      	str	r1, [r7, #16]
 8006956:	4649      	mov	r1, r9
 8006958:	414b      	adcs	r3, r1
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006968:	4659      	mov	r1, fp
 800696a:	00cb      	lsls	r3, r1, #3
 800696c:	4651      	mov	r1, sl
 800696e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006972:	4651      	mov	r1, sl
 8006974:	00ca      	lsls	r2, r1, #3
 8006976:	4610      	mov	r0, r2
 8006978:	4619      	mov	r1, r3
 800697a:	4603      	mov	r3, r0
 800697c:	4642      	mov	r2, r8
 800697e:	189b      	adds	r3, r3, r2
 8006980:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006984:	464b      	mov	r3, r9
 8006986:	460a      	mov	r2, r1
 8006988:	eb42 0303 	adc.w	r3, r2, r3
 800698c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	67bb      	str	r3, [r7, #120]	@ 0x78
 800699a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	f04f 0300 	mov.w	r3, #0
 80069a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80069a8:	4649      	mov	r1, r9
 80069aa:	008b      	lsls	r3, r1, #2
 80069ac:	4641      	mov	r1, r8
 80069ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069b2:	4641      	mov	r1, r8
 80069b4:	008a      	lsls	r2, r1, #2
 80069b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80069ba:	f7f9 fc19 	bl	80001f0 <__aeabi_uldivmod>
 80069be:	4602      	mov	r2, r0
 80069c0:	460b      	mov	r3, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	4b38      	ldr	r3, [pc, #224]	@ (8006aa8 <UART_SetConfig+0x4e4>)
 80069c6:	fba3 2301 	umull	r2, r3, r3, r1
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	2264      	movs	r2, #100	@ 0x64
 80069ce:	fb02 f303 	mul.w	r3, r2, r3
 80069d2:	1acb      	subs	r3, r1, r3
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	3332      	adds	r3, #50	@ 0x32
 80069d8:	4a33      	ldr	r2, [pc, #204]	@ (8006aa8 <UART_SetConfig+0x4e4>)
 80069da:	fba2 2303 	umull	r2, r3, r2, r3
 80069de:	095b      	lsrs	r3, r3, #5
 80069e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80069e4:	441c      	add	r4, r3
 80069e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80069ea:	2200      	movs	r2, #0
 80069ec:	673b      	str	r3, [r7, #112]	@ 0x70
 80069ee:	677a      	str	r2, [r7, #116]	@ 0x74
 80069f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80069f4:	4642      	mov	r2, r8
 80069f6:	464b      	mov	r3, r9
 80069f8:	1891      	adds	r1, r2, r2
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	415b      	adcs	r3, r3
 80069fe:	60fb      	str	r3, [r7, #12]
 8006a00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a04:	4641      	mov	r1, r8
 8006a06:	1851      	adds	r1, r2, r1
 8006a08:	6039      	str	r1, [r7, #0]
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	414b      	adcs	r3, r1
 8006a0e:	607b      	str	r3, [r7, #4]
 8006a10:	f04f 0200 	mov.w	r2, #0
 8006a14:	f04f 0300 	mov.w	r3, #0
 8006a18:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a1c:	4659      	mov	r1, fp
 8006a1e:	00cb      	lsls	r3, r1, #3
 8006a20:	4651      	mov	r1, sl
 8006a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a26:	4651      	mov	r1, sl
 8006a28:	00ca      	lsls	r2, r1, #3
 8006a2a:	4610      	mov	r0, r2
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4642      	mov	r2, r8
 8006a32:	189b      	adds	r3, r3, r2
 8006a34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a36:	464b      	mov	r3, r9
 8006a38:	460a      	mov	r2, r1
 8006a3a:	eb42 0303 	adc.w	r3, r2, r3
 8006a3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a4a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	f04f 0300 	mov.w	r3, #0
 8006a54:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006a58:	4649      	mov	r1, r9
 8006a5a:	008b      	lsls	r3, r1, #2
 8006a5c:	4641      	mov	r1, r8
 8006a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a62:	4641      	mov	r1, r8
 8006a64:	008a      	lsls	r2, r1, #2
 8006a66:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006a6a:	f7f9 fbc1 	bl	80001f0 <__aeabi_uldivmod>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	4b0d      	ldr	r3, [pc, #52]	@ (8006aa8 <UART_SetConfig+0x4e4>)
 8006a74:	fba3 1302 	umull	r1, r3, r3, r2
 8006a78:	095b      	lsrs	r3, r3, #5
 8006a7a:	2164      	movs	r1, #100	@ 0x64
 8006a7c:	fb01 f303 	mul.w	r3, r1, r3
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	011b      	lsls	r3, r3, #4
 8006a84:	3332      	adds	r3, #50	@ 0x32
 8006a86:	4a08      	ldr	r2, [pc, #32]	@ (8006aa8 <UART_SetConfig+0x4e4>)
 8006a88:	fba2 2303 	umull	r2, r3, r2, r3
 8006a8c:	095b      	lsrs	r3, r3, #5
 8006a8e:	f003 020f 	and.w	r2, r3, #15
 8006a92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4422      	add	r2, r4
 8006a9a:	609a      	str	r2, [r3, #8]
}
 8006a9c:	bf00      	nop
 8006a9e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006aa8:	51eb851f 	.word	0x51eb851f

08006aac <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b083      	sub	sp, #12
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d123      	bne.n	8006b06 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006ac6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006aca:	683a      	ldr	r2, [r7, #0]
 8006acc:	6851      	ldr	r1, [r2, #4]
 8006ace:	683a      	ldr	r2, [r7, #0]
 8006ad0:	6892      	ldr	r2, [r2, #8]
 8006ad2:	4311      	orrs	r1, r2
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	68d2      	ldr	r2, [r2, #12]
 8006ad8:	4311      	orrs	r1, r2
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	6912      	ldr	r2, [r2, #16]
 8006ade:	4311      	orrs	r1, r2
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	6952      	ldr	r2, [r2, #20]
 8006ae4:	4311      	orrs	r1, r2
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	6992      	ldr	r2, [r2, #24]
 8006aea:	4311      	orrs	r1, r2
 8006aec:	683a      	ldr	r2, [r7, #0]
 8006aee:	69d2      	ldr	r2, [r2, #28]
 8006af0:	4311      	orrs	r1, r2
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	6a12      	ldr	r2, [r2, #32]
 8006af6:	4311      	orrs	r1, r2
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006afc:	430a      	orrs	r2, r1
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	601a      	str	r2, [r3, #0]
 8006b04:	e028      	b.n	8006b58 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	69d9      	ldr	r1, [r3, #28]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	4319      	orrs	r1, r3
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1c:	430b      	orrs	r3, r1
 8006b1e:	431a      	orrs	r2, r3
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006b2c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006b30:	683a      	ldr	r2, [r7, #0]
 8006b32:	6851      	ldr	r1, [r2, #4]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	6892      	ldr	r2, [r2, #8]
 8006b38:	4311      	orrs	r1, r2
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	68d2      	ldr	r2, [r2, #12]
 8006b3e:	4311      	orrs	r1, r2
 8006b40:	683a      	ldr	r2, [r7, #0]
 8006b42:	6912      	ldr	r2, [r2, #16]
 8006b44:	4311      	orrs	r1, r2
 8006b46:	683a      	ldr	r2, [r7, #0]
 8006b48:	6952      	ldr	r2, [r2, #20]
 8006b4a:	4311      	orrs	r1, r2
 8006b4c:	683a      	ldr	r2, [r7, #0]
 8006b4e:	6992      	ldr	r2, [r2, #24]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b085      	sub	sp, #20
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	60f8      	str	r0, [r7, #12]
 8006b6e:	60b9      	str	r1, [r7, #8]
 8006b70:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d128      	bne.n	8006bca <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	1e59      	subs	r1, r3, #1
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	011b      	lsls	r3, r3, #4
 8006b8e:	4319      	orrs	r1, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	021b      	lsls	r3, r3, #8
 8006b98:	4319      	orrs	r1, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	031b      	lsls	r3, r3, #12
 8006ba2:	4319      	orrs	r1, r3
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	3b01      	subs	r3, #1
 8006baa:	041b      	lsls	r3, r3, #16
 8006bac:	4319      	orrs	r1, r3
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	695b      	ldr	r3, [r3, #20]
 8006bb2:	3b01      	subs	r3, #1
 8006bb4:	051b      	lsls	r3, r3, #20
 8006bb6:	4319      	orrs	r1, r3
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	061b      	lsls	r3, r3, #24
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	431a      	orrs	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	609a      	str	r2, [r3, #8]
 8006bc8:	e02f      	b.n	8006c2a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006bd2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	68d2      	ldr	r2, [r2, #12]
 8006bda:	3a01      	subs	r2, #1
 8006bdc:	0311      	lsls	r1, r2, #12
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	6952      	ldr	r2, [r2, #20]
 8006be2:	3a01      	subs	r2, #1
 8006be4:	0512      	lsls	r2, r2, #20
 8006be6:	430a      	orrs	r2, r1
 8006be8:	431a      	orrs	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	68db      	ldr	r3, [r3, #12]
 8006bf2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1e59      	subs	r1, r3, #1
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	4319      	orrs	r1, r3
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	689b      	ldr	r3, [r3, #8]
 8006c0a:	3b01      	subs	r3, #1
 8006c0c:	021b      	lsls	r3, r3, #8
 8006c0e:	4319      	orrs	r1, r3
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	3b01      	subs	r3, #1
 8006c16:	041b      	lsls	r3, r3, #16
 8006c18:	4319      	orrs	r1, r3
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	3b01      	subs	r3, #1
 8006c20:	061b      	lsls	r3, r3, #24
 8006c22:	430b      	orrs	r3, r1
 8006c24:	431a      	orrs	r2, r3
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006c2a:	2300      	movs	r3, #0
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr

08006c38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c38:	b084      	sub	sp, #16
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b084      	sub	sp, #16
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	f107 001c 	add.w	r0, r7, #28
 8006c46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c4a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d123      	bne.n	8006c9a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c56:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d105      	bne.n	8006c8e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	68db      	ldr	r3, [r3, #12]
 8006c86:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f9dc 	bl	800704c <USB_CoreReset>
 8006c94:	4603      	mov	r3, r0
 8006c96:	73fb      	strb	r3, [r7, #15]
 8006c98:	e01b      	b.n	8006cd2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68db      	ldr	r3, [r3, #12]
 8006c9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f9d0 	bl	800704c <USB_CoreReset>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006cb0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d106      	bne.n	8006cc6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cbc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	639a      	str	r2, [r3, #56]	@ 0x38
 8006cc4:	e005      	b.n	8006cd2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cca:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006cd2:	7fbb      	ldrb	r3, [r7, #30]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d10b      	bne.n	8006cf0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	689b      	ldr	r3, [r3, #8]
 8006cdc:	f043 0206 	orr.w	r2, r3, #6
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	f043 0220 	orr.w	r2, r3, #32
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cfc:	b004      	add	sp, #16
 8006cfe:	4770      	bx	lr

08006d00 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	f043 0201 	orr.w	r2, r3, #1
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b083      	sub	sp, #12
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	f023 0201 	bic.w	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d115      	bne.n	8006d92 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	68db      	ldr	r3, [r3, #12]
 8006d6a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006d72:	200a      	movs	r0, #10
 8006d74:	f7fa fcd0 	bl	8001718 <HAL_Delay>
      ms += 10U;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	330a      	adds	r3, #10
 8006d7c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f956 	bl	8007030 <USB_GetMode>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d01e      	beq.n	8006dc8 <USB_SetCurrentMode+0x84>
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d8e:	d9f0      	bls.n	8006d72 <USB_SetCurrentMode+0x2e>
 8006d90:	e01a      	b.n	8006dc8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d92:	78fb      	ldrb	r3, [r7, #3]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d115      	bne.n	8006dc4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006da4:	200a      	movs	r0, #10
 8006da6:	f7fa fcb7 	bl	8001718 <HAL_Delay>
      ms += 10U;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	330a      	adds	r3, #10
 8006dae:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f93d 	bl	8007030 <USB_GetMode>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <USB_SetCurrentMode+0x84>
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2bc7      	cmp	r3, #199	@ 0xc7
 8006dc0:	d9f0      	bls.n	8006da4 <USB_SetCurrentMode+0x60>
 8006dc2:	e001      	b.n	8006dc8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e005      	b.n	8006dd4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2bc8      	cmp	r3, #200	@ 0xc8
 8006dcc:	d101      	bne.n	8006dd2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e000      	b.n	8006dd4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	3710      	adds	r7, #16
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}

08006ddc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
 8006de4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006de6:	2300      	movs	r3, #0
 8006de8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3301      	adds	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006df6:	d901      	bls.n	8006dfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006df8:	2303      	movs	r3, #3
 8006dfa:	e01b      	b.n	8006e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	691b      	ldr	r3, [r3, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	daf2      	bge.n	8006dea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	019b      	lsls	r3, r3, #6
 8006e0c:	f043 0220 	orr.w	r2, r3, #32
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e20:	d901      	bls.n	8006e26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e006      	b.n	8006e34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	691b      	ldr	r3, [r3, #16]
 8006e2a:	f003 0320 	and.w	r3, r3, #32
 8006e2e:	2b20      	cmp	r3, #32
 8006e30:	d0f0      	beq.n	8006e14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3714      	adds	r7, #20
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b085      	sub	sp, #20
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e48:	2300      	movs	r3, #0
 8006e4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	3301      	adds	r3, #1
 8006e50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e58:	d901      	bls.n	8006e5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e018      	b.n	8006e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	691b      	ldr	r3, [r3, #16]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	daf2      	bge.n	8006e4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	2210      	movs	r2, #16
 8006e6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3301      	adds	r3, #1
 8006e74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006e7c:	d901      	bls.n	8006e82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e006      	b.n	8006e90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d0f0      	beq.n	8006e70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006e8e:	2300      	movs	r3, #0
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3714      	adds	r7, #20
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b089      	sub	sp, #36	@ 0x24
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	4611      	mov	r1, r2
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	460b      	mov	r3, r1
 8006eac:	71fb      	strb	r3, [r7, #7]
 8006eae:	4613      	mov	r3, r2
 8006eb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006eba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d123      	bne.n	8006f0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006ec2:	88bb      	ldrh	r3, [r7, #4]
 8006ec4:	3303      	adds	r3, #3
 8006ec6:	089b      	lsrs	r3, r3, #2
 8006ec8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	e018      	b.n	8006f02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ed0:	79fb      	ldrb	r3, [r7, #7]
 8006ed2:	031a      	lsls	r2, r3, #12
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	4413      	add	r3, r2
 8006ed8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006edc:	461a      	mov	r2, r3
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006eea:	69fb      	ldr	r3, [r7, #28]
 8006eec:	3301      	adds	r3, #1
 8006eee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006ef6:	69fb      	ldr	r3, [r7, #28]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	3301      	adds	r3, #1
 8006f00:	61bb      	str	r3, [r7, #24]
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d3e2      	bcc.n	8006ed0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3724      	adds	r7, #36	@ 0x24
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b08b      	sub	sp, #44	@ 0x2c
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	4613      	mov	r3, r2
 8006f24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	089b      	lsrs	r3, r3, #2
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	f003 0303 	and.w	r3, r3, #3
 8006f3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f3e:	2300      	movs	r3, #0
 8006f40:	623b      	str	r3, [r7, #32]
 8006f42:	e014      	b.n	8006f6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f4a:	681a      	ldr	r2, [r3, #0]
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f52:	3301      	adds	r3, #1
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	3301      	adds	r3, #1
 8006f5a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5e:	3301      	adds	r3, #1
 8006f60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	3301      	adds	r3, #1
 8006f66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006f68:	6a3b      	ldr	r3, [r7, #32]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	623b      	str	r3, [r7, #32]
 8006f6e:	6a3a      	ldr	r2, [r7, #32]
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	429a      	cmp	r2, r3
 8006f74:	d3e6      	bcc.n	8006f44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006f76:	8bfb      	ldrh	r3, [r7, #30]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d01e      	beq.n	8006fba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f86:	461a      	mov	r2, r3
 8006f88:	f107 0310 	add.w	r3, r7, #16
 8006f8c:	6812      	ldr	r2, [r2, #0]
 8006f8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	00db      	lsls	r3, r3, #3
 8006f98:	fa22 f303 	lsr.w	r3, r2, r3
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	701a      	strb	r2, [r3, #0]
      i++;
 8006fa2:	6a3b      	ldr	r3, [r7, #32]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	3301      	adds	r3, #1
 8006fac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006fae:	8bfb      	ldrh	r3, [r7, #30]
 8006fb0:	3b01      	subs	r3, #1
 8006fb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fb4:	8bfb      	ldrh	r3, [r7, #30]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d1ea      	bne.n	8006f90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	372c      	adds	r7, #44	@ 0x2c
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b085      	sub	sp, #20
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4013      	ands	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	460b      	mov	r3, r1
 8006ff8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006ffe:	78fb      	ldrb	r3, [r7, #3]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4413      	add	r3, r2
 8007006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800700e:	78fb      	ldrb	r3, [r7, #3]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	4413      	add	r3, r2
 8007016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4013      	ands	r3, r2
 8007020:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007022:	68bb      	ldr	r3, [r7, #8]
}
 8007024:	4618      	mov	r0, r3
 8007026:	3714      	adds	r7, #20
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr

08007030 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007030:	b480      	push	{r7}
 8007032:	b083      	sub	sp, #12
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	f003 0301 	and.w	r3, r3, #1
}
 8007040:	4618      	mov	r0, r3
 8007042:	370c      	adds	r7, #12
 8007044:	46bd      	mov	sp, r7
 8007046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704a:	4770      	bx	lr

0800704c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	3301      	adds	r3, #1
 800705c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007064:	d901      	bls.n	800706a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007066:	2303      	movs	r3, #3
 8007068:	e01b      	b.n	80070a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	2b00      	cmp	r3, #0
 8007070:	daf2      	bge.n	8007058 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007072:	2300      	movs	r3, #0
 8007074:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	f043 0201 	orr.w	r2, r3, #1
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	3301      	adds	r3, #1
 8007086:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800708e:	d901      	bls.n	8007094 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e006      	b.n	80070a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	691b      	ldr	r3, [r3, #16]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b01      	cmp	r3, #1
 800709e:	d0f0      	beq.n	8007082 <USB_CoreReset+0x36>

  return HAL_OK;
 80070a0:	2300      	movs	r3, #0
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3714      	adds	r7, #20
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr
	...

080070b0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80070b0:	b084      	sub	sp, #16
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b086      	sub	sp, #24
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80070be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80070c2:	2300      	movs	r3, #0
 80070c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80070d0:	461a      	mov	r2, r3
 80070d2:	2300      	movs	r3, #0
 80070d4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070da:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070e6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	68db      	ldr	r3, [r3, #12]
 80070fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007102:	2b00      	cmp	r3, #0
 8007104:	d119      	bne.n	800713a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800710a:	2b01      	cmp	r3, #1
 800710c:	d10a      	bne.n	8007124 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800711c:	f043 0304 	orr.w	r3, r3, #4
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e014      	b.n	800714e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68fa      	ldr	r2, [r7, #12]
 800712e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007132:	f023 0304 	bic.w	r3, r3, #4
 8007136:	6013      	str	r3, [r2, #0]
 8007138:	e009      	b.n	800714e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	68fa      	ldr	r2, [r7, #12]
 8007144:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007148:	f023 0304 	bic.w	r3, r3, #4
 800714c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800714e:	2110      	movs	r1, #16
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fe43 	bl	8006ddc <USB_FlushTxFifo>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f7ff fe6d 	bl	8006e40 <USB_FlushRxFifo>
 8007166:	4603      	mov	r3, r0
 8007168:	2b00      	cmp	r3, #0
 800716a:	d001      	beq.n	8007170 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007170:	2300      	movs	r3, #0
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	e015      	b.n	80071a2 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	015a      	lsls	r2, r3, #5
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	4413      	add	r3, r2
 800717e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007182:	461a      	mov	r2, r3
 8007184:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007188:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800718a:	693b      	ldr	r3, [r7, #16]
 800718c:	015a      	lsls	r2, r3, #5
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	4413      	add	r3, r2
 8007192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007196:	461a      	mov	r2, r3
 8007198:	2300      	movs	r3, #0
 800719a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	3301      	adds	r3, #1
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80071a6:	461a      	mov	r2, r3
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	4293      	cmp	r3, r2
 80071ac:	d3e3      	bcc.n	8007176 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	2200      	movs	r2, #0
 80071b2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071ba:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	4a18      	ldr	r2, [pc, #96]	@ (8007220 <USB_HostInit+0x170>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d10b      	bne.n	80071dc <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071ca:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	4a15      	ldr	r2, [pc, #84]	@ (8007224 <USB_HostInit+0x174>)
 80071d0:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a14      	ldr	r2, [pc, #80]	@ (8007228 <USB_HostInit+0x178>)
 80071d6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80071da:	e009      	b.n	80071f0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2280      	movs	r2, #128	@ 0x80
 80071e0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a11      	ldr	r2, [pc, #68]	@ (800722c <USB_HostInit+0x17c>)
 80071e6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a11      	ldr	r2, [pc, #68]	@ (8007230 <USB_HostInit+0x180>)
 80071ec:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80071f0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d105      	bne.n	8007204 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	699b      	ldr	r3, [r3, #24]
 80071fc:	f043 0210 	orr.w	r2, r3, #16
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	699a      	ldr	r2, [r3, #24]
 8007208:	4b0a      	ldr	r3, [pc, #40]	@ (8007234 <USB_HostInit+0x184>)
 800720a:	4313      	orrs	r3, r2
 800720c:	687a      	ldr	r2, [r7, #4]
 800720e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007210:	7dfb      	ldrb	r3, [r7, #23]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3718      	adds	r7, #24
 8007216:	46bd      	mov	sp, r7
 8007218:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800721c:	b004      	add	sp, #16
 800721e:	4770      	bx	lr
 8007220:	40040000 	.word	0x40040000
 8007224:	01000200 	.word	0x01000200
 8007228:	00e00300 	.word	0x00e00300
 800722c:	00600080 	.word	0x00600080
 8007230:	004000e0 	.word	0x004000e0
 8007234:	a3200008 	.word	0xa3200008

08007238 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	68fa      	ldr	r2, [r7, #12]
 8007252:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007256:	f023 0303 	bic.w	r3, r3, #3
 800725a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	f003 0303 	and.w	r3, r3, #3
 800726a:	68f9      	ldr	r1, [r7, #12]
 800726c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007270:	4313      	orrs	r3, r2
 8007272:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007274:	78fb      	ldrb	r3, [r7, #3]
 8007276:	2b01      	cmp	r3, #1
 8007278:	d107      	bne.n	800728a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007280:	461a      	mov	r2, r3
 8007282:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007286:	6053      	str	r3, [r2, #4]
 8007288:	e00c      	b.n	80072a4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800728a:	78fb      	ldrb	r3, [r7, #3]
 800728c:	2b02      	cmp	r3, #2
 800728e:	d107      	bne.n	80072a0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007296:	461a      	mov	r2, r3
 8007298:	f241 7370 	movw	r3, #6000	@ 0x1770
 800729c:	6053      	str	r3, [r2, #4]
 800729e:	e001      	b.n	80072a4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80072a0:	2301      	movs	r3, #1
 80072a2:	e000      	b.n	80072a6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80072d2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80072e0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80072e2:	2064      	movs	r0, #100	@ 0x64
 80072e4:	f7fa fa18 	bl	8001718 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80072f4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80072f6:	200a      	movs	r0, #10
 80072f8:	f7fa fa0e 	bl	8001718 <HAL_Delay>

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3710      	adds	r7, #16
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}

08007306 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007316:	2300      	movs	r3, #0
 8007318:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800732a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007332:	2b00      	cmp	r3, #0
 8007334:	d109      	bne.n	800734a <USB_DriveVbus+0x44>
 8007336:	78fb      	ldrb	r3, [r7, #3]
 8007338:	2b01      	cmp	r3, #1
 800733a:	d106      	bne.n	800734a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007344:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007348:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007354:	d109      	bne.n	800736a <USB_DriveVbus+0x64>
 8007356:	78fb      	ldrb	r3, [r7, #3]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d106      	bne.n	800736a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007364:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007368:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800736a:	2300      	movs	r3, #0
}
 800736c:	4618      	mov	r0, r3
 800736e:	3714      	adds	r7, #20
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007384:	2300      	movs	r3, #0
 8007386:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	0c5b      	lsrs	r3, r3, #17
 8007396:	f003 0303 	and.w	r3, r3, #3
}
 800739a:	4618      	mov	r0, r3
 800739c:	3714      	adds	r7, #20
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr

080073a6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80073a6:	b480      	push	{r7}
 80073a8:	b085      	sub	sp, #20
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	b29b      	uxth	r3, r3
}
 80073bc:	4618      	mov	r0, r3
 80073be:	3714      	adds	r7, #20
 80073c0:	46bd      	mov	sp, r7
 80073c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c6:	4770      	bx	lr

080073c8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b088      	sub	sp, #32
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	4608      	mov	r0, r1
 80073d2:	4611      	mov	r1, r2
 80073d4:	461a      	mov	r2, r3
 80073d6:	4603      	mov	r3, r0
 80073d8:	70fb      	strb	r3, [r7, #3]
 80073da:	460b      	mov	r3, r1
 80073dc:	70bb      	strb	r3, [r7, #2]
 80073de:	4613      	mov	r3, r2
 80073e0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80073e2:	2300      	movs	r3, #0
 80073e4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f6:	461a      	mov	r2, r3
 80073f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073fc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80073fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007402:	2b03      	cmp	r3, #3
 8007404:	d87c      	bhi.n	8007500 <USB_HC_Init+0x138>
 8007406:	a201      	add	r2, pc, #4	@ (adr r2, 800740c <USB_HC_Init+0x44>)
 8007408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800740c:	0800741d 	.word	0x0800741d
 8007410:	080074c3 	.word	0x080074c3
 8007414:	0800741d 	.word	0x0800741d
 8007418:	08007485 	.word	0x08007485
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4413      	add	r3, r2
 8007424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007428:	461a      	mov	r2, r3
 800742a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800742e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007430:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	da10      	bge.n	800745a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007438:	78fb      	ldrb	r3, [r7, #3]
 800743a:	015a      	lsls	r2, r3, #5
 800743c:	693b      	ldr	r3, [r7, #16]
 800743e:	4413      	add	r3, r2
 8007440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	0151      	lsls	r1, r2, #5
 800744a:	693a      	ldr	r2, [r7, #16]
 800744c:	440a      	add	r2, r1
 800744e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007452:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007456:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007458:	e055      	b.n	8007506 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a6f      	ldr	r2, [pc, #444]	@ (800761c <USB_HC_Init+0x254>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d151      	bne.n	8007506 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	015a      	lsls	r2, r3, #5
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	4413      	add	r3, r2
 800746a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800746e:	68db      	ldr	r3, [r3, #12]
 8007470:	78fa      	ldrb	r2, [r7, #3]
 8007472:	0151      	lsls	r1, r2, #5
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	440a      	add	r2, r1
 8007478:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800747c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007480:	60d3      	str	r3, [r2, #12]
      break;
 8007482:	e040      	b.n	8007506 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007484:	78fb      	ldrb	r3, [r7, #3]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	4413      	add	r3, r2
 800748c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007490:	461a      	mov	r2, r3
 8007492:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007496:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007498:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800749c:	2b00      	cmp	r3, #0
 800749e:	da34      	bge.n	800750a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80074a0:	78fb      	ldrb	r3, [r7, #3]
 80074a2:	015a      	lsls	r2, r3, #5
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	4413      	add	r3, r2
 80074a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ac:	68db      	ldr	r3, [r3, #12]
 80074ae:	78fa      	ldrb	r2, [r7, #3]
 80074b0:	0151      	lsls	r1, r2, #5
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	440a      	add	r2, r1
 80074b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80074c0:	e023      	b.n	800750a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80074c2:	78fb      	ldrb	r3, [r7, #3]
 80074c4:	015a      	lsls	r2, r3, #5
 80074c6:	693b      	ldr	r3, [r7, #16]
 80074c8:	4413      	add	r3, r2
 80074ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ce:	461a      	mov	r2, r3
 80074d0:	f240 2325 	movw	r3, #549	@ 0x225
 80074d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80074d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da17      	bge.n	800750e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074ea:	68db      	ldr	r3, [r3, #12]
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80074f8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80074fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80074fe:	e006      	b.n	800750e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	77fb      	strb	r3, [r7, #31]
      break;
 8007504:	e004      	b.n	8007510 <USB_HC_Init+0x148>
      break;
 8007506:	bf00      	nop
 8007508:	e002      	b.n	8007510 <USB_HC_Init+0x148>
      break;
 800750a:	bf00      	nop
 800750c:	e000      	b.n	8007510 <USB_HC_Init+0x148>
      break;
 800750e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	015a      	lsls	r2, r3, #5
 8007514:	693b      	ldr	r3, [r7, #16]
 8007516:	4413      	add	r3, r2
 8007518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751c:	461a      	mov	r2, r3
 800751e:	2300      	movs	r3, #0
 8007520:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007522:	78fb      	ldrb	r3, [r7, #3]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	4413      	add	r3, r2
 800752a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	78fa      	ldrb	r2, [r7, #3]
 8007532:	0151      	lsls	r1, r2, #5
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	440a      	add	r2, r1
 8007538:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800753c:	f043 0302 	orr.w	r3, r3, #2
 8007540:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007548:	699a      	ldr	r2, [r3, #24]
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	f003 030f 	and.w	r3, r3, #15
 8007550:	2101      	movs	r1, #1
 8007552:	fa01 f303 	lsl.w	r3, r1, r3
 8007556:	6939      	ldr	r1, [r7, #16]
 8007558:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800755c:	4313      	orrs	r3, r2
 800755e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	699b      	ldr	r3, [r3, #24]
 8007564:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800756c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007570:	2b00      	cmp	r3, #0
 8007572:	da03      	bge.n	800757c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007574:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007578:	61bb      	str	r3, [r7, #24]
 800757a:	e001      	b.n	8007580 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800757c:	2300      	movs	r3, #0
 800757e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f7ff fef9 	bl	8007378 <USB_GetHostSpeed>
 8007586:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007588:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800758c:	2b02      	cmp	r3, #2
 800758e:	d106      	bne.n	800759e <USB_HC_Init+0x1d6>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d003      	beq.n	800759e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007596:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800759a:	617b      	str	r3, [r7, #20]
 800759c:	e001      	b.n	80075a2 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800759e:	2300      	movs	r3, #0
 80075a0:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075a2:	787b      	ldrb	r3, [r7, #1]
 80075a4:	059b      	lsls	r3, r3, #22
 80075a6:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075aa:	78bb      	ldrb	r3, [r7, #2]
 80075ac:	02db      	lsls	r3, r3, #11
 80075ae:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075b2:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075b4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075b8:	049b      	lsls	r3, r3, #18
 80075ba:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80075be:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80075c0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80075c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80075c6:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	431a      	orrs	r2, r3
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075d0:	78fa      	ldrb	r2, [r7, #3]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	693a      	ldr	r2, [r7, #16]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80075dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80075e0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80075e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d003      	beq.n	80075f2 <USB_HC_Init+0x22a>
 80075ea:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d10f      	bne.n	8007612 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80075f2:	78fb      	ldrb	r3, [r7, #3]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	78fa      	ldrb	r2, [r7, #3]
 8007602:	0151      	lsls	r1, r2, #5
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	440a      	add	r2, r1
 8007608:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800760c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007610:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007612:	7ffb      	ldrb	r3, [r7, #31]
}
 8007614:	4618      	mov	r0, r3
 8007616:	3720      	adds	r7, #32
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	40040000 	.word	0x40040000

08007620 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08c      	sub	sp, #48	@ 0x30
 8007624:	af02      	add	r7, sp, #8
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	4613      	mov	r3, r2
 800762c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	785b      	ldrb	r3, [r3, #1]
 8007636:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007638:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800763c:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	4a5d      	ldr	r2, [pc, #372]	@ (80077b8 <USB_HC_StartXfer+0x198>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d12f      	bne.n	80076a6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007646:	79fb      	ldrb	r3, [r7, #7]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d11c      	bne.n	8007686 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	7c9b      	ldrb	r3, [r3, #18]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <USB_HC_StartXfer+0x3c>
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	7c9b      	ldrb	r3, [r3, #18]
 8007658:	2b02      	cmp	r3, #2
 800765a:	d124      	bne.n	80076a6 <USB_HC_StartXfer+0x86>
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	799b      	ldrb	r3, [r3, #6]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d120      	bne.n	80076a6 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	6a3b      	ldr	r3, [r7, #32]
 800766a:	4413      	add	r3, r2
 800766c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	0151      	lsls	r1, r2, #5
 8007676:	6a3a      	ldr	r2, [r7, #32]
 8007678:	440a      	add	r2, r1
 800767a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800767e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007682:	60d3      	str	r3, [r2, #12]
 8007684:	e00f      	b.n	80076a6 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	791b      	ldrb	r3, [r3, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d10b      	bne.n	80076a6 <USB_HC_StartXfer+0x86>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	795b      	ldrb	r3, [r3, #5]
 8007692:	2b01      	cmp	r3, #1
 8007694:	d107      	bne.n	80076a6 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	785b      	ldrb	r3, [r3, #1]
 800769a:	4619      	mov	r1, r3
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 fb6b 	bl	8007d78 <USB_DoPing>
        return HAL_OK;
 80076a2:	2300      	movs	r3, #0
 80076a4:	e232      	b.n	8007b0c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	799b      	ldrb	r3, [r3, #6]
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d158      	bne.n	8007760 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80076ae:	2301      	movs	r3, #1
 80076b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	78db      	ldrb	r3, [r3, #3]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d007      	beq.n	80076ca <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076ba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	8a92      	ldrh	r2, [r2, #20]
 80076c0:	fb03 f202 	mul.w	r2, r3, r2
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	61da      	str	r2, [r3, #28]
 80076c8:	e07c      	b.n	80077c4 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	7c9b      	ldrb	r3, [r3, #18]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d130      	bne.n	8007734 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	2bbc      	cmp	r3, #188	@ 0xbc
 80076d8:	d918      	bls.n	800770c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	8a9b      	ldrh	r3, [r3, #20]
 80076de:	461a      	mov	r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	69da      	ldr	r2, [r3, #28]
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d003      	beq.n	80076fc <USB_HC_StartXfer+0xdc>
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	2b02      	cmp	r3, #2
 80076fa:	d103      	bne.n	8007704 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	2202      	movs	r2, #2
 8007700:	60da      	str	r2, [r3, #12]
 8007702:	e05f      	b.n	80077c4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	2201      	movs	r2, #1
 8007708:	60da      	str	r2, [r3, #12]
 800770a:	e05b      	b.n	80077c4 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	6a1a      	ldr	r2, [r3, #32]
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d007      	beq.n	800772c <USB_HC_StartXfer+0x10c>
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	68db      	ldr	r3, [r3, #12]
 8007720:	2b02      	cmp	r3, #2
 8007722:	d003      	beq.n	800772c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	2204      	movs	r2, #4
 8007728:	60da      	str	r2, [r3, #12]
 800772a:	e04b      	b.n	80077c4 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2203      	movs	r2, #3
 8007730:	60da      	str	r2, [r3, #12]
 8007732:	e047      	b.n	80077c4 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007734:	79fb      	ldrb	r3, [r7, #7]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d10d      	bne.n	8007756 <USB_HC_StartXfer+0x136>
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	8a92      	ldrh	r2, [r2, #20]
 8007742:	4293      	cmp	r3, r2
 8007744:	d907      	bls.n	8007756 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007746:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	8a92      	ldrh	r2, [r2, #20]
 800774c:	fb03 f202 	mul.w	r2, r3, r2
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	61da      	str	r2, [r3, #28]
 8007754:	e036      	b.n	80077c4 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	6a1a      	ldr	r2, [r3, #32]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	61da      	str	r2, [r3, #28]
 800775e:	e031      	b.n	80077c4 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	6a1b      	ldr	r3, [r3, #32]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d018      	beq.n	800779a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	6a1b      	ldr	r3, [r3, #32]
 800776c:	68ba      	ldr	r2, [r7, #8]
 800776e:	8a92      	ldrh	r2, [r2, #20]
 8007770:	4413      	add	r3, r2
 8007772:	3b01      	subs	r3, #1
 8007774:	68ba      	ldr	r2, [r7, #8]
 8007776:	8a92      	ldrh	r2, [r2, #20]
 8007778:	fbb3 f3f2 	udiv	r3, r3, r2
 800777c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800777e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007780:	8b7b      	ldrh	r3, [r7, #26]
 8007782:	429a      	cmp	r2, r3
 8007784:	d90b      	bls.n	800779e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007786:	8b7b      	ldrh	r3, [r7, #26]
 8007788:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800778a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	8a92      	ldrh	r2, [r2, #20]
 8007790:	fb03 f202 	mul.w	r2, r3, r2
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	61da      	str	r2, [r3, #28]
 8007798:	e001      	b.n	800779e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800779a:	2301      	movs	r3, #1
 800779c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	78db      	ldrb	r3, [r3, #3]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80077a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077a8:	68ba      	ldr	r2, [r7, #8]
 80077aa:	8a92      	ldrh	r2, [r2, #20]
 80077ac:	fb03 f202 	mul.w	r2, r3, r2
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	61da      	str	r2, [r3, #28]
 80077b4:	e006      	b.n	80077c4 <USB_HC_StartXfer+0x1a4>
 80077b6:	bf00      	nop
 80077b8:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	6a1a      	ldr	r2, [r3, #32]
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077cc:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80077ce:	04d9      	lsls	r1, r3, #19
 80077d0:	4ba3      	ldr	r3, [pc, #652]	@ (8007a60 <USB_HC_StartXfer+0x440>)
 80077d2:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077d4:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	7d9b      	ldrb	r3, [r3, #22]
 80077da:	075b      	lsls	r3, r3, #29
 80077dc:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077e0:	69f9      	ldr	r1, [r7, #28]
 80077e2:	0148      	lsls	r0, r1, #5
 80077e4:	6a39      	ldr	r1, [r7, #32]
 80077e6:	4401      	add	r1, r0
 80077e8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80077ec:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80077ee:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80077f0:	79fb      	ldrb	r3, [r7, #7]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d009      	beq.n	800780a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	6999      	ldr	r1, [r3, #24]
 80077fa:	69fb      	ldr	r3, [r7, #28]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	4413      	add	r3, r2
 8007802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007806:	460a      	mov	r2, r1
 8007808:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800780a:	6a3b      	ldr	r3, [r7, #32]
 800780c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f003 0301 	and.w	r3, r3, #1
 8007816:	2b00      	cmp	r3, #0
 8007818:	bf0c      	ite	eq
 800781a:	2301      	moveq	r3, #1
 800781c:	2300      	movne	r3, #0
 800781e:	b2db      	uxtb	r3, r3
 8007820:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007822:	69fb      	ldr	r3, [r7, #28]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	6a3b      	ldr	r3, [r7, #32]
 8007828:	4413      	add	r3, r2
 800782a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69fa      	ldr	r2, [r7, #28]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	6a3a      	ldr	r2, [r7, #32]
 8007836:	440a      	add	r2, r1
 8007838:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800783c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007840:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	4413      	add	r3, r2
 800784a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	7e7b      	ldrb	r3, [r7, #25]
 8007852:	075b      	lsls	r3, r3, #29
 8007854:	69f9      	ldr	r1, [r7, #28]
 8007856:	0148      	lsls	r0, r1, #5
 8007858:	6a39      	ldr	r1, [r7, #32]
 800785a:	4401      	add	r1, r0
 800785c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007860:	4313      	orrs	r3, r2
 8007862:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	799b      	ldrb	r3, [r3, #6]
 8007868:	2b01      	cmp	r3, #1
 800786a:	f040 80c3 	bne.w	80079f4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	7c5b      	ldrb	r3, [r3, #17]
 8007872:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007878:	4313      	orrs	r3, r2
 800787a:	69fa      	ldr	r2, [r7, #28]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	6a3a      	ldr	r2, [r7, #32]
 8007880:	440a      	add	r2, r1
 8007882:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800788a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	4413      	add	r3, r2
 8007894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	0151      	lsls	r1, r2, #5
 800789e:	6a3a      	ldr	r2, [r7, #32]
 80078a0:	440a      	add	r2, r1
 80078a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078a6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80078aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	79db      	ldrb	r3, [r3, #7]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d123      	bne.n	80078fc <USB_HC_StartXfer+0x2dc>
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	78db      	ldrb	r3, [r3, #3]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d11f      	bne.n	80078fc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	0151      	lsls	r1, r2, #5
 80078ce:	6a3a      	ldr	r2, [r7, #32]
 80078d0:	440a      	add	r2, r1
 80078d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078da:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	015a      	lsls	r2, r3, #5
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	4413      	add	r3, r2
 80078e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e8:	68db      	ldr	r3, [r3, #12]
 80078ea:	69fa      	ldr	r2, [r7, #28]
 80078ec:	0151      	lsls	r1, r2, #5
 80078ee:	6a3a      	ldr	r2, [r7, #32]
 80078f0:	440a      	add	r2, r1
 80078f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078fa:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	7c9b      	ldrb	r3, [r3, #18]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d003      	beq.n	800790c <USB_HC_StartXfer+0x2ec>
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	7c9b      	ldrb	r3, [r3, #18]
 8007908:	2b03      	cmp	r3, #3
 800790a:	d117      	bne.n	800793c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007910:	2b01      	cmp	r3, #1
 8007912:	d113      	bne.n	800793c <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	78db      	ldrb	r3, [r3, #3]
 8007918:	2b01      	cmp	r3, #1
 800791a:	d10f      	bne.n	800793c <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800791c:	69fb      	ldr	r3, [r7, #28]
 800791e:	015a      	lsls	r2, r3, #5
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	4413      	add	r3, r2
 8007924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	0151      	lsls	r1, r2, #5
 800792e:	6a3a      	ldr	r2, [r7, #32]
 8007930:	440a      	add	r2, r1
 8007932:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007936:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800793a:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	7c9b      	ldrb	r3, [r3, #18]
 8007940:	2b01      	cmp	r3, #1
 8007942:	d162      	bne.n	8007a0a <USB_HC_StartXfer+0x3ea>
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d15e      	bne.n	8007a0a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	68db      	ldr	r3, [r3, #12]
 8007950:	3b01      	subs	r3, #1
 8007952:	2b03      	cmp	r3, #3
 8007954:	d858      	bhi.n	8007a08 <USB_HC_StartXfer+0x3e8>
 8007956:	a201      	add	r2, pc, #4	@ (adr r2, 800795c <USB_HC_StartXfer+0x33c>)
 8007958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800795c:	0800796d 	.word	0x0800796d
 8007960:	0800798f 	.word	0x0800798f
 8007964:	080079b1 	.word	0x080079b1
 8007968:	080079d3 	.word	0x080079d3
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	015a      	lsls	r2, r3, #5
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	4413      	add	r3, r2
 8007974:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007978:	685b      	ldr	r3, [r3, #4]
 800797a:	69fa      	ldr	r2, [r7, #28]
 800797c:	0151      	lsls	r1, r2, #5
 800797e:	6a3a      	ldr	r2, [r7, #32]
 8007980:	440a      	add	r2, r1
 8007982:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007986:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800798a:	6053      	str	r3, [r2, #4]
          break;
 800798c:	e03d      	b.n	8007a0a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	4413      	add	r3, r2
 8007996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	69fa      	ldr	r2, [r7, #28]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	6a3a      	ldr	r2, [r7, #32]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079a8:	f043 030e 	orr.w	r3, r3, #14
 80079ac:	6053      	str	r3, [r2, #4]
          break;
 80079ae:	e02c      	b.n	8007a0a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80079b0:	69fb      	ldr	r3, [r7, #28]
 80079b2:	015a      	lsls	r2, r3, #5
 80079b4:	6a3b      	ldr	r3, [r7, #32]
 80079b6:	4413      	add	r3, r2
 80079b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	69fa      	ldr	r2, [r7, #28]
 80079c0:	0151      	lsls	r1, r2, #5
 80079c2:	6a3a      	ldr	r2, [r7, #32]
 80079c4:	440a      	add	r2, r1
 80079c6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80079ce:	6053      	str	r3, [r2, #4]
          break;
 80079d0:	e01b      	b.n	8007a0a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	6a3b      	ldr	r3, [r7, #32]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	0151      	lsls	r1, r2, #5
 80079e4:	6a3a      	ldr	r2, [r7, #32]
 80079e6:	440a      	add	r2, r1
 80079e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079ec:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80079f0:	6053      	str	r3, [r2, #4]
          break;
 80079f2:	e00a      	b.n	8007a0a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a00:	461a      	mov	r2, r3
 8007a02:	2300      	movs	r3, #0
 8007a04:	6053      	str	r3, [r2, #4]
 8007a06:	e000      	b.n	8007a0a <USB_HC_StartXfer+0x3ea>
          break;
 8007a08:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	6a3b      	ldr	r3, [r7, #32]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007a20:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	78db      	ldrb	r3, [r3, #3]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d004      	beq.n	8007a34 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007a30:	613b      	str	r3, [r7, #16]
 8007a32:	e003      	b.n	8007a3c <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007a3a:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a42:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	6a3b      	ldr	r3, [r7, #32]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a50:	461a      	mov	r2, r3
 8007a52:	693b      	ldr	r3, [r7, #16]
 8007a54:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007a56:	79fb      	ldrb	r3, [r7, #7]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d003      	beq.n	8007a64 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	e055      	b.n	8007b0c <USB_HC_StartXfer+0x4ec>
 8007a60:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	78db      	ldrb	r3, [r3, #3]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d14e      	bne.n	8007b0a <USB_HC_StartXfer+0x4ea>
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	6a1b      	ldr	r3, [r3, #32]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d04a      	beq.n	8007b0a <USB_HC_StartXfer+0x4ea>
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	79db      	ldrb	r3, [r3, #7]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d146      	bne.n	8007b0a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	7c9b      	ldrb	r3, [r3, #18]
 8007a80:	2b03      	cmp	r3, #3
 8007a82:	d831      	bhi.n	8007ae8 <USB_HC_StartXfer+0x4c8>
 8007a84:	a201      	add	r2, pc, #4	@ (adr r2, 8007a8c <USB_HC_StartXfer+0x46c>)
 8007a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8a:	bf00      	nop
 8007a8c:	08007a9d 	.word	0x08007a9d
 8007a90:	08007ac1 	.word	0x08007ac1
 8007a94:	08007a9d 	.word	0x08007a9d
 8007a98:	08007ac1 	.word	0x08007ac1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	6a1b      	ldr	r3, [r3, #32]
 8007aa0:	3303      	adds	r3, #3
 8007aa2:	089b      	lsrs	r3, r3, #2
 8007aa4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007aa6:	8afa      	ldrh	r2, [r7, #22]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d91c      	bls.n	8007aec <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	f043 0220 	orr.w	r2, r3, #32
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	619a      	str	r2, [r3, #24]
        }
        break;
 8007abe:	e015      	b.n	8007aec <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	3303      	adds	r3, #3
 8007ac6:	089b      	lsrs	r3, r3, #2
 8007ac8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007aca:	8afa      	ldrh	r2, [r7, #22]
 8007acc:	6a3b      	ldr	r3, [r7, #32]
 8007ace:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d90a      	bls.n	8007af0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	699b      	ldr	r3, [r3, #24]
 8007ade:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ae6:	e003      	b.n	8007af0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007ae8:	bf00      	nop
 8007aea:	e002      	b.n	8007af2 <USB_HC_StartXfer+0x4d2>
        break;
 8007aec:	bf00      	nop
 8007aee:	e000      	b.n	8007af2 <USB_HC_StartXfer+0x4d2>
        break;
 8007af0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6999      	ldr	r1, [r3, #24]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	785a      	ldrb	r2, [r3, #1]
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	2000      	movs	r0, #0
 8007b02:	9000      	str	r0, [sp, #0]
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7ff f9c9 	bl	8006e9c <USB_WritePacket>
  }

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3728      	adds	r7, #40	@ 0x28
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	b29b      	uxth	r3, r3
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3714      	adds	r7, #20
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007b36:	b480      	push	{r7}
 8007b38:	b089      	sub	sp, #36	@ 0x24
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007b46:	78fb      	ldrb	r3, [r7, #3]
 8007b48:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	0c9b      	lsrs	r3, r3, #18
 8007b5e:	f003 0303 	and.w	r3, r3, #3
 8007b62:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	0fdb      	lsrs	r3, r3, #31
 8007b74:	f003 0301 	and.w	r3, r3, #1
 8007b78:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	015a      	lsls	r2, r3, #5
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	4413      	add	r3, r2
 8007b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	0fdb      	lsrs	r3, r3, #31
 8007b8a:	f003 0301 	and.w	r3, r3, #1
 8007b8e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	689b      	ldr	r3, [r3, #8]
 8007b94:	f003 0320 	and.w	r3, r3, #32
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d10d      	bne.n	8007bb8 <USB_HC_Halt+0x82>
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d10a      	bne.n	8007bb8 <USB_HC_Halt+0x82>
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d005      	beq.n	8007bb4 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007ba8:	697b      	ldr	r3, [r7, #20]
 8007baa:	2b01      	cmp	r3, #1
 8007bac:	d002      	beq.n	8007bb4 <USB_HC_Halt+0x7e>
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	2b03      	cmp	r3, #3
 8007bb2:	d101      	bne.n	8007bb8 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	e0d8      	b.n	8007d6a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d002      	beq.n	8007bc4 <USB_HC_Halt+0x8e>
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d173      	bne.n	8007cac <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bc4:	69bb      	ldr	r3, [r7, #24]
 8007bc6:	015a      	lsls	r2, r3, #5
 8007bc8:	69fb      	ldr	r3, [r7, #28]
 8007bca:	4413      	add	r3, r2
 8007bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	69ba      	ldr	r2, [r7, #24]
 8007bd4:	0151      	lsls	r1, r2, #5
 8007bd6:	69fa      	ldr	r2, [r7, #28]
 8007bd8:	440a      	add	r2, r1
 8007bda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bde:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007be2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	f003 0320 	and.w	r3, r3, #32
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d14a      	bne.n	8007c86 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d133      	bne.n	8007c64 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007bfc:	69bb      	ldr	r3, [r7, #24]
 8007bfe:	015a      	lsls	r2, r3, #5
 8007c00:	69fb      	ldr	r3, [r7, #28]
 8007c02:	4413      	add	r3, r2
 8007c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	0151      	lsls	r1, r2, #5
 8007c0e:	69fa      	ldr	r2, [r7, #28]
 8007c10:	440a      	add	r2, r1
 8007c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c1a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c1c:	69bb      	ldr	r3, [r7, #24]
 8007c1e:	015a      	lsls	r2, r3, #5
 8007c20:	69fb      	ldr	r3, [r7, #28]
 8007c22:	4413      	add	r3, r2
 8007c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	69ba      	ldr	r2, [r7, #24]
 8007c2c:	0151      	lsls	r1, r2, #5
 8007c2e:	69fa      	ldr	r2, [r7, #28]
 8007c30:	440a      	add	r2, r1
 8007c32:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c3a:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	3301      	adds	r3, #1
 8007c40:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c48:	d82e      	bhi.n	8007ca8 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c4a:	69bb      	ldr	r3, [r7, #24]
 8007c4c:	015a      	lsls	r2, r3, #5
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	4413      	add	r3, r2
 8007c52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c60:	d0ec      	beq.n	8007c3c <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c62:	e081      	b.n	8007d68 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69ba      	ldr	r2, [r7, #24]
 8007c74:	0151      	lsls	r1, r2, #5
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	440a      	add	r2, r1
 8007c7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c82:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007c84:	e070      	b.n	8007d68 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c86:	69bb      	ldr	r3, [r7, #24]
 8007c88:	015a      	lsls	r2, r3, #5
 8007c8a:	69fb      	ldr	r3, [r7, #28]
 8007c8c:	4413      	add	r3, r2
 8007c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	69ba      	ldr	r2, [r7, #24]
 8007c96:	0151      	lsls	r1, r2, #5
 8007c98:	69fa      	ldr	r2, [r7, #28]
 8007c9a:	440a      	add	r2, r1
 8007c9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ca0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ca4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ca6:	e05f      	b.n	8007d68 <USB_HC_Halt+0x232>
            break;
 8007ca8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007caa:	e05d      	b.n	8007d68 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cac:	69bb      	ldr	r3, [r7, #24]
 8007cae:	015a      	lsls	r2, r3, #5
 8007cb0:	69fb      	ldr	r3, [r7, #28]
 8007cb2:	4413      	add	r3, r2
 8007cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	69ba      	ldr	r2, [r7, #24]
 8007cbc:	0151      	lsls	r1, r2, #5
 8007cbe:	69fa      	ldr	r2, [r7, #28]
 8007cc0:	440a      	add	r2, r1
 8007cc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cc6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007cca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007cd2:	691b      	ldr	r3, [r3, #16]
 8007cd4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d133      	bne.n	8007d44 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007cdc:	69bb      	ldr	r3, [r7, #24]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	69fb      	ldr	r3, [r7, #28]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69ba      	ldr	r2, [r7, #24]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	69fa      	ldr	r2, [r7, #28]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cf6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007cfa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69ba      	ldr	r2, [r7, #24]
 8007d0c:	0151      	lsls	r1, r2, #5
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	440a      	add	r2, r1
 8007d12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d1a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	3301      	adds	r3, #1
 8007d20:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d28:	d81d      	bhi.n	8007d66 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d2a:	69bb      	ldr	r3, [r7, #24]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	69fb      	ldr	r3, [r7, #28]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d40:	d0ec      	beq.n	8007d1c <USB_HC_Halt+0x1e6>
 8007d42:	e011      	b.n	8007d68 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	015a      	lsls	r2, r3, #5
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	4413      	add	r3, r2
 8007d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	69ba      	ldr	r2, [r7, #24]
 8007d54:	0151      	lsls	r1, r2, #5
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	440a      	add	r2, r1
 8007d5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	e000      	b.n	8007d68 <USB_HC_Halt+0x232>
          break;
 8007d66:	bf00      	nop
    }
  }

  return HAL_OK;
 8007d68:	2300      	movs	r3, #0
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3724      	adds	r7, #36	@ 0x24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr
	...

08007d78 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b087      	sub	sp, #28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	460b      	mov	r3, r1
 8007d82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007d88:	78fb      	ldrb	r3, [r7, #3]
 8007d8a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	04da      	lsls	r2, r3, #19
 8007d94:	4b15      	ldr	r3, [pc, #84]	@ (8007dec <USB_DoPing+0x74>)
 8007d96:	4013      	ands	r3, r2
 8007d98:	693a      	ldr	r2, [r7, #16]
 8007d9a:	0151      	lsls	r1, r2, #5
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	440a      	add	r2, r1
 8007da0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007da4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007da8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	015a      	lsls	r2, r3, #5
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	4413      	add	r3, r2
 8007db2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007dc0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dc2:	68bb      	ldr	r3, [r7, #8]
 8007dc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dc8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	371c      	adds	r7, #28
 8007de2:	46bd      	mov	sp, r7
 8007de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de8:	4770      	bx	lr
 8007dea:	bf00      	nop
 8007dec:	1ff80000 	.word	0x1ff80000

08007df0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b088      	sub	sp, #32
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007e00:	2300      	movs	r3, #0
 8007e02:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f7fe ff8c 	bl	8006d22 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e0a:	2110      	movs	r1, #16
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7fe ffe5 	bl	8006ddc <USB_FlushTxFifo>
 8007e12:	4603      	mov	r3, r0
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d001      	beq.n	8007e1c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f7ff f80f 	bl	8006e40 <USB_FlushRxFifo>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d001      	beq.n	8007e2c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	e01f      	b.n	8007e72 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e32:	69bb      	ldr	r3, [r7, #24]
 8007e34:	015a      	lsls	r2, r3, #5
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	4413      	add	r3, r2
 8007e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007e58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007e5a:	69bb      	ldr	r3, [r7, #24]
 8007e5c:	015a      	lsls	r2, r3, #5
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	4413      	add	r3, r2
 8007e62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e66:	461a      	mov	r2, r3
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	61bb      	str	r3, [r7, #24]
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b0f      	cmp	r3, #15
 8007e76:	d9dc      	bls.n	8007e32 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007e78:	2300      	movs	r3, #0
 8007e7a:	61bb      	str	r3, [r7, #24]
 8007e7c:	e034      	b.n	8007ee8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	015a      	lsls	r2, r3, #5
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	4413      	add	r3, r2
 8007e86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ea4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	015a      	lsls	r2, r3, #5
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	4413      	add	r3, r2
 8007eae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ec4:	d80c      	bhi.n	8007ee0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	015a      	lsls	r2, r3, #5
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	4413      	add	r3, r2
 8007ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ed8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007edc:	d0ec      	beq.n	8007eb8 <USB_StopHost+0xc8>
 8007ede:	e000      	b.n	8007ee2 <USB_StopHost+0xf2>
        break;
 8007ee0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007ee2:	69bb      	ldr	r3, [r7, #24]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	61bb      	str	r3, [r7, #24]
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b0f      	cmp	r3, #15
 8007eec:	d9c7      	bls.n	8007e7e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007efa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007f02:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7fe fefb 	bl	8006d00 <USB_EnableGlobalInt>

  return ret;
 8007f0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3720      	adds	r7, #32
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b089      	sub	sp, #36	@ 0x24
 8007f18:	af04      	add	r7, sp, #16
 8007f1a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	2202      	movs	r2, #2
 8007f20:	2102      	movs	r1, #2
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f000 fcd7 	bl	80088d6 <USBH_FindInterface>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f2c:	7bfb      	ldrb	r3, [r7, #15]
 8007f2e:	2bff      	cmp	r3, #255	@ 0xff
 8007f30:	d002      	beq.n	8007f38 <USBH_CDC_InterfaceInit+0x24>
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d901      	bls.n	8007f3c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f38:	2302      	movs	r3, #2
 8007f3a:	e13d      	b.n	80081b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007f3c:	7bfb      	ldrb	r3, [r7, #15]
 8007f3e:	4619      	mov	r1, r3
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f000 fcac 	bl	800889e <USBH_SelectInterface>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007f4a:	7bbb      	ldrb	r3, [r7, #14]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007f50:	2302      	movs	r3, #2
 8007f52:	e131      	b.n	80081b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007f5a:	2050      	movs	r0, #80	@ 0x50
 8007f5c:	f005 f894 	bl	800d088 <malloc>
 8007f60:	4603      	mov	r3, r0
 8007f62:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f6a:	69db      	ldr	r3, [r3, #28]
 8007f6c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007f74:	2302      	movs	r3, #2
 8007f76:	e11f      	b.n	80081b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007f78:	2250      	movs	r2, #80	@ 0x50
 8007f7a:	2100      	movs	r1, #0
 8007f7c:	68b8      	ldr	r0, [r7, #8]
 8007f7e:	f005 f941 	bl	800d204 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f82:	7bfb      	ldrb	r3, [r7, #15]
 8007f84:	687a      	ldr	r2, [r7, #4]
 8007f86:	211a      	movs	r1, #26
 8007f88:	fb01 f303 	mul.w	r3, r1, r3
 8007f8c:	4413      	add	r3, r2
 8007f8e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f92:	781b      	ldrb	r3, [r3, #0]
 8007f94:	b25b      	sxtb	r3, r3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	da15      	bge.n	8007fc6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	211a      	movs	r1, #26
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007faa:	781a      	ldrb	r2, [r3, #0]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	211a      	movs	r1, #26
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	4413      	add	r3, r2
 8007fbc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007fc0:	881a      	ldrh	r2, [r3, #0]
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	785b      	ldrb	r3, [r3, #1]
 8007fca:	4619      	mov	r1, r3
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f002 fa1c 	bl	800a40a <USBH_AllocPipe>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	7819      	ldrb	r1, [r3, #0]
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	7858      	ldrb	r0, [r3, #1]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	8952      	ldrh	r2, [r2, #10]
 8007ff2:	9202      	str	r2, [sp, #8]
 8007ff4:	2203      	movs	r2, #3
 8007ff6:	9201      	str	r2, [sp, #4]
 8007ff8:	9300      	str	r3, [sp, #0]
 8007ffa:	4623      	mov	r3, r4
 8007ffc:	4602      	mov	r2, r0
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f002 f9d4 	bl	800a3ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	781b      	ldrb	r3, [r3, #0]
 8008008:	2200      	movs	r2, #0
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f004 ffb5 	bl	800cf7c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008012:	2300      	movs	r3, #0
 8008014:	2200      	movs	r2, #0
 8008016:	210a      	movs	r1, #10
 8008018:	6878      	ldr	r0, [r7, #4]
 800801a:	f000 fc5c 	bl	80088d6 <USBH_FindInterface>
 800801e:	4603      	mov	r3, r0
 8008020:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008022:	7bfb      	ldrb	r3, [r7, #15]
 8008024:	2bff      	cmp	r3, #255	@ 0xff
 8008026:	d002      	beq.n	800802e <USBH_CDC_InterfaceInit+0x11a>
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	2b01      	cmp	r3, #1
 800802c:	d901      	bls.n	8008032 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800802e:	2302      	movs	r3, #2
 8008030:	e0c2      	b.n	80081b8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	211a      	movs	r1, #26
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	b25b      	sxtb	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	da16      	bge.n	8008078 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	687a      	ldr	r2, [r7, #4]
 800804e:	211a      	movs	r1, #26
 8008050:	fb01 f303 	mul.w	r3, r1, r3
 8008054:	4413      	add	r3, r2
 8008056:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800805a:	781a      	ldrb	r2, [r3, #0]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008060:	7bfb      	ldrb	r3, [r7, #15]
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	211a      	movs	r1, #26
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	4413      	add	r3, r2
 800806c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008070:	881a      	ldrh	r2, [r3, #0]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	835a      	strh	r2, [r3, #26]
 8008076:	e015      	b.n	80080a4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008078:	7bfb      	ldrb	r3, [r7, #15]
 800807a:	687a      	ldr	r2, [r7, #4]
 800807c:	211a      	movs	r1, #26
 800807e:	fb01 f303 	mul.w	r3, r1, r3
 8008082:	4413      	add	r3, r2
 8008084:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008088:	781a      	ldrb	r2, [r3, #0]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800808e:	7bfb      	ldrb	r3, [r7, #15]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	211a      	movs	r1, #26
 8008094:	fb01 f303 	mul.w	r3, r1, r3
 8008098:	4413      	add	r3, r2
 800809a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800809e:	881a      	ldrh	r2, [r3, #0]
 80080a0:	68bb      	ldr	r3, [r7, #8]
 80080a2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80080a4:	7bfb      	ldrb	r3, [r7, #15]
 80080a6:	687a      	ldr	r2, [r7, #4]
 80080a8:	211a      	movs	r1, #26
 80080aa:	fb01 f303 	mul.w	r3, r1, r3
 80080ae:	4413      	add	r3, r2
 80080b0:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	b25b      	sxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	da16      	bge.n	80080ea <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80080bc:	7bfb      	ldrb	r3, [r7, #15]
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	211a      	movs	r1, #26
 80080c2:	fb01 f303 	mul.w	r3, r1, r3
 80080c6:	4413      	add	r3, r2
 80080c8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80080cc:	781a      	ldrb	r2, [r3, #0]
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80080d2:	7bfb      	ldrb	r3, [r7, #15]
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	211a      	movs	r1, #26
 80080d8:	fb01 f303 	mul.w	r3, r1, r3
 80080dc:	4413      	add	r3, r2
 80080de:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80080e2:	881a      	ldrh	r2, [r3, #0]
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	835a      	strh	r2, [r3, #26]
 80080e8:	e015      	b.n	8008116 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	211a      	movs	r1, #26
 80080f0:	fb01 f303 	mul.w	r3, r1, r3
 80080f4:	4413      	add	r3, r2
 80080f6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	68bb      	ldr	r3, [r7, #8]
 80080fe:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	211a      	movs	r1, #26
 8008106:	fb01 f303 	mul.w	r3, r1, r3
 800810a:	4413      	add	r3, r2
 800810c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008110:	881a      	ldrh	r2, [r3, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008116:	68bb      	ldr	r3, [r7, #8]
 8008118:	7b9b      	ldrb	r3, [r3, #14]
 800811a:	4619      	mov	r1, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f002 f974 	bl	800a40a <USBH_AllocPipe>
 8008122:	4603      	mov	r3, r0
 8008124:	461a      	mov	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	7bdb      	ldrb	r3, [r3, #15]
 800812e:	4619      	mov	r1, r3
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f002 f96a 	bl	800a40a <USBH_AllocPipe>
 8008136:	4603      	mov	r3, r0
 8008138:	461a      	mov	r2, r3
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	7b59      	ldrb	r1, [r3, #13]
 8008142:	68bb      	ldr	r3, [r7, #8]
 8008144:	7b98      	ldrb	r0, [r3, #14]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008152:	68ba      	ldr	r2, [r7, #8]
 8008154:	8b12      	ldrh	r2, [r2, #24]
 8008156:	9202      	str	r2, [sp, #8]
 8008158:	2202      	movs	r2, #2
 800815a:	9201      	str	r2, [sp, #4]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	4623      	mov	r3, r4
 8008160:	4602      	mov	r2, r0
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f002 f922 	bl	800a3ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	7b19      	ldrb	r1, [r3, #12]
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	7bd8      	ldrb	r0, [r3, #15]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800817c:	68ba      	ldr	r2, [r7, #8]
 800817e:	8b52      	ldrh	r2, [r2, #26]
 8008180:	9202      	str	r2, [sp, #8]
 8008182:	2202      	movs	r2, #2
 8008184:	9201      	str	r2, [sp, #4]
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4623      	mov	r3, r4
 800818a:	4602      	mov	r2, r0
 800818c:	6878      	ldr	r0, [r7, #4]
 800818e:	f002 f90d 	bl	800a3ac <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008192:	68bb      	ldr	r3, [r7, #8]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800819a:	68bb      	ldr	r3, [r7, #8]
 800819c:	7b5b      	ldrb	r3, [r3, #13]
 800819e:	2200      	movs	r2, #0
 80081a0:	4619      	mov	r1, r3
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f004 feea 	bl	800cf7c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	7b1b      	ldrb	r3, [r3, #12]
 80081ac:	2200      	movs	r2, #0
 80081ae:	4619      	mov	r1, r3
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f004 fee3 	bl	800cf7c <USBH_LL_SetToggle>

  return USBH_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	bd90      	pop	{r4, r7, pc}

080081c0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ce:	69db      	ldr	r3, [r3, #28]
 80081d0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d00e      	beq.n	80081f8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	4619      	mov	r1, r3
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f002 f902 	bl	800a3ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	4619      	mov	r1, r3
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f002 f92d 	bl	800a44c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	2200      	movs	r2, #0
 80081f6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	7b1b      	ldrb	r3, [r3, #12]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d00e      	beq.n	800821e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	7b1b      	ldrb	r3, [r3, #12]
 8008204:	4619      	mov	r1, r3
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f002 f8ef 	bl	800a3ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	7b1b      	ldrb	r3, [r3, #12]
 8008210:	4619      	mov	r1, r3
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f002 f91a 	bl	800a44c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	7b5b      	ldrb	r3, [r3, #13]
 8008222:	2b00      	cmp	r3, #0
 8008224:	d00e      	beq.n	8008244 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	7b5b      	ldrb	r3, [r3, #13]
 800822a:	4619      	mov	r1, r3
 800822c:	6878      	ldr	r0, [r7, #4]
 800822e:	f002 f8dc 	bl	800a3ea <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	7b5b      	ldrb	r3, [r3, #13]
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f002 f907 	bl	800a44c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	2200      	movs	r2, #0
 8008242:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800824a:	69db      	ldr	r3, [r3, #28]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d00b      	beq.n	8008268 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008256:	69db      	ldr	r3, [r3, #28]
 8008258:	4618      	mov	r0, r3
 800825a:	f004 ff1d 	bl	800d098 <free>
    phost->pActiveClass->pData = 0U;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008264:	2200      	movs	r2, #0
 8008266:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008268:	2300      	movs	r3, #0
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b084      	sub	sp, #16
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3340      	adds	r3, #64	@ 0x40
 8008288:	4619      	mov	r1, r3
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f8b1 	bl	80083f2 <GetLineCoding>
 8008290:	4603      	mov	r3, r0
 8008292:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008294:	7afb      	ldrb	r3, [r7, #11]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80082a0:	2102      	movs	r1, #2
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80082a6:	7afb      	ldrb	r3, [r7, #11]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80082b8:	2301      	movs	r3, #1
 80082ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d877      	bhi.n	80083c4 <USBH_CDC_Process+0x114>
 80082d4:	a201      	add	r2, pc, #4	@ (adr r2, 80082dc <USBH_CDC_Process+0x2c>)
 80082d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082da:	bf00      	nop
 80082dc:	080082f1 	.word	0x080082f1
 80082e0:	080082f7 	.word	0x080082f7
 80082e4:	08008327 	.word	0x08008327
 80082e8:	0800839b 	.word	0x0800839b
 80082ec:	080083a9 	.word	0x080083a9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80082f0:	2300      	movs	r3, #0
 80082f2:	73fb      	strb	r3, [r7, #15]
      break;
 80082f4:	e06d      	b.n	80083d2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 f897 	bl	8008430 <SetLineCoding>
 8008302:	4603      	mov	r3, r0
 8008304:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008306:	7bbb      	ldrb	r3, [r7, #14]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d104      	bne.n	8008316 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800830c:	68bb      	ldr	r3, [r7, #8]
 800830e:	2202      	movs	r2, #2
 8008310:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008314:	e058      	b.n	80083c8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008316:	7bbb      	ldrb	r3, [r7, #14]
 8008318:	2b01      	cmp	r3, #1
 800831a:	d055      	beq.n	80083c8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	2204      	movs	r2, #4
 8008320:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008324:	e050      	b.n	80083c8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008326:	68bb      	ldr	r3, [r7, #8]
 8008328:	3340      	adds	r3, #64	@ 0x40
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 f860 	bl	80083f2 <GetLineCoding>
 8008332:	4603      	mov	r3, r0
 8008334:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d126      	bne.n	800838a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800833c:	68bb      	ldr	r3, [r7, #8]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008344:	68bb      	ldr	r3, [r7, #8]
 8008346:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800834e:	791b      	ldrb	r3, [r3, #4]
 8008350:	429a      	cmp	r2, r3
 8008352:	d13b      	bne.n	80083cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800835e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008360:	429a      	cmp	r2, r3
 8008362:	d133      	bne.n	80083cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008364:	68bb      	ldr	r3, [r7, #8]
 8008366:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800836e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008370:	429a      	cmp	r2, r3
 8008372:	d12b      	bne.n	80083cc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800837c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800837e:	429a      	cmp	r2, r3
 8008380:	d124      	bne.n	80083cc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 f982 	bl	800868c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008388:	e020      	b.n	80083cc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800838a:	7bbb      	ldrb	r3, [r7, #14]
 800838c:	2b01      	cmp	r3, #1
 800838e:	d01d      	beq.n	80083cc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2204      	movs	r2, #4
 8008394:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008398:	e018      	b.n	80083cc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f867 	bl	800846e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f000 f8f6 	bl	8008592 <CDC_ProcessReception>
      break;
 80083a6:	e014      	b.n	80083d2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80083a8:	2100      	movs	r1, #0
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f001 f988 	bl	80096c0 <USBH_ClrFeature>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10a      	bne.n	80083d0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	2200      	movs	r2, #0
 80083be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80083c2:	e005      	b.n	80083d0 <USBH_CDC_Process+0x120>

    default:
      break;
 80083c4:	bf00      	nop
 80083c6:	e004      	b.n	80083d2 <USBH_CDC_Process+0x122>
      break;
 80083c8:	bf00      	nop
 80083ca:	e002      	b.n	80083d2 <USBH_CDC_Process+0x122>
      break;
 80083cc:	bf00      	nop
 80083ce:	e000      	b.n	80083d2 <USBH_CDC_Process+0x122>
      break;
 80083d0:	bf00      	nop

  }

  return status;
 80083d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3710      	adds	r7, #16
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80083dc:	b480      	push	{r7}
 80083de:	b083      	sub	sp, #12
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	370c      	adds	r7, #12
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80083f2:	b580      	push	{r7, lr}
 80083f4:	b082      	sub	sp, #8
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	22a1      	movs	r2, #161	@ 0xa1
 8008400:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2221      	movs	r2, #33	@ 0x21
 8008406:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2200      	movs	r2, #0
 800840c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2207      	movs	r2, #7
 8008418:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2207      	movs	r2, #7
 800841e:	4619      	mov	r1, r3
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f001 fc82 	bl	8009d2a <USBH_CtlReq>
 8008426:	4603      	mov	r3, r0
}
 8008428:	4618      	mov	r0, r3
 800842a:	3708      	adds	r7, #8
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	6078      	str	r0, [r7, #4]
 8008438:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2221      	movs	r2, #33	@ 0x21
 800843e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2220      	movs	r2, #32
 8008444:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2200      	movs	r2, #0
 800844a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2207      	movs	r2, #7
 8008456:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	2207      	movs	r2, #7
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f001 fc63 	bl	8009d2a <USBH_CtlReq>
 8008464:	4603      	mov	r3, r0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3708      	adds	r7, #8
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b086      	sub	sp, #24
 8008472:	af02      	add	r7, sp, #8
 8008474:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800847c:	69db      	ldr	r3, [r3, #28]
 800847e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008480:	2300      	movs	r3, #0
 8008482:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800848a:	2b01      	cmp	r3, #1
 800848c:	d002      	beq.n	8008494 <CDC_ProcessTransmission+0x26>
 800848e:	2b02      	cmp	r3, #2
 8008490:	d023      	beq.n	80084da <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008492:	e07a      	b.n	800858a <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	8b12      	ldrh	r2, [r2, #24]
 800849c:	4293      	cmp	r3, r2
 800849e:	d90b      	bls.n	80084b8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	69d9      	ldr	r1, [r3, #28]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	8b1a      	ldrh	r2, [r3, #24]
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	7b5b      	ldrb	r3, [r3, #13]
 80084ac:	2001      	movs	r0, #1
 80084ae:	9000      	str	r0, [sp, #0]
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 ff38 	bl	800a326 <USBH_BulkSendData>
 80084b6:	e00b      	b.n	80084d0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80084c0:	b29a      	uxth	r2, r3
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	7b5b      	ldrb	r3, [r3, #13]
 80084c6:	2001      	movs	r0, #1
 80084c8:	9000      	str	r0, [sp, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 ff2b 	bl	800a326 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	2202      	movs	r2, #2
 80084d4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80084d8:	e057      	b.n	800858a <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	7b5b      	ldrb	r3, [r3, #13]
 80084de:	4619      	mov	r1, r3
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f004 fd21 	bl	800cf28 <USBH_LL_GetURBState>
 80084e6:	4603      	mov	r3, r0
 80084e8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80084ea:	7afb      	ldrb	r3, [r7, #11]
 80084ec:	2b01      	cmp	r3, #1
 80084ee:	d136      	bne.n	800855e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	8b12      	ldrh	r2, [r2, #24]
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d90e      	bls.n	800851a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	68fa      	ldr	r2, [r7, #12]
 8008502:	8b12      	ldrh	r2, [r2, #24]
 8008504:	1a9a      	subs	r2, r3, r2
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	69db      	ldr	r3, [r3, #28]
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	8b12      	ldrh	r2, [r2, #24]
 8008512:	441a      	add	r2, r3
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	61da      	str	r2, [r3, #28]
 8008518:	e002      	b.n	8008520 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008524:	2b00      	cmp	r3, #0
 8008526:	d004      	beq.n	8008532 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
 8008530:	e006      	b.n	8008540 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f892 	bl	8008664 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2204      	movs	r2, #4
 8008544:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008554:	2200      	movs	r2, #0
 8008556:	4619      	mov	r1, r3
 8008558:	f002 f874 	bl	800a644 <osMessagePut>
      break;
 800855c:	e014      	b.n	8008588 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800855e:	7afb      	ldrb	r3, [r7, #11]
 8008560:	2b02      	cmp	r3, #2
 8008562:	d111      	bne.n	8008588 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2204      	movs	r2, #4
 8008570:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008580:	2200      	movs	r2, #0
 8008582:	4619      	mov	r1, r3
 8008584:	f002 f85e 	bl	800a644 <osMessagePut>
      break;
 8008588:	bf00      	nop
  }
}
 800858a:	bf00      	nop
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008592:	b580      	push	{r7, lr}
 8008594:	b086      	sub	sp, #24
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80085a4:	2300      	movs	r3, #0
 80085a6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80085ae:	2b03      	cmp	r3, #3
 80085b0:	d002      	beq.n	80085b8 <CDC_ProcessReception+0x26>
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	d00e      	beq.n	80085d4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80085b6:	e051      	b.n	800865c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	6a19      	ldr	r1, [r3, #32]
 80085bc:	697b      	ldr	r3, [r7, #20]
 80085be:	8b5a      	ldrh	r2, [r3, #26]
 80085c0:	697b      	ldr	r3, [r7, #20]
 80085c2:	7b1b      	ldrb	r3, [r3, #12]
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f001 fed3 	bl	800a370 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2204      	movs	r2, #4
 80085ce:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80085d2:	e043      	b.n	800865c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	7b1b      	ldrb	r3, [r3, #12]
 80085d8:	4619      	mov	r1, r3
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f004 fca4 	bl	800cf28 <USBH_LL_GetURBState>
 80085e0:	4603      	mov	r3, r0
 80085e2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80085e4:	7cfb      	ldrb	r3, [r7, #19]
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d137      	bne.n	800865a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	7b1b      	ldrb	r3, [r3, #12]
 80085ee:	4619      	mov	r1, r3
 80085f0:	6878      	ldr	r0, [r7, #4]
 80085f2:	f004 fc07 	bl	800ce04 <USBH_LL_GetLastXferSize>
 80085f6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085fc:	68fa      	ldr	r2, [r7, #12]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d016      	beq.n	8008630 <CDC_ProcessReception+0x9e>
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	8b5b      	ldrh	r3, [r3, #26]
 8008606:	461a      	mov	r2, r3
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	4293      	cmp	r3, r2
 800860c:	d110      	bne.n	8008630 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	1ad2      	subs	r2, r2, r3
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	6a1a      	ldr	r2, [r3, #32]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	441a      	add	r2, r3
 8008622:	697b      	ldr	r3, [r7, #20]
 8008624:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	2203      	movs	r2, #3
 800862a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
 800862e:	e006      	b.n	800863e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008630:	697b      	ldr	r3, [r7, #20]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 f81d 	bl	8008678 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2204      	movs	r2, #4
 8008642:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008652:	2200      	movs	r2, #0
 8008654:	4619      	mov	r1, r3
 8008656:	f001 fff5 	bl	800a644 <osMessagePut>
      break;
 800865a:	bf00      	nop
  }
}
 800865c:	bf00      	nop
 800865e:	3718      	adds	r7, #24
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008664:	b480      	push	{r7}
 8008666:	b083      	sub	sp, #12
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800866c:	bf00      	nop
 800866e:	370c      	adds	r7, #12
 8008670:	46bd      	mov	sp, r7
 8008672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008676:	4770      	bx	lr

08008678 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008678:	b480      	push	{r7}
 800867a:	b083      	sub	sp, #12
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008680:	bf00      	nop
 8008682:	370c      	adds	r7, #12
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800868c:	b480      	push	{r7}
 800868e:	b083      	sub	sp, #12
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008694:	bf00      	nop
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80086a0:	b5b0      	push	{r4, r5, r7, lr}
 80086a2:	b090      	sub	sp, #64	@ 0x40
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	60f8      	str	r0, [r7, #12]
 80086a8:	60b9      	str	r1, [r7, #8]
 80086aa:	4613      	mov	r3, r2
 80086ac:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80086b4:	2302      	movs	r3, #2
 80086b6:	e04d      	b.n	8008754 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	79fa      	ldrb	r2, [r7, #7]
 80086bc:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80086d0:	68f8      	ldr	r0, [r7, #12]
 80086d2:	f000 f847 	bl	8008764 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2200      	movs	r2, #0
 80086e2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d003      	beq.n	8008704 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8008704:	4b15      	ldr	r3, [pc, #84]	@ (800875c <USBH_Init+0xbc>)
 8008706:	f107 0430 	add.w	r4, r7, #48	@ 0x30
 800870a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800870c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8008710:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008714:	2100      	movs	r1, #0
 8008716:	4618      	mov	r0, r3
 8008718:	f001 ff6b 	bl	800a5f2 <osMessageCreate>
 800871c:	4602      	mov	r2, r0
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	f8c3 23d8 	str.w	r2, [r3, #984]	@ 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8008724:	4b0e      	ldr	r3, [pc, #56]	@ (8008760 <USBH_Init+0xc0>)
 8008726:	f107 0414 	add.w	r4, r7, #20
 800872a:	461d      	mov	r5, r3
 800872c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800872e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008730:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008734:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 8008738:	f107 0314 	add.w	r3, r7, #20
 800873c:	68f9      	ldr	r1, [r7, #12]
 800873e:	4618      	mov	r0, r3
 8008740:	f001 fef7 	bl	800a532 <osThreadCreate>
 8008744:	4602      	mov	r2, r0
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f8c3 23dc 	str.w	r2, [r3, #988]	@ 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800874c:	68f8      	ldr	r0, [r7, #12]
 800874e:	f004 fa9b 	bl	800cc88 <USBH_LL_Init>

  return USBH_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3740      	adds	r7, #64	@ 0x40
 8008758:	46bd      	mov	sp, r7
 800875a:	bdb0      	pop	{r4, r5, r7, pc}
 800875c:	0800d380 	.word	0x0800d380
 8008760:	0800d39c 	.word	0x0800d39c

08008764 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800876c:	2300      	movs	r3, #0
 800876e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008770:	2300      	movs	r3, #0
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e009      	b.n	800878a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008776:	687a      	ldr	r2, [r7, #4]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	33e0      	adds	r3, #224	@ 0xe0
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	4413      	add	r3, r2
 8008780:	2200      	movs	r2, #0
 8008782:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3301      	adds	r3, #1
 8008788:	60fb      	str	r3, [r7, #12]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	2b0f      	cmp	r3, #15
 800878e:	d9f2      	bls.n	8008776 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008790:	2300      	movs	r3, #0
 8008792:	60fb      	str	r3, [r7, #12]
 8008794:	e009      	b.n	80087aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4413      	add	r3, r2
 800879c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80087a0:	2200      	movs	r2, #0
 80087a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80087b0:	d3f1      	bcc.n	8008796 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2200      	movs	r2, #0
 80087bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2201      	movs	r2, #1
 80087c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2240      	movs	r2, #64	@ 0x40
 80087d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2200      	movs	r2, #0
 80087dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2200      	movs	r2, #0
 80087e2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2201      	movs	r2, #1
 80087ea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2200      	movs	r2, #0
 80087f2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2200      	movs	r2, #0
 80087fa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	331c      	adds	r3, #28
 8008802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008806:	2100      	movs	r1, #0
 8008808:	4618      	mov	r0, r3
 800880a:	f004 fcfb 	bl	800d204 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008814:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008818:	2100      	movs	r1, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f004 fcf2 	bl	800d204 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008826:	2212      	movs	r2, #18
 8008828:	2100      	movs	r1, #0
 800882a:	4618      	mov	r0, r3
 800882c:	f004 fcea 	bl	800d204 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008836:	223e      	movs	r2, #62	@ 0x3e
 8008838:	2100      	movs	r1, #0
 800883a:	4618      	mov	r0, r3
 800883c:	f004 fce2 	bl	800d204 <memset>

  return USBH_OK;
 8008840:	2300      	movs	r3, #0
}
 8008842:	4618      	mov	r0, r3
 8008844:	3710      	adds	r7, #16
 8008846:	46bd      	mov	sp, r7
 8008848:	bd80      	pop	{r7, pc}

0800884a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800884a:	b480      	push	{r7}
 800884c:	b085      	sub	sp, #20
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008854:	2300      	movs	r3, #0
 8008856:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d016      	beq.n	800888c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10e      	bne.n	8008886 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800886e:	1c59      	adds	r1, r3, #1
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	33de      	adds	r3, #222	@ 0xde
 800887a:	6839      	ldr	r1, [r7, #0]
 800887c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008880:	2300      	movs	r3, #0
 8008882:	73fb      	strb	r3, [r7, #15]
 8008884:	e004      	b.n	8008890 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008886:	2302      	movs	r3, #2
 8008888:	73fb      	strb	r3, [r7, #15]
 800888a:	e001      	b.n	8008890 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800888c:	2302      	movs	r3, #2
 800888e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008890:	7bfb      	ldrb	r3, [r7, #15]
}
 8008892:	4618      	mov	r0, r3
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr

0800889e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800889e:	b480      	push	{r7}
 80088a0:	b085      	sub	sp, #20
 80088a2:	af00      	add	r7, sp, #0
 80088a4:	6078      	str	r0, [r7, #4]
 80088a6:	460b      	mov	r3, r1
 80088a8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80088b4:	78fa      	ldrb	r2, [r7, #3]
 80088b6:	429a      	cmp	r2, r3
 80088b8:	d204      	bcs.n	80088c4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	78fa      	ldrb	r2, [r7, #3]
 80088be:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80088c2:	e001      	b.n	80088c8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80088c4:	2302      	movs	r3, #2
 80088c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3714      	adds	r7, #20
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b087      	sub	sp, #28
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	4608      	mov	r0, r1
 80088e0:	4611      	mov	r1, r2
 80088e2:	461a      	mov	r2, r3
 80088e4:	4603      	mov	r3, r0
 80088e6:	70fb      	strb	r3, [r7, #3]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70bb      	strb	r3, [r7, #2]
 80088ec:	4613      	mov	r3, r2
 80088ee:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80088f4:	2300      	movs	r3, #0
 80088f6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80088fe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008900:	e025      	b.n	800894e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008902:	7dfb      	ldrb	r3, [r7, #23]
 8008904:	221a      	movs	r2, #26
 8008906:	fb02 f303 	mul.w	r3, r2, r3
 800890a:	3308      	adds	r3, #8
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	3302      	adds	r3, #2
 8008912:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	795b      	ldrb	r3, [r3, #5]
 8008918:	78fa      	ldrb	r2, [r7, #3]
 800891a:	429a      	cmp	r2, r3
 800891c:	d002      	beq.n	8008924 <USBH_FindInterface+0x4e>
 800891e:	78fb      	ldrb	r3, [r7, #3]
 8008920:	2bff      	cmp	r3, #255	@ 0xff
 8008922:	d111      	bne.n	8008948 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008928:	78ba      	ldrb	r2, [r7, #2]
 800892a:	429a      	cmp	r2, r3
 800892c:	d002      	beq.n	8008934 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800892e:	78bb      	ldrb	r3, [r7, #2]
 8008930:	2bff      	cmp	r3, #255	@ 0xff
 8008932:	d109      	bne.n	8008948 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008938:	787a      	ldrb	r2, [r7, #1]
 800893a:	429a      	cmp	r2, r3
 800893c:	d002      	beq.n	8008944 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800893e:	787b      	ldrb	r3, [r7, #1]
 8008940:	2bff      	cmp	r3, #255	@ 0xff
 8008942:	d101      	bne.n	8008948 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	e006      	b.n	8008956 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008948:	7dfb      	ldrb	r3, [r7, #23]
 800894a:	3301      	adds	r3, #1
 800894c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800894e:	7dfb      	ldrb	r3, [r7, #23]
 8008950:	2b01      	cmp	r3, #1
 8008952:	d9d6      	bls.n	8008902 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008954:	23ff      	movs	r3, #255	@ 0xff
}
 8008956:	4618      	mov	r0, r3
 8008958:	371c      	adds	r7, #28
 800895a:	46bd      	mov	sp, r7
 800895c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008960:	4770      	bx	lr

08008962 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008962:	b580      	push	{r7, lr}
 8008964:	b082      	sub	sp, #8
 8008966:	af00      	add	r7, sp, #0
 8008968:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f004 f9d2 	bl	800cd14 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008970:	2101      	movs	r1, #1
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f004 faeb 	bl	800cf4e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
	...

08008984 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008984:	b580      	push	{r7, lr}
 8008986:	b088      	sub	sp, #32
 8008988:	af04      	add	r7, sp, #16
 800898a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800898c:	2302      	movs	r3, #2
 800898e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d102      	bne.n	80089a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2203      	movs	r2, #3
 80089a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	781b      	ldrb	r3, [r3, #0]
 80089aa:	b2db      	uxtb	r3, r3
 80089ac:	2b0b      	cmp	r3, #11
 80089ae:	f200 8244 	bhi.w	8008e3a <USBH_Process+0x4b6>
 80089b2:	a201      	add	r2, pc, #4	@ (adr r2, 80089b8 <USBH_Process+0x34>)
 80089b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089b8:	080089e9 	.word	0x080089e9
 80089bc:	08008a37 	.word	0x08008a37
 80089c0:	08008abb 	.word	0x08008abb
 80089c4:	08008db9 	.word	0x08008db9
 80089c8:	08008e3b 	.word	0x08008e3b
 80089cc:	08008b77 	.word	0x08008b77
 80089d0:	08008d43 	.word	0x08008d43
 80089d4:	08008bc9 	.word	0x08008bc9
 80089d8:	08008c05 	.word	0x08008c05
 80089dc:	08008c3d 	.word	0x08008c3d
 80089e0:	08008c9b 	.word	0x08008c9b
 80089e4:	08008da1 	.word	0x08008da1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80089ee:	b2db      	uxtb	r3, r3
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f000 8224 	beq.w	8008e3e <USBH_Process+0x4ba>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2201      	movs	r2, #1
 80089fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80089fc:	20c8      	movs	r0, #200	@ 0xc8
 80089fe:	f004 faf0 	bl	800cfe2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f004 f9e3 	bl	800cdce <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2201      	movs	r2, #1
 8008a1c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f001 fe08 	bl	800a644 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008a34:	e203      	b.n	8008e3e <USBH_Process+0x4ba>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d107      	bne.n	8008a50 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2200      	movs	r2, #0
 8008a44:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	701a      	strb	r2, [r3, #0]
 8008a4e:	e025      	b.n	8008a9c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008a56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a5a:	d914      	bls.n	8008a86 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008a62:	3301      	adds	r3, #1
 8008a64:	b2da      	uxtb	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008a72:	2b03      	cmp	r3, #3
 8008a74:	d903      	bls.n	8008a7e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	220d      	movs	r2, #13
 8008a7a:	701a      	strb	r2, [r3, #0]
 8008a7c:	e00e      	b.n	8008a9c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	701a      	strb	r2, [r3, #0]
 8008a84:	e00a      	b.n	8008a9c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008a8c:	f103 020a 	add.w	r2, r3, #10
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008a96:	200a      	movs	r0, #10
 8008a98:	f004 faa3 	bl	800cfe2 <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	4619      	mov	r1, r3
 8008ab4:	f001 fdc6 	bl	800a644 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ab8:	e1c8      	b.n	8008e4c <USBH_Process+0x4c8>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d005      	beq.n	8008ad0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008aca:	2104      	movs	r1, #4
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008ad0:	2064      	movs	r0, #100	@ 0x64
 8008ad2:	f004 fa86 	bl	800cfe2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f004 f952 	bl	800cd80 <USBH_LL_GetSpeed>
 8008adc:	4603      	mov	r3, r0
 8008ade:	461a      	mov	r2, r3
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2205      	movs	r2, #5
 8008aea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f001 fc8b 	bl	800a40a <USBH_AllocPipe>
 8008af4:	4603      	mov	r3, r0
 8008af6:	461a      	mov	r2, r3
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008afc:	2180      	movs	r1, #128	@ 0x80
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f001 fc83 	bl	800a40a <USBH_AllocPipe>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	7919      	ldrb	r1, [r3, #4]
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008b20:	9202      	str	r2, [sp, #8]
 8008b22:	2200      	movs	r2, #0
 8008b24:	9201      	str	r2, [sp, #4]
 8008b26:	9300      	str	r3, [sp, #0]
 8008b28:	4603      	mov	r3, r0
 8008b2a:	2280      	movs	r2, #128	@ 0x80
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f001 fc3d 	bl	800a3ac <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	7959      	ldrb	r1, [r3, #5]
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008b42:	687a      	ldr	r2, [r7, #4]
 8008b44:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008b46:	9202      	str	r2, [sp, #8]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	9201      	str	r2, [sp, #4]
 8008b4c:	9300      	str	r3, [sp, #0]
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2200      	movs	r2, #0
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f001 fc2a 	bl	800a3ac <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	4619      	mov	r1, r3
 8008b70:	f001 fd68 	bl	800a644 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b74:	e16a      	b.n	8008e4c <USBH_Process+0x4c8>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f96e 	bl	8008e58 <USBH_HandleEnum>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	b2db      	uxtb	r3, r3
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f040 815c 	bne.w	8008e42 <USBH_Process+0x4be>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d103      	bne.n	8008ba4 <USBH_Process+0x220>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2208      	movs	r2, #8
 8008ba0:	701a      	strb	r2, [r3, #0]
 8008ba2:	e002      	b.n	8008baa <USBH_Process+0x226>
        }
        else
        {
          phost->gState = HOST_INPUT;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2207      	movs	r2, #7
 8008ba8:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2205      	movs	r2, #5
 8008bae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	4619      	mov	r1, r3
 8008bc2:	f001 fd3f 	bl	800a644 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008bc6:	e13c      	b.n	8008e42 <USBH_Process+0x4be>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	f000 8139 	beq.w	8008e46 <USBH_Process+0x4c2>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bda:	2101      	movs	r1, #1
 8008bdc:	6878      	ldr	r0, [r7, #4]
 8008bde:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2208      	movs	r2, #8
 8008be4:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2205      	movs	r2, #5
 8008bea:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	f001 fd21 	bl	800a644 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008c02:	e120      	b.n	8008e46 <USBH_Process+0x4c2>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f000 fd10 	bl	8009632 <USBH_SetCfg>
 8008c12:	4603      	mov	r3, r0
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d102      	bne.n	8008c1e <USBH_Process+0x29a>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2209      	movs	r2, #9
 8008c1c:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	2201      	movs	r2, #1
 8008c22:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008c32:	2200      	movs	r2, #0
 8008c34:	4619      	mov	r1, r3
 8008c36:	f001 fd05 	bl	800a644 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c3a:	e107      	b.n	8008e4c <USBH_Process+0x4c8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008c42:	f003 0320 	and.w	r3, r3, #32
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d015      	beq.n	8008c76 <USBH_Process+0x2f2>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008c4a:	2101      	movs	r1, #1
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 fd13 	bl	8009678 <USBH_SetFeature>
 8008c52:	4603      	mov	r3, r0
 8008c54:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d103      	bne.n	8008c66 <USBH_Process+0x2e2>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	220a      	movs	r2, #10
 8008c62:	701a      	strb	r2, [r3, #0]
 8008c64:	e00a      	b.n	8008c7c <USBH_Process+0x2f8>
        }
        else if (status == USBH_NOT_SUPPORTED)
 8008c66:	7bbb      	ldrb	r3, [r7, #14]
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	2b03      	cmp	r3, #3
 8008c6c:	d106      	bne.n	8008c7c <USBH_Process+0x2f8>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	220a      	movs	r2, #10
 8008c72:	701a      	strb	r2, [r3, #0]
 8008c74:	e002      	b.n	8008c7c <USBH_Process+0x2f8>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	220a      	movs	r2, #10
 8008c7a:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008c90:	2200      	movs	r2, #0
 8008c92:	4619      	mov	r1, r3
 8008c94:	f001 fcd6 	bl	800a644 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c98:	e0d8      	b.n	8008e4c <USBH_Process+0x4c8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d03f      	beq.n	8008d24 <USBH_Process+0x3a0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2200      	movs	r2, #0
 8008ca8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
 8008cb0:	e016      	b.n	8008ce0 <USBH_Process+0x35c>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008cb2:	7bfa      	ldrb	r2, [r7, #15]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	32de      	adds	r2, #222	@ 0xde
 8008cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbc:	791a      	ldrb	r2, [r3, #4]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d108      	bne.n	8008cda <USBH_Process+0x356>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008cc8:	7bfa      	ldrb	r2, [r7, #15]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	32de      	adds	r2, #222	@ 0xde
 8008cce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008cd8:	e005      	b.n	8008ce6 <USBH_Process+0x362>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008cda:	7bfb      	ldrb	r3, [r7, #15]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	73fb      	strb	r3, [r7, #15]
 8008ce0:	7bfb      	ldrb	r3, [r7, #15]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d0e5      	beq.n	8008cb2 <USBH_Process+0x32e>
          }
        }

        if (phost->pActiveClass != NULL)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d016      	beq.n	8008d1e <USBH_Process+0x39a>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	4798      	blx	r3
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d109      	bne.n	8008d16 <USBH_Process+0x392>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2206      	movs	r2, #6
 8008d06:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d0e:	2103      	movs	r1, #3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	4798      	blx	r3
 8008d14:	e006      	b.n	8008d24 <USBH_Process+0x3a0>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	220d      	movs	r2, #13
 8008d1a:	701a      	strb	r2, [r3, #0]
 8008d1c:	e002      	b.n	8008d24 <USBH_Process+0x3a0>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	220d      	movs	r2, #13
 8008d22:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2205      	movs	r2, #5
 8008d28:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008d38:	2200      	movs	r2, #0
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	f001 fc82 	bl	800a644 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d40:	e084      	b.n	8008e4c <USBH_Process+0x4c8>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d017      	beq.n	8008d7c <USBH_Process+0x3f8>
      {
        status = phost->pActiveClass->Requests(phost);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d52:	691b      	ldr	r3, [r3, #16]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	4798      	blx	r3
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d103      	bne.n	8008d6c <USBH_Process+0x3e8>
        {
          phost->gState = HOST_CLASS;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	220b      	movs	r2, #11
 8008d68:	701a      	strb	r2, [r3, #0]
 8008d6a:	e00a      	b.n	8008d82 <USBH_Process+0x3fe>
        }
        else if (status == USBH_FAIL)
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d106      	bne.n	8008d82 <USBH_Process+0x3fe>
        {
          phost->gState = HOST_ABORT_STATE;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	220d      	movs	r2, #13
 8008d78:	701a      	strb	r2, [r3, #0]
 8008d7a:	e002      	b.n	8008d82 <USBH_Process+0x3fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	220d      	movs	r2, #13
 8008d80:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2205      	movs	r2, #5
 8008d86:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008d96:	2200      	movs	r2, #0
 8008d98:	4619      	mov	r1, r3
 8008d9a:	f001 fc53 	bl	800a644 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d9e:	e055      	b.n	8008e4c <USBH_Process+0x4c8>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d04f      	beq.n	8008e4a <USBH_Process+0x4c6>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	4798      	blx	r3
      }
      break;
 8008db6:	e048      	b.n	8008e4a <USBH_Process+0x4c6>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2200      	movs	r2, #0
 8008dbc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff fccf 	bl	8008764 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d009      	beq.n	8008de4 <USBH_Process+0x460>
      {
        phost->pActiveClass->DeInit(phost);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <USBH_Process+0x476>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008df4:	2105      	movs	r1, #5
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d107      	bne.n	8008e16 <USBH_Process+0x492>
      {
        phost->device.is_ReEnumerated = 0U;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7ff fda7 	bl	8008962 <USBH_Start>
 8008e14:	e002      	b.n	8008e1c <USBH_Process+0x498>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f003 ff7c 	bl	800cd14 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8008e30:	2200      	movs	r2, #0
 8008e32:	4619      	mov	r1, r3
 8008e34:	f001 fc06 	bl	800a644 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e38:	e008      	b.n	8008e4c <USBH_Process+0x4c8>

    case HOST_ABORT_STATE:
    default :
      break;
 8008e3a:	bf00      	nop
 8008e3c:	e006      	b.n	8008e4c <USBH_Process+0x4c8>
      break;
 8008e3e:	bf00      	nop
 8008e40:	e004      	b.n	8008e4c <USBH_Process+0x4c8>
      break;
 8008e42:	bf00      	nop
 8008e44:	e002      	b.n	8008e4c <USBH_Process+0x4c8>
    break;
 8008e46:	bf00      	nop
 8008e48:	e000      	b.n	8008e4c <USBH_Process+0x4c8>
      break;
 8008e4a:	bf00      	nop
  }
  return USBH_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3710      	adds	r7, #16
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop

08008e58 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b088      	sub	sp, #32
 8008e5c:	af04      	add	r7, sp, #16
 8008e5e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008e60:	2301      	movs	r3, #1
 8008e62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008e64:	2301      	movs	r3, #1
 8008e66:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	785b      	ldrb	r3, [r3, #1]
 8008e6c:	2b07      	cmp	r3, #7
 8008e6e:	f200 8204 	bhi.w	800927a <USBH_HandleEnum+0x422>
 8008e72:	a201      	add	r2, pc, #4	@ (adr r2, 8008e78 <USBH_HandleEnum+0x20>)
 8008e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e78:	08008e99 	.word	0x08008e99
 8008e7c:	08008f53 	.word	0x08008f53
 8008e80:	08008fbd 	.word	0x08008fbd
 8008e84:	08009047 	.word	0x08009047
 8008e88:	080090b1 	.word	0x080090b1
 8008e8c:	08009121 	.word	0x08009121
 8008e90:	080091bd 	.word	0x080091bd
 8008e94:	0800923b 	.word	0x0800923b
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008e98:	2108      	movs	r1, #8
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f000 fae6 	bl	800946c <USBH_Get_DevDesc>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d12e      	bne.n	8008f08 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7919      	ldrb	r1, [r3, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ece:	9202      	str	r2, [sp, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	9201      	str	r2, [sp, #4]
 8008ed4:	9300      	str	r3, [sp, #0]
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2280      	movs	r2, #128	@ 0x80
 8008eda:	6878      	ldr	r0, [r7, #4]
 8008edc:	f001 fa66 	bl	800a3ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	7959      	ldrb	r1, [r3, #5]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008ef4:	9202      	str	r2, [sp, #8]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	9201      	str	r2, [sp, #4]
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	4603      	mov	r3, r0
 8008efe:	2200      	movs	r2, #0
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f001 fa53 	bl	800a3ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008f06:	e1ba      	b.n	800927e <USBH_HandleEnum+0x426>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
 8008f0a:	2b03      	cmp	r3, #3
 8008f0c:	f040 81b7 	bne.w	800927e <USBH_HandleEnum+0x426>
        phost->device.EnumCnt++;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f16:	3301      	adds	r3, #1
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f26:	2b03      	cmp	r3, #3
 8008f28:	d903      	bls.n	8008f32 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	220d      	movs	r2, #13
 8008f2e:	701a      	strb	r2, [r3, #0]
      break;
 8008f30:	e1a5      	b.n	800927e <USBH_HandleEnum+0x426>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	795b      	ldrb	r3, [r3, #5]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 fa87 	bl	800a44c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	791b      	ldrb	r3, [r3, #4]
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f001 fa81 	bl	800a44c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	2200      	movs	r2, #0
 8008f4e:	701a      	strb	r2, [r3, #0]
      break;
 8008f50:	e195      	b.n	800927e <USBH_HandleEnum+0x426>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008f52:	2112      	movs	r1, #18
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fa89 	bl	800946c <USBH_Get_DevDesc>
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d103      	bne.n	8008f6c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2202      	movs	r2, #2
 8008f68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008f6a:	e18a      	b.n	8009282 <USBH_HandleEnum+0x42a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	f040 8187 	bne.w	8009282 <USBH_HandleEnum+0x42a>
        phost->device.EnumCnt++;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	b2da      	uxtb	r2, r3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008f8a:	2b03      	cmp	r3, #3
 8008f8c:	d903      	bls.n	8008f96 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	220d      	movs	r2, #13
 8008f92:	701a      	strb	r2, [r3, #0]
      break;
 8008f94:	e175      	b.n	8009282 <USBH_HandleEnum+0x42a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	795b      	ldrb	r3, [r3, #5]
 8008f9a:	4619      	mov	r1, r3
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f001 fa55 	bl	800a44c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	791b      	ldrb	r3, [r3, #4]
 8008fa6:	4619      	mov	r1, r3
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 fa4f 	bl	800a44c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	701a      	strb	r2, [r3, #0]
      break;
 8008fba:	e162      	b.n	8009282 <USBH_HandleEnum+0x42a>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008fbc:	2101      	movs	r1, #1
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fb13 	bl	80095ea <USBH_SetAddress>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d130      	bne.n	8009030 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008fce:	2002      	movs	r0, #2
 8008fd0:	f004 f807 	bl	800cfe2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2203      	movs	r2, #3
 8008fe0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	7919      	ldrb	r1, [r3, #4]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008ff6:	9202      	str	r2, [sp, #8]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	9201      	str	r2, [sp, #4]
 8008ffc:	9300      	str	r3, [sp, #0]
 8008ffe:	4603      	mov	r3, r0
 8009000:	2280      	movs	r2, #128	@ 0x80
 8009002:	6878      	ldr	r0, [r7, #4]
 8009004:	f001 f9d2 	bl	800a3ac <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	7959      	ldrb	r1, [r3, #5]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800901c:	9202      	str	r2, [sp, #8]
 800901e:	2200      	movs	r2, #0
 8009020:	9201      	str	r2, [sp, #4]
 8009022:	9300      	str	r3, [sp, #0]
 8009024:	4603      	mov	r3, r0
 8009026:	2200      	movs	r2, #0
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f001 f9bf 	bl	800a3ac <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800902e:	e12a      	b.n	8009286 <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009030:	7bbb      	ldrb	r3, [r7, #14]
 8009032:	2b03      	cmp	r3, #3
 8009034:	f040 8127 	bne.w	8009286 <USBH_HandleEnum+0x42e>
        phost->gState = HOST_ABORT_STATE;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	220d      	movs	r2, #13
 800903c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	705a      	strb	r2, [r3, #1]
      break;
 8009044:	e11f      	b.n	8009286 <USBH_HandleEnum+0x42e>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009046:	2109      	movs	r1, #9
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f000 fa3b 	bl	80094c4 <USBH_Get_CfgDesc>
 800904e:	4603      	mov	r3, r0
 8009050:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009052:	7bbb      	ldrb	r3, [r7, #14]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d103      	bne.n	8009060 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2204      	movs	r2, #4
 800905c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800905e:	e114      	b.n	800928a <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009060:	7bbb      	ldrb	r3, [r7, #14]
 8009062:	2b03      	cmp	r3, #3
 8009064:	f040 8111 	bne.w	800928a <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800906e:	3301      	adds	r3, #1
 8009070:	b2da      	uxtb	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800907e:	2b03      	cmp	r3, #3
 8009080:	d903      	bls.n	800908a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	220d      	movs	r2, #13
 8009086:	701a      	strb	r2, [r3, #0]
      break;
 8009088:	e0ff      	b.n	800928a <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	795b      	ldrb	r3, [r3, #5]
 800908e:	4619      	mov	r1, r3
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f001 f9db 	bl	800a44c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	791b      	ldrb	r3, [r3, #4]
 800909a:	4619      	mov	r1, r3
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 f9d5 	bl	800a44c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	701a      	strb	r2, [r3, #0]
      break;
 80090ae:	e0ec      	b.n	800928a <USBH_HandleEnum+0x432>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80090b6:	4619      	mov	r1, r3
 80090b8:	6878      	ldr	r0, [r7, #4]
 80090ba:	f000 fa03 	bl	80094c4 <USBH_Get_CfgDesc>
 80090be:	4603      	mov	r3, r0
 80090c0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090c2:	7bbb      	ldrb	r3, [r7, #14]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d103      	bne.n	80090d0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2205      	movs	r2, #5
 80090cc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80090ce:	e0de      	b.n	800928e <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090d0:	7bbb      	ldrb	r3, [r7, #14]
 80090d2:	2b03      	cmp	r3, #3
 80090d4:	f040 80db 	bne.w	800928e <USBH_HandleEnum+0x436>
        phost->device.EnumCnt++;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090de:	3301      	adds	r3, #1
 80090e0:	b2da      	uxtb	r2, r3
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d903      	bls.n	80090fa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	220d      	movs	r2, #13
 80090f6:	701a      	strb	r2, [r3, #0]
      break;
 80090f8:	e0c9      	b.n	800928e <USBH_HandleEnum+0x436>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	795b      	ldrb	r3, [r3, #5]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 f9a3 	bl	800a44c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	791b      	ldrb	r3, [r3, #4]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 f99d 	bl	800a44c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]
      break;
 800911e:	e0b6      	b.n	800928e <USBH_HandleEnum+0x436>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009126:	2b00      	cmp	r3, #0
 8009128:	d036      	beq.n	8009198 <USBH_HandleEnum+0x340>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009136:	23ff      	movs	r3, #255	@ 0xff
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f000 f9ed 	bl	8009518 <USBH_Get_StringDesc>
 800913e:	4603      	mov	r3, r0
 8009140:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009142:	7bbb      	ldrb	r3, [r7, #14]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d111      	bne.n	800916c <USBH_HandleEnum+0x314>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2206      	movs	r2, #6
 800914c:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2205      	movs	r2, #5
 8009152:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009162:	2200      	movs	r2, #0
 8009164:	4619      	mov	r1, r3
 8009166:	f001 fa6d 	bl	800a644 <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800916a:	e092      	b.n	8009292 <USBH_HandleEnum+0x43a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b03      	cmp	r3, #3
 8009170:	f040 808f 	bne.w	8009292 <USBH_HandleEnum+0x43a>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	2206      	movs	r2, #6
 8009178:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2205      	movs	r2, #5
 800917e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800918e:	2200      	movs	r2, #0
 8009190:	4619      	mov	r1, r3
 8009192:	f001 fa57 	bl	800a644 <osMessagePut>
      break;
 8009196:	e07c      	b.n	8009292 <USBH_HandleEnum+0x43a>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2206      	movs	r2, #6
 800919c:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	2205      	movs	r2, #5
 80091a2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 80091b2:	2200      	movs	r2, #0
 80091b4:	4619      	mov	r1, r3
 80091b6:	f001 fa45 	bl	800a644 <osMessagePut>
      break;
 80091ba:	e06a      	b.n	8009292 <USBH_HandleEnum+0x43a>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d027      	beq.n	8009216 <USBH_HandleEnum+0x3be>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80091d2:	23ff      	movs	r3, #255	@ 0xff
 80091d4:	6878      	ldr	r0, [r7, #4]
 80091d6:	f000 f99f 	bl	8009518 <USBH_Get_StringDesc>
 80091da:	4603      	mov	r3, r0
 80091dc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80091de:	7bbb      	ldrb	r3, [r7, #14]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d103      	bne.n	80091ec <USBH_HandleEnum+0x394>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2207      	movs	r2, #7
 80091e8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80091ea:	e054      	b.n	8009296 <USBH_HandleEnum+0x43e>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091ec:	7bbb      	ldrb	r3, [r7, #14]
 80091ee:	2b03      	cmp	r3, #3
 80091f0:	d151      	bne.n	8009296 <USBH_HandleEnum+0x43e>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2207      	movs	r2, #7
 80091f6:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	2205      	movs	r2, #5
 80091fc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800920c:	2200      	movs	r2, #0
 800920e:	4619      	mov	r1, r3
 8009210:	f001 fa18 	bl	800a644 <osMessagePut>
      break;
 8009214:	e03f      	b.n	8009296 <USBH_HandleEnum+0x43e>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2207      	movs	r2, #7
 800921a:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	2205      	movs	r2, #5
 8009220:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009230:	2200      	movs	r2, #0
 8009232:	4619      	mov	r1, r3
 8009234:	f001 fa06 	bl	800a644 <osMessagePut>
      break;
 8009238:	e02d      	b.n	8009296 <USBH_HandleEnum+0x43e>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009240:	2b00      	cmp	r3, #0
 8009242:	d017      	beq.n	8009274 <USBH_HandleEnum+0x41c>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009250:	23ff      	movs	r3, #255	@ 0xff
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f960 	bl	8009518 <USBH_Get_StringDesc>
 8009258:	4603      	mov	r3, r0
 800925a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800925c:	7bbb      	ldrb	r3, [r7, #14]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d102      	bne.n	8009268 <USBH_HandleEnum+0x410>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009262:	2300      	movs	r3, #0
 8009264:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009266:	e018      	b.n	800929a <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009268:	7bbb      	ldrb	r3, [r7, #14]
 800926a:	2b03      	cmp	r3, #3
 800926c:	d115      	bne.n	800929a <USBH_HandleEnum+0x442>
          Status = USBH_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	73fb      	strb	r3, [r7, #15]
      break;
 8009272:	e012      	b.n	800929a <USBH_HandleEnum+0x442>
        Status = USBH_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	73fb      	strb	r3, [r7, #15]
      break;
 8009278:	e00f      	b.n	800929a <USBH_HandleEnum+0x442>

    default:
      break;
 800927a:	bf00      	nop
 800927c:	e00e      	b.n	800929c <USBH_HandleEnum+0x444>
      break;
 800927e:	bf00      	nop
 8009280:	e00c      	b.n	800929c <USBH_HandleEnum+0x444>
      break;
 8009282:	bf00      	nop
 8009284:	e00a      	b.n	800929c <USBH_HandleEnum+0x444>
      break;
 8009286:	bf00      	nop
 8009288:	e008      	b.n	800929c <USBH_HandleEnum+0x444>
      break;
 800928a:	bf00      	nop
 800928c:	e006      	b.n	800929c <USBH_HandleEnum+0x444>
      break;
 800928e:	bf00      	nop
 8009290:	e004      	b.n	800929c <USBH_HandleEnum+0x444>
      break;
 8009292:	bf00      	nop
 8009294:	e002      	b.n	800929c <USBH_HandleEnum+0x444>
      break;
 8009296:	bf00      	nop
 8009298:	e000      	b.n	800929c <USBH_HandleEnum+0x444>
      break;
 800929a:	bf00      	nop
  }
  return Status;
 800929c:	7bfb      	ldrb	r3, [r7, #15]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3710      	adds	r7, #16
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop

080092a8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80092a8:	b480      	push	{r7}
 80092aa:	b083      	sub	sp, #12
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	683a      	ldr	r2, [r7, #0]
 80092b6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80092ba:	bf00      	nop
 80092bc:	370c      	adds	r7, #12
 80092be:	46bd      	mov	sp, r7
 80092c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c4:	4770      	bx	lr

080092c6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80092c6:	b580      	push	{r7, lr}
 80092c8:	b082      	sub	sp, #8
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80092d4:	1c5a      	adds	r2, r3, #1
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f000 f804 	bl	80092ea <USBH_HandleSof>
}
 80092e2:	bf00      	nop
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	2b0b      	cmp	r3, #11
 80092fa:	d10a      	bne.n	8009312 <USBH_HandleSof+0x28>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009302:	2b00      	cmp	r3, #0
 8009304:	d005      	beq.n	8009312 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800930c:	699b      	ldr	r3, [r3, #24]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	4798      	blx	r3
  }
}
 8009312:	bf00      	nop
 8009314:	3708      	adds	r7, #8
 8009316:	46bd      	mov	sp, r7
 8009318:	bd80      	pop	{r7, pc}

0800931a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800931a:	b580      	push	{r7, lr}
 800931c:	b082      	sub	sp, #8
 800931e:	af00      	add	r7, sp, #0
 8009320:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2201      	movs	r2, #1
 8009326:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2201      	movs	r2, #1
 800932e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800933e:	2200      	movs	r2, #0
 8009340:	4619      	mov	r1, r3
 8009342:	f001 f97f 	bl	800a644 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009346:	bf00      	nop
}
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}

0800934e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800934e:	b480      	push	{r7}
 8009350:	b083      	sub	sp, #12
 8009352:	af00      	add	r7, sp, #0
 8009354:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800935e:	bf00      	nop
}
 8009360:	370c      	adds	r7, #12
 8009362:	46bd      	mov	sp, r7
 8009364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009368:	4770      	bx	lr

0800936a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b082      	sub	sp, #8
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2201      	movs	r2, #1
 8009376:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	2200      	movs	r2, #0
 800937e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2200      	movs	r2, #0
 8009386:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2201      	movs	r2, #1
 800938e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800939e:	2200      	movs	r2, #0
 80093a0:	4619      	mov	r1, r3
 80093a2:	f001 f94f 	bl	800a644 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b082      	sub	sp, #8
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2200      	movs	r2, #0
 80093c4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2200      	movs	r2, #0
 80093cc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f003 fcba 	bl	800cd4a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	791b      	ldrb	r3, [r3, #4]
 80093da:	4619      	mov	r1, r3
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f001 f835 	bl	800a44c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	795b      	ldrb	r3, [r3, #5]
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f001 f82f 	bl	800a44c <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2201      	movs	r2, #1
 80093f2:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009402:	2200      	movs	r2, #0
 8009404:	4619      	mov	r1, r3
 8009406:	f001 f91d 	bl	800a644 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3708      	adds	r7, #8
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b086      	sub	sp, #24
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f8d3 13d8 	ldr.w	r1, [r3, #984]	@ 0x3d8
 8009422:	f107 030c 	add.w	r3, r7, #12
 8009426:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800942a:	4618      	mov	r0, r3
 800942c:	f001 f94a 	bl	800a6c4 <osMessageGet>
    if (event.status == osEventMessage)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b10      	cmp	r3, #16
 8009434:	d1f2      	bne.n	800941c <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f7ff faa4 	bl	8008984 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800943c:	e7ee      	b.n	800941c <USBH_Process_OS+0x8>

0800943e <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800945a:	2200      	movs	r2, #0
 800945c:	4619      	mov	r1, r3
 800945e:	f001 f8f1 	bl	800a644 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af02      	add	r7, sp, #8
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	460b      	mov	r3, r1
 8009476:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009478:	887b      	ldrh	r3, [r7, #2]
 800947a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800947e:	d901      	bls.n	8009484 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009480:	2303      	movs	r3, #3
 8009482:	e01b      	b.n	80094bc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800948a:	887b      	ldrh	r3, [r7, #2]
 800948c:	9300      	str	r3, [sp, #0]
 800948e:	4613      	mov	r3, r2
 8009490:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009494:	2100      	movs	r1, #0
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 f872 	bl	8009580 <USBH_GetDescriptor>
 800949c:	4603      	mov	r3, r0
 800949e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80094a0:	7bfb      	ldrb	r3, [r7, #15]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d109      	bne.n	80094ba <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80094ac:	887a      	ldrh	r2, [r7, #2]
 80094ae:	4619      	mov	r1, r3
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 f929 	bl	8009708 <USBH_ParseDevDesc>
 80094b6:	4603      	mov	r3, r0
 80094b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b086      	sub	sp, #24
 80094c8:	af02      	add	r7, sp, #8
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	331c      	adds	r3, #28
 80094d4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80094d6:	887b      	ldrh	r3, [r7, #2]
 80094d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094dc:	d901      	bls.n	80094e2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094de:	2303      	movs	r3, #3
 80094e0:	e016      	b.n	8009510 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80094e2:	887b      	ldrh	r3, [r7, #2]
 80094e4:	9300      	str	r3, [sp, #0]
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094ec:	2100      	movs	r1, #0
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f000 f846 	bl	8009580 <USBH_GetDescriptor>
 80094f4:	4603      	mov	r3, r0
 80094f6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80094f8:	7bfb      	ldrb	r3, [r7, #15]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d107      	bne.n	800950e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80094fe:	887b      	ldrh	r3, [r7, #2]
 8009500:	461a      	mov	r2, r3
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f000 f9af 	bl	8009868 <USBH_ParseCfgDesc>
 800950a:	4603      	mov	r3, r0
 800950c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800950e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b088      	sub	sp, #32
 800951c:	af02      	add	r7, sp, #8
 800951e:	60f8      	str	r0, [r7, #12]
 8009520:	607a      	str	r2, [r7, #4]
 8009522:	461a      	mov	r2, r3
 8009524:	460b      	mov	r3, r1
 8009526:	72fb      	strb	r3, [r7, #11]
 8009528:	4613      	mov	r3, r2
 800952a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800952c:	893b      	ldrh	r3, [r7, #8]
 800952e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009532:	d802      	bhi.n	800953a <USBH_Get_StringDesc+0x22>
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d101      	bne.n	800953e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800953a:	2303      	movs	r3, #3
 800953c:	e01c      	b.n	8009578 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800953e:	7afb      	ldrb	r3, [r7, #11]
 8009540:	b29b      	uxth	r3, r3
 8009542:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009546:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800954e:	893b      	ldrh	r3, [r7, #8]
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	460b      	mov	r3, r1
 8009554:	2100      	movs	r1, #0
 8009556:	68f8      	ldr	r0, [r7, #12]
 8009558:	f000 f812 	bl	8009580 <USBH_GetDescriptor>
 800955c:	4603      	mov	r3, r0
 800955e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009560:	7dfb      	ldrb	r3, [r7, #23]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d107      	bne.n	8009576 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800956c:	893a      	ldrh	r2, [r7, #8]
 800956e:	6879      	ldr	r1, [r7, #4]
 8009570:	4618      	mov	r0, r3
 8009572:	f000 fb8d 	bl	8009c90 <USBH_ParseStringDesc>
  }

  return status;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3718      	adds	r7, #24
 800957c:	46bd      	mov	sp, r7
 800957e:	bd80      	pop	{r7, pc}

08009580 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	607b      	str	r3, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	72fb      	strb	r3, [r7, #11]
 800958e:	4613      	mov	r3, r2
 8009590:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	789b      	ldrb	r3, [r3, #2]
 8009596:	2b01      	cmp	r3, #1
 8009598:	d11c      	bne.n	80095d4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800959a:	7afb      	ldrb	r3, [r7, #11]
 800959c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2206      	movs	r2, #6
 80095aa:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	893a      	ldrh	r2, [r7, #8]
 80095b0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80095b2:	893b      	ldrh	r3, [r7, #8]
 80095b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095bc:	d104      	bne.n	80095c8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f240 4209 	movw	r2, #1033	@ 0x409
 80095c4:	829a      	strh	r2, [r3, #20]
 80095c6:	e002      	b.n	80095ce <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2200      	movs	r2, #0
 80095cc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	8b3a      	ldrh	r2, [r7, #24]
 80095d2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80095d4:	8b3b      	ldrh	r3, [r7, #24]
 80095d6:	461a      	mov	r2, r3
 80095d8:	6879      	ldr	r1, [r7, #4]
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 fba5 	bl	8009d2a <USBH_CtlReq>
 80095e0:	4603      	mov	r3, r0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	789b      	ldrb	r3, [r3, #2]
 80095fa:	2b01      	cmp	r3, #1
 80095fc:	d10f      	bne.n	800961e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2200      	movs	r2, #0
 8009602:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2205      	movs	r2, #5
 8009608:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	b29a      	uxth	r2, r3
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2200      	movs	r2, #0
 800961c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800961e:	2200      	movs	r2, #0
 8009620:	2100      	movs	r1, #0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f000 fb81 	bl	8009d2a <USBH_CtlReq>
 8009628:	4603      	mov	r3, r0
}
 800962a:	4618      	mov	r0, r3
 800962c:	3708      	adds	r7, #8
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}

08009632 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009632:	b580      	push	{r7, lr}
 8009634:	b082      	sub	sp, #8
 8009636:	af00      	add	r7, sp, #0
 8009638:	6078      	str	r0, [r7, #4]
 800963a:	460b      	mov	r3, r1
 800963c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	789b      	ldrb	r3, [r3, #2]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d10e      	bne.n	8009664 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2200      	movs	r2, #0
 800964a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2209      	movs	r2, #9
 8009650:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	887a      	ldrh	r2, [r7, #2]
 8009656:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2200      	movs	r2, #0
 800965c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009664:	2200      	movs	r2, #0
 8009666:	2100      	movs	r1, #0
 8009668:	6878      	ldr	r0, [r7, #4]
 800966a:	f000 fb5e 	bl	8009d2a <USBH_CtlReq>
 800966e:	4603      	mov	r3, r0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3708      	adds	r7, #8
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b082      	sub	sp, #8
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	789b      	ldrb	r3, [r3, #2]
 8009688:	2b01      	cmp	r3, #1
 800968a:	d10f      	bne.n	80096ac <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2200      	movs	r2, #0
 8009690:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	2203      	movs	r2, #3
 8009696:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	b29a      	uxth	r2, r3
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096ac:	2200      	movs	r2, #0
 80096ae:	2100      	movs	r1, #0
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f000 fb3a 	bl	8009d2a <USBH_CtlReq>
 80096b6:	4603      	mov	r3, r0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	460b      	mov	r3, r1
 80096ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	789b      	ldrb	r3, [r3, #2]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d10f      	bne.n	80096f4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2201      	movs	r2, #1
 80096de:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2200      	movs	r2, #0
 80096e4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80096e6:	78fb      	ldrb	r3, [r7, #3]
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096f4:	2200      	movs	r2, #0
 80096f6:	2100      	movs	r1, #0
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fb16 	bl	8009d2a <USBH_CtlReq>
 80096fe:	4603      	mov	r3, r0
}
 8009700:	4618      	mov	r0, r3
 8009702:	3708      	adds	r7, #8
 8009704:	46bd      	mov	sp, r7
 8009706:	bd80      	pop	{r7, pc}

08009708 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009708:	b480      	push	{r7}
 800970a:	b087      	sub	sp, #28
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	4613      	mov	r3, r2
 8009714:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800971c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800971e:	2300      	movs	r3, #0
 8009720:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d101      	bne.n	800972c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009728:	2302      	movs	r3, #2
 800972a:	e094      	b.n	8009856 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	785a      	ldrb	r2, [r3, #1]
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	3302      	adds	r3, #2
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	68bb      	ldr	r3, [r7, #8]
 8009746:	3303      	adds	r3, #3
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	021b      	lsls	r3, r3, #8
 800974c:	b29b      	uxth	r3, r3
 800974e:	4313      	orrs	r3, r2
 8009750:	b29a      	uxth	r2, r3
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	791a      	ldrb	r2, [r3, #4]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	795a      	ldrb	r2, [r3, #5]
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	799a      	ldrb	r2, [r3, #6]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800976e:	68bb      	ldr	r3, [r7, #8]
 8009770:	79da      	ldrb	r2, [r3, #7]
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009786:	2b01      	cmp	r3, #1
 8009788:	d11b      	bne.n	80097c2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	79db      	ldrb	r3, [r3, #7]
 800978e:	2b20      	cmp	r3, #32
 8009790:	dc0f      	bgt.n	80097b2 <USBH_ParseDevDesc+0xaa>
 8009792:	2b08      	cmp	r3, #8
 8009794:	db0f      	blt.n	80097b6 <USBH_ParseDevDesc+0xae>
 8009796:	3b08      	subs	r3, #8
 8009798:	4a32      	ldr	r2, [pc, #200]	@ (8009864 <USBH_ParseDevDesc+0x15c>)
 800979a:	fa22 f303 	lsr.w	r3, r2, r3
 800979e:	f003 0301 	and.w	r3, r3, #1
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	bf14      	ite	ne
 80097a6:	2301      	movne	r3, #1
 80097a8:	2300      	moveq	r3, #0
 80097aa:	b2db      	uxtb	r3, r3
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d106      	bne.n	80097be <USBH_ParseDevDesc+0xb6>
 80097b0:	e001      	b.n	80097b6 <USBH_ParseDevDesc+0xae>
 80097b2:	2b40      	cmp	r3, #64	@ 0x40
 80097b4:	d003      	beq.n	80097be <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2208      	movs	r2, #8
 80097ba:	71da      	strb	r2, [r3, #7]
        break;
 80097bc:	e000      	b.n	80097c0 <USBH_ParseDevDesc+0xb8>
        break;
 80097be:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80097c0:	e00e      	b.n	80097e0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097c8:	2b02      	cmp	r3, #2
 80097ca:	d107      	bne.n	80097dc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	79db      	ldrb	r3, [r3, #7]
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	d005      	beq.n	80097e0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2208      	movs	r2, #8
 80097d8:	71da      	strb	r2, [r3, #7]
 80097da:	e001      	b.n	80097e0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80097dc:	2303      	movs	r3, #3
 80097de:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80097e0:	88fb      	ldrh	r3, [r7, #6]
 80097e2:	2b08      	cmp	r3, #8
 80097e4:	d936      	bls.n	8009854 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3308      	adds	r3, #8
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	461a      	mov	r2, r3
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	3309      	adds	r3, #9
 80097f2:	781b      	ldrb	r3, [r3, #0]
 80097f4:	021b      	lsls	r3, r3, #8
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	4313      	orrs	r3, r2
 80097fa:	b29a      	uxth	r2, r3
 80097fc:	693b      	ldr	r3, [r7, #16]
 80097fe:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	330a      	adds	r3, #10
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	461a      	mov	r2, r3
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	330b      	adds	r3, #11
 800980c:	781b      	ldrb	r3, [r3, #0]
 800980e:	021b      	lsls	r3, r3, #8
 8009810:	b29b      	uxth	r3, r3
 8009812:	4313      	orrs	r3, r2
 8009814:	b29a      	uxth	r2, r3
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	330c      	adds	r3, #12
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	461a      	mov	r2, r3
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	330d      	adds	r3, #13
 8009826:	781b      	ldrb	r3, [r3, #0]
 8009828:	021b      	lsls	r3, r3, #8
 800982a:	b29b      	uxth	r3, r3
 800982c:	4313      	orrs	r3, r2
 800982e:	b29a      	uxth	r2, r3
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	7b9a      	ldrb	r2, [r3, #14]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	7bda      	ldrb	r2, [r3, #15]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	7c1a      	ldrb	r2, [r3, #16]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800984c:	68bb      	ldr	r3, [r7, #8]
 800984e:	7c5a      	ldrb	r2, [r3, #17]
 8009850:	693b      	ldr	r3, [r7, #16]
 8009852:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
}
 8009856:	4618      	mov	r0, r3
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	01000101 	.word	0x01000101

08009868 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b08c      	sub	sp, #48	@ 0x30
 800986c:	af00      	add	r7, sp, #0
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	60b9      	str	r1, [r7, #8]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800987c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800988a:	2300      	movs	r3, #0
 800988c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d101      	bne.n	800989a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009896:	2302      	movs	r3, #2
 8009898:	e0da      	b.n	8009a50 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800989a:	68bb      	ldr	r3, [r7, #8]
 800989c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a0:	781b      	ldrb	r3, [r3, #0]
 80098a2:	2b09      	cmp	r3, #9
 80098a4:	d002      	beq.n	80098ac <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80098a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a8:	2209      	movs	r2, #9
 80098aa:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	781a      	ldrb	r2, [r3, #0]
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	785a      	ldrb	r2, [r3, #1]
 80098b8:	6a3b      	ldr	r3, [r7, #32]
 80098ba:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3302      	adds	r3, #2
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	461a      	mov	r2, r3
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	3303      	adds	r3, #3
 80098c8:	781b      	ldrb	r3, [r3, #0]
 80098ca:	021b      	lsls	r3, r3, #8
 80098cc:	b29b      	uxth	r3, r3
 80098ce:	4313      	orrs	r3, r2
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098d6:	bf28      	it	cs
 80098d8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80098dc:	b29a      	uxth	r2, r3
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	791a      	ldrb	r2, [r3, #4]
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	795a      	ldrb	r2, [r3, #5]
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	799a      	ldrb	r2, [r3, #6]
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	79da      	ldrb	r2, [r3, #7]
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	7a1a      	ldrb	r2, [r3, #8]
 8009906:	6a3b      	ldr	r3, [r7, #32]
 8009908:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800990a:	88fb      	ldrh	r3, [r7, #6]
 800990c:	2b09      	cmp	r3, #9
 800990e:	f240 809d 	bls.w	8009a4c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009912:	2309      	movs	r3, #9
 8009914:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009916:	2300      	movs	r3, #0
 8009918:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800991a:	e081      	b.n	8009a20 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800991c:	f107 0316 	add.w	r3, r7, #22
 8009920:	4619      	mov	r1, r3
 8009922:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009924:	f000 f9e7 	bl	8009cf6 <USBH_GetNextDesc>
 8009928:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	785b      	ldrb	r3, [r3, #1]
 800992e:	2b04      	cmp	r3, #4
 8009930:	d176      	bne.n	8009a20 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	2b09      	cmp	r3, #9
 8009938:	d002      	beq.n	8009940 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800993a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993c:	2209      	movs	r2, #9
 800993e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009944:	221a      	movs	r2, #26
 8009946:	fb02 f303 	mul.w	r3, r2, r3
 800994a:	3308      	adds	r3, #8
 800994c:	6a3a      	ldr	r2, [r7, #32]
 800994e:	4413      	add	r3, r2
 8009950:	3302      	adds	r3, #2
 8009952:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009954:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009956:	69f8      	ldr	r0, [r7, #28]
 8009958:	f000 f87e 	bl	8009a58 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800995c:	2300      	movs	r3, #0
 800995e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009962:	2300      	movs	r3, #0
 8009964:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009966:	e043      	b.n	80099f0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009968:	f107 0316 	add.w	r3, r7, #22
 800996c:	4619      	mov	r1, r3
 800996e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009970:	f000 f9c1 	bl	8009cf6 <USBH_GetNextDesc>
 8009974:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	2b05      	cmp	r3, #5
 800997c:	d138      	bne.n	80099f0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	795b      	ldrb	r3, [r3, #5]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d113      	bne.n	80099ae <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800998a:	2b02      	cmp	r3, #2
 800998c:	d003      	beq.n	8009996 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	799b      	ldrb	r3, [r3, #6]
 8009992:	2b03      	cmp	r3, #3
 8009994:	d10b      	bne.n	80099ae <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	79db      	ldrb	r3, [r3, #7]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10b      	bne.n	80099b6 <USBH_ParseCfgDesc+0x14e>
 800999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a0:	781b      	ldrb	r3, [r3, #0]
 80099a2:	2b09      	cmp	r3, #9
 80099a4:	d007      	beq.n	80099b6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	2209      	movs	r2, #9
 80099aa:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099ac:	e003      	b.n	80099b6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80099ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b0:	2207      	movs	r2, #7
 80099b2:	701a      	strb	r2, [r3, #0]
 80099b4:	e000      	b.n	80099b8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099b6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099c0:	3201      	adds	r2, #1
 80099c2:	00d2      	lsls	r2, r2, #3
 80099c4:	211a      	movs	r1, #26
 80099c6:	fb01 f303 	mul.w	r3, r1, r3
 80099ca:	4413      	add	r3, r2
 80099cc:	3308      	adds	r3, #8
 80099ce:	6a3a      	ldr	r2, [r7, #32]
 80099d0:	4413      	add	r3, r2
 80099d2:	3304      	adds	r3, #4
 80099d4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80099d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099d8:	69b9      	ldr	r1, [r7, #24]
 80099da:	68f8      	ldr	r0, [r7, #12]
 80099dc:	f000 f870 	bl	8009ac0 <USBH_ParseEPDesc>
 80099e0:	4603      	mov	r3, r0
 80099e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80099e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099ea:	3301      	adds	r3, #1
 80099ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099f0:	69fb      	ldr	r3, [r7, #28]
 80099f2:	791b      	ldrb	r3, [r3, #4]
 80099f4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099f8:	429a      	cmp	r2, r3
 80099fa:	d204      	bcs.n	8009a06 <USBH_ParseCfgDesc+0x19e>
 80099fc:	6a3b      	ldr	r3, [r7, #32]
 80099fe:	885a      	ldrh	r2, [r3, #2]
 8009a00:	8afb      	ldrh	r3, [r7, #22]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d8b0      	bhi.n	8009968 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009a06:	69fb      	ldr	r3, [r7, #28]
 8009a08:	791b      	ldrb	r3, [r3, #4]
 8009a0a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d201      	bcs.n	8009a16 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e01c      	b.n	8009a50 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d805      	bhi.n	8009a34 <USBH_ParseCfgDesc+0x1cc>
 8009a28:	6a3b      	ldr	r3, [r7, #32]
 8009a2a:	885a      	ldrh	r2, [r3, #2]
 8009a2c:	8afb      	ldrh	r3, [r7, #22]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	f63f af74 	bhi.w	800991c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009a34:	6a3b      	ldr	r3, [r7, #32]
 8009a36:	791b      	ldrb	r3, [r3, #4]
 8009a38:	2b02      	cmp	r3, #2
 8009a3a:	bf28      	it	cs
 8009a3c:	2302      	movcs	r3, #2
 8009a3e:	b2db      	uxtb	r3, r3
 8009a40:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009a44:	429a      	cmp	r2, r3
 8009a46:	d201      	bcs.n	8009a4c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009a48:	2303      	movs	r3, #3
 8009a4a:	e001      	b.n	8009a50 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009a4c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3730      	adds	r7, #48	@ 0x30
 8009a54:	46bd      	mov	sp, r7
 8009a56:	bd80      	pop	{r7, pc}

08009a58 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	781a      	ldrb	r2, [r3, #0]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	785a      	ldrb	r2, [r3, #1]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	789a      	ldrb	r2, [r3, #2]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	78da      	ldrb	r2, [r3, #3]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	3304      	adds	r3, #4
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	2b02      	cmp	r3, #2
 8009a8a:	bf28      	it	cs
 8009a8c:	2302      	movcs	r3, #2
 8009a8e:	b2da      	uxtb	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	795a      	ldrb	r2, [r3, #5]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	799a      	ldrb	r2, [r3, #6]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	79da      	ldrb	r2, [r3, #7]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	7a1a      	ldrb	r2, [r3, #8]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	721a      	strb	r2, [r3, #8]
}
 8009ab4:	bf00      	nop
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr

08009ac0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009ac0:	b480      	push	{r7}
 8009ac2:	b087      	sub	sp, #28
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	60f8      	str	r0, [r7, #12]
 8009ac8:	60b9      	str	r1, [r7, #8]
 8009aca:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009acc:	2300      	movs	r3, #0
 8009ace:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	781a      	ldrb	r2, [r3, #0]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	785a      	ldrb	r2, [r3, #1]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	789a      	ldrb	r2, [r3, #2]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	78da      	ldrb	r2, [r3, #3]
 8009aec:	68bb      	ldr	r3, [r7, #8]
 8009aee:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3304      	adds	r3, #4
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	461a      	mov	r2, r3
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	3305      	adds	r3, #5
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	b29b      	uxth	r3, r3
 8009b02:	4313      	orrs	r3, r2
 8009b04:	b29a      	uxth	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	799a      	ldrb	r2, [r3, #6]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	889b      	ldrh	r3, [r3, #4]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d009      	beq.n	8009b2e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b22:	d804      	bhi.n	8009b2e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b2c:	d901      	bls.n	8009b32 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d136      	bne.n	8009baa <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	78db      	ldrb	r3, [r3, #3]
 8009b40:	f003 0303 	and.w	r3, r3, #3
 8009b44:	2b02      	cmp	r3, #2
 8009b46:	d108      	bne.n	8009b5a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	889b      	ldrh	r3, [r3, #4]
 8009b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b50:	f240 8097 	bls.w	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b54:	2303      	movs	r3, #3
 8009b56:	75fb      	strb	r3, [r7, #23]
 8009b58:	e093      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	78db      	ldrb	r3, [r3, #3]
 8009b5e:	f003 0303 	and.w	r3, r3, #3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d107      	bne.n	8009b76 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b66:	68bb      	ldr	r3, [r7, #8]
 8009b68:	889b      	ldrh	r3, [r3, #4]
 8009b6a:	2b40      	cmp	r3, #64	@ 0x40
 8009b6c:	f240 8089 	bls.w	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b70:	2303      	movs	r3, #3
 8009b72:	75fb      	strb	r3, [r7, #23]
 8009b74:	e085      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	78db      	ldrb	r3, [r3, #3]
 8009b7a:	f003 0303 	and.w	r3, r3, #3
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d005      	beq.n	8009b8e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	78db      	ldrb	r3, [r3, #3]
 8009b86:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b8a:	2b03      	cmp	r3, #3
 8009b8c:	d10a      	bne.n	8009ba4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	799b      	ldrb	r3, [r3, #6]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d003      	beq.n	8009b9e <USBH_ParseEPDesc+0xde>
 8009b96:	68bb      	ldr	r3, [r7, #8]
 8009b98:	799b      	ldrb	r3, [r3, #6]
 8009b9a:	2b10      	cmp	r3, #16
 8009b9c:	d970      	bls.n	8009c80 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009b9e:	2303      	movs	r3, #3
 8009ba0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009ba2:	e06d      	b.n	8009c80 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ba4:	2303      	movs	r3, #3
 8009ba6:	75fb      	strb	r3, [r7, #23]
 8009ba8:	e06b      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d13c      	bne.n	8009c2e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	78db      	ldrb	r3, [r3, #3]
 8009bb8:	f003 0303 	and.w	r3, r3, #3
 8009bbc:	2b02      	cmp	r3, #2
 8009bbe:	d005      	beq.n	8009bcc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	78db      	ldrb	r3, [r3, #3]
 8009bc4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d106      	bne.n	8009bda <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	889b      	ldrh	r3, [r3, #4]
 8009bd0:	2b40      	cmp	r3, #64	@ 0x40
 8009bd2:	d956      	bls.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009bd8:	e053      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	78db      	ldrb	r3, [r3, #3]
 8009bde:	f003 0303 	and.w	r3, r3, #3
 8009be2:	2b01      	cmp	r3, #1
 8009be4:	d10e      	bne.n	8009c04 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	799b      	ldrb	r3, [r3, #6]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d007      	beq.n	8009bfe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009bf2:	2b10      	cmp	r3, #16
 8009bf4:	d803      	bhi.n	8009bfe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009bfa:	2b40      	cmp	r3, #64	@ 0x40
 8009bfc:	d941      	bls.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bfe:	2303      	movs	r3, #3
 8009c00:	75fb      	strb	r3, [r7, #23]
 8009c02:	e03e      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	78db      	ldrb	r3, [r3, #3]
 8009c08:	f003 0303 	and.w	r3, r3, #3
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d10b      	bne.n	8009c28 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	799b      	ldrb	r3, [r3, #6]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d004      	beq.n	8009c22 <USBH_ParseEPDesc+0x162>
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	889b      	ldrh	r3, [r3, #4]
 8009c1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c20:	d32f      	bcc.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c22:	2303      	movs	r3, #3
 8009c24:	75fb      	strb	r3, [r7, #23]
 8009c26:	e02c      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c28:	2303      	movs	r3, #3
 8009c2a:	75fb      	strb	r3, [r7, #23]
 8009c2c:	e029      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c34:	2b02      	cmp	r3, #2
 8009c36:	d120      	bne.n	8009c7a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	78db      	ldrb	r3, [r3, #3]
 8009c3c:	f003 0303 	and.w	r3, r3, #3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d106      	bne.n	8009c52 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	889b      	ldrh	r3, [r3, #4]
 8009c48:	2b08      	cmp	r3, #8
 8009c4a:	d01a      	beq.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	75fb      	strb	r3, [r7, #23]
 8009c50:	e017      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c52:	68bb      	ldr	r3, [r7, #8]
 8009c54:	78db      	ldrb	r3, [r3, #3]
 8009c56:	f003 0303 	and.w	r3, r3, #3
 8009c5a:	2b03      	cmp	r3, #3
 8009c5c:	d10a      	bne.n	8009c74 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	799b      	ldrb	r3, [r3, #6]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d003      	beq.n	8009c6e <USBH_ParseEPDesc+0x1ae>
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	889b      	ldrh	r3, [r3, #4]
 8009c6a:	2b08      	cmp	r3, #8
 8009c6c:	d909      	bls.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c6e:	2303      	movs	r3, #3
 8009c70:	75fb      	strb	r3, [r7, #23]
 8009c72:	e006      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c74:	2303      	movs	r3, #3
 8009c76:	75fb      	strb	r3, [r7, #23]
 8009c78:	e003      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c7a:	2303      	movs	r3, #3
 8009c7c:	75fb      	strb	r3, [r7, #23]
 8009c7e:	e000      	b.n	8009c82 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c80:	bf00      	nop
  }

  return status;
 8009c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	371c      	adds	r7, #28
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8e:	4770      	bx	lr

08009c90 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b087      	sub	sp, #28
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	60f8      	str	r0, [r7, #12]
 8009c98:	60b9      	str	r1, [r7, #8]
 8009c9a:	4613      	mov	r3, r2
 8009c9c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	2b03      	cmp	r3, #3
 8009ca6:	d120      	bne.n	8009cea <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	1e9a      	subs	r2, r3, #2
 8009cae:	88fb      	ldrh	r3, [r7, #6]
 8009cb0:	4293      	cmp	r3, r2
 8009cb2:	bf28      	it	cs
 8009cb4:	4613      	movcs	r3, r2
 8009cb6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	3302      	adds	r3, #2
 8009cbc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	82fb      	strh	r3, [r7, #22]
 8009cc2:	e00b      	b.n	8009cdc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009cc4:	8afb      	ldrh	r3, [r7, #22]
 8009cc6:	68fa      	ldr	r2, [r7, #12]
 8009cc8:	4413      	add	r3, r2
 8009cca:	781a      	ldrb	r2, [r3, #0]
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	3301      	adds	r3, #1
 8009cd4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009cd6:	8afb      	ldrh	r3, [r7, #22]
 8009cd8:	3302      	adds	r3, #2
 8009cda:	82fb      	strh	r3, [r7, #22]
 8009cdc:	8afa      	ldrh	r2, [r7, #22]
 8009cde:	8abb      	ldrh	r3, [r7, #20]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d3ef      	bcc.n	8009cc4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	701a      	strb	r2, [r3, #0]
  }
}
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr

08009cf6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b085      	sub	sp, #20
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
 8009cfe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	881b      	ldrh	r3, [r3, #0]
 8009d04:	687a      	ldr	r2, [r7, #4]
 8009d06:	7812      	ldrb	r2, [r2, #0]
 8009d08:	4413      	add	r3, r2
 8009d0a:	b29a      	uxth	r2, r3
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	781b      	ldrb	r3, [r3, #0]
 8009d14:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3714      	adds	r7, #20
 8009d22:	46bd      	mov	sp, r7
 8009d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d28:	4770      	bx	lr

08009d2a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b086      	sub	sp, #24
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	60f8      	str	r0, [r7, #12]
 8009d32:	60b9      	str	r1, [r7, #8]
 8009d34:	4613      	mov	r3, r2
 8009d36:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009d38:	2301      	movs	r3, #1
 8009d3a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	789b      	ldrb	r3, [r3, #2]
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d002      	beq.n	8009d4a <USBH_CtlReq+0x20>
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d01d      	beq.n	8009d84 <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 8009d48:	e043      	b.n	8009dd2 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	68ba      	ldr	r2, [r7, #8]
 8009d4e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	88fa      	ldrh	r2, [r7, #6]
 8009d54:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2202      	movs	r2, #2
 8009d60:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009d62:	2301      	movs	r3, #1
 8009d64:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2203      	movs	r2, #3
 8009d6a:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4619      	mov	r1, r3
 8009d7e:	f000 fc61 	bl	800a644 <osMessagePut>
      break;
 8009d82:	e026      	b.n	8009dd2 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 8009d84:	68f8      	ldr	r0, [r7, #12]
 8009d86:	f000 f829 	bl	8009ddc <USBH_HandleControl>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d8e:	7dfb      	ldrb	r3, [r7, #23]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d002      	beq.n	8009d9a <USBH_CtlReq+0x70>
 8009d94:	7dfb      	ldrb	r3, [r7, #23]
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d106      	bne.n	8009da8 <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	2200      	movs	r2, #0
 8009da4:	761a      	strb	r2, [r3, #24]
 8009da6:	e005      	b.n	8009db4 <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 8009da8:	7dfb      	ldrb	r3, [r7, #23]
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d102      	bne.n	8009db4 <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2201      	movs	r2, #1
 8009db2:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2203      	movs	r2, #3
 8009db8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009dc8:	2200      	movs	r2, #0
 8009dca:	4619      	mov	r1, r3
 8009dcc:	f000 fc3a 	bl	800a644 <osMessagePut>
      break;
 8009dd0:	bf00      	nop
  }
  return status;
 8009dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3718      	adds	r7, #24
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af02      	add	r7, sp, #8
 8009de2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009de4:	2301      	movs	r3, #1
 8009de6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	7e1b      	ldrb	r3, [r3, #24]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	2b0a      	cmp	r3, #10
 8009df4:	f200 8229 	bhi.w	800a24a <USBH_HandleControl+0x46e>
 8009df8:	a201      	add	r2, pc, #4	@ (adr r2, 8009e00 <USBH_HandleControl+0x24>)
 8009dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dfe:	bf00      	nop
 8009e00:	08009e2d 	.word	0x08009e2d
 8009e04:	08009e47 	.word	0x08009e47
 8009e08:	08009ee9 	.word	0x08009ee9
 8009e0c:	08009f0f 	.word	0x08009f0f
 8009e10:	08009f9b 	.word	0x08009f9b
 8009e14:	08009fc5 	.word	0x08009fc5
 8009e18:	0800a087 	.word	0x0800a087
 8009e1c:	0800a0a9 	.word	0x0800a0a9
 8009e20:	0800a13b 	.word	0x0800a13b
 8009e24:	0800a161 	.word	0x0800a161
 8009e28:	0800a1f3 	.word	0x0800a1f3
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f103 0110 	add.w	r1, r3, #16
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	795b      	ldrb	r3, [r3, #5]
 8009e36:	461a      	mov	r2, r3
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 fa17 	bl	800a26c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2202      	movs	r2, #2
 8009e42:	761a      	strb	r2, [r3, #24]
      break;
 8009e44:	e20c      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	795b      	ldrb	r3, [r3, #5]
 8009e4a:	4619      	mov	r1, r3
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f003 f86b 	bl	800cf28 <USBH_LL_GetURBState>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d12c      	bne.n	8009eb6 <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	7c1b      	ldrb	r3, [r3, #16]
 8009e60:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e64:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	8adb      	ldrh	r3, [r3, #22]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d00a      	beq.n	8009e84 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009e6e:	7b7b      	ldrb	r3, [r7, #13]
 8009e70:	2b80      	cmp	r3, #128	@ 0x80
 8009e72:	d103      	bne.n	8009e7c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2203      	movs	r2, #3
 8009e78:	761a      	strb	r2, [r3, #24]
 8009e7a:	e00d      	b.n	8009e98 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2205      	movs	r2, #5
 8009e80:	761a      	strb	r2, [r3, #24]
 8009e82:	e009      	b.n	8009e98 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 8009e84:	7b7b      	ldrb	r3, [r7, #13]
 8009e86:	2b80      	cmp	r3, #128	@ 0x80
 8009e88:	d103      	bne.n	8009e92 <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2209      	movs	r2, #9
 8009e8e:	761a      	strb	r2, [r3, #24]
 8009e90:	e002      	b.n	8009e98 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2207      	movs	r2, #7
 8009e96:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	2203      	movs	r2, #3
 8009e9c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009eac:	2200      	movs	r2, #0
 8009eae:	4619      	mov	r1, r3
 8009eb0:	f000 fbc8 	bl	800a644 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009eb4:	e1cb      	b.n	800a24e <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009eb6:	7bbb      	ldrb	r3, [r7, #14]
 8009eb8:	2b04      	cmp	r3, #4
 8009eba:	d003      	beq.n	8009ec4 <USBH_HandleControl+0xe8>
 8009ebc:	7bbb      	ldrb	r3, [r7, #14]
 8009ebe:	2b02      	cmp	r3, #2
 8009ec0:	f040 81c5 	bne.w	800a24e <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	220b      	movs	r2, #11
 8009ec8:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2203      	movs	r2, #3
 8009ece:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009ede:	2200      	movs	r2, #0
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f000 fbaf 	bl	800a644 <osMessagePut>
      break;
 8009ee6:	e1b2      	b.n	800a24e <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009eee:	b29a      	uxth	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6899      	ldr	r1, [r3, #8]
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	899a      	ldrh	r2, [r3, #12]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	791b      	ldrb	r3, [r3, #4]
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 f9f2 	bl	800a2ea <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2204      	movs	r2, #4
 8009f0a:	761a      	strb	r2, [r3, #24]
      break;
 8009f0c:	e1a8      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	791b      	ldrb	r3, [r3, #4]
 8009f12:	4619      	mov	r1, r3
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f003 f807 	bl	800cf28 <USBH_LL_GetURBState>
 8009f1a:	4603      	mov	r3, r0
 8009f1c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f1e:	7bbb      	ldrb	r3, [r7, #14]
 8009f20:	2b01      	cmp	r3, #1
 8009f22:	d110      	bne.n	8009f46 <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2209      	movs	r2, #9
 8009f28:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2203      	movs	r2, #3
 8009f2e:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009f3e:	2200      	movs	r2, #0
 8009f40:	4619      	mov	r1, r3
 8009f42:	f000 fb7f 	bl	800a644 <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	2b05      	cmp	r3, #5
 8009f4a:	d110      	bne.n	8009f6e <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2203      	movs	r2, #3
 8009f54:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009f64:	2200      	movs	r2, #0
 8009f66:	4619      	mov	r1, r3
 8009f68:	f000 fb6c 	bl	800a644 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f6c:	e171      	b.n	800a252 <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b04      	cmp	r3, #4
 8009f72:	f040 816e 	bne.w	800a252 <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	220b      	movs	r2, #11
 8009f7a:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2203      	movs	r2, #3
 8009f80:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009f90:	2200      	movs	r2, #0
 8009f92:	4619      	mov	r1, r3
 8009f94:	f000 fb56 	bl	800a644 <osMessagePut>
      break;
 8009f98:	e15b      	b.n	800a252 <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6899      	ldr	r1, [r3, #8]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	899a      	ldrh	r2, [r3, #12]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	795b      	ldrb	r3, [r3, #5]
 8009fa6:	2001      	movs	r0, #1
 8009fa8:	9000      	str	r0, [sp, #0]
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f978 	bl	800a2a0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fb6:	b29a      	uxth	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2206      	movs	r2, #6
 8009fc0:	761a      	strb	r2, [r3, #24]
      break;
 8009fc2:	e14d      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	795b      	ldrb	r3, [r3, #5]
 8009fc8:	4619      	mov	r1, r3
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f002 ffac 	bl	800cf28 <USBH_LL_GetURBState>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009fd4:	7bbb      	ldrb	r3, [r7, #14]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d111      	bne.n	8009ffe <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2207      	movs	r2, #7
 8009fde:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	2203      	movs	r2, #3
 8009fe4:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	f000 fb24 	bl	800a644 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ffc:	e12b      	b.n	800a256 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 8009ffe:	7bbb      	ldrb	r3, [r7, #14]
 800a000:	2b05      	cmp	r3, #5
 800a002:	d113      	bne.n	800a02c <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	220c      	movs	r2, #12
 800a008:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a00a:	2303      	movs	r3, #3
 800a00c:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2203      	movs	r2, #3
 800a012:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a022:	2200      	movs	r2, #0
 800a024:	4619      	mov	r1, r3
 800a026:	f000 fb0d 	bl	800a644 <osMessagePut>
      break;
 800a02a:	e114      	b.n	800a256 <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a02c:	7bbb      	ldrb	r3, [r7, #14]
 800a02e:	2b02      	cmp	r3, #2
 800a030:	d111      	bne.n	800a056 <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	2205      	movs	r2, #5
 800a036:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2203      	movs	r2, #3
 800a03c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a04c:	2200      	movs	r2, #0
 800a04e:	4619      	mov	r1, r3
 800a050:	f000 faf8 	bl	800a644 <osMessagePut>
      break;
 800a054:	e0ff      	b.n	800a256 <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	2b04      	cmp	r3, #4
 800a05a:	f040 80fc 	bne.w	800a256 <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	220b      	movs	r2, #11
 800a062:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a064:	2302      	movs	r3, #2
 800a066:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2203      	movs	r2, #3
 800a06c:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a07c:	2200      	movs	r2, #0
 800a07e:	4619      	mov	r1, r3
 800a080:	f000 fae0 	bl	800a644 <osMessagePut>
      break;
 800a084:	e0e7      	b.n	800a256 <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	791b      	ldrb	r3, [r3, #4]
 800a08a:	2200      	movs	r2, #0
 800a08c:	2100      	movs	r1, #0
 800a08e:	6878      	ldr	r0, [r7, #4]
 800a090:	f000 f92b 	bl	800a2ea <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a09a:	b29a      	uxth	r2, r3
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2208      	movs	r2, #8
 800a0a4:	761a      	strb	r2, [r3, #24]

      break;
 800a0a6:	e0db      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	791b      	ldrb	r3, [r3, #4]
 800a0ac:	4619      	mov	r1, r3
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f002 ff3a 	bl	800cf28 <USBH_LL_GetURBState>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b01      	cmp	r3, #1
 800a0bc:	d113      	bne.n	800a0e6 <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	220d      	movs	r2, #13
 800a0c2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2203      	movs	r2, #3
 800a0cc:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a0dc:	2200      	movs	r2, #0
 800a0de:	4619      	mov	r1, r3
 800a0e0:	f000 fab0 	bl	800a644 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0e4:	e0b9      	b.n	800a25a <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d111      	bne.n	800a110 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	220b      	movs	r2, #11
 800a0f0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	2203      	movs	r2, #3
 800a0f6:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a106:	2200      	movs	r2, #0
 800a108:	4619      	mov	r1, r3
 800a10a:	f000 fa9b 	bl	800a644 <osMessagePut>
      break;
 800a10e:	e0a4      	b.n	800a25a <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800a110:	7bbb      	ldrb	r3, [r7, #14]
 800a112:	2b05      	cmp	r3, #5
 800a114:	f040 80a1 	bne.w	800a25a <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800a118:	2303      	movs	r3, #3
 800a11a:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2203      	movs	r2, #3
 800a120:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a130:	2200      	movs	r2, #0
 800a132:	4619      	mov	r1, r3
 800a134:	f000 fa86 	bl	800a644 <osMessagePut>
      break;
 800a138:	e08f      	b.n	800a25a <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	795b      	ldrb	r3, [r3, #5]
 800a13e:	2201      	movs	r2, #1
 800a140:	9200      	str	r2, [sp, #0]
 800a142:	2200      	movs	r2, #0
 800a144:	2100      	movs	r1, #0
 800a146:	6878      	ldr	r0, [r7, #4]
 800a148:	f000 f8aa 	bl	800a2a0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a152:	b29a      	uxth	r2, r3
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	220a      	movs	r2, #10
 800a15c:	761a      	strb	r2, [r3, #24]
      break;
 800a15e:	e07f      	b.n	800a260 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	795b      	ldrb	r3, [r3, #5]
 800a164:	4619      	mov	r1, r3
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f002 fede 	bl	800cf28 <USBH_LL_GetURBState>
 800a16c:	4603      	mov	r3, r0
 800a16e:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a170:	7bbb      	ldrb	r3, [r7, #14]
 800a172:	2b01      	cmp	r3, #1
 800a174:	d113      	bne.n	800a19e <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	220d      	movs	r2, #13
 800a17e:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2203      	movs	r2, #3
 800a184:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a194:	2200      	movs	r2, #0
 800a196:	4619      	mov	r1, r3
 800a198:	f000 fa54 	bl	800a644 <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a19c:	e05f      	b.n	800a25e <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a19e:	7bbb      	ldrb	r3, [r7, #14]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d111      	bne.n	800a1c8 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2209      	movs	r2, #9
 800a1a8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2203      	movs	r2, #3
 800a1ae:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a1be:	2200      	movs	r2, #0
 800a1c0:	4619      	mov	r1, r3
 800a1c2:	f000 fa3f 	bl	800a644 <osMessagePut>
      break;
 800a1c6:	e04a      	b.n	800a25e <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ca:	2b04      	cmp	r3, #4
 800a1cc:	d147      	bne.n	800a25e <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	220b      	movs	r2, #11
 800a1d2:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	2203      	movs	r2, #3
 800a1d8:	f8c3 23e0 	str.w	r2, [r3, #992]	@ 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f8d3 03d8 	ldr.w	r0, [r3, #984]	@ 0x3d8
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	@ 0x3e0
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f000 fa2a 	bl	800a644 <osMessagePut>
      break;
 800a1f0:	e035      	b.n	800a25e <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	7e5b      	ldrb	r3, [r3, #25]
 800a1f6:	3301      	adds	r3, #1
 800a1f8:	b2da      	uxtb	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	765a      	strb	r2, [r3, #25]
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	7e5b      	ldrb	r3, [r3, #25]
 800a202:	2b02      	cmp	r3, #2
 800a204:	d806      	bhi.n	800a214 <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2201      	movs	r2, #1
 800a20a:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2201      	movs	r2, #1
 800a210:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a212:	e025      	b.n	800a260 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a21a:	2106      	movs	r1, #6
 800a21c:	6878      	ldr	r0, [r7, #4]
 800a21e:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	795b      	ldrb	r3, [r3, #5]
 800a22a:	4619      	mov	r1, r3
 800a22c:	6878      	ldr	r0, [r7, #4]
 800a22e:	f000 f90d 	bl	800a44c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	791b      	ldrb	r3, [r3, #4]
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f907 	bl	800a44c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a244:	2302      	movs	r3, #2
 800a246:	73fb      	strb	r3, [r7, #15]
      break;
 800a248:	e00a      	b.n	800a260 <USBH_HandleControl+0x484>

    default:
      break;
 800a24a:	bf00      	nop
 800a24c:	e008      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a24e:	bf00      	nop
 800a250:	e006      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a252:	bf00      	nop
 800a254:	e004      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a256:	bf00      	nop
 800a258:	e002      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a25a:	bf00      	nop
 800a25c:	e000      	b.n	800a260 <USBH_HandleControl+0x484>
      break;
 800a25e:	bf00      	nop
  }

  return status;
 800a260:	7bfb      	ldrb	r3, [r7, #15]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop

0800a26c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b088      	sub	sp, #32
 800a270:	af04      	add	r7, sp, #16
 800a272:	60f8      	str	r0, [r7, #12]
 800a274:	60b9      	str	r1, [r7, #8]
 800a276:	4613      	mov	r3, r2
 800a278:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a27a:	79f9      	ldrb	r1, [r7, #7]
 800a27c:	2300      	movs	r3, #0
 800a27e:	9303      	str	r3, [sp, #12]
 800a280:	2308      	movs	r3, #8
 800a282:	9302      	str	r3, [sp, #8]
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	9301      	str	r3, [sp, #4]
 800a288:	2300      	movs	r3, #0
 800a28a:	9300      	str	r3, [sp, #0]
 800a28c:	2300      	movs	r3, #0
 800a28e:	2200      	movs	r2, #0
 800a290:	68f8      	ldr	r0, [r7, #12]
 800a292:	f002 fe18 	bl	800cec6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}

0800a2a0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b088      	sub	sp, #32
 800a2a4:	af04      	add	r7, sp, #16
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	4611      	mov	r1, r2
 800a2ac:	461a      	mov	r2, r3
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	80fb      	strh	r3, [r7, #6]
 800a2b2:	4613      	mov	r3, r2
 800a2b4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d001      	beq.n	800a2c4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a2c4:	7979      	ldrb	r1, [r7, #5]
 800a2c6:	7e3b      	ldrb	r3, [r7, #24]
 800a2c8:	9303      	str	r3, [sp, #12]
 800a2ca:	88fb      	ldrh	r3, [r7, #6]
 800a2cc:	9302      	str	r3, [sp, #8]
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	9301      	str	r3, [sp, #4]
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	9300      	str	r3, [sp, #0]
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	68f8      	ldr	r0, [r7, #12]
 800a2dc:	f002 fdf3 	bl	800cec6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3710      	adds	r7, #16
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b088      	sub	sp, #32
 800a2ee:	af04      	add	r7, sp, #16
 800a2f0:	60f8      	str	r0, [r7, #12]
 800a2f2:	60b9      	str	r1, [r7, #8]
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	461a      	mov	r2, r3
 800a2f8:	460b      	mov	r3, r1
 800a2fa:	80fb      	strh	r3, [r7, #6]
 800a2fc:	4613      	mov	r3, r2
 800a2fe:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a300:	7979      	ldrb	r1, [r7, #5]
 800a302:	2300      	movs	r3, #0
 800a304:	9303      	str	r3, [sp, #12]
 800a306:	88fb      	ldrh	r3, [r7, #6]
 800a308:	9302      	str	r3, [sp, #8]
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	2301      	movs	r3, #1
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	2300      	movs	r3, #0
 800a314:	2201      	movs	r2, #1
 800a316:	68f8      	ldr	r0, [r7, #12]
 800a318:	f002 fdd5 	bl	800cec6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a31c:	2300      	movs	r3, #0

}
 800a31e:	4618      	mov	r0, r3
 800a320:	3710      	adds	r7, #16
 800a322:	46bd      	mov	sp, r7
 800a324:	bd80      	pop	{r7, pc}

0800a326 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a326:	b580      	push	{r7, lr}
 800a328:	b088      	sub	sp, #32
 800a32a:	af04      	add	r7, sp, #16
 800a32c:	60f8      	str	r0, [r7, #12]
 800a32e:	60b9      	str	r1, [r7, #8]
 800a330:	4611      	mov	r1, r2
 800a332:	461a      	mov	r2, r3
 800a334:	460b      	mov	r3, r1
 800a336:	80fb      	strh	r3, [r7, #6]
 800a338:	4613      	mov	r3, r2
 800a33a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a342:	2b00      	cmp	r3, #0
 800a344:	d001      	beq.n	800a34a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a346:	2300      	movs	r3, #0
 800a348:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a34a:	7979      	ldrb	r1, [r7, #5]
 800a34c:	7e3b      	ldrb	r3, [r7, #24]
 800a34e:	9303      	str	r3, [sp, #12]
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	9302      	str	r3, [sp, #8]
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	2301      	movs	r3, #1
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	2302      	movs	r3, #2
 800a35e:	2200      	movs	r2, #0
 800a360:	68f8      	ldr	r0, [r7, #12]
 800a362:	f002 fdb0 	bl	800cec6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a366:	2300      	movs	r3, #0
}
 800a368:	4618      	mov	r0, r3
 800a36a:	3710      	adds	r7, #16
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bd80      	pop	{r7, pc}

0800a370 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b088      	sub	sp, #32
 800a374:	af04      	add	r7, sp, #16
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	4611      	mov	r1, r2
 800a37c:	461a      	mov	r2, r3
 800a37e:	460b      	mov	r3, r1
 800a380:	80fb      	strh	r3, [r7, #6]
 800a382:	4613      	mov	r3, r2
 800a384:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a386:	7979      	ldrb	r1, [r7, #5]
 800a388:	2300      	movs	r3, #0
 800a38a:	9303      	str	r3, [sp, #12]
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	9302      	str	r3, [sp, #8]
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	9301      	str	r3, [sp, #4]
 800a394:	2301      	movs	r3, #1
 800a396:	9300      	str	r3, [sp, #0]
 800a398:	2302      	movs	r3, #2
 800a39a:	2201      	movs	r2, #1
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	f002 fd92 	bl	800cec6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a3a2:	2300      	movs	r3, #0
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3710      	adds	r7, #16
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	bd80      	pop	{r7, pc}

0800a3ac <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af04      	add	r7, sp, #16
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	4608      	mov	r0, r1
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	461a      	mov	r2, r3
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	70fb      	strb	r3, [r7, #3]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70bb      	strb	r3, [r7, #2]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a3c6:	7878      	ldrb	r0, [r7, #1]
 800a3c8:	78ba      	ldrb	r2, [r7, #2]
 800a3ca:	78f9      	ldrb	r1, [r7, #3]
 800a3cc:	8b3b      	ldrh	r3, [r7, #24]
 800a3ce:	9302      	str	r3, [sp, #8]
 800a3d0:	7d3b      	ldrb	r3, [r7, #20]
 800a3d2:	9301      	str	r3, [sp, #4]
 800a3d4:	7c3b      	ldrb	r3, [r7, #16]
 800a3d6:	9300      	str	r3, [sp, #0]
 800a3d8:	4603      	mov	r3, r0
 800a3da:	6878      	ldr	r0, [r7, #4]
 800a3dc:	f002 fd25 	bl	800ce2a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a3e0:	2300      	movs	r3, #0
}
 800a3e2:	4618      	mov	r0, r3
 800a3e4:	3708      	adds	r7, #8
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	bd80      	pop	{r7, pc}

0800a3ea <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a3ea:	b580      	push	{r7, lr}
 800a3ec:	b082      	sub	sp, #8
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
 800a3f2:	460b      	mov	r3, r1
 800a3f4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a3f6:	78fb      	ldrb	r3, [r7, #3]
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f002 fd44 	bl	800ce88 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	3708      	adds	r7, #8
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a40a:	b580      	push	{r7, lr}
 800a40c:	b084      	sub	sp, #16
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 f836 	bl	800a488 <USBH_GetFreePipe>
 800a41c:	4603      	mov	r3, r0
 800a41e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a420:	89fb      	ldrh	r3, [r7, #14]
 800a422:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a426:	4293      	cmp	r3, r2
 800a428:	d00a      	beq.n	800a440 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	89fb      	ldrh	r3, [r7, #14]
 800a42e:	f003 030f 	and.w	r3, r3, #15
 800a432:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a436:	6879      	ldr	r1, [r7, #4]
 800a438:	33e0      	adds	r3, #224	@ 0xe0
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a440:	89fb      	ldrh	r3, [r7, #14]
 800a442:	b2db      	uxtb	r3, r3
}
 800a444:	4618      	mov	r0, r3
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a44c:	b480      	push	{r7}
 800a44e:	b083      	sub	sp, #12
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a458:	78fb      	ldrb	r3, [r7, #3]
 800a45a:	2b0f      	cmp	r3, #15
 800a45c:	d80d      	bhi.n	800a47a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a45e:	78fb      	ldrb	r3, [r7, #3]
 800a460:	687a      	ldr	r2, [r7, #4]
 800a462:	33e0      	adds	r3, #224	@ 0xe0
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	4413      	add	r3, r2
 800a468:	685a      	ldr	r2, [r3, #4]
 800a46a:	78fb      	ldrb	r3, [r7, #3]
 800a46c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	33e0      	adds	r3, #224	@ 0xe0
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	440b      	add	r3, r1
 800a478:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a47a:	2300      	movs	r3, #0
}
 800a47c:	4618      	mov	r0, r3
 800a47e:	370c      	adds	r7, #12
 800a480:	46bd      	mov	sp, r7
 800a482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a486:	4770      	bx	lr

0800a488 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a488:	b480      	push	{r7}
 800a48a:	b085      	sub	sp, #20
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a490:	2300      	movs	r3, #0
 800a492:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a494:	2300      	movs	r3, #0
 800a496:	73fb      	strb	r3, [r7, #15]
 800a498:	e00f      	b.n	800a4ba <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a49a:	7bfb      	ldrb	r3, [r7, #15]
 800a49c:	687a      	ldr	r2, [r7, #4]
 800a49e:	33e0      	adds	r3, #224	@ 0xe0
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d102      	bne.n	800a4b4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a4ae:	7bfb      	ldrb	r3, [r7, #15]
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	e007      	b.n	800a4c4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
 800a4b6:	3301      	adds	r3, #1
 800a4b8:	73fb      	strb	r3, [r7, #15]
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
 800a4bc:	2b0f      	cmp	r3, #15
 800a4be:	d9ec      	bls.n	800a49a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a4c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a4c4:	4618      	mov	r0, r3
 800a4c6:	3714      	adds	r7, #20
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800a4de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a4e2:	2b84      	cmp	r3, #132	@ 0x84
 800a4e4:	d005      	beq.n	800a4f2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800a4e6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	4413      	add	r3, r2
 800a4ee:	3303      	adds	r3, #3
 800a4f0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
}
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	3714      	adds	r7, #20
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fe:	4770      	bx	lr

0800a500 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800a500:	b480      	push	{r7}
 800a502:	b083      	sub	sp, #12
 800a504:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a506:	f3ef 8305 	mrs	r3, IPSR
 800a50a:	607b      	str	r3, [r7, #4]
  return(result);
 800a50c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800a50e:	2b00      	cmp	r3, #0
 800a510:	bf14      	ite	ne
 800a512:	2301      	movne	r3, #1
 800a514:	2300      	moveq	r3, #0
 800a516:	b2db      	uxtb	r3, r3
}
 800a518:	4618      	mov	r0, r3
 800a51a:	370c      	adds	r7, #12
 800a51c:	46bd      	mov	sp, r7
 800a51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a522:	4770      	bx	lr

0800a524 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800a528:	f001 f922 	bl	800b770 <vTaskStartScheduler>
  
  return osOK;
 800a52c:	2300      	movs	r3, #0
}
 800a52e:	4618      	mov	r0, r3
 800a530:	bd80      	pop	{r7, pc}

0800a532 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800a532:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a534:	b089      	sub	sp, #36	@ 0x24
 800a536:	af04      	add	r7, sp, #16
 800a538:	6078      	str	r0, [r7, #4]
 800a53a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	695b      	ldr	r3, [r3, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d020      	beq.n	800a586 <osThreadCreate+0x54>
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01c      	beq.n	800a586 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	685c      	ldr	r4, [r3, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	691e      	ldr	r6, [r3, #16]
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff ffb6 	bl	800a4d0 <makeFreeRtosPriority>
 800a564:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a56e:	9202      	str	r2, [sp, #8]
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	9100      	str	r1, [sp, #0]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	4632      	mov	r2, r6
 800a578:	4629      	mov	r1, r5
 800a57a:	4620      	mov	r0, r4
 800a57c:	f000 ff20 	bl	800b3c0 <xTaskCreateStatic>
 800a580:	4603      	mov	r3, r0
 800a582:	60fb      	str	r3, [r7, #12]
 800a584:	e01c      	b.n	800a5c0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	685c      	ldr	r4, [r3, #4]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a592:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7ff ff98 	bl	800a4d0 <makeFreeRtosPriority>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	f107 030c 	add.w	r3, r7, #12
 800a5a6:	9301      	str	r3, [sp, #4]
 800a5a8:	9200      	str	r2, [sp, #0]
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	4632      	mov	r2, r6
 800a5ae:	4629      	mov	r1, r5
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 ff65 	bl	800b480 <xTaskCreate>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d001      	beq.n	800a5c0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	e000      	b.n	800a5c2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3714      	adds	r7, #20
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a5ca <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <osDelay+0x16>
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	e000      	b.n	800a5e2 <osDelay+0x18>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f001 f88e 	bl	800b704 <vTaskDelay>
  
  return osOK;
 800a5e8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a5f2:	b590      	push	{r4, r7, lr}
 800a5f4:	b085      	sub	sp, #20
 800a5f6:	af02      	add	r7, sp, #8
 800a5f8:	6078      	str	r0, [r7, #4]
 800a5fa:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	689b      	ldr	r3, [r3, #8]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d011      	beq.n	800a628 <osMessageCreate+0x36>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d00d      	beq.n	800a628 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6818      	ldr	r0, [r3, #0]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6859      	ldr	r1, [r3, #4]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	689a      	ldr	r2, [r3, #8]
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	68db      	ldr	r3, [r3, #12]
 800a61c:	2400      	movs	r4, #0
 800a61e:	9400      	str	r4, [sp, #0]
 800a620:	f000 f9e2 	bl	800a9e8 <xQueueGenericCreateStatic>
 800a624:	4603      	mov	r3, r0
 800a626:	e008      	b.n	800a63a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6818      	ldr	r0, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	685b      	ldr	r3, [r3, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	4619      	mov	r1, r3
 800a634:	f000 fa55 	bl	800aae2 <xQueueGenericCreate>
 800a638:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd90      	pop	{r4, r7, pc}
	...

0800a644 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a650:	2300      	movs	r3, #0
 800a652:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <osMessagePut+0x1e>
    ticks = 1;
 800a65e:	2301      	movs	r3, #1
 800a660:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a662:	f7ff ff4d 	bl	800a500 <inHandlerMode>
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d018      	beq.n	800a69e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a66c:	f107 0210 	add.w	r2, r7, #16
 800a670:	f107 0108 	add.w	r1, r7, #8
 800a674:	2300      	movs	r3, #0
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 fb90 	bl	800ad9c <xQueueGenericSendFromISR>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b01      	cmp	r3, #1
 800a680:	d001      	beq.n	800a686 <osMessagePut+0x42>
      return osErrorOS;
 800a682:	23ff      	movs	r3, #255	@ 0xff
 800a684:	e018      	b.n	800a6b8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a686:	693b      	ldr	r3, [r7, #16]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d014      	beq.n	800a6b6 <osMessagePut+0x72>
 800a68c:	4b0c      	ldr	r3, [pc, #48]	@ (800a6c0 <osMessagePut+0x7c>)
 800a68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a692:	601a      	str	r2, [r3, #0]
 800a694:	f3bf 8f4f 	dsb	sy
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	e00b      	b.n	800a6b6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a69e:	f107 0108 	add.w	r1, r7, #8
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	68f8      	ldr	r0, [r7, #12]
 800a6a8:	f000 fa76 	bl	800ab98 <xQueueGenericSend>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d001      	beq.n	800a6b6 <osMessagePut+0x72>
      return osErrorOS;
 800a6b2:	23ff      	movs	r3, #255	@ 0xff
 800a6b4:	e000      	b.n	800a6b8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a6b6:	2300      	movs	r3, #0
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3718      	adds	r7, #24
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	e000ed04 	.word	0xe000ed04

0800a6c4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a6c4:	b590      	push	{r4, r7, lr}
 800a6c6:	b08b      	sub	sp, #44	@ 0x2c
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10a      	bne.n	800a6f4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a6de:	2380      	movs	r3, #128	@ 0x80
 800a6e0:	617b      	str	r3, [r7, #20]
    return event;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	461c      	mov	r4, r3
 800a6e6:	f107 0314 	add.w	r3, r7, #20
 800a6ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a6ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a6f2:	e054      	b.n	800a79e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a702:	d103      	bne.n	800a70c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a704:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a708:	627b      	str	r3, [r7, #36]	@ 0x24
 800a70a:	e009      	b.n	800a720 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d006      	beq.n	800a720 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 800a716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d101      	bne.n	800a720 <osMessageGet+0x5c>
      ticks = 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a720:	f7ff feee 	bl	800a500 <inHandlerMode>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d01c      	beq.n	800a764 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a72a:	f107 0220 	add.w	r2, r7, #32
 800a72e:	f107 0314 	add.w	r3, r7, #20
 800a732:	3304      	adds	r3, #4
 800a734:	4619      	mov	r1, r3
 800a736:	68b8      	ldr	r0, [r7, #8]
 800a738:	f000 fcb0 	bl	800b09c <xQueueReceiveFromISR>
 800a73c:	4603      	mov	r3, r0
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d102      	bne.n	800a748 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a742:	2310      	movs	r3, #16
 800a744:	617b      	str	r3, [r7, #20]
 800a746:	e001      	b.n	800a74c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a748:	2300      	movs	r3, #0
 800a74a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d01d      	beq.n	800a78e <osMessageGet+0xca>
 800a752:	4b15      	ldr	r3, [pc, #84]	@ (800a7a8 <osMessageGet+0xe4>)
 800a754:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	f3bf 8f4f 	dsb	sy
 800a75e:	f3bf 8f6f 	isb	sy
 800a762:	e014      	b.n	800a78e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a764:	f107 0314 	add.w	r3, r7, #20
 800a768:	3304      	adds	r3, #4
 800a76a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a76c:	4619      	mov	r1, r3
 800a76e:	68b8      	ldr	r0, [r7, #8]
 800a770:	f000 fbb2 	bl	800aed8 <xQueueReceive>
 800a774:	4603      	mov	r3, r0
 800a776:	2b01      	cmp	r3, #1
 800a778:	d102      	bne.n	800a780 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a77a:	2310      	movs	r3, #16
 800a77c:	617b      	str	r3, [r7, #20]
 800a77e:	e006      	b.n	800a78e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a782:	2b00      	cmp	r3, #0
 800a784:	d101      	bne.n	800a78a <osMessageGet+0xc6>
 800a786:	2300      	movs	r3, #0
 800a788:	e000      	b.n	800a78c <osMessageGet+0xc8>
 800a78a:	2340      	movs	r3, #64	@ 0x40
 800a78c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	461c      	mov	r4, r3
 800a792:	f107 0314 	add.w	r3, r7, #20
 800a796:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a79a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	372c      	adds	r7, #44	@ 0x2c
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd90      	pop	{r4, r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	e000ed04 	.word	0xe000ed04

0800a7ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f103 0208 	add.w	r2, r3, #8
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a7c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f103 0208 	add.w	r2, r3, #8
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	f103 0208 	add.w	r2, r3, #8
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2200      	movs	r2, #0
 800a7de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a7e0:	bf00      	nop
 800a7e2:	370c      	adds	r7, #12
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ea:	4770      	bx	lr

0800a7ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b083      	sub	sp, #12
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a7fa:	bf00      	nop
 800a7fc:	370c      	adds	r7, #12
 800a7fe:	46bd      	mov	sp, r7
 800a800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a804:	4770      	bx	lr

0800a806 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a806:	b480      	push	{r7}
 800a808:	b085      	sub	sp, #20
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	685b      	ldr	r3, [r3, #4]
 800a814:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	689a      	ldr	r2, [r3, #8]
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	689b      	ldr	r3, [r3, #8]
 800a828:	683a      	ldr	r2, [r7, #0]
 800a82a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	683a      	ldr	r2, [r7, #0]
 800a830:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	687a      	ldr	r2, [r7, #4]
 800a836:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	601a      	str	r2, [r3, #0]
}
 800a842:	bf00      	nop
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a84e:	b480      	push	{r7}
 800a850:	b085      	sub	sp, #20
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a864:	d103      	bne.n	800a86e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	60fb      	str	r3, [r7, #12]
 800a86c:	e00c      	b.n	800a888 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	3308      	adds	r3, #8
 800a872:	60fb      	str	r3, [r7, #12]
 800a874:	e002      	b.n	800a87c <vListInsert+0x2e>
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	685b      	ldr	r3, [r3, #4]
 800a87a:	60fb      	str	r3, [r7, #12]
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	685b      	ldr	r3, [r3, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	429a      	cmp	r2, r3
 800a886:	d2f6      	bcs.n	800a876 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	685a      	ldr	r2, [r3, #4]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	685b      	ldr	r3, [r3, #4]
 800a894:	683a      	ldr	r2, [r7, #0]
 800a896:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	683a      	ldr	r2, [r7, #0]
 800a8a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a8a4:	683b      	ldr	r3, [r7, #0]
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	1c5a      	adds	r2, r3, #1
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	601a      	str	r2, [r3, #0]
}
 800a8b4:	bf00      	nop
 800a8b6:	3714      	adds	r7, #20
 800a8b8:	46bd      	mov	sp, r7
 800a8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8be:	4770      	bx	lr

0800a8c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b085      	sub	sp, #20
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	691b      	ldr	r3, [r3, #16]
 800a8cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	6892      	ldr	r2, [r2, #8]
 800a8d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	687a      	ldr	r2, [r7, #4]
 800a8de:	6852      	ldr	r2, [r2, #4]
 800a8e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	685b      	ldr	r3, [r3, #4]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d103      	bne.n	800a8f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	689a      	ldr	r2, [r3, #8]
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	1e5a      	subs	r2, r3, #1
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3714      	adds	r7, #20
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr

0800a914 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d10b      	bne.n	800a940 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a93a:	bf00      	nop
 800a93c:	bf00      	nop
 800a93e:	e7fd      	b.n	800a93c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a940:	f001 fd82 	bl	800c448 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a94c:	68f9      	ldr	r1, [r7, #12]
 800a94e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a950:	fb01 f303 	mul.w	r3, r1, r3
 800a954:	441a      	add	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a970:	3b01      	subs	r3, #1
 800a972:	68f9      	ldr	r1, [r7, #12]
 800a974:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a976:	fb01 f303 	mul.w	r3, r1, r3
 800a97a:	441a      	add	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	22ff      	movs	r2, #255	@ 0xff
 800a984:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	22ff      	movs	r2, #255	@ 0xff
 800a98c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	2b00      	cmp	r3, #0
 800a994:	d114      	bne.n	800a9c0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	691b      	ldr	r3, [r3, #16]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d01a      	beq.n	800a9d4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	3310      	adds	r3, #16
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f001 f954 	bl	800bc50 <xTaskRemoveFromEventList>
 800a9a8:	4603      	mov	r3, r0
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	d012      	beq.n	800a9d4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a9ae:	4b0d      	ldr	r3, [pc, #52]	@ (800a9e4 <xQueueGenericReset+0xd0>)
 800a9b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a9b4:	601a      	str	r2, [r3, #0]
 800a9b6:	f3bf 8f4f 	dsb	sy
 800a9ba:	f3bf 8f6f 	isb	sy
 800a9be:	e009      	b.n	800a9d4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	3310      	adds	r3, #16
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	f7ff fef1 	bl	800a7ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	3324      	adds	r3, #36	@ 0x24
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7ff feec 	bl	800a7ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a9d4:	f001 fd6a 	bl	800c4ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a9d8:	2301      	movs	r3, #1
}
 800a9da:	4618      	mov	r0, r3
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	e000ed04 	.word	0xe000ed04

0800a9e8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a9e8:	b580      	push	{r7, lr}
 800a9ea:	b08e      	sub	sp, #56	@ 0x38
 800a9ec:	af02      	add	r7, sp, #8
 800a9ee:	60f8      	str	r0, [r7, #12]
 800a9f0:	60b9      	str	r1, [r7, #8]
 800a9f2:	607a      	str	r2, [r7, #4]
 800a9f4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d10b      	bne.n	800aa14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a9fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa00:	f383 8811 	msr	BASEPRI, r3
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	f3bf 8f4f 	dsb	sy
 800aa0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa0e:	bf00      	nop
 800aa10:	bf00      	nop
 800aa12:	e7fd      	b.n	800aa10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d10b      	bne.n	800aa32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800aa1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa1e:	f383 8811 	msr	BASEPRI, r3
 800aa22:	f3bf 8f6f 	isb	sy
 800aa26:	f3bf 8f4f 	dsb	sy
 800aa2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa2c:	bf00      	nop
 800aa2e:	bf00      	nop
 800aa30:	e7fd      	b.n	800aa2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <xQueueGenericCreateStatic+0x56>
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d001      	beq.n	800aa42 <xQueueGenericCreateStatic+0x5a>
 800aa3e:	2301      	movs	r3, #1
 800aa40:	e000      	b.n	800aa44 <xQueueGenericCreateStatic+0x5c>
 800aa42:	2300      	movs	r3, #0
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10b      	bne.n	800aa60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	623b      	str	r3, [r7, #32]
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	e7fd      	b.n	800aa5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d102      	bne.n	800aa6c <xQueueGenericCreateStatic+0x84>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <xQueueGenericCreateStatic+0x88>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e000      	b.n	800aa72 <xQueueGenericCreateStatic+0x8a>
 800aa70:	2300      	movs	r3, #0
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d10b      	bne.n	800aa8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800aa76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7a:	f383 8811 	msr	BASEPRI, r3
 800aa7e:	f3bf 8f6f 	isb	sy
 800aa82:	f3bf 8f4f 	dsb	sy
 800aa86:	61fb      	str	r3, [r7, #28]
}
 800aa88:	bf00      	nop
 800aa8a:	bf00      	nop
 800aa8c:	e7fd      	b.n	800aa8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800aa8e:	2348      	movs	r3, #72	@ 0x48
 800aa90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b48      	cmp	r3, #72	@ 0x48
 800aa96:	d00b      	beq.n	800aab0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800aa98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa9c:	f383 8811 	msr	BASEPRI, r3
 800aaa0:	f3bf 8f6f 	isb	sy
 800aaa4:	f3bf 8f4f 	dsb	sy
 800aaa8:	61bb      	str	r3, [r7, #24]
}
 800aaaa:	bf00      	nop
 800aaac:	bf00      	nop
 800aaae:	e7fd      	b.n	800aaac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800aab0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800aab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00d      	beq.n	800aad8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800aabc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aabe:	2201      	movs	r2, #1
 800aac0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aac4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800aac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aaca:	9300      	str	r3, [sp, #0]
 800aacc:	4613      	mov	r3, r2
 800aace:	687a      	ldr	r2, [r7, #4]
 800aad0:	68b9      	ldr	r1, [r7, #8]
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 f840 	bl	800ab58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800aada:	4618      	mov	r0, r3
 800aadc:	3730      	adds	r7, #48	@ 0x30
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b08a      	sub	sp, #40	@ 0x28
 800aae6:	af02      	add	r7, sp, #8
 800aae8:	60f8      	str	r0, [r7, #12]
 800aaea:	60b9      	str	r1, [r7, #8]
 800aaec:	4613      	mov	r3, r2
 800aaee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10b      	bne.n	800ab0e <xQueueGenericCreate+0x2c>
	__asm volatile
 800aaf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aafa:	f383 8811 	msr	BASEPRI, r3
 800aafe:	f3bf 8f6f 	isb	sy
 800ab02:	f3bf 8f4f 	dsb	sy
 800ab06:	613b      	str	r3, [r7, #16]
}
 800ab08:	bf00      	nop
 800ab0a:	bf00      	nop
 800ab0c:	e7fd      	b.n	800ab0a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	fb02 f303 	mul.w	r3, r2, r3
 800ab16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	3348      	adds	r3, #72	@ 0x48
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f001 fdb5 	bl	800c68c <pvPortMalloc>
 800ab22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ab24:	69bb      	ldr	r3, [r7, #24]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d011      	beq.n	800ab4e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ab2a:	69bb      	ldr	r3, [r7, #24]
 800ab2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab2e:	697b      	ldr	r3, [r7, #20]
 800ab30:	3348      	adds	r3, #72	@ 0x48
 800ab32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	2200      	movs	r2, #0
 800ab38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ab3c:	79fa      	ldrb	r2, [r7, #7]
 800ab3e:	69bb      	ldr	r3, [r7, #24]
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	4613      	mov	r3, r2
 800ab44:	697a      	ldr	r2, [r7, #20]
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	68f8      	ldr	r0, [r7, #12]
 800ab4a:	f000 f805 	bl	800ab58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3720      	adds	r7, #32
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	60f8      	str	r0, [r7, #12]
 800ab60:	60b9      	str	r1, [r7, #8]
 800ab62:	607a      	str	r2, [r7, #4]
 800ab64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d103      	bne.n	800ab74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ab6c:	69bb      	ldr	r3, [r7, #24]
 800ab6e:	69ba      	ldr	r2, [r7, #24]
 800ab70:	601a      	str	r2, [r3, #0]
 800ab72:	e002      	b.n	800ab7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	687a      	ldr	r2, [r7, #4]
 800ab78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ab80:	69bb      	ldr	r3, [r7, #24]
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ab86:	2101      	movs	r1, #1
 800ab88:	69b8      	ldr	r0, [r7, #24]
 800ab8a:	f7ff fec3 	bl	800a914 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ab8e:	bf00      	nop
 800ab90:	3710      	adds	r7, #16
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}
	...

0800ab98 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b08e      	sub	sp, #56	@ 0x38
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	60b9      	str	r1, [r7, #8]
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aba6:	2300      	movs	r3, #0
 800aba8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10b      	bne.n	800abcc <xQueueGenericSend+0x34>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800abc6:	bf00      	nop
 800abc8:	bf00      	nop
 800abca:	e7fd      	b.n	800abc8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d103      	bne.n	800abda <xQueueGenericSend+0x42>
 800abd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d101      	bne.n	800abde <xQueueGenericSend+0x46>
 800abda:	2301      	movs	r3, #1
 800abdc:	e000      	b.n	800abe0 <xQueueGenericSend+0x48>
 800abde:	2300      	movs	r3, #0
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d10b      	bne.n	800abfc <xQueueGenericSend+0x64>
	__asm volatile
 800abe4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abe8:	f383 8811 	msr	BASEPRI, r3
 800abec:	f3bf 8f6f 	isb	sy
 800abf0:	f3bf 8f4f 	dsb	sy
 800abf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800abf6:	bf00      	nop
 800abf8:	bf00      	nop
 800abfa:	e7fd      	b.n	800abf8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	2b02      	cmp	r3, #2
 800ac00:	d103      	bne.n	800ac0a <xQueueGenericSend+0x72>
 800ac02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d101      	bne.n	800ac0e <xQueueGenericSend+0x76>
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e000      	b.n	800ac10 <xQueueGenericSend+0x78>
 800ac0e:	2300      	movs	r3, #0
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d10b      	bne.n	800ac2c <xQueueGenericSend+0x94>
	__asm volatile
 800ac14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac18:	f383 8811 	msr	BASEPRI, r3
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	f3bf 8f4f 	dsb	sy
 800ac24:	623b      	str	r3, [r7, #32]
}
 800ac26:	bf00      	nop
 800ac28:	bf00      	nop
 800ac2a:	e7fd      	b.n	800ac28 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ac2c:	f001 f9d2 	bl	800bfd4 <xTaskGetSchedulerState>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d102      	bne.n	800ac3c <xQueueGenericSend+0xa4>
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d101      	bne.n	800ac40 <xQueueGenericSend+0xa8>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e000      	b.n	800ac42 <xQueueGenericSend+0xaa>
 800ac40:	2300      	movs	r3, #0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d10b      	bne.n	800ac5e <xQueueGenericSend+0xc6>
	__asm volatile
 800ac46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4a:	f383 8811 	msr	BASEPRI, r3
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f3bf 8f4f 	dsb	sy
 800ac56:	61fb      	str	r3, [r7, #28]
}
 800ac58:	bf00      	nop
 800ac5a:	bf00      	nop
 800ac5c:	e7fd      	b.n	800ac5a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac5e:	f001 fbf3 	bl	800c448 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ac62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ac66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d302      	bcc.n	800ac74 <xQueueGenericSend+0xdc>
 800ac6e:	683b      	ldr	r3, [r7, #0]
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	d129      	bne.n	800acc8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ac74:	683a      	ldr	r2, [r7, #0]
 800ac76:	68b9      	ldr	r1, [r7, #8]
 800ac78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac7a:	f000 fa91 	bl	800b1a0 <prvCopyDataToQueue>
 800ac7e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d010      	beq.n	800acaa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac8a:	3324      	adds	r3, #36	@ 0x24
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	f000 ffdf 	bl	800bc50 <xTaskRemoveFromEventList>
 800ac92:	4603      	mov	r3, r0
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d013      	beq.n	800acc0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac98:	4b3f      	ldr	r3, [pc, #252]	@ (800ad98 <xQueueGenericSend+0x200>)
 800ac9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac9e:	601a      	str	r2, [r3, #0]
 800aca0:	f3bf 8f4f 	dsb	sy
 800aca4:	f3bf 8f6f 	isb	sy
 800aca8:	e00a      	b.n	800acc0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800acaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acac:	2b00      	cmp	r3, #0
 800acae:	d007      	beq.n	800acc0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800acb0:	4b39      	ldr	r3, [pc, #228]	@ (800ad98 <xQueueGenericSend+0x200>)
 800acb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800acb6:	601a      	str	r2, [r3, #0]
 800acb8:	f3bf 8f4f 	dsb	sy
 800acbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800acc0:	f001 fbf4 	bl	800c4ac <vPortExitCritical>
				return pdPASS;
 800acc4:	2301      	movs	r3, #1
 800acc6:	e063      	b.n	800ad90 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d103      	bne.n	800acd6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800acce:	f001 fbed 	bl	800c4ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800acd2:	2300      	movs	r3, #0
 800acd4:	e05c      	b.n	800ad90 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800acd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d106      	bne.n	800acea <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800acdc:	f107 0314 	add.w	r3, r7, #20
 800ace0:	4618      	mov	r0, r3
 800ace2:	f001 f819 	bl	800bd18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ace6:	2301      	movs	r3, #1
 800ace8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800acea:	f001 fbdf 	bl	800c4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800acee:	f000 fda1 	bl	800b834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800acf2:	f001 fba9 	bl	800c448 <vPortEnterCritical>
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800acfc:	b25b      	sxtb	r3, r3
 800acfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad02:	d103      	bne.n	800ad0c <xQueueGenericSend+0x174>
 800ad04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad12:	b25b      	sxtb	r3, r3
 800ad14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad18:	d103      	bne.n	800ad22 <xQueueGenericSend+0x18a>
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad22:	f001 fbc3 	bl	800c4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ad26:	1d3a      	adds	r2, r7, #4
 800ad28:	f107 0314 	add.w	r3, r7, #20
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	4618      	mov	r0, r3
 800ad30:	f001 f808 	bl	800bd44 <xTaskCheckForTimeOut>
 800ad34:	4603      	mov	r3, r0
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d124      	bne.n	800ad84 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ad3a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad3c:	f000 fb28 	bl	800b390 <prvIsQueueFull>
 800ad40:	4603      	mov	r3, r0
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d018      	beq.n	800ad78 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ad46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad48:	3310      	adds	r3, #16
 800ad4a:	687a      	ldr	r2, [r7, #4]
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f000 ff58 	bl	800bc04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ad54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad56:	f000 fab3 	bl	800b2c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ad5a:	f000 fd79 	bl	800b850 <xTaskResumeAll>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f47f af7c 	bne.w	800ac5e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800ad66:	4b0c      	ldr	r3, [pc, #48]	@ (800ad98 <xQueueGenericSend+0x200>)
 800ad68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad6c:	601a      	str	r2, [r3, #0]
 800ad6e:	f3bf 8f4f 	dsb	sy
 800ad72:	f3bf 8f6f 	isb	sy
 800ad76:	e772      	b.n	800ac5e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ad78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad7a:	f000 faa1 	bl	800b2c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad7e:	f000 fd67 	bl	800b850 <xTaskResumeAll>
 800ad82:	e76c      	b.n	800ac5e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ad84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ad86:	f000 fa9b 	bl	800b2c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad8a:	f000 fd61 	bl	800b850 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3738      	adds	r7, #56	@ 0x38
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	e000ed04 	.word	0xe000ed04

0800ad9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b090      	sub	sp, #64	@ 0x40
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	60f8      	str	r0, [r7, #12]
 800ada4:	60b9      	str	r1, [r7, #8]
 800ada6:	607a      	str	r2, [r7, #4]
 800ada8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800adae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d10b      	bne.n	800adcc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800adb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adb8:	f383 8811 	msr	BASEPRI, r3
 800adbc:	f3bf 8f6f 	isb	sy
 800adc0:	f3bf 8f4f 	dsb	sy
 800adc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800adc6:	bf00      	nop
 800adc8:	bf00      	nop
 800adca:	e7fd      	b.n	800adc8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d103      	bne.n	800adda <xQueueGenericSendFromISR+0x3e>
 800add2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800add4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800add6:	2b00      	cmp	r3, #0
 800add8:	d101      	bne.n	800adde <xQueueGenericSendFromISR+0x42>
 800adda:	2301      	movs	r3, #1
 800addc:	e000      	b.n	800ade0 <xQueueGenericSendFromISR+0x44>
 800adde:	2300      	movs	r3, #0
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10b      	bne.n	800adfc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ade4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ade8:	f383 8811 	msr	BASEPRI, r3
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	f3bf 8f4f 	dsb	sy
 800adf4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800adf6:	bf00      	nop
 800adf8:	bf00      	nop
 800adfa:	e7fd      	b.n	800adf8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2b02      	cmp	r3, #2
 800ae00:	d103      	bne.n	800ae0a <xQueueGenericSendFromISR+0x6e>
 800ae02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae06:	2b01      	cmp	r3, #1
 800ae08:	d101      	bne.n	800ae0e <xQueueGenericSendFromISR+0x72>
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e000      	b.n	800ae10 <xQueueGenericSendFromISR+0x74>
 800ae0e:	2300      	movs	r3, #0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d10b      	bne.n	800ae2c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ae14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae18:	f383 8811 	msr	BASEPRI, r3
 800ae1c:	f3bf 8f6f 	isb	sy
 800ae20:	f3bf 8f4f 	dsb	sy
 800ae24:	623b      	str	r3, [r7, #32]
}
 800ae26:	bf00      	nop
 800ae28:	bf00      	nop
 800ae2a:	e7fd      	b.n	800ae28 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ae2c:	f001 fbec 	bl	800c608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ae30:	f3ef 8211 	mrs	r2, BASEPRI
 800ae34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae38:	f383 8811 	msr	BASEPRI, r3
 800ae3c:	f3bf 8f6f 	isb	sy
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	61fa      	str	r2, [r7, #28]
 800ae46:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ae48:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ae4a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ae4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ae50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d302      	bcc.n	800ae5e <xQueueGenericSendFromISR+0xc2>
 800ae58:	683b      	ldr	r3, [r7, #0]
 800ae5a:	2b02      	cmp	r3, #2
 800ae5c:	d12f      	bne.n	800aebe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ae5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	68b9      	ldr	r1, [r7, #8]
 800ae72:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ae74:	f000 f994 	bl	800b1a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ae78:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ae7c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae80:	d112      	bne.n	800aea8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ae82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d016      	beq.n	800aeb8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ae8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae8c:	3324      	adds	r3, #36	@ 0x24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f000 fede 	bl	800bc50 <xTaskRemoveFromEventList>
 800ae94:	4603      	mov	r3, r0
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00e      	beq.n	800aeb8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d00b      	beq.n	800aeb8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	e007      	b.n	800aeb8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aea8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aeac:	3301      	adds	r3, #1
 800aeae:	b2db      	uxtb	r3, r3
 800aeb0:	b25a      	sxtb	r2, r3
 800aeb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aeb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800aebc:	e001      	b.n	800aec2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800aec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aec4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800aec6:	697b      	ldr	r3, [r7, #20]
 800aec8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800aecc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3740      	adds	r7, #64	@ 0x40
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b08c      	sub	sp, #48	@ 0x30
 800aedc:	af00      	add	r7, sp, #0
 800aede:	60f8      	str	r0, [r7, #12]
 800aee0:	60b9      	str	r1, [r7, #8]
 800aee2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800aeec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d10b      	bne.n	800af0a <xQueueReceive+0x32>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	623b      	str	r3, [r7, #32]
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	e7fd      	b.n	800af06 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	d103      	bne.n	800af18 <xQueueReceive+0x40>
 800af10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <xQueueReceive+0x44>
 800af18:	2301      	movs	r3, #1
 800af1a:	e000      	b.n	800af1e <xQueueReceive+0x46>
 800af1c:	2300      	movs	r3, #0
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10b      	bne.n	800af3a <xQueueReceive+0x62>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	61fb      	str	r3, [r7, #28]
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop
 800af38:	e7fd      	b.n	800af36 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800af3a:	f001 f84b 	bl	800bfd4 <xTaskGetSchedulerState>
 800af3e:	4603      	mov	r3, r0
 800af40:	2b00      	cmp	r3, #0
 800af42:	d102      	bne.n	800af4a <xQueueReceive+0x72>
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d101      	bne.n	800af4e <xQueueReceive+0x76>
 800af4a:	2301      	movs	r3, #1
 800af4c:	e000      	b.n	800af50 <xQueueReceive+0x78>
 800af4e:	2300      	movs	r3, #0
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10b      	bne.n	800af6c <xQueueReceive+0x94>
	__asm volatile
 800af54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af58:	f383 8811 	msr	BASEPRI, r3
 800af5c:	f3bf 8f6f 	isb	sy
 800af60:	f3bf 8f4f 	dsb	sy
 800af64:	61bb      	str	r3, [r7, #24]
}
 800af66:	bf00      	nop
 800af68:	bf00      	nop
 800af6a:	e7fd      	b.n	800af68 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800af6c:	f001 fa6c 	bl	800c448 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af74:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800af76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d01f      	beq.n	800afbc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800af7c:	68b9      	ldr	r1, [r7, #8]
 800af7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af80:	f000 f978 	bl	800b274 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800af84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af86:	1e5a      	subs	r2, r3, #1
 800af88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af8e:	691b      	ldr	r3, [r3, #16]
 800af90:	2b00      	cmp	r3, #0
 800af92:	d00f      	beq.n	800afb4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af96:	3310      	adds	r3, #16
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 fe59 	bl	800bc50 <xTaskRemoveFromEventList>
 800af9e:	4603      	mov	r3, r0
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d007      	beq.n	800afb4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800afa4:	4b3c      	ldr	r3, [pc, #240]	@ (800b098 <xQueueReceive+0x1c0>)
 800afa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800afb4:	f001 fa7a 	bl	800c4ac <vPortExitCritical>
				return pdPASS;
 800afb8:	2301      	movs	r3, #1
 800afba:	e069      	b.n	800b090 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d103      	bne.n	800afca <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800afc2:	f001 fa73 	bl	800c4ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e062      	b.n	800b090 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800afca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d106      	bne.n	800afde <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800afd0:	f107 0310 	add.w	r3, r7, #16
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fe9f 	bl	800bd18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800afda:	2301      	movs	r3, #1
 800afdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800afde:	f001 fa65 	bl	800c4ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800afe2:	f000 fc27 	bl	800b834 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800afe6:	f001 fa2f 	bl	800c448 <vPortEnterCritical>
 800afea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aff0:	b25b      	sxtb	r3, r3
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aff6:	d103      	bne.n	800b000 <xQueueReceive+0x128>
 800aff8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800affa:	2200      	movs	r2, #0
 800affc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b002:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b006:	b25b      	sxtb	r3, r3
 800b008:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b00c:	d103      	bne.n	800b016 <xQueueReceive+0x13e>
 800b00e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b016:	f001 fa49 	bl	800c4ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b01a:	1d3a      	adds	r2, r7, #4
 800b01c:	f107 0310 	add.w	r3, r7, #16
 800b020:	4611      	mov	r1, r2
 800b022:	4618      	mov	r0, r3
 800b024:	f000 fe8e 	bl	800bd44 <xTaskCheckForTimeOut>
 800b028:	4603      	mov	r3, r0
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d123      	bne.n	800b076 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b02e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b030:	f000 f998 	bl	800b364 <prvIsQueueEmpty>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d017      	beq.n	800b06a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b03c:	3324      	adds	r3, #36	@ 0x24
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	4611      	mov	r1, r2
 800b042:	4618      	mov	r0, r3
 800b044:	f000 fdde 	bl	800bc04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b04a:	f000 f939 	bl	800b2c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b04e:	f000 fbff 	bl	800b850 <xTaskResumeAll>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d189      	bne.n	800af6c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b058:	4b0f      	ldr	r3, [pc, #60]	@ (800b098 <xQueueReceive+0x1c0>)
 800b05a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b05e:	601a      	str	r2, [r3, #0]
 800b060:	f3bf 8f4f 	dsb	sy
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	e780      	b.n	800af6c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b06a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b06c:	f000 f928 	bl	800b2c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b070:	f000 fbee 	bl	800b850 <xTaskResumeAll>
 800b074:	e77a      	b.n	800af6c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b076:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b078:	f000 f922 	bl	800b2c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b07c:	f000 fbe8 	bl	800b850 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b080:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b082:	f000 f96f 	bl	800b364 <prvIsQueueEmpty>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f43f af6f 	beq.w	800af6c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b08e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b090:	4618      	mov	r0, r3
 800b092:	3730      	adds	r7, #48	@ 0x30
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	e000ed04 	.word	0xe000ed04

0800b09c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b08e      	sub	sp, #56	@ 0x38
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	60f8      	str	r0, [r7, #12]
 800b0a4:	60b9      	str	r1, [r7, #8]
 800b0a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800b0ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d10b      	bne.n	800b0ca <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800b0b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0b6:	f383 8811 	msr	BASEPRI, r3
 800b0ba:	f3bf 8f6f 	isb	sy
 800b0be:	f3bf 8f4f 	dsb	sy
 800b0c2:	623b      	str	r3, [r7, #32]
}
 800b0c4:	bf00      	nop
 800b0c6:	bf00      	nop
 800b0c8:	e7fd      	b.n	800b0c6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d103      	bne.n	800b0d8 <xQueueReceiveFromISR+0x3c>
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d101      	bne.n	800b0dc <xQueueReceiveFromISR+0x40>
 800b0d8:	2301      	movs	r3, #1
 800b0da:	e000      	b.n	800b0de <xQueueReceiveFromISR+0x42>
 800b0dc:	2300      	movs	r3, #0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d10b      	bne.n	800b0fa <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800b0e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e6:	f383 8811 	msr	BASEPRI, r3
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	f3bf 8f4f 	dsb	sy
 800b0f2:	61fb      	str	r3, [r7, #28]
}
 800b0f4:	bf00      	nop
 800b0f6:	bf00      	nop
 800b0f8:	e7fd      	b.n	800b0f6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b0fa:	f001 fa85 	bl	800c608 <vPortValidateInterruptPriority>
	__asm volatile
 800b0fe:	f3ef 8211 	mrs	r2, BASEPRI
 800b102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b106:	f383 8811 	msr	BASEPRI, r3
 800b10a:	f3bf 8f6f 	isb	sy
 800b10e:	f3bf 8f4f 	dsb	sy
 800b112:	61ba      	str	r2, [r7, #24]
 800b114:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b116:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b118:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b11c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b11e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b122:	2b00      	cmp	r3, #0
 800b124:	d02f      	beq.n	800b186 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b128:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b12c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b130:	68b9      	ldr	r1, [r7, #8]
 800b132:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800b134:	f000 f89e 	bl	800b274 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b13a:	1e5a      	subs	r2, r3, #1
 800b13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b13e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b140:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800b144:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b148:	d112      	bne.n	800b170 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b14a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b14c:	691b      	ldr	r3, [r3, #16]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d016      	beq.n	800b180 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b154:	3310      	adds	r3, #16
 800b156:	4618      	mov	r0, r3
 800b158:	f000 fd7a 	bl	800bc50 <xTaskRemoveFromEventList>
 800b15c:	4603      	mov	r3, r0
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d00e      	beq.n	800b180 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00b      	beq.n	800b180 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2201      	movs	r2, #1
 800b16c:	601a      	str	r2, [r3, #0]
 800b16e:	e007      	b.n	800b180 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b170:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b174:	3301      	adds	r3, #1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	b25a      	sxtb	r2, r3
 800b17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b17c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800b180:	2301      	movs	r3, #1
 800b182:	637b      	str	r3, [r7, #52]	@ 0x34
 800b184:	e001      	b.n	800b18a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800b186:	2300      	movs	r3, #0
 800b188:	637b      	str	r3, [r7, #52]	@ 0x34
 800b18a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b18c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	f383 8811 	msr	BASEPRI, r3
}
 800b194:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3738      	adds	r7, #56	@ 0x38
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b086      	sub	sp, #24
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d10d      	bne.n	800b1da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d14d      	bne.n	800b262 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	f000 ff20 	bl	800c010 <xTaskPriorityDisinherit>
 800b1d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	609a      	str	r2, [r3, #8]
 800b1d8:	e043      	b.n	800b262 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d119      	bne.n	800b214 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	6858      	ldr	r0, [r3, #4]
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1e8:	461a      	mov	r2, r3
 800b1ea:	68b9      	ldr	r1, [r7, #8]
 800b1ec:	f002 f84e 	bl	800d28c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1f8:	441a      	add	r2, r3
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	685a      	ldr	r2, [r3, #4]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	429a      	cmp	r2, r3
 800b208:	d32b      	bcc.n	800b262 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681a      	ldr	r2, [r3, #0]
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	605a      	str	r2, [r3, #4]
 800b212:	e026      	b.n	800b262 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	68d8      	ldr	r0, [r3, #12]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b21c:	461a      	mov	r2, r3
 800b21e:	68b9      	ldr	r1, [r7, #8]
 800b220:	f002 f834 	bl	800d28c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	68da      	ldr	r2, [r3, #12]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b22c:	425b      	negs	r3, r3
 800b22e:	441a      	add	r2, r3
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	68da      	ldr	r2, [r3, #12]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	d207      	bcs.n	800b250 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	689a      	ldr	r2, [r3, #8]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b248:	425b      	negs	r3, r3
 800b24a:	441a      	add	r2, r3
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b02      	cmp	r3, #2
 800b254:	d105      	bne.n	800b262 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b256:	693b      	ldr	r3, [r7, #16]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	3b01      	subs	r3, #1
 800b260:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	1c5a      	adds	r2, r3, #1
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b26a:	697b      	ldr	r3, [r7, #20]
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	3718      	adds	r7, #24
 800b270:	46bd      	mov	sp, r7
 800b272:	bd80      	pop	{r7, pc}

0800b274 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b274:	b580      	push	{r7, lr}
 800b276:	b082      	sub	sp, #8
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
 800b27c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b282:	2b00      	cmp	r3, #0
 800b284:	d018      	beq.n	800b2b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	68da      	ldr	r2, [r3, #12]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b28e:	441a      	add	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	68da      	ldr	r2, [r3, #12]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	689b      	ldr	r3, [r3, #8]
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d303      	bcc.n	800b2a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681a      	ldr	r2, [r3, #0]
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	68d9      	ldr	r1, [r3, #12]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	6838      	ldr	r0, [r7, #0]
 800b2b4:	f001 ffea 	bl	800d28c <memcpy>
	}
}
 800b2b8:	bf00      	nop
 800b2ba:	3708      	adds	r7, #8
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	bd80      	pop	{r7, pc}

0800b2c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b2c8:	f001 f8be 	bl	800c448 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b2d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2d4:	e011      	b.n	800b2fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d012      	beq.n	800b304 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	3324      	adds	r3, #36	@ 0x24
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 fcb4 	bl	800bc50 <xTaskRemoveFromEventList>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b2ee:	f000 fd8d 	bl	800be0c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b2f2:	7bfb      	ldrb	r3, [r7, #15]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	b2db      	uxtb	r3, r3
 800b2f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b2fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dce9      	bgt.n	800b2d6 <prvUnlockQueue+0x16>
 800b302:	e000      	b.n	800b306 <prvUnlockQueue+0x46>
					break;
 800b304:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	22ff      	movs	r2, #255	@ 0xff
 800b30a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b30e:	f001 f8cd 	bl	800c4ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b312:	f001 f899 	bl	800c448 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b31c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b31e:	e011      	b.n	800b344 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	691b      	ldr	r3, [r3, #16]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d012      	beq.n	800b34e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	3310      	adds	r3, #16
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fc8f 	bl	800bc50 <xTaskRemoveFromEventList>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b338:	f000 fd68 	bl	800be0c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b33c:	7bbb      	ldrb	r3, [r7, #14]
 800b33e:	3b01      	subs	r3, #1
 800b340:	b2db      	uxtb	r3, r3
 800b342:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	dce9      	bgt.n	800b320 <prvUnlockQueue+0x60>
 800b34c:	e000      	b.n	800b350 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b34e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	22ff      	movs	r2, #255	@ 0xff
 800b354:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b358:	f001 f8a8 	bl	800c4ac <vPortExitCritical>
}
 800b35c:	bf00      	nop
 800b35e:	3710      	adds	r7, #16
 800b360:	46bd      	mov	sp, r7
 800b362:	bd80      	pop	{r7, pc}

0800b364 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b36c:	f001 f86c 	bl	800c448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b374:	2b00      	cmp	r3, #0
 800b376:	d102      	bne.n	800b37e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b378:	2301      	movs	r3, #1
 800b37a:	60fb      	str	r3, [r7, #12]
 800b37c:	e001      	b.n	800b382 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b37e:	2300      	movs	r3, #0
 800b380:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b382:	f001 f893 	bl	800c4ac <vPortExitCritical>

	return xReturn;
 800b386:	68fb      	ldr	r3, [r7, #12]
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3710      	adds	r7, #16
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}

0800b390 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b398:	f001 f856 	bl	800c448 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3a4:	429a      	cmp	r2, r3
 800b3a6:	d102      	bne.n	800b3ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	60fb      	str	r3, [r7, #12]
 800b3ac:	e001      	b.n	800b3b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3b2:	f001 f87b 	bl	800c4ac <vPortExitCritical>

	return xReturn;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3710      	adds	r7, #16
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b08e      	sub	sp, #56	@ 0x38
 800b3c4:	af04      	add	r7, sp, #16
 800b3c6:	60f8      	str	r0, [r7, #12]
 800b3c8:	60b9      	str	r1, [r7, #8]
 800b3ca:	607a      	str	r2, [r7, #4]
 800b3cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b3ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d10b      	bne.n	800b3ec <xTaskCreateStatic+0x2c>
	__asm volatile
 800b3d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3d8:	f383 8811 	msr	BASEPRI, r3
 800b3dc:	f3bf 8f6f 	isb	sy
 800b3e0:	f3bf 8f4f 	dsb	sy
 800b3e4:	623b      	str	r3, [r7, #32]
}
 800b3e6:	bf00      	nop
 800b3e8:	bf00      	nop
 800b3ea:	e7fd      	b.n	800b3e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b3ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d10b      	bne.n	800b40a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b3f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b3f6:	f383 8811 	msr	BASEPRI, r3
 800b3fa:	f3bf 8f6f 	isb	sy
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	61fb      	str	r3, [r7, #28]
}
 800b404:	bf00      	nop
 800b406:	bf00      	nop
 800b408:	e7fd      	b.n	800b406 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b40a:	2358      	movs	r3, #88	@ 0x58
 800b40c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	2b58      	cmp	r3, #88	@ 0x58
 800b412:	d00b      	beq.n	800b42c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b418:	f383 8811 	msr	BASEPRI, r3
 800b41c:	f3bf 8f6f 	isb	sy
 800b420:	f3bf 8f4f 	dsb	sy
 800b424:	61bb      	str	r3, [r7, #24]
}
 800b426:	bf00      	nop
 800b428:	bf00      	nop
 800b42a:	e7fd      	b.n	800b428 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b42c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b430:	2b00      	cmp	r3, #0
 800b432:	d01e      	beq.n	800b472 <xTaskCreateStatic+0xb2>
 800b434:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b436:	2b00      	cmp	r3, #0
 800b438:	d01b      	beq.n	800b472 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b440:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b442:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	2202      	movs	r2, #2
 800b448:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b44c:	2300      	movs	r3, #0
 800b44e:	9303      	str	r3, [sp, #12]
 800b450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b452:	9302      	str	r3, [sp, #8]
 800b454:	f107 0314 	add.w	r3, r7, #20
 800b458:	9301      	str	r3, [sp, #4]
 800b45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45c:	9300      	str	r3, [sp, #0]
 800b45e:	683b      	ldr	r3, [r7, #0]
 800b460:	687a      	ldr	r2, [r7, #4]
 800b462:	68b9      	ldr	r1, [r7, #8]
 800b464:	68f8      	ldr	r0, [r7, #12]
 800b466:	f000 f850 	bl	800b50a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b46a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b46c:	f000 f8e0 	bl	800b630 <prvAddNewTaskToReadyList>
 800b470:	e001      	b.n	800b476 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b472:	2300      	movs	r3, #0
 800b474:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b476:	697b      	ldr	r3, [r7, #20]
	}
 800b478:	4618      	mov	r0, r3
 800b47a:	3728      	adds	r7, #40	@ 0x28
 800b47c:	46bd      	mov	sp, r7
 800b47e:	bd80      	pop	{r7, pc}

0800b480 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b480:	b580      	push	{r7, lr}
 800b482:	b08c      	sub	sp, #48	@ 0x30
 800b484:	af04      	add	r7, sp, #16
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	603b      	str	r3, [r7, #0]
 800b48c:	4613      	mov	r3, r2
 800b48e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b490:	88fb      	ldrh	r3, [r7, #6]
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	4618      	mov	r0, r3
 800b496:	f001 f8f9 	bl	800c68c <pvPortMalloc>
 800b49a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d00e      	beq.n	800b4c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b4a2:	2058      	movs	r0, #88	@ 0x58
 800b4a4:	f001 f8f2 	bl	800c68c <pvPortMalloc>
 800b4a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b4aa:	69fb      	ldr	r3, [r7, #28]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d003      	beq.n	800b4b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b4b0:	69fb      	ldr	r3, [r7, #28]
 800b4b2:	697a      	ldr	r2, [r7, #20]
 800b4b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b4b6:	e005      	b.n	800b4c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b4b8:	6978      	ldr	r0, [r7, #20]
 800b4ba:	f001 f9bb 	bl	800c834 <vPortFree>
 800b4be:	e001      	b.n	800b4c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b4c4:	69fb      	ldr	r3, [r7, #28]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d017      	beq.n	800b4fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b4ca:	69fb      	ldr	r3, [r7, #28]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b4d2:	88fa      	ldrh	r2, [r7, #6]
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	9303      	str	r3, [sp, #12]
 800b4d8:	69fb      	ldr	r3, [r7, #28]
 800b4da:	9302      	str	r3, [sp, #8]
 800b4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4de:	9301      	str	r3, [sp, #4]
 800b4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4e2:	9300      	str	r3, [sp, #0]
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	68b9      	ldr	r1, [r7, #8]
 800b4e8:	68f8      	ldr	r0, [r7, #12]
 800b4ea:	f000 f80e 	bl	800b50a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b4ee:	69f8      	ldr	r0, [r7, #28]
 800b4f0:	f000 f89e 	bl	800b630 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	61bb      	str	r3, [r7, #24]
 800b4f8:	e002      	b.n	800b500 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b4fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b500:	69bb      	ldr	r3, [r7, #24]
	}
 800b502:	4618      	mov	r0, r3
 800b504:	3720      	adds	r7, #32
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b088      	sub	sp, #32
 800b50e:	af00      	add	r7, sp, #0
 800b510:	60f8      	str	r0, [r7, #12]
 800b512:	60b9      	str	r1, [r7, #8]
 800b514:	607a      	str	r2, [r7, #4]
 800b516:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	461a      	mov	r2, r3
 800b522:	21a5      	movs	r1, #165	@ 0xa5
 800b524:	f001 fe6e 	bl	800d204 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b532:	3b01      	subs	r3, #1
 800b534:	009b      	lsls	r3, r3, #2
 800b536:	4413      	add	r3, r2
 800b538:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b53a:	69bb      	ldr	r3, [r7, #24]
 800b53c:	f023 0307 	bic.w	r3, r3, #7
 800b540:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	f003 0307 	and.w	r3, r3, #7
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00b      	beq.n	800b564 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b550:	f383 8811 	msr	BASEPRI, r3
 800b554:	f3bf 8f6f 	isb	sy
 800b558:	f3bf 8f4f 	dsb	sy
 800b55c:	617b      	str	r3, [r7, #20]
}
 800b55e:	bf00      	nop
 800b560:	bf00      	nop
 800b562:	e7fd      	b.n	800b560 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d01f      	beq.n	800b5aa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b56a:	2300      	movs	r3, #0
 800b56c:	61fb      	str	r3, [r7, #28]
 800b56e:	e012      	b.n	800b596 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b570:	68ba      	ldr	r2, [r7, #8]
 800b572:	69fb      	ldr	r3, [r7, #28]
 800b574:	4413      	add	r3, r2
 800b576:	7819      	ldrb	r1, [r3, #0]
 800b578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b57a:	69fb      	ldr	r3, [r7, #28]
 800b57c:	4413      	add	r3, r2
 800b57e:	3334      	adds	r3, #52	@ 0x34
 800b580:	460a      	mov	r2, r1
 800b582:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b584:	68ba      	ldr	r2, [r7, #8]
 800b586:	69fb      	ldr	r3, [r7, #28]
 800b588:	4413      	add	r3, r2
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d006      	beq.n	800b59e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	3301      	adds	r3, #1
 800b594:	61fb      	str	r3, [r7, #28]
 800b596:	69fb      	ldr	r3, [r7, #28]
 800b598:	2b0f      	cmp	r3, #15
 800b59a:	d9e9      	bls.n	800b570 <prvInitialiseNewTask+0x66>
 800b59c:	e000      	b.n	800b5a0 <prvInitialiseNewTask+0x96>
			{
				break;
 800b59e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b5a8:	e003      	b.n	800b5b2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b5b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5b4:	2b06      	cmp	r3, #6
 800b5b6:	d901      	bls.n	800b5bc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b5b8:	2306      	movs	r3, #6
 800b5ba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5c0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b5c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b5c6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b5ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d0:	3304      	adds	r3, #4
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff f90a 	bl	800a7ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5da:	3318      	adds	r3, #24
 800b5dc:	4618      	mov	r0, r3
 800b5de:	f7ff f905 	bl	800a7ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b5e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5e6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b5e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ea:	f1c3 0207 	rsb	r2, r3, #7
 800b5ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b5f6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800b5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	64da      	str	r2, [r3, #76]	@ 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b600:	2200      	movs	r2, #0
 800b602:	651a      	str	r2, [r3, #80]	@ 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b606:	2200      	movs	r2, #0
 800b608:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b60c:	683a      	ldr	r2, [r7, #0]
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	69b8      	ldr	r0, [r7, #24]
 800b612:	f000 fdeb 	bl	800c1ec <pxPortInitialiseStack>
 800b616:	4602      	mov	r2, r0
 800b618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d002      	beq.n	800b628 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b626:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b628:	bf00      	nop
 800b62a:	3720      	adds	r7, #32
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b638:	f000 ff06 	bl	800c448 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b63c:	4b2a      	ldr	r3, [pc, #168]	@ (800b6e8 <prvAddNewTaskToReadyList+0xb8>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	3301      	adds	r3, #1
 800b642:	4a29      	ldr	r2, [pc, #164]	@ (800b6e8 <prvAddNewTaskToReadyList+0xb8>)
 800b644:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b646:	4b29      	ldr	r3, [pc, #164]	@ (800b6ec <prvAddNewTaskToReadyList+0xbc>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d109      	bne.n	800b662 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b64e:	4a27      	ldr	r2, [pc, #156]	@ (800b6ec <prvAddNewTaskToReadyList+0xbc>)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b654:	4b24      	ldr	r3, [pc, #144]	@ (800b6e8 <prvAddNewTaskToReadyList+0xb8>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	2b01      	cmp	r3, #1
 800b65a:	d110      	bne.n	800b67e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b65c:	f000 fbfc 	bl	800be58 <prvInitialiseTaskLists>
 800b660:	e00d      	b.n	800b67e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b662:	4b23      	ldr	r3, [pc, #140]	@ (800b6f0 <prvAddNewTaskToReadyList+0xc0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d109      	bne.n	800b67e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b66a:	4b20      	ldr	r3, [pc, #128]	@ (800b6ec <prvAddNewTaskToReadyList+0xbc>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b674:	429a      	cmp	r2, r3
 800b676:	d802      	bhi.n	800b67e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b678:	4a1c      	ldr	r2, [pc, #112]	@ (800b6ec <prvAddNewTaskToReadyList+0xbc>)
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b67e:	4b1d      	ldr	r3, [pc, #116]	@ (800b6f4 <prvAddNewTaskToReadyList+0xc4>)
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	3301      	adds	r3, #1
 800b684:	4a1b      	ldr	r2, [pc, #108]	@ (800b6f4 <prvAddNewTaskToReadyList+0xc4>)
 800b686:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b68c:	2201      	movs	r2, #1
 800b68e:	409a      	lsls	r2, r3
 800b690:	4b19      	ldr	r3, [pc, #100]	@ (800b6f8 <prvAddNewTaskToReadyList+0xc8>)
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	4313      	orrs	r3, r2
 800b696:	4a18      	ldr	r2, [pc, #96]	@ (800b6f8 <prvAddNewTaskToReadyList+0xc8>)
 800b698:	6013      	str	r3, [r2, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b69e:	4613      	mov	r3, r2
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	4413      	add	r3, r2
 800b6a4:	009b      	lsls	r3, r3, #2
 800b6a6:	4a15      	ldr	r2, [pc, #84]	@ (800b6fc <prvAddNewTaskToReadyList+0xcc>)
 800b6a8:	441a      	add	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	3304      	adds	r3, #4
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	4610      	mov	r0, r2
 800b6b2:	f7ff f8a8 	bl	800a806 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b6b6:	f000 fef9 	bl	800c4ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b6ba:	4b0d      	ldr	r3, [pc, #52]	@ (800b6f0 <prvAddNewTaskToReadyList+0xc0>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d00e      	beq.n	800b6e0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b6c2:	4b0a      	ldr	r3, [pc, #40]	@ (800b6ec <prvAddNewTaskToReadyList+0xbc>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d207      	bcs.n	800b6e0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b6d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b700 <prvAddNewTaskToReadyList+0xd0>)
 800b6d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6d6:	601a      	str	r2, [r3, #0]
 800b6d8:	f3bf 8f4f 	dsb	sy
 800b6dc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b6e0:	bf00      	nop
 800b6e2:	3708      	adds	r7, #8
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	200006ac 	.word	0x200006ac
 800b6ec:	200005ac 	.word	0x200005ac
 800b6f0:	200006b8 	.word	0x200006b8
 800b6f4:	200006c8 	.word	0x200006c8
 800b6f8:	200006b4 	.word	0x200006b4
 800b6fc:	200005b0 	.word	0x200005b0
 800b700:	e000ed04 	.word	0xe000ed04

0800b704 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b70c:	2300      	movs	r3, #0
 800b70e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d018      	beq.n	800b748 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b716:	4b14      	ldr	r3, [pc, #80]	@ (800b768 <vTaskDelay+0x64>)
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00b      	beq.n	800b736 <vTaskDelay+0x32>
	__asm volatile
 800b71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b722:	f383 8811 	msr	BASEPRI, r3
 800b726:	f3bf 8f6f 	isb	sy
 800b72a:	f3bf 8f4f 	dsb	sy
 800b72e:	60bb      	str	r3, [r7, #8]
}
 800b730:	bf00      	nop
 800b732:	bf00      	nop
 800b734:	e7fd      	b.n	800b732 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b736:	f000 f87d 	bl	800b834 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b73a:	2100      	movs	r1, #0
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fcef 	bl	800c120 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b742:	f000 f885 	bl	800b850 <xTaskResumeAll>
 800b746:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d107      	bne.n	800b75e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b74e:	4b07      	ldr	r3, [pc, #28]	@ (800b76c <vTaskDelay+0x68>)
 800b750:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b754:	601a      	str	r2, [r3, #0]
 800b756:	f3bf 8f4f 	dsb	sy
 800b75a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b75e:	bf00      	nop
 800b760:	3710      	adds	r7, #16
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
 800b766:	bf00      	nop
 800b768:	200006d4 	.word	0x200006d4
 800b76c:	e000ed04 	.word	0xe000ed04

0800b770 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b770:	b580      	push	{r7, lr}
 800b772:	b08a      	sub	sp, #40	@ 0x28
 800b774:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b776:	2300      	movs	r3, #0
 800b778:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b77a:	2300      	movs	r3, #0
 800b77c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b77e:	463a      	mov	r2, r7
 800b780:	1d39      	adds	r1, r7, #4
 800b782:	f107 0308 	add.w	r3, r7, #8
 800b786:	4618      	mov	r0, r3
 800b788:	f7f5 f85e 	bl	8000848 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b78c:	6839      	ldr	r1, [r7, #0]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	9202      	str	r2, [sp, #8]
 800b794:	9301      	str	r3, [sp, #4]
 800b796:	2300      	movs	r3, #0
 800b798:	9300      	str	r3, [sp, #0]
 800b79a:	2300      	movs	r3, #0
 800b79c:	460a      	mov	r2, r1
 800b79e:	491f      	ldr	r1, [pc, #124]	@ (800b81c <vTaskStartScheduler+0xac>)
 800b7a0:	481f      	ldr	r0, [pc, #124]	@ (800b820 <vTaskStartScheduler+0xb0>)
 800b7a2:	f7ff fe0d 	bl	800b3c0 <xTaskCreateStatic>
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	4a1e      	ldr	r2, [pc, #120]	@ (800b824 <vTaskStartScheduler+0xb4>)
 800b7aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b7ac:	4b1d      	ldr	r3, [pc, #116]	@ (800b824 <vTaskStartScheduler+0xb4>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d002      	beq.n	800b7ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	617b      	str	r3, [r7, #20]
 800b7b8:	e001      	b.n	800b7be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	2b01      	cmp	r3, #1
 800b7c2:	d116      	bne.n	800b7f2 <vTaskStartScheduler+0x82>
	__asm volatile
 800b7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7c8:	f383 8811 	msr	BASEPRI, r3
 800b7cc:	f3bf 8f6f 	isb	sy
 800b7d0:	f3bf 8f4f 	dsb	sy
 800b7d4:	613b      	str	r3, [r7, #16]
}
 800b7d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7d8:	4b13      	ldr	r3, [pc, #76]	@ (800b828 <vTaskStartScheduler+0xb8>)
 800b7da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b7de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7e0:	4b12      	ldr	r3, [pc, #72]	@ (800b82c <vTaskStartScheduler+0xbc>)
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7e6:	4b12      	ldr	r3, [pc, #72]	@ (800b830 <vTaskStartScheduler+0xc0>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7ec:	f000 fd88 	bl	800c300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7f0:	e00f      	b.n	800b812 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b7f8:	d10b      	bne.n	800b812 <vTaskStartScheduler+0xa2>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	60fb      	str	r3, [r7, #12]
}
 800b80c:	bf00      	nop
 800b80e:	bf00      	nop
 800b810:	e7fd      	b.n	800b80e <vTaskStartScheduler+0x9e>
}
 800b812:	bf00      	nop
 800b814:	3718      	adds	r7, #24
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop
 800b81c:	0800d3b8 	.word	0x0800d3b8
 800b820:	0800be25 	.word	0x0800be25
 800b824:	200006d0 	.word	0x200006d0
 800b828:	200006cc 	.word	0x200006cc
 800b82c:	200006b8 	.word	0x200006b8
 800b830:	200006b0 	.word	0x200006b0

0800b834 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b834:	b480      	push	{r7}
 800b836:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b838:	4b04      	ldr	r3, [pc, #16]	@ (800b84c <vTaskSuspendAll+0x18>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	3301      	adds	r3, #1
 800b83e:	4a03      	ldr	r2, [pc, #12]	@ (800b84c <vTaskSuspendAll+0x18>)
 800b840:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b842:	bf00      	nop
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr
 800b84c:	200006d4 	.word	0x200006d4

0800b850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b856:	2300      	movs	r3, #0
 800b858:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b85a:	2300      	movs	r3, #0
 800b85c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b85e:	4b42      	ldr	r3, [pc, #264]	@ (800b968 <xTaskResumeAll+0x118>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d10b      	bne.n	800b87e <xTaskResumeAll+0x2e>
	__asm volatile
 800b866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86a:	f383 8811 	msr	BASEPRI, r3
 800b86e:	f3bf 8f6f 	isb	sy
 800b872:	f3bf 8f4f 	dsb	sy
 800b876:	603b      	str	r3, [r7, #0]
}
 800b878:	bf00      	nop
 800b87a:	bf00      	nop
 800b87c:	e7fd      	b.n	800b87a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b87e:	f000 fde3 	bl	800c448 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b882:	4b39      	ldr	r3, [pc, #228]	@ (800b968 <xTaskResumeAll+0x118>)
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	3b01      	subs	r3, #1
 800b888:	4a37      	ldr	r2, [pc, #220]	@ (800b968 <xTaskResumeAll+0x118>)
 800b88a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b88c:	4b36      	ldr	r3, [pc, #216]	@ (800b968 <xTaskResumeAll+0x118>)
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d161      	bne.n	800b958 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b894:	4b35      	ldr	r3, [pc, #212]	@ (800b96c <xTaskResumeAll+0x11c>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d05d      	beq.n	800b958 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b89c:	e02e      	b.n	800b8fc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b89e:	4b34      	ldr	r3, [pc, #208]	@ (800b970 <xTaskResumeAll+0x120>)
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	3318      	adds	r3, #24
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7ff f808 	bl	800a8c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	3304      	adds	r3, #4
 800b8b4:	4618      	mov	r0, r3
 800b8b6:	f7ff f803 	bl	800a8c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8be:	2201      	movs	r2, #1
 800b8c0:	409a      	lsls	r2, r3
 800b8c2:	4b2c      	ldr	r3, [pc, #176]	@ (800b974 <xTaskResumeAll+0x124>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	4313      	orrs	r3, r2
 800b8c8:	4a2a      	ldr	r2, [pc, #168]	@ (800b974 <xTaskResumeAll+0x124>)
 800b8ca:	6013      	str	r3, [r2, #0]
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	009b      	lsls	r3, r3, #2
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	4a27      	ldr	r2, [pc, #156]	@ (800b978 <xTaskResumeAll+0x128>)
 800b8da:	441a      	add	r2, r3
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	3304      	adds	r3, #4
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f7fe ff8f 	bl	800a806 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ec:	4b23      	ldr	r3, [pc, #140]	@ (800b97c <xTaskResumeAll+0x12c>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d302      	bcc.n	800b8fc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b8f6:	4b22      	ldr	r3, [pc, #136]	@ (800b980 <xTaskResumeAll+0x130>)
 800b8f8:	2201      	movs	r2, #1
 800b8fa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8fc:	4b1c      	ldr	r3, [pc, #112]	@ (800b970 <xTaskResumeAll+0x120>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d1cc      	bne.n	800b89e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d001      	beq.n	800b90e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b90a:	f000 fb43 	bl	800bf94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b90e:	4b1d      	ldr	r3, [pc, #116]	@ (800b984 <xTaskResumeAll+0x134>)
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d010      	beq.n	800b93c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b91a:	f000 f837 	bl	800b98c <xTaskIncrementTick>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d002      	beq.n	800b92a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b924:	4b16      	ldr	r3, [pc, #88]	@ (800b980 <xTaskResumeAll+0x130>)
 800b926:	2201      	movs	r2, #1
 800b928:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	3b01      	subs	r3, #1
 800b92e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d1f1      	bne.n	800b91a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b936:	4b13      	ldr	r3, [pc, #76]	@ (800b984 <xTaskResumeAll+0x134>)
 800b938:	2200      	movs	r2, #0
 800b93a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b93c:	4b10      	ldr	r3, [pc, #64]	@ (800b980 <xTaskResumeAll+0x130>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d009      	beq.n	800b958 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b944:	2301      	movs	r3, #1
 800b946:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b948:	4b0f      	ldr	r3, [pc, #60]	@ (800b988 <xTaskResumeAll+0x138>)
 800b94a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b94e:	601a      	str	r2, [r3, #0]
 800b950:	f3bf 8f4f 	dsb	sy
 800b954:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b958:	f000 fda8 	bl	800c4ac <vPortExitCritical>

	return xAlreadyYielded;
 800b95c:	68bb      	ldr	r3, [r7, #8]
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3710      	adds	r7, #16
 800b962:	46bd      	mov	sp, r7
 800b964:	bd80      	pop	{r7, pc}
 800b966:	bf00      	nop
 800b968:	200006d4 	.word	0x200006d4
 800b96c:	200006ac 	.word	0x200006ac
 800b970:	2000066c 	.word	0x2000066c
 800b974:	200006b4 	.word	0x200006b4
 800b978:	200005b0 	.word	0x200005b0
 800b97c:	200005ac 	.word	0x200005ac
 800b980:	200006c0 	.word	0x200006c0
 800b984:	200006bc 	.word	0x200006bc
 800b988:	e000ed04 	.word	0xe000ed04

0800b98c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b992:	2300      	movs	r3, #0
 800b994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b996:	4b4f      	ldr	r3, [pc, #316]	@ (800bad4 <xTaskIncrementTick+0x148>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f040 808f 	bne.w	800babe <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9a0:	4b4d      	ldr	r3, [pc, #308]	@ (800bad8 <xTaskIncrementTick+0x14c>)
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9a8:	4a4b      	ldr	r2, [pc, #300]	@ (800bad8 <xTaskIncrementTick+0x14c>)
 800b9aa:	693b      	ldr	r3, [r7, #16]
 800b9ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d121      	bne.n	800b9f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9b4:	4b49      	ldr	r3, [pc, #292]	@ (800badc <xTaskIncrementTick+0x150>)
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00b      	beq.n	800b9d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b9be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c2:	f383 8811 	msr	BASEPRI, r3
 800b9c6:	f3bf 8f6f 	isb	sy
 800b9ca:	f3bf 8f4f 	dsb	sy
 800b9ce:	603b      	str	r3, [r7, #0]
}
 800b9d0:	bf00      	nop
 800b9d2:	bf00      	nop
 800b9d4:	e7fd      	b.n	800b9d2 <xTaskIncrementTick+0x46>
 800b9d6:	4b41      	ldr	r3, [pc, #260]	@ (800badc <xTaskIncrementTick+0x150>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	60fb      	str	r3, [r7, #12]
 800b9dc:	4b40      	ldr	r3, [pc, #256]	@ (800bae0 <xTaskIncrementTick+0x154>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a3e      	ldr	r2, [pc, #248]	@ (800badc <xTaskIncrementTick+0x150>)
 800b9e2:	6013      	str	r3, [r2, #0]
 800b9e4:	4a3e      	ldr	r2, [pc, #248]	@ (800bae0 <xTaskIncrementTick+0x154>)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	6013      	str	r3, [r2, #0]
 800b9ea:	4b3e      	ldr	r3, [pc, #248]	@ (800bae4 <xTaskIncrementTick+0x158>)
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	4a3c      	ldr	r2, [pc, #240]	@ (800bae4 <xTaskIncrementTick+0x158>)
 800b9f2:	6013      	str	r3, [r2, #0]
 800b9f4:	f000 face 	bl	800bf94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9f8:	4b3b      	ldr	r3, [pc, #236]	@ (800bae8 <xTaskIncrementTick+0x15c>)
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	d348      	bcc.n	800ba94 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba02:	4b36      	ldr	r3, [pc, #216]	@ (800badc <xTaskIncrementTick+0x150>)
 800ba04:	681b      	ldr	r3, [r3, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d104      	bne.n	800ba16 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0c:	4b36      	ldr	r3, [pc, #216]	@ (800bae8 <xTaskIncrementTick+0x15c>)
 800ba0e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba12:	601a      	str	r2, [r3, #0]
					break;
 800ba14:	e03e      	b.n	800ba94 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba16:	4b31      	ldr	r3, [pc, #196]	@ (800badc <xTaskIncrementTick+0x150>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba26:	693a      	ldr	r2, [r7, #16]
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	d203      	bcs.n	800ba36 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba2e:	4a2e      	ldr	r2, [pc, #184]	@ (800bae8 <xTaskIncrementTick+0x15c>)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba34:	e02e      	b.n	800ba94 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba36:	68bb      	ldr	r3, [r7, #8]
 800ba38:	3304      	adds	r3, #4
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	f7fe ff40 	bl	800a8c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d004      	beq.n	800ba52 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	3318      	adds	r3, #24
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	f7fe ff37 	bl	800a8c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba56:	2201      	movs	r2, #1
 800ba58:	409a      	lsls	r2, r3
 800ba5a:	4b24      	ldr	r3, [pc, #144]	@ (800baec <xTaskIncrementTick+0x160>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	4a22      	ldr	r2, [pc, #136]	@ (800baec <xTaskIncrementTick+0x160>)
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba68:	4613      	mov	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	4413      	add	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4a1f      	ldr	r2, [pc, #124]	@ (800baf0 <xTaskIncrementTick+0x164>)
 800ba72:	441a      	add	r2, r3
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	3304      	adds	r3, #4
 800ba78:	4619      	mov	r1, r3
 800ba7a:	4610      	mov	r0, r2
 800ba7c:	f7fe fec3 	bl	800a806 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba84:	4b1b      	ldr	r3, [pc, #108]	@ (800baf4 <xTaskIncrementTick+0x168>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d3b9      	bcc.n	800ba02 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba92:	e7b6      	b.n	800ba02 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba94:	4b17      	ldr	r3, [pc, #92]	@ (800baf4 <xTaskIncrementTick+0x168>)
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba9a:	4915      	ldr	r1, [pc, #84]	@ (800baf0 <xTaskIncrementTick+0x164>)
 800ba9c:	4613      	mov	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	4413      	add	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	440b      	add	r3, r1
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b01      	cmp	r3, #1
 800baaa:	d901      	bls.n	800bab0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800baac:	2301      	movs	r3, #1
 800baae:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bab0:	4b11      	ldr	r3, [pc, #68]	@ (800baf8 <xTaskIncrementTick+0x16c>)
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d007      	beq.n	800bac8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800bab8:	2301      	movs	r3, #1
 800baba:	617b      	str	r3, [r7, #20]
 800babc:	e004      	b.n	800bac8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800babe:	4b0f      	ldr	r3, [pc, #60]	@ (800bafc <xTaskIncrementTick+0x170>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	3301      	adds	r3, #1
 800bac4:	4a0d      	ldr	r2, [pc, #52]	@ (800bafc <xTaskIncrementTick+0x170>)
 800bac6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bac8:	697b      	ldr	r3, [r7, #20]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3718      	adds	r7, #24
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}
 800bad2:	bf00      	nop
 800bad4:	200006d4 	.word	0x200006d4
 800bad8:	200006b0 	.word	0x200006b0
 800badc:	20000664 	.word	0x20000664
 800bae0:	20000668 	.word	0x20000668
 800bae4:	200006c4 	.word	0x200006c4
 800bae8:	200006cc 	.word	0x200006cc
 800baec:	200006b4 	.word	0x200006b4
 800baf0:	200005b0 	.word	0x200005b0
 800baf4:	200005ac 	.word	0x200005ac
 800baf8:	200006c0 	.word	0x200006c0
 800bafc:	200006bc 	.word	0x200006bc

0800bb00 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b088      	sub	sp, #32
 800bb04:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb06:	4b3a      	ldr	r3, [pc, #232]	@ (800bbf0 <vTaskSwitchContext+0xf0>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d003      	beq.n	800bb16 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb0e:	4b39      	ldr	r3, [pc, #228]	@ (800bbf4 <vTaskSwitchContext+0xf4>)
 800bb10:	2201      	movs	r2, #1
 800bb12:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb14:	e067      	b.n	800bbe6 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800bb16:	4b37      	ldr	r3, [pc, #220]	@ (800bbf4 <vTaskSwitchContext+0xf4>)
 800bb18:	2200      	movs	r2, #0
 800bb1a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800bb1c:	4b36      	ldr	r3, [pc, #216]	@ (800bbf8 <vTaskSwitchContext+0xf8>)
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bb22:	61fb      	str	r3, [r7, #28]
 800bb24:	f04f 33a5 	mov.w	r3, #2779096485	@ 0xa5a5a5a5
 800bb28:	61bb      	str	r3, [r7, #24]
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	69ba      	ldr	r2, [r7, #24]
 800bb30:	429a      	cmp	r2, r3
 800bb32:	d111      	bne.n	800bb58 <vTaskSwitchContext+0x58>
 800bb34:	69fb      	ldr	r3, [r7, #28]
 800bb36:	3304      	adds	r3, #4
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	69ba      	ldr	r2, [r7, #24]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d10b      	bne.n	800bb58 <vTaskSwitchContext+0x58>
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	3308      	adds	r3, #8
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	69ba      	ldr	r2, [r7, #24]
 800bb48:	429a      	cmp	r2, r3
 800bb4a:	d105      	bne.n	800bb58 <vTaskSwitchContext+0x58>
 800bb4c:	69fb      	ldr	r3, [r7, #28]
 800bb4e:	330c      	adds	r3, #12
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	69ba      	ldr	r2, [r7, #24]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	d008      	beq.n	800bb6a <vTaskSwitchContext+0x6a>
 800bb58:	4b27      	ldr	r3, [pc, #156]	@ (800bbf8 <vTaskSwitchContext+0xf8>)
 800bb5a:	681a      	ldr	r2, [r3, #0]
 800bb5c:	4b26      	ldr	r3, [pc, #152]	@ (800bbf8 <vTaskSwitchContext+0xf8>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	3334      	adds	r3, #52	@ 0x34
 800bb62:	4619      	mov	r1, r3
 800bb64:	4610      	mov	r0, r2
 800bb66:	f7f4 fe5c 	bl	8000822 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb6a:	4b24      	ldr	r3, [pc, #144]	@ (800bbfc <vTaskSwitchContext+0xfc>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	fab3 f383 	clz	r3, r3
 800bb76:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bb78:	7afb      	ldrb	r3, [r7, #11]
 800bb7a:	f1c3 031f 	rsb	r3, r3, #31
 800bb7e:	617b      	str	r3, [r7, #20]
 800bb80:	491f      	ldr	r1, [pc, #124]	@ (800bc00 <vTaskSwitchContext+0x100>)
 800bb82:	697a      	ldr	r2, [r7, #20]
 800bb84:	4613      	mov	r3, r2
 800bb86:	009b      	lsls	r3, r3, #2
 800bb88:	4413      	add	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	440b      	add	r3, r1
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d10b      	bne.n	800bbac <vTaskSwitchContext+0xac>
	__asm volatile
 800bb94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb98:	f383 8811 	msr	BASEPRI, r3
 800bb9c:	f3bf 8f6f 	isb	sy
 800bba0:	f3bf 8f4f 	dsb	sy
 800bba4:	607b      	str	r3, [r7, #4]
}
 800bba6:	bf00      	nop
 800bba8:	bf00      	nop
 800bbaa:	e7fd      	b.n	800bba8 <vTaskSwitchContext+0xa8>
 800bbac:	697a      	ldr	r2, [r7, #20]
 800bbae:	4613      	mov	r3, r2
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	009b      	lsls	r3, r3, #2
 800bbb6:	4a12      	ldr	r2, [pc, #72]	@ (800bc00 <vTaskSwitchContext+0x100>)
 800bbb8:	4413      	add	r3, r2
 800bbba:	613b      	str	r3, [r7, #16]
 800bbbc:	693b      	ldr	r3, [r7, #16]
 800bbbe:	685b      	ldr	r3, [r3, #4]
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	605a      	str	r2, [r3, #4]
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	685a      	ldr	r2, [r3, #4]
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	3308      	adds	r3, #8
 800bbce:	429a      	cmp	r2, r3
 800bbd0:	d104      	bne.n	800bbdc <vTaskSwitchContext+0xdc>
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	685b      	ldr	r3, [r3, #4]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	605a      	str	r2, [r3, #4]
 800bbdc:	693b      	ldr	r3, [r7, #16]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	68db      	ldr	r3, [r3, #12]
 800bbe2:	4a05      	ldr	r2, [pc, #20]	@ (800bbf8 <vTaskSwitchContext+0xf8>)
 800bbe4:	6013      	str	r3, [r2, #0]
}
 800bbe6:	bf00      	nop
 800bbe8:	3720      	adds	r7, #32
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}
 800bbee:	bf00      	nop
 800bbf0:	200006d4 	.word	0x200006d4
 800bbf4:	200006c0 	.word	0x200006c0
 800bbf8:	200005ac 	.word	0x200005ac
 800bbfc:	200006b4 	.word	0x200006b4
 800bc00:	200005b0 	.word	0x200005b0

0800bc04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc04:	b580      	push	{r7, lr}
 800bc06:	b084      	sub	sp, #16
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d10b      	bne.n	800bc2c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bc14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	60fb      	str	r3, [r7, #12]
}
 800bc26:	bf00      	nop
 800bc28:	bf00      	nop
 800bc2a:	e7fd      	b.n	800bc28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc2c:	4b07      	ldr	r3, [pc, #28]	@ (800bc4c <vTaskPlaceOnEventList+0x48>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3318      	adds	r3, #24
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7fe fe0a 	bl	800a84e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc3a:	2101      	movs	r1, #1
 800bc3c:	6838      	ldr	r0, [r7, #0]
 800bc3e:	f000 fa6f 	bl	800c120 <prvAddCurrentTaskToDelayedList>
}
 800bc42:	bf00      	nop
 800bc44:	3710      	adds	r7, #16
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	200005ac 	.word	0x200005ac

0800bc50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b086      	sub	sp, #24
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	68db      	ldr	r3, [r3, #12]
 800bc5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc60:	693b      	ldr	r3, [r7, #16]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d10b      	bne.n	800bc7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bc66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc6a:	f383 8811 	msr	BASEPRI, r3
 800bc6e:	f3bf 8f6f 	isb	sy
 800bc72:	f3bf 8f4f 	dsb	sy
 800bc76:	60fb      	str	r3, [r7, #12]
}
 800bc78:	bf00      	nop
 800bc7a:	bf00      	nop
 800bc7c:	e7fd      	b.n	800bc7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	3318      	adds	r3, #24
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7fe fe1c 	bl	800a8c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc88:	4b1d      	ldr	r3, [pc, #116]	@ (800bd00 <xTaskRemoveFromEventList+0xb0>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d11c      	bne.n	800bcca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bc90:	693b      	ldr	r3, [r7, #16]
 800bc92:	3304      	adds	r3, #4
 800bc94:	4618      	mov	r0, r3
 800bc96:	f7fe fe13 	bl	800a8c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc9e:	2201      	movs	r2, #1
 800bca0:	409a      	lsls	r2, r3
 800bca2:	4b18      	ldr	r3, [pc, #96]	@ (800bd04 <xTaskRemoveFromEventList+0xb4>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	4313      	orrs	r3, r2
 800bca8:	4a16      	ldr	r2, [pc, #88]	@ (800bd04 <xTaskRemoveFromEventList+0xb4>)
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	4a13      	ldr	r2, [pc, #76]	@ (800bd08 <xTaskRemoveFromEventList+0xb8>)
 800bcba:	441a      	add	r2, r3
 800bcbc:	693b      	ldr	r3, [r7, #16]
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	4619      	mov	r1, r3
 800bcc2:	4610      	mov	r0, r2
 800bcc4:	f7fe fd9f 	bl	800a806 <vListInsertEnd>
 800bcc8:	e005      	b.n	800bcd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bcca:	693b      	ldr	r3, [r7, #16]
 800bccc:	3318      	adds	r3, #24
 800bcce:	4619      	mov	r1, r3
 800bcd0:	480e      	ldr	r0, [pc, #56]	@ (800bd0c <xTaskRemoveFromEventList+0xbc>)
 800bcd2:	f7fe fd98 	bl	800a806 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcda:	4b0d      	ldr	r3, [pc, #52]	@ (800bd10 <xTaskRemoveFromEventList+0xc0>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d905      	bls.n	800bcf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bce4:	2301      	movs	r3, #1
 800bce6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bce8:	4b0a      	ldr	r3, [pc, #40]	@ (800bd14 <xTaskRemoveFromEventList+0xc4>)
 800bcea:	2201      	movs	r2, #1
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	e001      	b.n	800bcf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bcf4:	697b      	ldr	r3, [r7, #20]
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	3718      	adds	r7, #24
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	bd80      	pop	{r7, pc}
 800bcfe:	bf00      	nop
 800bd00:	200006d4 	.word	0x200006d4
 800bd04:	200006b4 	.word	0x200006b4
 800bd08:	200005b0 	.word	0x200005b0
 800bd0c:	2000066c 	.word	0x2000066c
 800bd10:	200005ac 	.word	0x200005ac
 800bd14:	200006c0 	.word	0x200006c0

0800bd18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b083      	sub	sp, #12
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd20:	4b06      	ldr	r3, [pc, #24]	@ (800bd3c <vTaskInternalSetTimeOutState+0x24>)
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd28:	4b05      	ldr	r3, [pc, #20]	@ (800bd40 <vTaskInternalSetTimeOutState+0x28>)
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	605a      	str	r2, [r3, #4]
}
 800bd30:	bf00      	nop
 800bd32:	370c      	adds	r7, #12
 800bd34:	46bd      	mov	sp, r7
 800bd36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd3a:	4770      	bx	lr
 800bd3c:	200006c4 	.word	0x200006c4
 800bd40:	200006b0 	.word	0x200006b0

0800bd44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
 800bd4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10b      	bne.n	800bd6c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800bd54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd58:	f383 8811 	msr	BASEPRI, r3
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f3bf 8f4f 	dsb	sy
 800bd64:	613b      	str	r3, [r7, #16]
}
 800bd66:	bf00      	nop
 800bd68:	bf00      	nop
 800bd6a:	e7fd      	b.n	800bd68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10b      	bne.n	800bd8a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800bd72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd76:	f383 8811 	msr	BASEPRI, r3
 800bd7a:	f3bf 8f6f 	isb	sy
 800bd7e:	f3bf 8f4f 	dsb	sy
 800bd82:	60fb      	str	r3, [r7, #12]
}
 800bd84:	bf00      	nop
 800bd86:	bf00      	nop
 800bd88:	e7fd      	b.n	800bd86 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800bd8a:	f000 fb5d 	bl	800c448 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bd8e:	4b1d      	ldr	r3, [pc, #116]	@ (800be04 <xTaskCheckForTimeOut+0xc0>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	685b      	ldr	r3, [r3, #4]
 800bd98:	69ba      	ldr	r2, [r7, #24]
 800bd9a:	1ad3      	subs	r3, r2, r3
 800bd9c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bda6:	d102      	bne.n	800bdae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bda8:	2300      	movs	r3, #0
 800bdaa:	61fb      	str	r3, [r7, #28]
 800bdac:	e023      	b.n	800bdf6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	681a      	ldr	r2, [r3, #0]
 800bdb2:	4b15      	ldr	r3, [pc, #84]	@ (800be08 <xTaskCheckForTimeOut+0xc4>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d007      	beq.n	800bdca <xTaskCheckForTimeOut+0x86>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	69ba      	ldr	r2, [r7, #24]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d302      	bcc.n	800bdca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bdc4:	2301      	movs	r3, #1
 800bdc6:	61fb      	str	r3, [r7, #28]
 800bdc8:	e015      	b.n	800bdf6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	697a      	ldr	r2, [r7, #20]
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d20b      	bcs.n	800bdec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bdd4:	683b      	ldr	r3, [r7, #0]
 800bdd6:	681a      	ldr	r2, [r3, #0]
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	1ad2      	subs	r2, r2, r3
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bde0:	6878      	ldr	r0, [r7, #4]
 800bde2:	f7ff ff99 	bl	800bd18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bde6:	2300      	movs	r3, #0
 800bde8:	61fb      	str	r3, [r7, #28]
 800bdea:	e004      	b.n	800bdf6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800bdf6:	f000 fb59 	bl	800c4ac <vPortExitCritical>

	return xReturn;
 800bdfa:	69fb      	ldr	r3, [r7, #28]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3720      	adds	r7, #32
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	200006b0 	.word	0x200006b0
 800be08:	200006c4 	.word	0x200006c4

0800be0c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be0c:	b480      	push	{r7}
 800be0e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be10:	4b03      	ldr	r3, [pc, #12]	@ (800be20 <vTaskMissedYield+0x14>)
 800be12:	2201      	movs	r2, #1
 800be14:	601a      	str	r2, [r3, #0]
}
 800be16:	bf00      	nop
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr
 800be20:	200006c0 	.word	0x200006c0

0800be24 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be2c:	f000 f854 	bl	800bed8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be30:	4b07      	ldr	r3, [pc, #28]	@ (800be50 <prvIdleTask+0x2c>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	2b01      	cmp	r3, #1
 800be36:	d907      	bls.n	800be48 <prvIdleTask+0x24>
			{
				taskYIELD();
 800be38:	4b06      	ldr	r3, [pc, #24]	@ (800be54 <prvIdleTask+0x30>)
 800be3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be3e:	601a      	str	r2, [r3, #0]
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800be48:	f7f4 fce4 	bl	8000814 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800be4c:	e7ee      	b.n	800be2c <prvIdleTask+0x8>
 800be4e:	bf00      	nop
 800be50:	200005b0 	.word	0x200005b0
 800be54:	e000ed04 	.word	0xe000ed04

0800be58 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b082      	sub	sp, #8
 800be5c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be5e:	2300      	movs	r3, #0
 800be60:	607b      	str	r3, [r7, #4]
 800be62:	e00c      	b.n	800be7e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	4613      	mov	r3, r2
 800be68:	009b      	lsls	r3, r3, #2
 800be6a:	4413      	add	r3, r2
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4a12      	ldr	r2, [pc, #72]	@ (800beb8 <prvInitialiseTaskLists+0x60>)
 800be70:	4413      	add	r3, r2
 800be72:	4618      	mov	r0, r3
 800be74:	f7fe fc9a 	bl	800a7ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	3301      	adds	r3, #1
 800be7c:	607b      	str	r3, [r7, #4]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b06      	cmp	r3, #6
 800be82:	d9ef      	bls.n	800be64 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be84:	480d      	ldr	r0, [pc, #52]	@ (800bebc <prvInitialiseTaskLists+0x64>)
 800be86:	f7fe fc91 	bl	800a7ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be8a:	480d      	ldr	r0, [pc, #52]	@ (800bec0 <prvInitialiseTaskLists+0x68>)
 800be8c:	f7fe fc8e 	bl	800a7ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800be90:	480c      	ldr	r0, [pc, #48]	@ (800bec4 <prvInitialiseTaskLists+0x6c>)
 800be92:	f7fe fc8b 	bl	800a7ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800be96:	480c      	ldr	r0, [pc, #48]	@ (800bec8 <prvInitialiseTaskLists+0x70>)
 800be98:	f7fe fc88 	bl	800a7ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800be9c:	480b      	ldr	r0, [pc, #44]	@ (800becc <prvInitialiseTaskLists+0x74>)
 800be9e:	f7fe fc85 	bl	800a7ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bea2:	4b0b      	ldr	r3, [pc, #44]	@ (800bed0 <prvInitialiseTaskLists+0x78>)
 800bea4:	4a05      	ldr	r2, [pc, #20]	@ (800bebc <prvInitialiseTaskLists+0x64>)
 800bea6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bea8:	4b0a      	ldr	r3, [pc, #40]	@ (800bed4 <prvInitialiseTaskLists+0x7c>)
 800beaa:	4a05      	ldr	r2, [pc, #20]	@ (800bec0 <prvInitialiseTaskLists+0x68>)
 800beac:	601a      	str	r2, [r3, #0]
}
 800beae:	bf00      	nop
 800beb0:	3708      	adds	r7, #8
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	200005b0 	.word	0x200005b0
 800bebc:	2000063c 	.word	0x2000063c
 800bec0:	20000650 	.word	0x20000650
 800bec4:	2000066c 	.word	0x2000066c
 800bec8:	20000680 	.word	0x20000680
 800becc:	20000698 	.word	0x20000698
 800bed0:	20000664 	.word	0x20000664
 800bed4:	20000668 	.word	0x20000668

0800bed8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bede:	e019      	b.n	800bf14 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bee0:	f000 fab2 	bl	800c448 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bee4:	4b10      	ldr	r3, [pc, #64]	@ (800bf28 <prvCheckTasksWaitingTermination+0x50>)
 800bee6:	68db      	ldr	r3, [r3, #12]
 800bee8:	68db      	ldr	r3, [r3, #12]
 800beea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3304      	adds	r3, #4
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fe fce5 	bl	800a8c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bef6:	4b0d      	ldr	r3, [pc, #52]	@ (800bf2c <prvCheckTasksWaitingTermination+0x54>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	3b01      	subs	r3, #1
 800befc:	4a0b      	ldr	r2, [pc, #44]	@ (800bf2c <prvCheckTasksWaitingTermination+0x54>)
 800befe:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf00:	4b0b      	ldr	r3, [pc, #44]	@ (800bf30 <prvCheckTasksWaitingTermination+0x58>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	3b01      	subs	r3, #1
 800bf06:	4a0a      	ldr	r2, [pc, #40]	@ (800bf30 <prvCheckTasksWaitingTermination+0x58>)
 800bf08:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf0a:	f000 facf 	bl	800c4ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 f810 	bl	800bf34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf14:	4b06      	ldr	r3, [pc, #24]	@ (800bf30 <prvCheckTasksWaitingTermination+0x58>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d1e1      	bne.n	800bee0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf1c:	bf00      	nop
 800bf1e:	bf00      	nop
 800bf20:	3708      	adds	r7, #8
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	20000680 	.word	0x20000680
 800bf2c:	200006ac 	.word	0x200006ac
 800bf30:	20000694 	.word	0x20000694

0800bf34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d108      	bne.n	800bf58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf4a:	4618      	mov	r0, r3
 800bf4c:	f000 fc72 	bl	800c834 <vPortFree>
				vPortFree( pxTCB );
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fc6f 	bl	800c834 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf56:	e019      	b.n	800bf8c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800bf5e:	2b01      	cmp	r3, #1
 800bf60:	d103      	bne.n	800bf6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f000 fc66 	bl	800c834 <vPortFree>
	}
 800bf68:	e010      	b.n	800bf8c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800bf70:	2b02      	cmp	r3, #2
 800bf72:	d00b      	beq.n	800bf8c <prvDeleteTCB+0x58>
	__asm volatile
 800bf74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf78:	f383 8811 	msr	BASEPRI, r3
 800bf7c:	f3bf 8f6f 	isb	sy
 800bf80:	f3bf 8f4f 	dsb	sy
 800bf84:	60fb      	str	r3, [r7, #12]
}
 800bf86:	bf00      	nop
 800bf88:	bf00      	nop
 800bf8a:	e7fd      	b.n	800bf88 <prvDeleteTCB+0x54>
	}
 800bf8c:	bf00      	nop
 800bf8e:	3710      	adds	r7, #16
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd80      	pop	{r7, pc}

0800bf94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bf94:	b480      	push	{r7}
 800bf96:	b083      	sub	sp, #12
 800bf98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bf9a:	4b0c      	ldr	r3, [pc, #48]	@ (800bfcc <prvResetNextTaskUnblockTime+0x38>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d104      	bne.n	800bfae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfa4:	4b0a      	ldr	r3, [pc, #40]	@ (800bfd0 <prvResetNextTaskUnblockTime+0x3c>)
 800bfa6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bfaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bfac:	e008      	b.n	800bfc0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfae:	4b07      	ldr	r3, [pc, #28]	@ (800bfcc <prvResetNextTaskUnblockTime+0x38>)
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	68db      	ldr	r3, [r3, #12]
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	4a04      	ldr	r2, [pc, #16]	@ (800bfd0 <prvResetNextTaskUnblockTime+0x3c>)
 800bfbe:	6013      	str	r3, [r2, #0]
}
 800bfc0:	bf00      	nop
 800bfc2:	370c      	adds	r7, #12
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfca:	4770      	bx	lr
 800bfcc:	20000664 	.word	0x20000664
 800bfd0:	200006cc 	.word	0x200006cc

0800bfd4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800bfd4:	b480      	push	{r7}
 800bfd6:	b083      	sub	sp, #12
 800bfd8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bfda:	4b0b      	ldr	r3, [pc, #44]	@ (800c008 <xTaskGetSchedulerState+0x34>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d102      	bne.n	800bfe8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	607b      	str	r3, [r7, #4]
 800bfe6:	e008      	b.n	800bffa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bfe8:	4b08      	ldr	r3, [pc, #32]	@ (800c00c <xTaskGetSchedulerState+0x38>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d102      	bne.n	800bff6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800bff0:	2302      	movs	r3, #2
 800bff2:	607b      	str	r3, [r7, #4]
 800bff4:	e001      	b.n	800bffa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bff6:	2300      	movs	r3, #0
 800bff8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bffa:	687b      	ldr	r3, [r7, #4]
	}
 800bffc:	4618      	mov	r0, r3
 800bffe:	370c      	adds	r7, #12
 800c000:	46bd      	mov	sp, r7
 800c002:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c006:	4770      	bx	lr
 800c008:	200006b8 	.word	0x200006b8
 800c00c:	200006d4 	.word	0x200006d4

0800c010 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c01c:	2300      	movs	r3, #0
 800c01e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d070      	beq.n	800c108 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c026:	4b3b      	ldr	r3, [pc, #236]	@ (800c114 <xTaskPriorityDisinherit+0x104>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	693a      	ldr	r2, [r7, #16]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d00b      	beq.n	800c048 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	60fb      	str	r3, [r7, #12]
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	e7fd      	b.n	800c044 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10b      	bne.n	800c068 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c054:	f383 8811 	msr	BASEPRI, r3
 800c058:	f3bf 8f6f 	isb	sy
 800c05c:	f3bf 8f4f 	dsb	sy
 800c060:	60bb      	str	r3, [r7, #8]
}
 800c062:	bf00      	nop
 800c064:	bf00      	nop
 800c066:	e7fd      	b.n	800c064 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c068:	693b      	ldr	r3, [r7, #16]
 800c06a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c06c:	1e5a      	subs	r2, r3, #1
 800c06e:	693b      	ldr	r3, [r7, #16]
 800c070:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c072:	693b      	ldr	r3, [r7, #16]
 800c074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d044      	beq.n	800c108 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c082:	2b00      	cmp	r3, #0
 800c084:	d140      	bne.n	800c108 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c086:	693b      	ldr	r3, [r7, #16]
 800c088:	3304      	adds	r3, #4
 800c08a:	4618      	mov	r0, r3
 800c08c:	f7fe fc18 	bl	800a8c0 <uxListRemove>
 800c090:	4603      	mov	r3, r0
 800c092:	2b00      	cmp	r3, #0
 800c094:	d115      	bne.n	800c0c2 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c09a:	491f      	ldr	r1, [pc, #124]	@ (800c118 <xTaskPriorityDisinherit+0x108>)
 800c09c:	4613      	mov	r3, r2
 800c09e:	009b      	lsls	r3, r3, #2
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	440b      	add	r3, r1
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d10a      	bne.n	800c0c2 <xTaskPriorityDisinherit+0xb2>
 800c0ac:	693b      	ldr	r3, [r7, #16]
 800c0ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c0b6:	43da      	mvns	r2, r3
 800c0b8:	4b18      	ldr	r3, [pc, #96]	@ (800c11c <xTaskPriorityDisinherit+0x10c>)
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4013      	ands	r3, r2
 800c0be:	4a17      	ldr	r2, [pc, #92]	@ (800c11c <xTaskPriorityDisinherit+0x10c>)
 800c0c0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c0c6:	693b      	ldr	r3, [r7, #16]
 800c0c8:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c0ca:	693b      	ldr	r3, [r7, #16]
 800c0cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0ce:	f1c3 0207 	rsb	r2, r3, #7
 800c0d2:	693b      	ldr	r3, [r7, #16]
 800c0d4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c0d6:	693b      	ldr	r3, [r7, #16]
 800c0d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c0da:	2201      	movs	r2, #1
 800c0dc:	409a      	lsls	r2, r3
 800c0de:	4b0f      	ldr	r3, [pc, #60]	@ (800c11c <xTaskPriorityDisinherit+0x10c>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	4313      	orrs	r3, r2
 800c0e4:	4a0d      	ldr	r2, [pc, #52]	@ (800c11c <xTaskPriorityDisinherit+0x10c>)
 800c0e6:	6013      	str	r3, [r2, #0]
 800c0e8:	693b      	ldr	r3, [r7, #16]
 800c0ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c0ec:	4613      	mov	r3, r2
 800c0ee:	009b      	lsls	r3, r3, #2
 800c0f0:	4413      	add	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4a08      	ldr	r2, [pc, #32]	@ (800c118 <xTaskPriorityDisinherit+0x108>)
 800c0f6:	441a      	add	r2, r3
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	3304      	adds	r3, #4
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	4610      	mov	r0, r2
 800c100:	f7fe fb81 	bl	800a806 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c104:	2301      	movs	r3, #1
 800c106:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c108:	697b      	ldr	r3, [r7, #20]
	}
 800c10a:	4618      	mov	r0, r3
 800c10c:	3718      	adds	r7, #24
 800c10e:	46bd      	mov	sp, r7
 800c110:	bd80      	pop	{r7, pc}
 800c112:	bf00      	nop
 800c114:	200005ac 	.word	0x200005ac
 800c118:	200005b0 	.word	0x200005b0
 800c11c:	200006b4 	.word	0x200006b4

0800c120 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b084      	sub	sp, #16
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c12a:	4b29      	ldr	r3, [pc, #164]	@ (800c1d0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c130:	4b28      	ldr	r3, [pc, #160]	@ (800c1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	3304      	adds	r3, #4
 800c136:	4618      	mov	r0, r3
 800c138:	f7fe fbc2 	bl	800a8c0 <uxListRemove>
 800c13c:	4603      	mov	r3, r0
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d10b      	bne.n	800c15a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c142:	4b24      	ldr	r3, [pc, #144]	@ (800c1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c148:	2201      	movs	r2, #1
 800c14a:	fa02 f303 	lsl.w	r3, r2, r3
 800c14e:	43da      	mvns	r2, r3
 800c150:	4b21      	ldr	r3, [pc, #132]	@ (800c1d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4013      	ands	r3, r2
 800c156:	4a20      	ldr	r2, [pc, #128]	@ (800c1d8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c158:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c160:	d10a      	bne.n	800c178 <prvAddCurrentTaskToDelayedList+0x58>
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d007      	beq.n	800c178 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c168:	4b1a      	ldr	r3, [pc, #104]	@ (800c1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	3304      	adds	r3, #4
 800c16e:	4619      	mov	r1, r3
 800c170:	481a      	ldr	r0, [pc, #104]	@ (800c1dc <prvAddCurrentTaskToDelayedList+0xbc>)
 800c172:	f7fe fb48 	bl	800a806 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c176:	e026      	b.n	800c1c6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	4413      	add	r3, r2
 800c17e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c180:	4b14      	ldr	r3, [pc, #80]	@ (800c1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c188:	68ba      	ldr	r2, [r7, #8]
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d209      	bcs.n	800c1a4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c190:	4b13      	ldr	r3, [pc, #76]	@ (800c1e0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	4b0f      	ldr	r3, [pc, #60]	@ (800c1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	3304      	adds	r3, #4
 800c19a:	4619      	mov	r1, r3
 800c19c:	4610      	mov	r0, r2
 800c19e:	f7fe fb56 	bl	800a84e <vListInsert>
}
 800c1a2:	e010      	b.n	800c1c6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800c1e4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c1a6:	681a      	ldr	r2, [r3, #0]
 800c1a8:	4b0a      	ldr	r3, [pc, #40]	@ (800c1d4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	3304      	adds	r3, #4
 800c1ae:	4619      	mov	r1, r3
 800c1b0:	4610      	mov	r0, r2
 800c1b2:	f7fe fb4c 	bl	800a84e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c1b6:	4b0c      	ldr	r3, [pc, #48]	@ (800c1e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d202      	bcs.n	800c1c6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c1c0:	4a09      	ldr	r2, [pc, #36]	@ (800c1e8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	6013      	str	r3, [r2, #0]
}
 800c1c6:	bf00      	nop
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
 800c1ce:	bf00      	nop
 800c1d0:	200006b0 	.word	0x200006b0
 800c1d4:	200005ac 	.word	0x200005ac
 800c1d8:	200006b4 	.word	0x200006b4
 800c1dc:	20000698 	.word	0x20000698
 800c1e0:	20000668 	.word	0x20000668
 800c1e4:	20000664 	.word	0x20000664
 800c1e8:	200006cc 	.word	0x200006cc

0800c1ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c1ec:	b480      	push	{r7}
 800c1ee:	b085      	sub	sp, #20
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	60f8      	str	r0, [r7, #12]
 800c1f4:	60b9      	str	r1, [r7, #8]
 800c1f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	3b04      	subs	r3, #4
 800c1fc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	3b04      	subs	r3, #4
 800c20a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	f023 0201 	bic.w	r2, r3, #1
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	3b04      	subs	r3, #4
 800c21a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c21c:	4a0c      	ldr	r2, [pc, #48]	@ (800c250 <pxPortInitialiseStack+0x64>)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3b14      	subs	r3, #20
 800c226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c228:	687a      	ldr	r2, [r7, #4]
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3b04      	subs	r3, #4
 800c232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f06f 0202 	mvn.w	r2, #2
 800c23a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	3b20      	subs	r3, #32
 800c240:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c242:	68fb      	ldr	r3, [r7, #12]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3714      	adds	r7, #20
 800c248:	46bd      	mov	sp, r7
 800c24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24e:	4770      	bx	lr
 800c250:	0800c255 	.word	0x0800c255

0800c254 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c254:	b480      	push	{r7}
 800c256:	b085      	sub	sp, #20
 800c258:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c25a:	2300      	movs	r3, #0
 800c25c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c25e:	4b13      	ldr	r3, [pc, #76]	@ (800c2ac <prvTaskExitError+0x58>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c266:	d00b      	beq.n	800c280 <prvTaskExitError+0x2c>
	__asm volatile
 800c268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26c:	f383 8811 	msr	BASEPRI, r3
 800c270:	f3bf 8f6f 	isb	sy
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	60fb      	str	r3, [r7, #12]
}
 800c27a:	bf00      	nop
 800c27c:	bf00      	nop
 800c27e:	e7fd      	b.n	800c27c <prvTaskExitError+0x28>
	__asm volatile
 800c280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c284:	f383 8811 	msr	BASEPRI, r3
 800c288:	f3bf 8f6f 	isb	sy
 800c28c:	f3bf 8f4f 	dsb	sy
 800c290:	60bb      	str	r3, [r7, #8]
}
 800c292:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c294:	bf00      	nop
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d0fc      	beq.n	800c296 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c29c:	bf00      	nop
 800c29e:	bf00      	nop
 800c2a0:	3714      	adds	r7, #20
 800c2a2:	46bd      	mov	sp, r7
 800c2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a8:	4770      	bx	lr
 800c2aa:	bf00      	nop
 800c2ac:	2000002c 	.word	0x2000002c

0800c2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c2b0:	4b07      	ldr	r3, [pc, #28]	@ (800c2d0 <pxCurrentTCBConst2>)
 800c2b2:	6819      	ldr	r1, [r3, #0]
 800c2b4:	6808      	ldr	r0, [r1, #0]
 800c2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c2ba:	f380 8809 	msr	PSP, r0
 800c2be:	f3bf 8f6f 	isb	sy
 800c2c2:	f04f 0000 	mov.w	r0, #0
 800c2c6:	f380 8811 	msr	BASEPRI, r0
 800c2ca:	4770      	bx	lr
 800c2cc:	f3af 8000 	nop.w

0800c2d0 <pxCurrentTCBConst2>:
 800c2d0:	200005ac 	.word	0x200005ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop

0800c2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c2d8:	4808      	ldr	r0, [pc, #32]	@ (800c2fc <prvPortStartFirstTask+0x24>)
 800c2da:	6800      	ldr	r0, [r0, #0]
 800c2dc:	6800      	ldr	r0, [r0, #0]
 800c2de:	f380 8808 	msr	MSP, r0
 800c2e2:	f04f 0000 	mov.w	r0, #0
 800c2e6:	f380 8814 	msr	CONTROL, r0
 800c2ea:	b662      	cpsie	i
 800c2ec:	b661      	cpsie	f
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	df00      	svc	0
 800c2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c2fa:	bf00      	nop
 800c2fc:	e000ed08 	.word	0xe000ed08

0800c300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b086      	sub	sp, #24
 800c304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c306:	4b47      	ldr	r3, [pc, #284]	@ (800c424 <xPortStartScheduler+0x124>)
 800c308:	681b      	ldr	r3, [r3, #0]
 800c30a:	4a47      	ldr	r2, [pc, #284]	@ (800c428 <xPortStartScheduler+0x128>)
 800c30c:	4293      	cmp	r3, r2
 800c30e:	d10b      	bne.n	800c328 <xPortStartScheduler+0x28>
	__asm volatile
 800c310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c314:	f383 8811 	msr	BASEPRI, r3
 800c318:	f3bf 8f6f 	isb	sy
 800c31c:	f3bf 8f4f 	dsb	sy
 800c320:	60fb      	str	r3, [r7, #12]
}
 800c322:	bf00      	nop
 800c324:	bf00      	nop
 800c326:	e7fd      	b.n	800c324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c328:	4b3e      	ldr	r3, [pc, #248]	@ (800c424 <xPortStartScheduler+0x124>)
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a3f      	ldr	r2, [pc, #252]	@ (800c42c <xPortStartScheduler+0x12c>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d10b      	bne.n	800c34a <xPortStartScheduler+0x4a>
	__asm volatile
 800c332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c336:	f383 8811 	msr	BASEPRI, r3
 800c33a:	f3bf 8f6f 	isb	sy
 800c33e:	f3bf 8f4f 	dsb	sy
 800c342:	613b      	str	r3, [r7, #16]
}
 800c344:	bf00      	nop
 800c346:	bf00      	nop
 800c348:	e7fd      	b.n	800c346 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c34a:	4b39      	ldr	r3, [pc, #228]	@ (800c430 <xPortStartScheduler+0x130>)
 800c34c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	781b      	ldrb	r3, [r3, #0]
 800c352:	b2db      	uxtb	r3, r3
 800c354:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	22ff      	movs	r2, #255	@ 0xff
 800c35a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	781b      	ldrb	r3, [r3, #0]
 800c360:	b2db      	uxtb	r3, r3
 800c362:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c364:	78fb      	ldrb	r3, [r7, #3]
 800c366:	b2db      	uxtb	r3, r3
 800c368:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c36c:	b2da      	uxtb	r2, r3
 800c36e:	4b31      	ldr	r3, [pc, #196]	@ (800c434 <xPortStartScheduler+0x134>)
 800c370:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c372:	4b31      	ldr	r3, [pc, #196]	@ (800c438 <xPortStartScheduler+0x138>)
 800c374:	2207      	movs	r2, #7
 800c376:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c378:	e009      	b.n	800c38e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c37a:	4b2f      	ldr	r3, [pc, #188]	@ (800c438 <xPortStartScheduler+0x138>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3b01      	subs	r3, #1
 800c380:	4a2d      	ldr	r2, [pc, #180]	@ (800c438 <xPortStartScheduler+0x138>)
 800c382:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c384:	78fb      	ldrb	r3, [r7, #3]
 800c386:	b2db      	uxtb	r3, r3
 800c388:	005b      	lsls	r3, r3, #1
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	b2db      	uxtb	r3, r3
 800c392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c396:	2b80      	cmp	r3, #128	@ 0x80
 800c398:	d0ef      	beq.n	800c37a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c39a:	4b27      	ldr	r3, [pc, #156]	@ (800c438 <xPortStartScheduler+0x138>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	f1c3 0307 	rsb	r3, r3, #7
 800c3a2:	2b04      	cmp	r3, #4
 800c3a4:	d00b      	beq.n	800c3be <xPortStartScheduler+0xbe>
	__asm volatile
 800c3a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3aa:	f383 8811 	msr	BASEPRI, r3
 800c3ae:	f3bf 8f6f 	isb	sy
 800c3b2:	f3bf 8f4f 	dsb	sy
 800c3b6:	60bb      	str	r3, [r7, #8]
}
 800c3b8:	bf00      	nop
 800c3ba:	bf00      	nop
 800c3bc:	e7fd      	b.n	800c3ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c3be:	4b1e      	ldr	r3, [pc, #120]	@ (800c438 <xPortStartScheduler+0x138>)
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	021b      	lsls	r3, r3, #8
 800c3c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c438 <xPortStartScheduler+0x138>)
 800c3c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c3c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c438 <xPortStartScheduler+0x138>)
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c3d0:	4a19      	ldr	r2, [pc, #100]	@ (800c438 <xPortStartScheduler+0x138>)
 800c3d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c3dc:	4b17      	ldr	r3, [pc, #92]	@ (800c43c <xPortStartScheduler+0x13c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	4a16      	ldr	r2, [pc, #88]	@ (800c43c <xPortStartScheduler+0x13c>)
 800c3e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c3e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c3e8:	4b14      	ldr	r3, [pc, #80]	@ (800c43c <xPortStartScheduler+0x13c>)
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	4a13      	ldr	r2, [pc, #76]	@ (800c43c <xPortStartScheduler+0x13c>)
 800c3ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c3f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c3f4:	f000 f8da 	bl	800c5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c3f8:	4b11      	ldr	r3, [pc, #68]	@ (800c440 <xPortStartScheduler+0x140>)
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c3fe:	f000 f8f9 	bl	800c5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c402:	4b10      	ldr	r3, [pc, #64]	@ (800c444 <xPortStartScheduler+0x144>)
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4a0f      	ldr	r2, [pc, #60]	@ (800c444 <xPortStartScheduler+0x144>)
 800c408:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c40c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c40e:	f7ff ff63 	bl	800c2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c412:	f7ff fb75 	bl	800bb00 <vTaskSwitchContext>
	prvTaskExitError();
 800c416:	f7ff ff1d 	bl	800c254 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3718      	adds	r7, #24
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}
 800c424:	e000ed00 	.word	0xe000ed00
 800c428:	410fc271 	.word	0x410fc271
 800c42c:	410fc270 	.word	0x410fc270
 800c430:	e000e400 	.word	0xe000e400
 800c434:	200006d8 	.word	0x200006d8
 800c438:	200006dc 	.word	0x200006dc
 800c43c:	e000ed20 	.word	0xe000ed20
 800c440:	2000002c 	.word	0x2000002c
 800c444:	e000ef34 	.word	0xe000ef34

0800c448 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	607b      	str	r3, [r7, #4]
}
 800c460:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c462:	4b10      	ldr	r3, [pc, #64]	@ (800c4a4 <vPortEnterCritical+0x5c>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	3301      	adds	r3, #1
 800c468:	4a0e      	ldr	r2, [pc, #56]	@ (800c4a4 <vPortEnterCritical+0x5c>)
 800c46a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c46c:	4b0d      	ldr	r3, [pc, #52]	@ (800c4a4 <vPortEnterCritical+0x5c>)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d110      	bne.n	800c496 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c474:	4b0c      	ldr	r3, [pc, #48]	@ (800c4a8 <vPortEnterCritical+0x60>)
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	b2db      	uxtb	r3, r3
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d00b      	beq.n	800c496 <vPortEnterCritical+0x4e>
	__asm volatile
 800c47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c482:	f383 8811 	msr	BASEPRI, r3
 800c486:	f3bf 8f6f 	isb	sy
 800c48a:	f3bf 8f4f 	dsb	sy
 800c48e:	603b      	str	r3, [r7, #0]
}
 800c490:	bf00      	nop
 800c492:	bf00      	nop
 800c494:	e7fd      	b.n	800c492 <vPortEnterCritical+0x4a>
	}
}
 800c496:	bf00      	nop
 800c498:	370c      	adds	r7, #12
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr
 800c4a2:	bf00      	nop
 800c4a4:	2000002c 	.word	0x2000002c
 800c4a8:	e000ed04 	.word	0xe000ed04

0800c4ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b083      	sub	sp, #12
 800c4b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c4b2:	4b12      	ldr	r3, [pc, #72]	@ (800c4fc <vPortExitCritical+0x50>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d10b      	bne.n	800c4d2 <vPortExitCritical+0x26>
	__asm volatile
 800c4ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4be:	f383 8811 	msr	BASEPRI, r3
 800c4c2:	f3bf 8f6f 	isb	sy
 800c4c6:	f3bf 8f4f 	dsb	sy
 800c4ca:	607b      	str	r3, [r7, #4]
}
 800c4cc:	bf00      	nop
 800c4ce:	bf00      	nop
 800c4d0:	e7fd      	b.n	800c4ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c4d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c4fc <vPortExitCritical+0x50>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	4a08      	ldr	r2, [pc, #32]	@ (800c4fc <vPortExitCritical+0x50>)
 800c4da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c4dc:	4b07      	ldr	r3, [pc, #28]	@ (800c4fc <vPortExitCritical+0x50>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d105      	bne.n	800c4f0 <vPortExitCritical+0x44>
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c4e8:	683b      	ldr	r3, [r7, #0]
 800c4ea:	f383 8811 	msr	BASEPRI, r3
}
 800c4ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c4f0:	bf00      	nop
 800c4f2:	370c      	adds	r7, #12
 800c4f4:	46bd      	mov	sp, r7
 800c4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fa:	4770      	bx	lr
 800c4fc:	2000002c 	.word	0x2000002c

0800c500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c500:	f3ef 8009 	mrs	r0, PSP
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	4b15      	ldr	r3, [pc, #84]	@ (800c560 <pxCurrentTCBConst>)
 800c50a:	681a      	ldr	r2, [r3, #0]
 800c50c:	f01e 0f10 	tst.w	lr, #16
 800c510:	bf08      	it	eq
 800c512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c51a:	6010      	str	r0, [r2, #0]
 800c51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c520:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c524:	f380 8811 	msr	BASEPRI, r0
 800c528:	f3bf 8f4f 	dsb	sy
 800c52c:	f3bf 8f6f 	isb	sy
 800c530:	f7ff fae6 	bl	800bb00 <vTaskSwitchContext>
 800c534:	f04f 0000 	mov.w	r0, #0
 800c538:	f380 8811 	msr	BASEPRI, r0
 800c53c:	bc09      	pop	{r0, r3}
 800c53e:	6819      	ldr	r1, [r3, #0]
 800c540:	6808      	ldr	r0, [r1, #0]
 800c542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c546:	f01e 0f10 	tst.w	lr, #16
 800c54a:	bf08      	it	eq
 800c54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c550:	f380 8809 	msr	PSP, r0
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	f3af 8000 	nop.w

0800c560 <pxCurrentTCBConst>:
 800c560:	200005ac 	.word	0x200005ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c564:	bf00      	nop
 800c566:	bf00      	nop

0800c568 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b082      	sub	sp, #8
 800c56c:	af00      	add	r7, sp, #0
	__asm volatile
 800c56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c572:	f383 8811 	msr	BASEPRI, r3
 800c576:	f3bf 8f6f 	isb	sy
 800c57a:	f3bf 8f4f 	dsb	sy
 800c57e:	607b      	str	r3, [r7, #4]
}
 800c580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c582:	f7ff fa03 	bl	800b98c <xTaskIncrementTick>
 800c586:	4603      	mov	r3, r0
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d003      	beq.n	800c594 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c58c:	4b06      	ldr	r3, [pc, #24]	@ (800c5a8 <SysTick_Handler+0x40>)
 800c58e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c592:	601a      	str	r2, [r3, #0]
 800c594:	2300      	movs	r3, #0
 800c596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	f383 8811 	msr	BASEPRI, r3
}
 800c59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c5a0:	bf00      	nop
 800c5a2:	3708      	adds	r7, #8
 800c5a4:	46bd      	mov	sp, r7
 800c5a6:	bd80      	pop	{r7, pc}
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e0 <vPortSetupTimerInterrupt+0x34>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c5b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e4 <vPortSetupTimerInterrupt+0x38>)
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c5bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c5e8 <vPortSetupTimerInterrupt+0x3c>)
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c5ec <vPortSetupTimerInterrupt+0x40>)
 800c5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c5c6:	099b      	lsrs	r3, r3, #6
 800c5c8:	4a09      	ldr	r2, [pc, #36]	@ (800c5f0 <vPortSetupTimerInterrupt+0x44>)
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c5ce:	4b04      	ldr	r3, [pc, #16]	@ (800c5e0 <vPortSetupTimerInterrupt+0x34>)
 800c5d0:	2207      	movs	r2, #7
 800c5d2:	601a      	str	r2, [r3, #0]
}
 800c5d4:	bf00      	nop
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5dc:	4770      	bx	lr
 800c5de:	bf00      	nop
 800c5e0:	e000e010 	.word	0xe000e010
 800c5e4:	e000e018 	.word	0xe000e018
 800c5e8:	20000000 	.word	0x20000000
 800c5ec:	10624dd3 	.word	0x10624dd3
 800c5f0:	e000e014 	.word	0xe000e014

0800c5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c604 <vPortEnableVFP+0x10>
 800c5f8:	6801      	ldr	r1, [r0, #0]
 800c5fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c5fe:	6001      	str	r1, [r0, #0]
 800c600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c602:	bf00      	nop
 800c604:	e000ed88 	.word	0xe000ed88

0800c608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c608:	b480      	push	{r7}
 800c60a:	b085      	sub	sp, #20
 800c60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c60e:	f3ef 8305 	mrs	r3, IPSR
 800c612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2b0f      	cmp	r3, #15
 800c618:	d915      	bls.n	800c646 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c61a:	4a18      	ldr	r2, [pc, #96]	@ (800c67c <vPortValidateInterruptPriority+0x74>)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c624:	4b16      	ldr	r3, [pc, #88]	@ (800c680 <vPortValidateInterruptPriority+0x78>)
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	7afa      	ldrb	r2, [r7, #11]
 800c62a:	429a      	cmp	r2, r3
 800c62c:	d20b      	bcs.n	800c646 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	607b      	str	r3, [r7, #4]
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	e7fd      	b.n	800c642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c646:	4b0f      	ldr	r3, [pc, #60]	@ (800c684 <vPortValidateInterruptPriority+0x7c>)
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c64e:	4b0e      	ldr	r3, [pc, #56]	@ (800c688 <vPortValidateInterruptPriority+0x80>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	429a      	cmp	r2, r3
 800c654:	d90b      	bls.n	800c66e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	603b      	str	r3, [r7, #0]
}
 800c668:	bf00      	nop
 800c66a:	bf00      	nop
 800c66c:	e7fd      	b.n	800c66a <vPortValidateInterruptPriority+0x62>
	}
 800c66e:	bf00      	nop
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	e000e3f0 	.word	0xe000e3f0
 800c680:	200006d8 	.word	0x200006d8
 800c684:	e000ed0c 	.word	0xe000ed0c
 800c688:	200006dc 	.word	0x200006dc

0800c68c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c68c:	b580      	push	{r7, lr}
 800c68e:	b08a      	sub	sp, #40	@ 0x28
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c694:	2300      	movs	r3, #0
 800c696:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c698:	f7ff f8cc 	bl	800b834 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c69c:	4b5f      	ldr	r3, [pc, #380]	@ (800c81c <pvPortMalloc+0x190>)
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c6a4:	f000 f92a 	bl	800c8fc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c6a8:	4b5d      	ldr	r3, [pc, #372]	@ (800c820 <pvPortMalloc+0x194>)
 800c6aa:	681a      	ldr	r2, [r3, #0]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4013      	ands	r3, r2
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	f040 8095 	bne.w	800c7e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d01e      	beq.n	800c6fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c6bc:	2208      	movs	r2, #8
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	f003 0307 	and.w	r3, r3, #7
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d015      	beq.n	800c6fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f023 0307 	bic.w	r3, r3, #7
 800c6d4:	3308      	adds	r3, #8
 800c6d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	f003 0307 	and.w	r3, r3, #7
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00b      	beq.n	800c6fa <pvPortMalloc+0x6e>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	617b      	str	r3, [r7, #20]
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop
 800c6f8:	e7fd      	b.n	800c6f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d06f      	beq.n	800c7e0 <pvPortMalloc+0x154>
 800c700:	4b48      	ldr	r3, [pc, #288]	@ (800c824 <pvPortMalloc+0x198>)
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	429a      	cmp	r2, r3
 800c708:	d86a      	bhi.n	800c7e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c70a:	4b47      	ldr	r3, [pc, #284]	@ (800c828 <pvPortMalloc+0x19c>)
 800c70c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c70e:	4b46      	ldr	r3, [pc, #280]	@ (800c828 <pvPortMalloc+0x19c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c714:	e004      	b.n	800c720 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c718:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c71a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c720:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	429a      	cmp	r2, r3
 800c728:	d903      	bls.n	800c732 <pvPortMalloc+0xa6>
 800c72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d1f1      	bne.n	800c716 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c732:	4b3a      	ldr	r3, [pc, #232]	@ (800c81c <pvPortMalloc+0x190>)
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c738:	429a      	cmp	r2, r3
 800c73a:	d051      	beq.n	800c7e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c73c:	6a3b      	ldr	r3, [r7, #32]
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	2208      	movs	r2, #8
 800c742:	4413      	add	r3, r2
 800c744:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	6a3b      	ldr	r3, [r7, #32]
 800c74c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c74e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c750:	685a      	ldr	r2, [r3, #4]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	1ad2      	subs	r2, r2, r3
 800c756:	2308      	movs	r3, #8
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	429a      	cmp	r2, r3
 800c75c:	d920      	bls.n	800c7a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c75e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	4413      	add	r3, r2
 800c764:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	f003 0307 	and.w	r3, r3, #7
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d00b      	beq.n	800c788 <pvPortMalloc+0xfc>
	__asm volatile
 800c770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c774:	f383 8811 	msr	BASEPRI, r3
 800c778:	f3bf 8f6f 	isb	sy
 800c77c:	f3bf 8f4f 	dsb	sy
 800c780:	613b      	str	r3, [r7, #16]
}
 800c782:	bf00      	nop
 800c784:	bf00      	nop
 800c786:	e7fd      	b.n	800c784 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c78a:	685a      	ldr	r2, [r3, #4]
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	1ad2      	subs	r2, r2, r3
 800c790:	69bb      	ldr	r3, [r7, #24]
 800c792:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c796:	687a      	ldr	r2, [r7, #4]
 800c798:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c79a:	69b8      	ldr	r0, [r7, #24]
 800c79c:	f000 f910 	bl	800c9c0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c7a0:	4b20      	ldr	r3, [pc, #128]	@ (800c824 <pvPortMalloc+0x198>)
 800c7a2:	681a      	ldr	r2, [r3, #0]
 800c7a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a6:	685b      	ldr	r3, [r3, #4]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	4a1e      	ldr	r2, [pc, #120]	@ (800c824 <pvPortMalloc+0x198>)
 800c7ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c7ae:	4b1d      	ldr	r3, [pc, #116]	@ (800c824 <pvPortMalloc+0x198>)
 800c7b0:	681a      	ldr	r2, [r3, #0]
 800c7b2:	4b1e      	ldr	r3, [pc, #120]	@ (800c82c <pvPortMalloc+0x1a0>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d203      	bcs.n	800c7c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c7ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c824 <pvPortMalloc+0x198>)
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a1b      	ldr	r2, [pc, #108]	@ (800c82c <pvPortMalloc+0x1a0>)
 800c7c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c7c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c4:	685a      	ldr	r2, [r3, #4]
 800c7c6:	4b16      	ldr	r3, [pc, #88]	@ (800c820 <pvPortMalloc+0x194>)
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	431a      	orrs	r2, r3
 800c7cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c7d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c7d6:	4b16      	ldr	r3, [pc, #88]	@ (800c830 <pvPortMalloc+0x1a4>)
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	4a14      	ldr	r2, [pc, #80]	@ (800c830 <pvPortMalloc+0x1a4>)
 800c7de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c7e0:	f7ff f836 	bl	800b850 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800c7e4:	69fb      	ldr	r3, [r7, #28]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <pvPortMalloc+0x162>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800c7ea:	f7f4 f825 	bl	8000838 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7ee:	69fb      	ldr	r3, [r7, #28]
 800c7f0:	f003 0307 	and.w	r3, r3, #7
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d00b      	beq.n	800c810 <pvPortMalloc+0x184>
	__asm volatile
 800c7f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7fc:	f383 8811 	msr	BASEPRI, r3
 800c800:	f3bf 8f6f 	isb	sy
 800c804:	f3bf 8f4f 	dsb	sy
 800c808:	60fb      	str	r3, [r7, #12]
}
 800c80a:	bf00      	nop
 800c80c:	bf00      	nop
 800c80e:	e7fd      	b.n	800c80c <pvPortMalloc+0x180>
	return pvReturn;
 800c810:	69fb      	ldr	r3, [r7, #28]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3728      	adds	r7, #40	@ 0x28
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}
 800c81a:	bf00      	nop
 800c81c:	200086e8 	.word	0x200086e8
 800c820:	200086fc 	.word	0x200086fc
 800c824:	200086ec 	.word	0x200086ec
 800c828:	200086e0 	.word	0x200086e0
 800c82c:	200086f0 	.word	0x200086f0
 800c830:	200086f4 	.word	0x200086f4

0800c834 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b086      	sub	sp, #24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d04f      	beq.n	800c8e6 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c846:	2308      	movs	r3, #8
 800c848:	425b      	negs	r3, r3
 800c84a:	697a      	ldr	r2, [r7, #20]
 800c84c:	4413      	add	r3, r2
 800c84e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	685a      	ldr	r2, [r3, #4]
 800c858:	4b25      	ldr	r3, [pc, #148]	@ (800c8f0 <vPortFree+0xbc>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	4013      	ands	r3, r2
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d10b      	bne.n	800c87a <vPortFree+0x46>
	__asm volatile
 800c862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c866:	f383 8811 	msr	BASEPRI, r3
 800c86a:	f3bf 8f6f 	isb	sy
 800c86e:	f3bf 8f4f 	dsb	sy
 800c872:	60fb      	str	r3, [r7, #12]
}
 800c874:	bf00      	nop
 800c876:	bf00      	nop
 800c878:	e7fd      	b.n	800c876 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00b      	beq.n	800c89a <vPortFree+0x66>
	__asm volatile
 800c882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c886:	f383 8811 	msr	BASEPRI, r3
 800c88a:	f3bf 8f6f 	isb	sy
 800c88e:	f3bf 8f4f 	dsb	sy
 800c892:	60bb      	str	r3, [r7, #8]
}
 800c894:	bf00      	nop
 800c896:	bf00      	nop
 800c898:	e7fd      	b.n	800c896 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	685a      	ldr	r2, [r3, #4]
 800c89e:	4b14      	ldr	r3, [pc, #80]	@ (800c8f0 <vPortFree+0xbc>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4013      	ands	r3, r2
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d01e      	beq.n	800c8e6 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c8a8:	693b      	ldr	r3, [r7, #16]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d11a      	bne.n	800c8e6 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	685a      	ldr	r2, [r3, #4]
 800c8b4:	4b0e      	ldr	r3, [pc, #56]	@ (800c8f0 <vPortFree+0xbc>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	43db      	mvns	r3, r3
 800c8ba:	401a      	ands	r2, r3
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c8c0:	f7fe ffb8 	bl	800b834 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c8c4:	693b      	ldr	r3, [r7, #16]
 800c8c6:	685a      	ldr	r2, [r3, #4]
 800c8c8:	4b0a      	ldr	r3, [pc, #40]	@ (800c8f4 <vPortFree+0xc0>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4413      	add	r3, r2
 800c8ce:	4a09      	ldr	r2, [pc, #36]	@ (800c8f4 <vPortFree+0xc0>)
 800c8d0:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c8d2:	6938      	ldr	r0, [r7, #16]
 800c8d4:	f000 f874 	bl	800c9c0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c8d8:	4b07      	ldr	r3, [pc, #28]	@ (800c8f8 <vPortFree+0xc4>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	4a06      	ldr	r2, [pc, #24]	@ (800c8f8 <vPortFree+0xc4>)
 800c8e0:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c8e2:	f7fe ffb5 	bl	800b850 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c8e6:	bf00      	nop
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	200086fc 	.word	0x200086fc
 800c8f4:	200086ec 	.word	0x200086ec
 800c8f8:	200086f8 	.word	0x200086f8

0800c8fc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c8fc:	b480      	push	{r7}
 800c8fe:	b085      	sub	sp, #20
 800c900:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c902:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c906:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c908:	4b27      	ldr	r3, [pc, #156]	@ (800c9a8 <prvHeapInit+0xac>)
 800c90a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	f003 0307 	and.w	r3, r3, #7
 800c912:	2b00      	cmp	r3, #0
 800c914:	d00c      	beq.n	800c930 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	3307      	adds	r3, #7
 800c91a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f023 0307 	bic.w	r3, r3, #7
 800c922:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c924:	68ba      	ldr	r2, [r7, #8]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	1ad3      	subs	r3, r2, r3
 800c92a:	4a1f      	ldr	r2, [pc, #124]	@ (800c9a8 <prvHeapInit+0xac>)
 800c92c:	4413      	add	r3, r2
 800c92e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c934:	4a1d      	ldr	r2, [pc, #116]	@ (800c9ac <prvHeapInit+0xb0>)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c93a:	4b1c      	ldr	r3, [pc, #112]	@ (800c9ac <prvHeapInit+0xb0>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	68ba      	ldr	r2, [r7, #8]
 800c944:	4413      	add	r3, r2
 800c946:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c948:	2208      	movs	r2, #8
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	1a9b      	subs	r3, r3, r2
 800c94e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	f023 0307 	bic.w	r3, r3, #7
 800c956:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	4a15      	ldr	r2, [pc, #84]	@ (800c9b0 <prvHeapInit+0xb4>)
 800c95c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c95e:	4b14      	ldr	r3, [pc, #80]	@ (800c9b0 <prvHeapInit+0xb4>)
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	2200      	movs	r2, #0
 800c964:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c966:	4b12      	ldr	r3, [pc, #72]	@ (800c9b0 <prvHeapInit+0xb4>)
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2200      	movs	r2, #0
 800c96c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	68fa      	ldr	r2, [r7, #12]
 800c976:	1ad2      	subs	r2, r2, r3
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c97c:	4b0c      	ldr	r3, [pc, #48]	@ (800c9b0 <prvHeapInit+0xb4>)
 800c97e:	681a      	ldr	r2, [r3, #0]
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c984:	683b      	ldr	r3, [r7, #0]
 800c986:	685b      	ldr	r3, [r3, #4]
 800c988:	4a0a      	ldr	r2, [pc, #40]	@ (800c9b4 <prvHeapInit+0xb8>)
 800c98a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c98c:	683b      	ldr	r3, [r7, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	4a09      	ldr	r2, [pc, #36]	@ (800c9b8 <prvHeapInit+0xbc>)
 800c992:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c994:	4b09      	ldr	r3, [pc, #36]	@ (800c9bc <prvHeapInit+0xc0>)
 800c996:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800c99a:	601a      	str	r2, [r3, #0]
}
 800c99c:	bf00      	nop
 800c99e:	3714      	adds	r7, #20
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a6:	4770      	bx	lr
 800c9a8:	200006e0 	.word	0x200006e0
 800c9ac:	200086e0 	.word	0x200086e0
 800c9b0:	200086e8 	.word	0x200086e8
 800c9b4:	200086f0 	.word	0x200086f0
 800c9b8:	200086ec 	.word	0x200086ec
 800c9bc:	200086fc 	.word	0x200086fc

0800c9c0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b085      	sub	sp, #20
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c9c8:	4b28      	ldr	r3, [pc, #160]	@ (800ca6c <prvInsertBlockIntoFreeList+0xac>)
 800c9ca:	60fb      	str	r3, [r7, #12]
 800c9cc:	e002      	b.n	800c9d4 <prvInsertBlockIntoFreeList+0x14>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	60fb      	str	r3, [r7, #12]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	687a      	ldr	r2, [r7, #4]
 800c9da:	429a      	cmp	r2, r3
 800c9dc:	d8f7      	bhi.n	800c9ce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	685b      	ldr	r3, [r3, #4]
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	4413      	add	r3, r2
 800c9ea:	687a      	ldr	r2, [r7, #4]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	d108      	bne.n	800ca02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	685a      	ldr	r2, [r3, #4]
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	685b      	ldr	r3, [r3, #4]
 800c9f8:	441a      	add	r2, r3
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	685b      	ldr	r3, [r3, #4]
 800ca0a:	68ba      	ldr	r2, [r7, #8]
 800ca0c:	441a      	add	r2, r3
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d118      	bne.n	800ca48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681a      	ldr	r2, [r3, #0]
 800ca1a:	4b15      	ldr	r3, [pc, #84]	@ (800ca70 <prvInsertBlockIntoFreeList+0xb0>)
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d00d      	beq.n	800ca3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	685a      	ldr	r2, [r3, #4]
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	441a      	add	r2, r3
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	681a      	ldr	r2, [r3, #0]
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	601a      	str	r2, [r3, #0]
 800ca3c:	e008      	b.n	800ca50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ca3e:	4b0c      	ldr	r3, [pc, #48]	@ (800ca70 <prvInsertBlockIntoFreeList+0xb0>)
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	e003      	b.n	800ca50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	681a      	ldr	r2, [r3, #0]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ca50:	68fa      	ldr	r2, [r7, #12]
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d002      	beq.n	800ca5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca5e:	bf00      	nop
 800ca60:	3714      	adds	r7, #20
 800ca62:	46bd      	mov	sp, r7
 800ca64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca68:	4770      	bx	lr
 800ca6a:	bf00      	nop
 800ca6c:	200086e0 	.word	0x200086e0
 800ca70:	200086e8 	.word	0x200086e8

0800ca74 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ca78:	2200      	movs	r2, #0
 800ca7a:	490e      	ldr	r1, [pc, #56]	@ (800cab4 <MX_USB_HOST_Init+0x40>)
 800ca7c:	480e      	ldr	r0, [pc, #56]	@ (800cab8 <MX_USB_HOST_Init+0x44>)
 800ca7e:	f7fb fe0f 	bl	80086a0 <USBH_Init>
 800ca82:	4603      	mov	r3, r0
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d001      	beq.n	800ca8c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ca88:	f7f4 fb3e 	bl	8001108 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800ca8c:	490b      	ldr	r1, [pc, #44]	@ (800cabc <MX_USB_HOST_Init+0x48>)
 800ca8e:	480a      	ldr	r0, [pc, #40]	@ (800cab8 <MX_USB_HOST_Init+0x44>)
 800ca90:	f7fb fedb 	bl	800884a <USBH_RegisterClass>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d001      	beq.n	800ca9e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ca9a:	f7f4 fb35 	bl	8001108 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ca9e:	4806      	ldr	r0, [pc, #24]	@ (800cab8 <MX_USB_HOST_Init+0x44>)
 800caa0:	f7fb ff5f 	bl	8008962 <USBH_Start>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d001      	beq.n	800caae <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800caaa:	f7f4 fb2d 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800caae:	bf00      	nop
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	0800cac1 	.word	0x0800cac1
 800cab8:	20008700 	.word	0x20008700
 800cabc:	2000000c 	.word	0x2000000c

0800cac0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
 800cac8:	460b      	mov	r3, r1
 800caca:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800cacc:	78fb      	ldrb	r3, [r7, #3]
 800cace:	3b01      	subs	r3, #1
 800cad0:	2b04      	cmp	r3, #4
 800cad2:	d819      	bhi.n	800cb08 <USBH_UserProcess+0x48>
 800cad4:	a201      	add	r2, pc, #4	@ (adr r2, 800cadc <USBH_UserProcess+0x1c>)
 800cad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cada:	bf00      	nop
 800cadc:	0800cb09 	.word	0x0800cb09
 800cae0:	0800caf9 	.word	0x0800caf9
 800cae4:	0800cb09 	.word	0x0800cb09
 800cae8:	0800cb01 	.word	0x0800cb01
 800caec:	0800caf1 	.word	0x0800caf1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800caf0:	4b09      	ldr	r3, [pc, #36]	@ (800cb18 <USBH_UserProcess+0x58>)
 800caf2:	2203      	movs	r2, #3
 800caf4:	701a      	strb	r2, [r3, #0]
  break;
 800caf6:	e008      	b.n	800cb0a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800caf8:	4b07      	ldr	r3, [pc, #28]	@ (800cb18 <USBH_UserProcess+0x58>)
 800cafa:	2202      	movs	r2, #2
 800cafc:	701a      	strb	r2, [r3, #0]
  break;
 800cafe:	e004      	b.n	800cb0a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800cb00:	4b05      	ldr	r3, [pc, #20]	@ (800cb18 <USBH_UserProcess+0x58>)
 800cb02:	2201      	movs	r2, #1
 800cb04:	701a      	strb	r2, [r3, #0]
  break;
 800cb06:	e000      	b.n	800cb0a <USBH_UserProcess+0x4a>

  default:
  break;
 800cb08:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800cb0a:	bf00      	nop
 800cb0c:	370c      	adds	r7, #12
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	20008ae4 	.word	0x20008ae4

0800cb1c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b08a      	sub	sp, #40	@ 0x28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cb24:	f107 0314 	add.w	r3, r7, #20
 800cb28:	2200      	movs	r2, #0
 800cb2a:	601a      	str	r2, [r3, #0]
 800cb2c:	605a      	str	r2, [r3, #4]
 800cb2e:	609a      	str	r2, [r3, #8]
 800cb30:	60da      	str	r2, [r3, #12]
 800cb32:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a24      	ldr	r2, [pc, #144]	@ (800cbcc <HAL_HCD_MspInit+0xb0>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d141      	bne.n	800cbc2 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800cb3e:	2300      	movs	r3, #0
 800cb40:	613b      	str	r3, [r7, #16]
 800cb42:	4b23      	ldr	r3, [pc, #140]	@ (800cbd0 <HAL_HCD_MspInit+0xb4>)
 800cb44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb46:	4a22      	ldr	r2, [pc, #136]	@ (800cbd0 <HAL_HCD_MspInit+0xb4>)
 800cb48:	f043 0302 	orr.w	r3, r3, #2
 800cb4c:	6313      	str	r3, [r2, #48]	@ 0x30
 800cb4e:	4b20      	ldr	r3, [pc, #128]	@ (800cbd0 <HAL_HCD_MspInit+0xb4>)
 800cb50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb52:	f003 0302 	and.w	r3, r3, #2
 800cb56:	613b      	str	r3, [r7, #16]
 800cb58:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800cb5a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800cb5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cb60:	2302      	movs	r3, #2
 800cb62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb64:	2300      	movs	r3, #0
 800cb66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cb68:	2300      	movs	r3, #0
 800cb6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800cb6c:	230c      	movs	r3, #12
 800cb6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800cb70:	f107 0314 	add.w	r3, r7, #20
 800cb74:	4619      	mov	r1, r3
 800cb76:	4817      	ldr	r0, [pc, #92]	@ (800cbd4 <HAL_HCD_MspInit+0xb8>)
 800cb78:	f7f5 f8dc 	bl	8001d34 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800cb7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800cb80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cb82:	2300      	movs	r3, #0
 800cb84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cb86:	2300      	movs	r3, #0
 800cb88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800cb8a:	f107 0314 	add.w	r3, r7, #20
 800cb8e:	4619      	mov	r1, r3
 800cb90:	4810      	ldr	r0, [pc, #64]	@ (800cbd4 <HAL_HCD_MspInit+0xb8>)
 800cb92:	f7f5 f8cf 	bl	8001d34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800cb96:	2300      	movs	r3, #0
 800cb98:	60fb      	str	r3, [r7, #12]
 800cb9a:	4b0d      	ldr	r3, [pc, #52]	@ (800cbd0 <HAL_HCD_MspInit+0xb4>)
 800cb9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb9e:	4a0c      	ldr	r2, [pc, #48]	@ (800cbd0 <HAL_HCD_MspInit+0xb4>)
 800cba0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800cba4:	6313      	str	r3, [r2, #48]	@ 0x30
 800cba6:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd0 <HAL_HCD_MspInit+0xb4>)
 800cba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cbaa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	2105      	movs	r1, #5
 800cbb6:	204d      	movs	r0, #77	@ 0x4d
 800cbb8:	f7f4 fe8a 	bl	80018d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800cbbc:	204d      	movs	r0, #77	@ 0x4d
 800cbbe:	f7f4 fea3 	bl	8001908 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800cbc2:	bf00      	nop
 800cbc4:	3728      	adds	r7, #40	@ 0x28
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bd80      	pop	{r7, pc}
 800cbca:	bf00      	nop
 800cbcc:	40040000 	.word	0x40040000
 800cbd0:	40023800 	.word	0x40023800
 800cbd4:	40020400 	.word	0x40020400

0800cbd8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b082      	sub	sp, #8
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	f7fc fb6d 	bl	80092c6 <USBH_LL_IncTimer>
}
 800cbec:	bf00      	nop
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b082      	sub	sp, #8
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cc02:	4618      	mov	r0, r3
 800cc04:	f7fc fbb1 	bl	800936a <USBH_LL_Connect>
}
 800cc08:	bf00      	nop
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cc1e:	4618      	mov	r0, r3
 800cc20:	f7fc fbc6 	bl	80093b0 <USBH_LL_Disconnect>
}
 800cc24:	bf00      	nop
 800cc26:	3708      	adds	r7, #8
 800cc28:	46bd      	mov	sp, r7
 800cc2a:	bd80      	pop	{r7, pc}

0800cc2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	460b      	mov	r3, r1
 800cc36:	70fb      	strb	r3, [r7, #3]
 800cc38:	4613      	mov	r3, r2
 800cc3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7fc fbfb 	bl	800943e <USBH_LL_NotifyURBChange>
#endif
}
 800cc48:	bf00      	nop
 800cc4a:	3708      	adds	r7, #8
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	bd80      	pop	{r7, pc}

0800cc50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc50:	b580      	push	{r7, lr}
 800cc52:	b082      	sub	sp, #8
 800cc54:	af00      	add	r7, sp, #0
 800cc56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f7fc fb5b 	bl	800931a <USBH_LL_PortEnabled>
}
 800cc64:	bf00      	nop
 800cc66:	3708      	adds	r7, #8
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b082      	sub	sp, #8
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f7fc fb67 	bl	800934e <USBH_LL_PortDisabled>
}
 800cc80:	bf00      	nop
 800cc82:	3708      	adds	r7, #8
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d132      	bne.n	800cd00 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800cc9a:	4a1c      	ldr	r2, [pc, #112]	@ (800cd0c <USBH_LL_Init+0x84>)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	4a19      	ldr	r2, [pc, #100]	@ (800cd0c <USBH_LL_Init+0x84>)
 800cca6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800ccaa:	4b18      	ldr	r3, [pc, #96]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccac:	4a18      	ldr	r2, [pc, #96]	@ (800cd10 <USBH_LL_Init+0x88>)
 800ccae:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800ccb0:	4b16      	ldr	r3, [pc, #88]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccb2:	220c      	movs	r2, #12
 800ccb4:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800ccb6:	4b15      	ldr	r3, [pc, #84]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccb8:	2201      	movs	r2, #1
 800ccba:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800ccbc:	4b13      	ldr	r3, [pc, #76]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccbe:	2200      	movs	r2, #0
 800ccc0:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800ccc2:	4b12      	ldr	r3, [pc, #72]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccc4:	2202      	movs	r2, #2
 800ccc6:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800ccc8:	4b10      	ldr	r3, [pc, #64]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccca:	2200      	movs	r2, #0
 800cccc:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800ccce:	4b0f      	ldr	r3, [pc, #60]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800ccd4:	4b0d      	ldr	r3, [pc, #52]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800ccda:	4b0c      	ldr	r3, [pc, #48]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccdc:	2200      	movs	r2, #0
 800ccde:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800cce0:	480a      	ldr	r0, [pc, #40]	@ (800cd0c <USBH_LL_Init+0x84>)
 800cce2:	f7f5 fa06 	bl	80020f2 <HAL_HCD_Init>
 800cce6:	4603      	mov	r3, r0
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d001      	beq.n	800ccf0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800ccec:	f7f4 fa0c 	bl	8001108 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800ccf0:	4806      	ldr	r0, [pc, #24]	@ (800cd0c <USBH_LL_Init+0x84>)
 800ccf2:	f7f5 fe67 	bl	80029c4 <HAL_HCD_GetCurrentFrame>
 800ccf6:	4603      	mov	r3, r0
 800ccf8:	4619      	mov	r1, r3
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7fc fad4 	bl	80092a8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cd00:	2300      	movs	r3, #0
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	3708      	adds	r7, #8
 800cd06:	46bd      	mov	sp, r7
 800cd08:	bd80      	pop	{r7, pc}
 800cd0a:	bf00      	nop
 800cd0c:	20008ae8 	.word	0x20008ae8
 800cd10:	40040000 	.word	0x40040000

0800cd14 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd1c:	2300      	movs	r3, #0
 800cd1e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	f7f5 fdd2 	bl	80028d4 <HAL_HCD_Start>
 800cd30:	4603      	mov	r3, r0
 800cd32:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd34:	7bfb      	ldrb	r3, [r7, #15]
 800cd36:	4618      	mov	r0, r3
 800cd38:	f000 f95e 	bl	800cff8 <USBH_Get_USB_Status>
 800cd3c:	4603      	mov	r3, r0
 800cd3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd40:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b084      	sub	sp, #16
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd56:	2300      	movs	r3, #0
 800cd58:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd60:	4618      	mov	r0, r3
 800cd62:	f7f5 fdda 	bl	800291a <HAL_HCD_Stop>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	f000 f943 	bl	800cff8 <USBH_Get_USB_Status>
 800cd72:	4603      	mov	r3, r0
 800cd74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd76:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd78:	4618      	mov	r0, r3
 800cd7a:	3710      	adds	r7, #16
 800cd7c:	46bd      	mov	sp, r7
 800cd7e:	bd80      	pop	{r7, pc}

0800cd80 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800cd80:	b580      	push	{r7, lr}
 800cd82:	b084      	sub	sp, #16
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7f5 fe24 	bl	80029e0 <HAL_HCD_GetCurrentSpeed>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	2b02      	cmp	r3, #2
 800cd9c:	d00c      	beq.n	800cdb8 <USBH_LL_GetSpeed+0x38>
 800cd9e:	2b02      	cmp	r3, #2
 800cda0:	d80d      	bhi.n	800cdbe <USBH_LL_GetSpeed+0x3e>
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d002      	beq.n	800cdac <USBH_LL_GetSpeed+0x2c>
 800cda6:	2b01      	cmp	r3, #1
 800cda8:	d003      	beq.n	800cdb2 <USBH_LL_GetSpeed+0x32>
 800cdaa:	e008      	b.n	800cdbe <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800cdac:	2300      	movs	r3, #0
 800cdae:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb0:	e008      	b.n	800cdc4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	73fb      	strb	r3, [r7, #15]
    break;
 800cdb6:	e005      	b.n	800cdc4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800cdb8:	2302      	movs	r3, #2
 800cdba:	73fb      	strb	r3, [r7, #15]
    break;
 800cdbc:	e002      	b.n	800cdc4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	73fb      	strb	r3, [r7, #15]
    break;
 800cdc2:	bf00      	nop
  }
  return  speed;
 800cdc4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	3710      	adds	r7, #16
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd80      	pop	{r7, pc}

0800cdce <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b084      	sub	sp, #16
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cdda:	2300      	movs	r3, #0
 800cddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cde4:	4618      	mov	r0, r3
 800cde6:	f7f5 fdb5 	bl	8002954 <HAL_HCD_ResetPort>
 800cdea:	4603      	mov	r3, r0
 800cdec:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdee:	7bfb      	ldrb	r3, [r7, #15]
 800cdf0:	4618      	mov	r0, r3
 800cdf2:	f000 f901 	bl	800cff8 <USBH_Get_USB_Status>
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdfa:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3710      	adds	r7, #16
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd80      	pop	{r7, pc}

0800ce04 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b082      	sub	sp, #8
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
 800ce0c:	460b      	mov	r3, r1
 800ce0e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ce16:	78fa      	ldrb	r2, [r7, #3]
 800ce18:	4611      	mov	r1, r2
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f7f5 fdbd 	bl	800299a <HAL_HCD_HC_GetXferCount>
 800ce20:	4603      	mov	r3, r0
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3708      	adds	r7, #8
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}

0800ce2a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ce2a:	b590      	push	{r4, r7, lr}
 800ce2c:	b089      	sub	sp, #36	@ 0x24
 800ce2e:	af04      	add	r7, sp, #16
 800ce30:	6078      	str	r0, [r7, #4]
 800ce32:	4608      	mov	r0, r1
 800ce34:	4611      	mov	r1, r2
 800ce36:	461a      	mov	r2, r3
 800ce38:	4603      	mov	r3, r0
 800ce3a:	70fb      	strb	r3, [r7, #3]
 800ce3c:	460b      	mov	r3, r1
 800ce3e:	70bb      	strb	r3, [r7, #2]
 800ce40:	4613      	mov	r3, r2
 800ce42:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce44:	2300      	movs	r3, #0
 800ce46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce48:	2300      	movs	r3, #0
 800ce4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ce52:	787c      	ldrb	r4, [r7, #1]
 800ce54:	78ba      	ldrb	r2, [r7, #2]
 800ce56:	78f9      	ldrb	r1, [r7, #3]
 800ce58:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce5a:	9302      	str	r3, [sp, #8]
 800ce5c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce66:	9300      	str	r3, [sp, #0]
 800ce68:	4623      	mov	r3, r4
 800ce6a:	f7f5 f9a9 	bl	80021c0 <HAL_HCD_HC_Init>
 800ce6e:	4603      	mov	r3, r0
 800ce70:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ce72:	7bfb      	ldrb	r3, [r7, #15]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f000 f8bf 	bl	800cff8 <USBH_Get_USB_Status>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	bd90      	pop	{r4, r7, pc}

0800ce88 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b084      	sub	sp, #16
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
 800ce90:	460b      	mov	r3, r1
 800ce92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce94:	2300      	movs	r3, #0
 800ce96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce98:	2300      	movs	r3, #0
 800ce9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cea2:	78fa      	ldrb	r2, [r7, #3]
 800cea4:	4611      	mov	r1, r2
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7f5 fa42 	bl	8002330 <HAL_HCD_HC_Halt>
 800ceac:	4603      	mov	r3, r0
 800ceae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ceb0:	7bfb      	ldrb	r3, [r7, #15]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 f8a0 	bl	800cff8 <USBH_Get_USB_Status>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cebc:	7bbb      	ldrb	r3, [r7, #14]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3710      	adds	r7, #16
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}

0800cec6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800cec6:	b590      	push	{r4, r7, lr}
 800cec8:	b089      	sub	sp, #36	@ 0x24
 800ceca:	af04      	add	r7, sp, #16
 800cecc:	6078      	str	r0, [r7, #4]
 800cece:	4608      	mov	r0, r1
 800ced0:	4611      	mov	r1, r2
 800ced2:	461a      	mov	r2, r3
 800ced4:	4603      	mov	r3, r0
 800ced6:	70fb      	strb	r3, [r7, #3]
 800ced8:	460b      	mov	r3, r1
 800ceda:	70bb      	strb	r3, [r7, #2]
 800cedc:	4613      	mov	r3, r2
 800cede:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cee4:	2300      	movs	r3, #0
 800cee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ceee:	787c      	ldrb	r4, [r7, #1]
 800cef0:	78ba      	ldrb	r2, [r7, #2]
 800cef2:	78f9      	ldrb	r1, [r7, #3]
 800cef4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800cef8:	9303      	str	r3, [sp, #12]
 800cefa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cefc:	9302      	str	r3, [sp, #8]
 800cefe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cf00:	9301      	str	r3, [sp, #4]
 800cf02:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cf06:	9300      	str	r3, [sp, #0]
 800cf08:	4623      	mov	r3, r4
 800cf0a:	f7f5 fa35 	bl	8002378 <HAL_HCD_HC_SubmitRequest>
 800cf0e:	4603      	mov	r3, r0
 800cf10:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800cf12:	7bfb      	ldrb	r3, [r7, #15]
 800cf14:	4618      	mov	r0, r3
 800cf16:	f000 f86f 	bl	800cff8 <USBH_Get_USB_Status>
 800cf1a:	4603      	mov	r3, r0
 800cf1c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cf1e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cf20:	4618      	mov	r0, r3
 800cf22:	3714      	adds	r7, #20
 800cf24:	46bd      	mov	sp, r7
 800cf26:	bd90      	pop	{r4, r7, pc}

0800cf28 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b082      	sub	sp, #8
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
 800cf30:	460b      	mov	r3, r1
 800cf32:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cf3a:	78fa      	ldrb	r2, [r7, #3]
 800cf3c:	4611      	mov	r1, r2
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7f5 fd16 	bl	8002970 <HAL_HCD_HC_GetURBState>
 800cf44:	4603      	mov	r3, r0
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3708      	adds	r7, #8
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}

0800cf4e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800cf4e:	b580      	push	{r7, lr}
 800cf50:	b082      	sub	sp, #8
 800cf52:	af00      	add	r7, sp, #0
 800cf54:	6078      	str	r0, [r7, #4]
 800cf56:	460b      	mov	r3, r1
 800cf58:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d103      	bne.n	800cf6c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800cf64:	78fb      	ldrb	r3, [r7, #3]
 800cf66:	4618      	mov	r0, r3
 800cf68:	f000 f872 	bl	800d050 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800cf6c:	20c8      	movs	r0, #200	@ 0xc8
 800cf6e:	f7f4 fbd3 	bl	8001718 <HAL_Delay>
  return USBH_OK;
 800cf72:	2300      	movs	r3, #0
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3708      	adds	r7, #8
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bd80      	pop	{r7, pc}

0800cf7c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b085      	sub	sp, #20
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
 800cf84:	460b      	mov	r3, r1
 800cf86:	70fb      	strb	r3, [r7, #3]
 800cf88:	4613      	mov	r3, r2
 800cf8a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cf92:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800cf94:	78fa      	ldrb	r2, [r7, #3]
 800cf96:	68f9      	ldr	r1, [r7, #12]
 800cf98:	4613      	mov	r3, r2
 800cf9a:	011b      	lsls	r3, r3, #4
 800cf9c:	1a9b      	subs	r3, r3, r2
 800cf9e:	009b      	lsls	r3, r3, #2
 800cfa0:	440b      	add	r3, r1
 800cfa2:	3317      	adds	r3, #23
 800cfa4:	781b      	ldrb	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00a      	beq.n	800cfc0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800cfaa:	78fa      	ldrb	r2, [r7, #3]
 800cfac:	68f9      	ldr	r1, [r7, #12]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	011b      	lsls	r3, r3, #4
 800cfb2:	1a9b      	subs	r3, r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	440b      	add	r3, r1
 800cfb8:	333c      	adds	r3, #60	@ 0x3c
 800cfba:	78ba      	ldrb	r2, [r7, #2]
 800cfbc:	701a      	strb	r2, [r3, #0]
 800cfbe:	e009      	b.n	800cfd4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cfc0:	78fa      	ldrb	r2, [r7, #3]
 800cfc2:	68f9      	ldr	r1, [r7, #12]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	011b      	lsls	r3, r3, #4
 800cfc8:	1a9b      	subs	r3, r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	440b      	add	r3, r1
 800cfce:	333d      	adds	r3, #61	@ 0x3d
 800cfd0:	78ba      	ldrb	r2, [r7, #2]
 800cfd2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cfd4:	2300      	movs	r3, #0
}
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	3714      	adds	r7, #20
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr

0800cfe2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cfe2:	b580      	push	{r7, lr}
 800cfe4:	b082      	sub	sp, #8
 800cfe6:	af00      	add	r7, sp, #0
 800cfe8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cfea:	6878      	ldr	r0, [r7, #4]
 800cfec:	f7f4 fb94 	bl	8001718 <HAL_Delay>
}
 800cff0:	bf00      	nop
 800cff2:	3708      	adds	r7, #8
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bd80      	pop	{r7, pc}

0800cff8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b085      	sub	sp, #20
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	4603      	mov	r3, r0
 800d000:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d002:	2300      	movs	r3, #0
 800d004:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	2b03      	cmp	r3, #3
 800d00a:	d817      	bhi.n	800d03c <USBH_Get_USB_Status+0x44>
 800d00c:	a201      	add	r2, pc, #4	@ (adr r2, 800d014 <USBH_Get_USB_Status+0x1c>)
 800d00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d012:	bf00      	nop
 800d014:	0800d025 	.word	0x0800d025
 800d018:	0800d02b 	.word	0x0800d02b
 800d01c:	0800d031 	.word	0x0800d031
 800d020:	0800d037 	.word	0x0800d037
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d024:	2300      	movs	r3, #0
 800d026:	73fb      	strb	r3, [r7, #15]
    break;
 800d028:	e00b      	b.n	800d042 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d02a:	2302      	movs	r3, #2
 800d02c:	73fb      	strb	r3, [r7, #15]
    break;
 800d02e:	e008      	b.n	800d042 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d030:	2301      	movs	r3, #1
 800d032:	73fb      	strb	r3, [r7, #15]
    break;
 800d034:	e005      	b.n	800d042 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d036:	2302      	movs	r3, #2
 800d038:	73fb      	strb	r3, [r7, #15]
    break;
 800d03a:	e002      	b.n	800d042 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d03c:	2302      	movs	r3, #2
 800d03e:	73fb      	strb	r3, [r7, #15]
    break;
 800d040:	bf00      	nop
  }
  return usb_status;
 800d042:	7bfb      	ldrb	r3, [r7, #15]
}
 800d044:	4618      	mov	r0, r3
 800d046:	3714      	adds	r7, #20
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800d050:	b580      	push	{r7, lr}
 800d052:	b084      	sub	sp, #16
 800d054:	af00      	add	r7, sp, #0
 800d056:	4603      	mov	r3, r0
 800d058:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800d05e:	79fb      	ldrb	r3, [r7, #7]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d102      	bne.n	800d06a <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800d064:	2301      	movs	r3, #1
 800d066:	73fb      	strb	r3, [r7, #15]
 800d068:	e001      	b.n	800d06e <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800d06e:	7bfb      	ldrb	r3, [r7, #15]
 800d070:	461a      	mov	r2, r3
 800d072:	2110      	movs	r1, #16
 800d074:	4803      	ldr	r0, [pc, #12]	@ (800d084 <MX_DriverVbusHS+0x34>)
 800d076:	f7f5 f809 	bl	800208c <HAL_GPIO_WritePin>
}
 800d07a:	bf00      	nop
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	40020800 	.word	0x40020800

0800d088 <malloc>:
 800d088:	4b02      	ldr	r3, [pc, #8]	@ (800d094 <malloc+0xc>)
 800d08a:	4601      	mov	r1, r0
 800d08c:	6818      	ldr	r0, [r3, #0]
 800d08e:	f000 b82d 	b.w	800d0ec <_malloc_r>
 800d092:	bf00      	nop
 800d094:	20000030 	.word	0x20000030

0800d098 <free>:
 800d098:	4b02      	ldr	r3, [pc, #8]	@ (800d0a4 <free+0xc>)
 800d09a:	4601      	mov	r1, r0
 800d09c:	6818      	ldr	r0, [r3, #0]
 800d09e:	f000 b903 	b.w	800d2a8 <_free_r>
 800d0a2:	bf00      	nop
 800d0a4:	20000030 	.word	0x20000030

0800d0a8 <sbrk_aligned>:
 800d0a8:	b570      	push	{r4, r5, r6, lr}
 800d0aa:	4e0f      	ldr	r6, [pc, #60]	@ (800d0e8 <sbrk_aligned+0x40>)
 800d0ac:	460c      	mov	r4, r1
 800d0ae:	6831      	ldr	r1, [r6, #0]
 800d0b0:	4605      	mov	r5, r0
 800d0b2:	b911      	cbnz	r1, 800d0ba <sbrk_aligned+0x12>
 800d0b4:	f000 f8ae 	bl	800d214 <_sbrk_r>
 800d0b8:	6030      	str	r0, [r6, #0]
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	4628      	mov	r0, r5
 800d0be:	f000 f8a9 	bl	800d214 <_sbrk_r>
 800d0c2:	1c43      	adds	r3, r0, #1
 800d0c4:	d103      	bne.n	800d0ce <sbrk_aligned+0x26>
 800d0c6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d0ca:	4620      	mov	r0, r4
 800d0cc:	bd70      	pop	{r4, r5, r6, pc}
 800d0ce:	1cc4      	adds	r4, r0, #3
 800d0d0:	f024 0403 	bic.w	r4, r4, #3
 800d0d4:	42a0      	cmp	r0, r4
 800d0d6:	d0f8      	beq.n	800d0ca <sbrk_aligned+0x22>
 800d0d8:	1a21      	subs	r1, r4, r0
 800d0da:	4628      	mov	r0, r5
 800d0dc:	f000 f89a 	bl	800d214 <_sbrk_r>
 800d0e0:	3001      	adds	r0, #1
 800d0e2:	d1f2      	bne.n	800d0ca <sbrk_aligned+0x22>
 800d0e4:	e7ef      	b.n	800d0c6 <sbrk_aligned+0x1e>
 800d0e6:	bf00      	nop
 800d0e8:	20008ec8 	.word	0x20008ec8

0800d0ec <_malloc_r>:
 800d0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0f0:	1ccd      	adds	r5, r1, #3
 800d0f2:	f025 0503 	bic.w	r5, r5, #3
 800d0f6:	3508      	adds	r5, #8
 800d0f8:	2d0c      	cmp	r5, #12
 800d0fa:	bf38      	it	cc
 800d0fc:	250c      	movcc	r5, #12
 800d0fe:	2d00      	cmp	r5, #0
 800d100:	4606      	mov	r6, r0
 800d102:	db01      	blt.n	800d108 <_malloc_r+0x1c>
 800d104:	42a9      	cmp	r1, r5
 800d106:	d904      	bls.n	800d112 <_malloc_r+0x26>
 800d108:	230c      	movs	r3, #12
 800d10a:	6033      	str	r3, [r6, #0]
 800d10c:	2000      	movs	r0, #0
 800d10e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d112:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d1e8 <_malloc_r+0xfc>
 800d116:	f000 f869 	bl	800d1ec <__malloc_lock>
 800d11a:	f8d8 3000 	ldr.w	r3, [r8]
 800d11e:	461c      	mov	r4, r3
 800d120:	bb44      	cbnz	r4, 800d174 <_malloc_r+0x88>
 800d122:	4629      	mov	r1, r5
 800d124:	4630      	mov	r0, r6
 800d126:	f7ff ffbf 	bl	800d0a8 <sbrk_aligned>
 800d12a:	1c43      	adds	r3, r0, #1
 800d12c:	4604      	mov	r4, r0
 800d12e:	d158      	bne.n	800d1e2 <_malloc_r+0xf6>
 800d130:	f8d8 4000 	ldr.w	r4, [r8]
 800d134:	4627      	mov	r7, r4
 800d136:	2f00      	cmp	r7, #0
 800d138:	d143      	bne.n	800d1c2 <_malloc_r+0xd6>
 800d13a:	2c00      	cmp	r4, #0
 800d13c:	d04b      	beq.n	800d1d6 <_malloc_r+0xea>
 800d13e:	6823      	ldr	r3, [r4, #0]
 800d140:	4639      	mov	r1, r7
 800d142:	4630      	mov	r0, r6
 800d144:	eb04 0903 	add.w	r9, r4, r3
 800d148:	f000 f864 	bl	800d214 <_sbrk_r>
 800d14c:	4581      	cmp	r9, r0
 800d14e:	d142      	bne.n	800d1d6 <_malloc_r+0xea>
 800d150:	6821      	ldr	r1, [r4, #0]
 800d152:	1a6d      	subs	r5, r5, r1
 800d154:	4629      	mov	r1, r5
 800d156:	4630      	mov	r0, r6
 800d158:	f7ff ffa6 	bl	800d0a8 <sbrk_aligned>
 800d15c:	3001      	adds	r0, #1
 800d15e:	d03a      	beq.n	800d1d6 <_malloc_r+0xea>
 800d160:	6823      	ldr	r3, [r4, #0]
 800d162:	442b      	add	r3, r5
 800d164:	6023      	str	r3, [r4, #0]
 800d166:	f8d8 3000 	ldr.w	r3, [r8]
 800d16a:	685a      	ldr	r2, [r3, #4]
 800d16c:	bb62      	cbnz	r2, 800d1c8 <_malloc_r+0xdc>
 800d16e:	f8c8 7000 	str.w	r7, [r8]
 800d172:	e00f      	b.n	800d194 <_malloc_r+0xa8>
 800d174:	6822      	ldr	r2, [r4, #0]
 800d176:	1b52      	subs	r2, r2, r5
 800d178:	d420      	bmi.n	800d1bc <_malloc_r+0xd0>
 800d17a:	2a0b      	cmp	r2, #11
 800d17c:	d917      	bls.n	800d1ae <_malloc_r+0xc2>
 800d17e:	1961      	adds	r1, r4, r5
 800d180:	42a3      	cmp	r3, r4
 800d182:	6025      	str	r5, [r4, #0]
 800d184:	bf18      	it	ne
 800d186:	6059      	strne	r1, [r3, #4]
 800d188:	6863      	ldr	r3, [r4, #4]
 800d18a:	bf08      	it	eq
 800d18c:	f8c8 1000 	streq.w	r1, [r8]
 800d190:	5162      	str	r2, [r4, r5]
 800d192:	604b      	str	r3, [r1, #4]
 800d194:	4630      	mov	r0, r6
 800d196:	f000 f82f 	bl	800d1f8 <__malloc_unlock>
 800d19a:	f104 000b 	add.w	r0, r4, #11
 800d19e:	1d23      	adds	r3, r4, #4
 800d1a0:	f020 0007 	bic.w	r0, r0, #7
 800d1a4:	1ac2      	subs	r2, r0, r3
 800d1a6:	bf1c      	itt	ne
 800d1a8:	1a1b      	subne	r3, r3, r0
 800d1aa:	50a3      	strne	r3, [r4, r2]
 800d1ac:	e7af      	b.n	800d10e <_malloc_r+0x22>
 800d1ae:	6862      	ldr	r2, [r4, #4]
 800d1b0:	42a3      	cmp	r3, r4
 800d1b2:	bf0c      	ite	eq
 800d1b4:	f8c8 2000 	streq.w	r2, [r8]
 800d1b8:	605a      	strne	r2, [r3, #4]
 800d1ba:	e7eb      	b.n	800d194 <_malloc_r+0xa8>
 800d1bc:	4623      	mov	r3, r4
 800d1be:	6864      	ldr	r4, [r4, #4]
 800d1c0:	e7ae      	b.n	800d120 <_malloc_r+0x34>
 800d1c2:	463c      	mov	r4, r7
 800d1c4:	687f      	ldr	r7, [r7, #4]
 800d1c6:	e7b6      	b.n	800d136 <_malloc_r+0x4a>
 800d1c8:	461a      	mov	r2, r3
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	42a3      	cmp	r3, r4
 800d1ce:	d1fb      	bne.n	800d1c8 <_malloc_r+0xdc>
 800d1d0:	2300      	movs	r3, #0
 800d1d2:	6053      	str	r3, [r2, #4]
 800d1d4:	e7de      	b.n	800d194 <_malloc_r+0xa8>
 800d1d6:	230c      	movs	r3, #12
 800d1d8:	6033      	str	r3, [r6, #0]
 800d1da:	4630      	mov	r0, r6
 800d1dc:	f000 f80c 	bl	800d1f8 <__malloc_unlock>
 800d1e0:	e794      	b.n	800d10c <_malloc_r+0x20>
 800d1e2:	6005      	str	r5, [r0, #0]
 800d1e4:	e7d6      	b.n	800d194 <_malloc_r+0xa8>
 800d1e6:	bf00      	nop
 800d1e8:	20008ecc 	.word	0x20008ecc

0800d1ec <__malloc_lock>:
 800d1ec:	4801      	ldr	r0, [pc, #4]	@ (800d1f4 <__malloc_lock+0x8>)
 800d1ee:	f000 b84b 	b.w	800d288 <__retarget_lock_acquire_recursive>
 800d1f2:	bf00      	nop
 800d1f4:	2000900c 	.word	0x2000900c

0800d1f8 <__malloc_unlock>:
 800d1f8:	4801      	ldr	r0, [pc, #4]	@ (800d200 <__malloc_unlock+0x8>)
 800d1fa:	f000 b846 	b.w	800d28a <__retarget_lock_release_recursive>
 800d1fe:	bf00      	nop
 800d200:	2000900c 	.word	0x2000900c

0800d204 <memset>:
 800d204:	4402      	add	r2, r0
 800d206:	4603      	mov	r3, r0
 800d208:	4293      	cmp	r3, r2
 800d20a:	d100      	bne.n	800d20e <memset+0xa>
 800d20c:	4770      	bx	lr
 800d20e:	f803 1b01 	strb.w	r1, [r3], #1
 800d212:	e7f9      	b.n	800d208 <memset+0x4>

0800d214 <_sbrk_r>:
 800d214:	b538      	push	{r3, r4, r5, lr}
 800d216:	4d06      	ldr	r5, [pc, #24]	@ (800d230 <_sbrk_r+0x1c>)
 800d218:	2300      	movs	r3, #0
 800d21a:	4604      	mov	r4, r0
 800d21c:	4608      	mov	r0, r1
 800d21e:	602b      	str	r3, [r5, #0]
 800d220:	f7f4 f8e2 	bl	80013e8 <_sbrk>
 800d224:	1c43      	adds	r3, r0, #1
 800d226:	d102      	bne.n	800d22e <_sbrk_r+0x1a>
 800d228:	682b      	ldr	r3, [r5, #0]
 800d22a:	b103      	cbz	r3, 800d22e <_sbrk_r+0x1a>
 800d22c:	6023      	str	r3, [r4, #0]
 800d22e:	bd38      	pop	{r3, r4, r5, pc}
 800d230:	20009008 	.word	0x20009008

0800d234 <__errno>:
 800d234:	4b01      	ldr	r3, [pc, #4]	@ (800d23c <__errno+0x8>)
 800d236:	6818      	ldr	r0, [r3, #0]
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	20000030 	.word	0x20000030

0800d240 <__libc_init_array>:
 800d240:	b570      	push	{r4, r5, r6, lr}
 800d242:	4d0d      	ldr	r5, [pc, #52]	@ (800d278 <__libc_init_array+0x38>)
 800d244:	4c0d      	ldr	r4, [pc, #52]	@ (800d27c <__libc_init_array+0x3c>)
 800d246:	1b64      	subs	r4, r4, r5
 800d248:	10a4      	asrs	r4, r4, #2
 800d24a:	2600      	movs	r6, #0
 800d24c:	42a6      	cmp	r6, r4
 800d24e:	d109      	bne.n	800d264 <__libc_init_array+0x24>
 800d250:	4d0b      	ldr	r5, [pc, #44]	@ (800d280 <__libc_init_array+0x40>)
 800d252:	4c0c      	ldr	r4, [pc, #48]	@ (800d284 <__libc_init_array+0x44>)
 800d254:	f000 f872 	bl	800d33c <_init>
 800d258:	1b64      	subs	r4, r4, r5
 800d25a:	10a4      	asrs	r4, r4, #2
 800d25c:	2600      	movs	r6, #0
 800d25e:	42a6      	cmp	r6, r4
 800d260:	d105      	bne.n	800d26e <__libc_init_array+0x2e>
 800d262:	bd70      	pop	{r4, r5, r6, pc}
 800d264:	f855 3b04 	ldr.w	r3, [r5], #4
 800d268:	4798      	blx	r3
 800d26a:	3601      	adds	r6, #1
 800d26c:	e7ee      	b.n	800d24c <__libc_init_array+0xc>
 800d26e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d272:	4798      	blx	r3
 800d274:	3601      	adds	r6, #1
 800d276:	e7f2      	b.n	800d25e <__libc_init_array+0x1e>
 800d278:	0800d3e0 	.word	0x0800d3e0
 800d27c:	0800d3e0 	.word	0x0800d3e0
 800d280:	0800d3e0 	.word	0x0800d3e0
 800d284:	0800d3e4 	.word	0x0800d3e4

0800d288 <__retarget_lock_acquire_recursive>:
 800d288:	4770      	bx	lr

0800d28a <__retarget_lock_release_recursive>:
 800d28a:	4770      	bx	lr

0800d28c <memcpy>:
 800d28c:	440a      	add	r2, r1
 800d28e:	4291      	cmp	r1, r2
 800d290:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d294:	d100      	bne.n	800d298 <memcpy+0xc>
 800d296:	4770      	bx	lr
 800d298:	b510      	push	{r4, lr}
 800d29a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d29e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d2a2:	4291      	cmp	r1, r2
 800d2a4:	d1f9      	bne.n	800d29a <memcpy+0xe>
 800d2a6:	bd10      	pop	{r4, pc}

0800d2a8 <_free_r>:
 800d2a8:	b538      	push	{r3, r4, r5, lr}
 800d2aa:	4605      	mov	r5, r0
 800d2ac:	2900      	cmp	r1, #0
 800d2ae:	d041      	beq.n	800d334 <_free_r+0x8c>
 800d2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d2b4:	1f0c      	subs	r4, r1, #4
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	bfb8      	it	lt
 800d2ba:	18e4      	addlt	r4, r4, r3
 800d2bc:	f7ff ff96 	bl	800d1ec <__malloc_lock>
 800d2c0:	4a1d      	ldr	r2, [pc, #116]	@ (800d338 <_free_r+0x90>)
 800d2c2:	6813      	ldr	r3, [r2, #0]
 800d2c4:	b933      	cbnz	r3, 800d2d4 <_free_r+0x2c>
 800d2c6:	6063      	str	r3, [r4, #4]
 800d2c8:	6014      	str	r4, [r2, #0]
 800d2ca:	4628      	mov	r0, r5
 800d2cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d2d0:	f7ff bf92 	b.w	800d1f8 <__malloc_unlock>
 800d2d4:	42a3      	cmp	r3, r4
 800d2d6:	d908      	bls.n	800d2ea <_free_r+0x42>
 800d2d8:	6820      	ldr	r0, [r4, #0]
 800d2da:	1821      	adds	r1, r4, r0
 800d2dc:	428b      	cmp	r3, r1
 800d2de:	bf01      	itttt	eq
 800d2e0:	6819      	ldreq	r1, [r3, #0]
 800d2e2:	685b      	ldreq	r3, [r3, #4]
 800d2e4:	1809      	addeq	r1, r1, r0
 800d2e6:	6021      	streq	r1, [r4, #0]
 800d2e8:	e7ed      	b.n	800d2c6 <_free_r+0x1e>
 800d2ea:	461a      	mov	r2, r3
 800d2ec:	685b      	ldr	r3, [r3, #4]
 800d2ee:	b10b      	cbz	r3, 800d2f4 <_free_r+0x4c>
 800d2f0:	42a3      	cmp	r3, r4
 800d2f2:	d9fa      	bls.n	800d2ea <_free_r+0x42>
 800d2f4:	6811      	ldr	r1, [r2, #0]
 800d2f6:	1850      	adds	r0, r2, r1
 800d2f8:	42a0      	cmp	r0, r4
 800d2fa:	d10b      	bne.n	800d314 <_free_r+0x6c>
 800d2fc:	6820      	ldr	r0, [r4, #0]
 800d2fe:	4401      	add	r1, r0
 800d300:	1850      	adds	r0, r2, r1
 800d302:	4283      	cmp	r3, r0
 800d304:	6011      	str	r1, [r2, #0]
 800d306:	d1e0      	bne.n	800d2ca <_free_r+0x22>
 800d308:	6818      	ldr	r0, [r3, #0]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	6053      	str	r3, [r2, #4]
 800d30e:	4408      	add	r0, r1
 800d310:	6010      	str	r0, [r2, #0]
 800d312:	e7da      	b.n	800d2ca <_free_r+0x22>
 800d314:	d902      	bls.n	800d31c <_free_r+0x74>
 800d316:	230c      	movs	r3, #12
 800d318:	602b      	str	r3, [r5, #0]
 800d31a:	e7d6      	b.n	800d2ca <_free_r+0x22>
 800d31c:	6820      	ldr	r0, [r4, #0]
 800d31e:	1821      	adds	r1, r4, r0
 800d320:	428b      	cmp	r3, r1
 800d322:	bf04      	itt	eq
 800d324:	6819      	ldreq	r1, [r3, #0]
 800d326:	685b      	ldreq	r3, [r3, #4]
 800d328:	6063      	str	r3, [r4, #4]
 800d32a:	bf04      	itt	eq
 800d32c:	1809      	addeq	r1, r1, r0
 800d32e:	6021      	streq	r1, [r4, #0]
 800d330:	6054      	str	r4, [r2, #4]
 800d332:	e7ca      	b.n	800d2ca <_free_r+0x22>
 800d334:	bd38      	pop	{r3, r4, r5, pc}
 800d336:	bf00      	nop
 800d338:	20008ecc 	.word	0x20008ecc

0800d33c <_init>:
 800d33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d33e:	bf00      	nop
 800d340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d342:	bc08      	pop	{r3}
 800d344:	469e      	mov	lr, r3
 800d346:	4770      	bx	lr

0800d348 <_fini>:
 800d348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d34a:	bf00      	nop
 800d34c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d34e:	bc08      	pop	{r3}
 800d350:	469e      	mov	lr, r3
 800d352:	4770      	bx	lr
